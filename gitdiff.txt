diff --git a/Analyzer/interface/CommonFunction.h b/Analyzer/interface/CommonFunction.h
index 47a4f51..a2c75b6 100644
--- a/Analyzer/interface/CommonFunction.h
+++ b/Analyzer/interface/CommonFunction.h
@@ -1611,6 +1611,10 @@ reco::DeDxData computedEdx(const float& track_eta,
         if (specInCPE) continue;
         if (probQ>0.8) continue;
 
+        auto clustSizeX = pixelCluster->sizeX();
+        auto clustSizeY = pixelCluster->sizeY();
+        if (clustSizeX==1 && clustSizeY==1) continue;
+
     }
     if (detid.subdetId() >= 3) {  //for strip only
       
diff --git a/Analyzer/interface/Regions.h b/Analyzer/interface/Regions.h
index 57327d7..624d8da 100644
--- a/Analyzer/interface/Regions.h
+++ b/Analyzer/interface/Regions.h
@@ -31,13 +31,13 @@ void scale(TH1F* h){
 class Region{
     public:
         Region();
-        Region(TFileDirectory &dir,std::string suffix,int& etabins,int& ihbins,int& pbins,int& massbins);
+        Region(TFileDirectory &dir,std::string suffix,int& etabins,int& ihbins,int& pbins,int& massbins,bool saveIhP);
         ~Region();
         void setSuffix(std::string suffix);
-        void initHisto(TFileDirectory &dir,int etabins,int ihbins,int pbins,int massbins);
-        void fill(float& eta, float&p, float& pt, float& pterr, float& ih, float& ias, float& m, float& tof, float& w);
+        void initHisto(TFileDirectory &dir,int etabins,int ihbins,int pbins,int massbins, bool saveIhP);
+        void fill(float& eta, float&p, float& pt, float& pterr, float& ih, float& ias, float& probq, float& m, float& tof, float& w, bool saveIhP);
         void fillPredMass(const std::string&, float weight_);
-        void write();
+        void write(bool saveIhP);
 
         int np;
         float plow;
@@ -63,6 +63,7 @@ class Region{
         TH2F* eta_p;
         TH2F* ih_eta;
         TH2F* ih_p;
+        TH2F* ih_pt;
         TH2F* ias_p;
         TH2F* ias_pt;
         //TH2F* ias_ih;
@@ -71,13 +72,22 @@ class Region{
         TH2F* eta_p_rebinned;
         //TH2F* pt_pterroverpt;
         TH1F* hTOF;
+        TH2F* ih_p_m_inf_0;
+        TH2F* ih_p_m_0_100;
+        TH2F* ih_p_m_100_200;
+        TH2F* ih_p_m_200_300;
+        TH2F* ih_p_m_300_400;
+        TH2F* ih_p_m_400_600;
+        TH2F* ih_p_m_600_800;
+        TH2F* ih_p_m_800_inf;
+        TH2F* mass_probQ;
 };
 
 Region::Region(){}
 
-Region::Region(TFileDirectory &dir, std::string suffix,int& etabins,int& ihbins,int& pbins,int& massbins){
+Region::Region(TFileDirectory &dir, std::string suffix,int& etabins,int& ihbins,int& pbins,int& massbins,bool saveIhP=false){
     suffix_ = suffix;
-    initHisto(dir,etabins,ihbins,pbins,massbins);
+    initHisto(dir,etabins,ihbins,pbins,massbins,saveIhP);
 } 
 
 Region::~Region(){
@@ -100,14 +110,15 @@ void Region::setSuffix(std::string suffix){
 }
 
 // Function which intializes the histograms with given binnings 
-void Region::initHisto(TFileDirectory &dir,int etabins,int ihbins,int pbins,int massbins){
+void Region::initHisto(TFileDirectory &dir,int etabins,int ihbins,int pbins,int massbins,bool saveIhP=false){
     TH1::SetDefaultSumw2(kTRUE);
     TH2::SetDefaultSumw2(kTRUE);
     TH3::SetDefaultSumw2(kTRUE);
     np = pbins;
     plow = 0;
     pup = 200;
-    npt = pbins;
+    //npt = pbins;
+    npt = 200;
     ptlow = 0;
     ptup = 10000; 
     nih = ihbins;
@@ -127,8 +138,9 @@ void Region::initHisto(TFileDirectory &dir,int etabins,int ihbins,int pbins,int
     eta_p = dir.make<TH2F>(("eta_p"+suffix).c_str(),";10^{-4}/p [GeV^{-1}];#eta",np,plow,pup,neta,etalow,etaup); 
     ih_eta = dir.make<TH2F>(("ih_eta"+suffix).c_str(),";#eta;I_{h} [MeV/cm]",neta,etalow,etaup,nih,ihlow,ihup); 
     ih_p = dir.make<TH2F>(("ih_p"+suffix).c_str(),";10^{-4}/p [GeV^{-1}];I_{h} [MeV/cm]",np,plow,pup,nih,ihlow,ihup);
+    ih_pt = dir.make<TH2F>(("ih_pt"+suffix).c_str(),";p_{T} [GeV];I_{h} [MeV/cm]",npt,plow,pup,nih,ihlow,ihup);
     ias_p = dir.make<TH2F>(("ias_p"+suffix).c_str(),";10^{-4}/p [GeV^{-1}];G_{i}",np,plow,pup,nias,iaslow,iasup); 
-    ias_pt = dir.make<TH2F>(("ias_pt"+suffix).c_str(),";pt [GeV];G_{i}",npt,ptlow,ptup,nias,iaslow,iasup);
+    ias_pt = dir.make<TH2F>(("ias_pt"+suffix).c_str(),";p_{T} [GeV];G_{i}",npt,ptlow,ptup,nias,iaslow,iasup);
     //ias_ih = dir.make<TH2F>(("ias_ih"+suffix).c_str(),";I_{h} [MeV/cm];G_{i}",nih,ihlow,ihup,nias,iaslow,iasup);
     mass = dir.make<TH1F>(("mass"+suffix).c_str(),";Mass [GeV]",nmass,masslow,massup); 
     pred_mass = dir.make<TH1F>(("pred_mass"+suffix).c_str(),";Mass [GeV]",nmass,masslow,massup); 
@@ -136,20 +148,39 @@ void Region::initHisto(TFileDirectory &dir,int etabins,int ihbins,int pbins,int
     pred_mass->SetBinErrorOption(TH1::EBinErrorOpt::kPoisson);
     //pt_pterroverpt = dir.make<TH2F>(("pt_pterroverpt"+suffix).c_str(),";p_{T} [GeV];#frac{#sigma_{pT}}{p_{T}}",npt,ptlow,ptup,100,0,1); 
     hTOF    = dir.make<TH1F>(("hTOF_"+suffix).c_str(),";TOF",200,-10,10);
+    if(saveIhP)ih_p_m_inf_0 = dir.make<TH2F>(("ih_p_m_inf_0"+suffix).c_str(),";p [GeV];I_{h} [MeV/cm]",100,0,4000,50,0,10);
+    if(saveIhP)ih_p_m_0_100 = dir.make<TH2F>(("ih_p_m_0_100"+suffix).c_str(),";p [GeV];I_{h} [MeV/cm]",100,0,4000,50,0,10);
+    if(saveIhP)ih_p_m_100_200 = dir.make<TH2F>(("ih_p_m_100_200"+suffix).c_str(),";p [GeV];I_{h} [MeV/cm]",100,0,4000,50,0,10);
+    if(saveIhP)ih_p_m_200_300 = dir.make<TH2F>(("ih_p_m_200_300"+suffix).c_str(),";p [GeV];I_{h} [MeV/cm]",100,0,4000,50,0,10);
+    if(saveIhP)ih_p_m_300_400 = dir.make<TH2F>(("ih_p_m_300_400"+suffix).c_str(),";p [GeV];I_{h} [MeV/cm]",100,0,4000,50,0,10);
+    if(saveIhP)ih_p_m_400_600 = dir.make<TH2F>(("ih_p_m_400_600"+suffix).c_str(),";p [GeV];I_{h} [MeV/cm]",100,0,4000,50,0,10);
+    if(saveIhP)ih_p_m_600_800 = dir.make<TH2F>(("ih_p_m_600_800"+suffix).c_str(),";p [GeV];I_{h} [MeV/cm]",100,0,4000,50,0,10);
+    if(saveIhP)ih_p_m_800_inf = dir.make<TH2F>(("ih_p_m_800_inf"+suffix).c_str(),";p [GeV];I_{h} [MeV/cm]",100,0,4000,50,0,10);
+    mass_probQ = dir.make<TH2F>(("mass_probQ"+suffix).c_str(),";Mass [GeV];F_{i}^{pixel}",nmass,masslow,massup,50,0,1); 
 }
 
 // Function which fills histograms
-void Region::fill(float& eta, float& p, float& pt, float& pterr, float& ih, float& ias, float& m, float& tof, float& w){
-   //ih_p_eta->Fill(eta,p,ih,w);
+void Region::fill(float& eta, float& p, float& pt, float& pterr, float& ih, float& ias, float& probq, float& m, float& tof, float& w, bool saveIhP=false){
+    //ih_p_eta->Fill(eta,p,ih,w);
    eta_p->Fill(p,eta,w);
    ih_eta->Fill(eta,ih,w);
    ih_p->Fill(p,ih,w);
+   ih_pt->Fill(pt,ih,w);
    ias_p->Fill(p,ias,w);
    ias_pt->Fill(pt,ias,w);
    //ias_ih->Fill(ih,ias,w);
    mass->Fill(m,w);
    //pt_pterroverpt->Fill(pt,pterr/pt,w);
    hTOF->Fill(tof,w);
+   if(m<=0 && saveIhP)            ih_p_m_inf_0->Fill(1e-4/p,ih,w);
+   if(m>0 && m<=100 && saveIhP)   ih_p_m_0_100->Fill(1e-4/p,ih,w);
+   if(m>100 && m<=200 && saveIhP) ih_p_m_100_200->Fill(1e-4/p,ih,w);
+   if(m>200 && m<=300 && saveIhP) ih_p_m_200_300->Fill(1e-4/p,ih,w);
+   if(m>300 && m<=400 && saveIhP) ih_p_m_300_400->Fill(1e-4/p,ih,w);
+   if(m>400 && m<=600 && saveIhP) ih_p_m_400_600->Fill(1e-4/p,ih,w);
+   if(m>600 && m<=800 && saveIhP) ih_p_m_600_800->Fill(1e-4/p,ih,w);
+   if(m>800 && saveIhP)           ih_p_m_800_inf->Fill(1e-4/p,ih,w);
+   mass_probQ->Fill(m,probq,w);
 }
 
 // in order to compute properly the uncertainties we use the methods SetBinContent SetBinError instead of Fill
@@ -199,7 +230,7 @@ void Region::fillPredMass(const std::string& st_sample,float weight_=-1) {
     }
 }
 
-void Region::write(){
+void Region::write(bool saveIhP=false){
     //ih_p_eta->Write();
     eta_p->Write();
     ih_eta->Write();
@@ -211,6 +242,15 @@ void Region::write(){
     pred_mass->Write();
     //pt_pterroverpt->Write();
     hTOF->Write();
+    if(saveIhP)ih_p_m_inf_0->Write();
+    if(saveIhP)ih_p_m_0_100->Write();
+    if(saveIhP)ih_p_m_100_200->Write();
+    if(saveIhP)ih_p_m_200_300->Write();
+    if(saveIhP)ih_p_m_300_400->Write();
+    if(saveIhP)ih_p_m_400_600->Write();
+    if(saveIhP)ih_p_m_600_800->Write();
+    if(saveIhP)ih_p_m_800_inf->Write();
+    mass_probQ->Write();
 }
 
 void loadHistograms(Region& r, TFile* f, const std::string& regionName, bool bool_rebin=true, int rebineta=1, int rebinp=1, int rebinih=1, int rebinmass=1){
diff --git a/Analyzer/interface/TrigToolsFuncs.h b/Analyzer/interface/TrigToolsFuncs.h
index 08a8480..cc754b5 100644
--- a/Analyzer/interface/TrigToolsFuncs.h
+++ b/Analyzer/interface/TrigToolsFuncs.h
@@ -25,6 +25,7 @@ namespace trigtools {
             
   void dumpTriggerEvent(const trigger::TriggerEvent& trigEvt);
 
+  bool passedFilter(const trigger::TriggerEvent& trigEvt,const std::string& givenFilter);
 }
   
 #endif
diff --git a/Analyzer/interface/Tuple.h b/Analyzer/interface/Tuple.h
index eaf1304..b0836c9 100644
--- a/Analyzer/interface/Tuple.h
+++ b/Analyzer/interface/Tuple.h
@@ -46,11 +46,42 @@ struct Tuple {
   std::vector<std::vector<float>> Tree_triggerObjectPt;
   std::vector<std::vector<float>> Tree_triggerObjectEta;
   std::vector<std::vector<float>> Tree_triggerObjectPhi;
+  bool Tree_L1_SingleMu22;
+  bool Tree_L1_SingleMu22or25;
+  std::vector<float> Tree_L1_22or25PT;
+  std::vector<float> Tree_L1_22or25Eta;
+  std::vector<float> Tree_L1_22or25Phi;
+  std::vector<float> Tree_L1_22or25Mass;
+
+  bool Tree_L1_mu22or25Filter0;
+  std::vector<float> Tree_L1_22or25F0PT;
+  std::vector<float> Tree_L1_22or25F0Eta;
+  std::vector<float> Tree_L1_22or25F0Phi;
+  std::vector<float> Tree_L1_22or25F0Mass;
+  bool Tree_L1_mu22or25Filter10;
+  std::vector<float> Tree_L1_22or25F10PT;
+  std::vector<float> Tree_L1_22or25F10Eta;
+  std::vector<float> Tree_L1_22or25F10Phi;
+  std::vector<float> Tree_L1_22or25F10Mass;
+
+  bool Tree_L1_mu22or25_l3Filter0;
+  bool Tree_L1_LastMuFilter;
+  std::vector<float> Tree_HLT_lastFilterPT;
+  std::vector<float> Tree_HLT_lastFilterEta;
+  std::vector<float> Tree_HLT_lastFilterPhi;
+  std::vector<float> Tree_HLT_lastFilterMass;
   bool Tree_HLT_Mu50;
+  int Tree_Multiplicity_Mu50;
   bool Tree_HLT_PFMET120_PFMHT120_IDTight;
   bool Tree_HLT_PFHT500_PFMET100_PFMHT100_IDTight;
   bool Tree_HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60;
   bool Tree_HLT_MET105_IsoTrk50;
+
+  float Tree_trigObjBeta;
+  float Tree_trigObjEta;
+  std::vector<float> Tree_HSCP_GenBeta;
+  std::vector<float> Tree_HSCP_trigObjBeta;
+  std::vector<float> Tree_HSCP_dRclosestTrigAndCandidate;
   float Tree_RecoCaloMET;
   float Tree_RecoCaloMET_phi;
   float Tree_RecoCaloMET_sigf;
@@ -126,6 +157,7 @@ struct Tuple {
   std::vector<float> Tree_muonPt;
   std::vector<float> Tree_muonEta;
   std::vector<float> Tree_muonPhi;
+  std::vector<float> Tree_muonBeta;
   std::vector<int> Tree_muonCharge;
   std::vector<bool> Tree_muonIsLoose;
   std::vector<bool> Tree_muonIsMedium;
@@ -176,6 +208,7 @@ struct Tuple {
   std::vector<bool> Tree_passPreselection_noIsolation_noIh;
   std::vector<bool> Tree_passPreselection;
   std::vector<bool> Tree_passPreselectionSept8;
+  std::vector<bool> Tree_passPreselectionTrigSys;
   std::vector<bool> Tree_passSelection;
   std::vector<bool> Tree_isPFMuon;
   std::vector<bool> Tree_PFMuonPt;
@@ -204,6 +237,9 @@ struct Tuple {
   std::vector<bool> Tree_isMuon;
   std::vector<bool> Tree_isPhoton;
   std::vector<bool> Tree_isElectron;
+  std::vector<float> Tree_gsfFbremElectron;
+  std::vector<float> Tree_gsfMomentumElectron;
+  std::vector<float> Tree_PFMomentumElectron;
   std::vector<bool> Tree_isChHadron;
   std::vector<bool> Tree_isNeutHadron;
   std::vector<bool> Tree_isPfTrack;
@@ -248,7 +284,8 @@ struct Tuple {
   std::vector<float> Tree_iso_ECAL;
   std::vector<float> Tree_iso_HCAL;
   std::vector<float> Tree_track_genTrackMiniIsoSumPt;
-
+  std::vector<float> Tree_track_genTrackAbsIsoSumPtFix;
+  std::vector<float> Tree_track_genTrackIsoSumPt_dr03;
   std::vector<float> Tree_PFMiniIso_relative;
   std::vector<float> Tree_PFMiniIso_wMuon_relative;
 
@@ -338,6 +375,7 @@ struct Tuple {
   TH1F* dRMinHLTMuon_lowDeltaR;
   TH1F* dRMinHLTMuonLoose_lowDeltaR;
   TH1F* dRGloballyMinHLTMuon;
+  TH1F* PostS_dRMinHLTMuon;
   
   TH1F* ErrorHisto;
 
@@ -347,6 +385,7 @@ struct Tuple {
   TH1F* BefPreS_NumPassedMatchingTrigObj;
   TH1F* BefPreS_NumPassedMatchingTrigObjEtaCut;
   
+  TH1F* BefPreS_TriggerMuonType;
   TH1F* BefPreS_MatchedMuonPt25Pt;
   TH1F* BefPreS_RelDiffMuonPtAndTrackPt;
   TH2F* BefPreS_MuonPtVsTrackPt;
@@ -355,6 +394,8 @@ struct Tuple {
   TH1F* BefPreS_RelDiffTrackPtAndTruthPt;
   
   TH1F* BefPreS_TriggerGenMatch;
+  TH1F* BefPreS_TriggerGenBeta;
+  
   TH1F* BefPreS_TriggerType;
   TH1F* Gen_HSCPCandidateType;
   TH1F* BefPreS_HSCPCandidateType;
@@ -601,6 +642,15 @@ struct Tuple {
   TH2F* BefPreS_TriggerMuon50VsBeta_EtaC;
   TH2F* BefPreS_TriggerMuon50VsBeta_EtaC_BetaUp;
   TH2F* BefPreS_TriggerMuon50VsBeta_EtaC_BetaDown;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaD;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaD_BetaUp;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaD_BetaDown;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaE;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaE_BetaUp;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaE_BetaDown;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaF;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaF_BetaUp;
+  TH2F* BefPreS_TriggerMuon50VsBeta_EtaF_BetaDown;
   
   TH2F* BefPreS_TriggerMuonAllVsBeta;
   TH2F* BefPreS_TriggerMuonAllVsBeta_EtaA;
@@ -621,6 +671,11 @@ struct Tuple {
   TH2F* BefPreS_TriggerMETallVsMetOverHt;
   TH3F* BefPreS_TriggerMETallVsMetVsHT;
   
+  TH1F* BefPreS_TriggerTimingPass;
+  TH1F* BefPreS_TriggerTimingReject;
+  TH1F* BefPreS_TriggerEtaReject;
+  TH1F* BefPreS_TriggerEtaPass;
+  
   TH1F* PostPreS_NumCandidates;
 
   TH3F* Calibration_GiTemplate;
@@ -758,15 +813,21 @@ struct Tuple {
   TH2F* PostPreS_ProbXYVsIas_highIas;
   TH2F* PostPreS_ProbXYVsProbQ;
   TH2F* PostPreS_ProbXYVsProbQ_highIas;
+  TH2F* PostPreS_MassVsIas_fail;
+  TH2F* PostPreS_MassVsIas_pass;
+
 
   TH1F* PostPreS_Ias_CR;
   TH1F* PostPreS_Ih_CR;
-  TH1F* PostPreS_Ihstrip_CR;
+//  TH1F* PostPreS_Ihstrip_CR;
+  TH1F* PostPreS_Ih_noL1_CR;
   TH1F* PostPreS_Ih_nopixcl_CR;
   TH1F* PostPreS_Pt_lowPt_CR;
   TH1F* PostPreS_Ias_CR_veryLowPt;
   TH1F* PostPreS_P_CR_veryLowPt;
   TH1F* PostPreS_ProbQNoL1_CR;
+  
+
   TH2F* PostPreS_ProbQNoL1VsIas_CR;
   TH2F* PostPreS_ProbQNoL1VsIas_CR_Pileup_up;
   TH2F* PostPreS_ProbQNoL1VsIas_CR_Pileup_down;
@@ -778,16 +839,39 @@ struct Tuple {
   TH2F* PostPreS_ProbQNoL1VsIas_CR_Pt_down;
   TH2F* PostPreS_MassVsIas_fail_CR;
   TH2F* PostPreS_MassVsIas_pass_CR;
+
+  TH2F* PostPreS_MassVsIas_fail_CR2;
+  TH2F* PostPreS_MassVsIas_pass_CR2;
+  TH1F* PostPreS_Ias_CR2;
+  TH1F* PostPreS_Ih_CR2;
+  TH1F* PostPreS_Ih_noL1_CR2;
+  TH1F* PostPreS_Pt_CR2;
+  TH1F* PostPreS_ProbQNoL1_CR2;
+  TH2F* PostPreS_ProbQNoL1VsIas_CR2;
+
+  TH2F* PostPreS_MassVsIas_fail_CR3;
+  TH2F* PostPreS_MassVsIas_pass_CR3;
+  TH1F* PostPreS_Ias_CR3;
+  TH1F* PostPreS_Ih_CR3;
+  TH1F* PostPreS_Ih_noL1_CR3;
+  TH1F* PostPreS_Pt_CR3;
+  TH1F* PostPreS_ProbQNoL1_CR3;
+  TH2F* PostPreS_ProbQNoL1VsIas_CR3;
+
+  TH2F* PostPreS_MassVsIas_fail_SR2;
+  TH2F* PostPreS_MassVsIas_pass_SR2;
  
   TH1F* PostPreS_Ih_CR_veryLowPt;
-  TH1F* PostPreS_Ihstrip_CR_veryLowPt;
+//  TH1F* PostPreS_Ihstrip_CR_veryLowPt;
+  TH1F* PostPreS_Ih_noL1_CR_veryLowPt;
   TH1F* PostPreS_Ih_noclean_CR_veryLowPt;
   TH1F* PostPreS_Ih_noinside_CR_veryLowPt;
   TH1F* PostPreS_Ih_nopixcl_CR_veryLowPt;
   TH1F* PostPreS_Pt_CR_veryLowPt; 
-  TH1F* PostPreS_ProbQNoL1_CR_veryLowPt; 
-  TH2F* PostPreS_CpPL_pix_CR_veryLowPt;
-  TH2F* PostPreS_CpPL_strip_CR_veryLowPt;
+  TH1F* PostPreS_ProbQNoL1_CR_veryLowPt;
+  TH2F* PostPreS_CluPathLenghtVsPixLayer_CR_veryLowPt;
+  TH2F* PostPreS_CluDeDxVsPixLayer_CR_veryLowPt;
+  TH2F* PostPreS_CluDeDxVsStripsLayer_CR_veryLowPt;
 
   TH1F* PostS_RelativePtShift;
   TH1F* PostS_ProbQNoL1;
@@ -797,11 +881,17 @@ struct Tuple {
   TH2F* PostS_IasVsFiStrips;
   TH2F* PostS_ProbQNoL1VsIas;
   TH2F* PostS_ProbQNoL1VsFiStrips;
-  
+ 
   TH1F* PostS_SR2FAIL_Ias_PUA;
   TH1F* PostS_SR2FAIL_Ias_PUB;
   TH1F* PostS_SR2FAIL_Ias_PUC;
   TH1F* PostS_SR2FAIL_PV;
+  
+  TH2F* PostS_SR2FAIL_PtErrOverPtVsIas;
+  TH2F* PostS_SR2FAIL_TIsolVsIas;
+  TH2F* PostS_SR2PASS_PtErrOverPtVsIas;
+  TH2F* PostS_SR2PASS_TIsolVsIas;
+  
   TH1F* PostS_SR2FAIL_PtErrOverPt2;
   TH1F* PostS_SR2FAIL_RelDiffTrackPtAndTruthPt;
   TH2F* PostS_SR2FAIL_RelDiffTrackPtAndTruthPtVsTruthPt;
@@ -809,18 +899,26 @@ struct Tuple {
   TH1F* PostS_SR2PASS_Ias_PUA;
   TH1F* PostS_SR2PASS_Ias_PUB;
   TH1F* PostS_SR2PASS_Ias_PUC;
+  
+  TH2F* PostS_SR2PASS_RunVsLs;
+  TH1F* PostS_SR2PASS_Ls;
+  
   TH1F* PostS_SR2PASS_PV;
   TH1F* PostS_SR2PASS_PtErrOverPt2;
   TH1F* PostS_SR2PASS_RelDiffTrackPtAndTruthPt;
   TH2F* PostS_SR2PASS_RelDiffTrackPtAndTruthPtVsTruthPt;
   
+  TH1F* PostS_SR2PASS_TriggerGenBeta;
   TH3F* PostS_ProbQNoL1VsIasVsPt;
   TH3F* PostS_ProbQNoL1VsIasVsPt_Pileup_up;
   TH3F* PostS_ProbQNoL1VsIasVsPt_Pileup_down;
   TH3F* PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_up;
   TH3F* PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_down;
   TH3F* PostS_ProbQNoL1VsIasVsPt_Ias_up;
+  TH3F* PostS_ProbQNoL1VsIasVsPt_IasShift_up;
   TH3F* PostS_ProbQNoL1VsIasVsPt_Ias_down;
+  TH3F* PostS_ProbQNoL1VsIasVsPt_IasShift_down;
+
   TH3F* PostS_ProbQNoL1VsIasVsPt_Pt_up;
   TH3F* PostS_ProbQNoL1VsIasVsPt_Pt_down;
   TH3F* PostS_ProbQNoL1VsIasVsPt_Trigger_up;
@@ -890,7 +988,12 @@ struct Tuple {
   TH2F* PostS_SR2_ProbQNoL1VsIas_ProbQNoL1_up;
   TH2F* PostS_SR2_ProbQNoL1VsIas_ProbQNoL1_down;
   TH2F* PostS_SR2_ProbQNoL1VsIas_Ias_up;
+  TH2F* PostS_SR2_ProbQNoL1VsIas_IasShift_up;
+  
   TH2F* PostS_SR2_ProbQNoL1VsIas_Ias_down;
+  TH2F* PostS_SR2_ProbQNoL1VsIas_IasShift_down;
+
+
   TH2F* PostS_SR2_ProbQNoL1VsIas_Pt_up;
   TH2F* PostS_SR2_ProbQNoL1VsIas_Pt_down;
   TH2F* PostS_SR2_ProbQNoL1VsIas_Trigger_up;
@@ -975,6 +1078,470 @@ struct Tuple {
   TH1F* PostS_VR3_Mass_C_up2;
   TH1F* PostS_VR3_Mass_C_down2;
 
+
+  //**********************************************************
+
+
+  //VR1 0.3<Fpix<0.8 pT  > 70
+ 
+  TH1F* PostS_VR1_pt70_Fpix_Mass;
+  TH1F* PostS_VR1_pt70_Fpix;
+  //PU
+  TH1F* PostS_VR1_pt70_Fpix_Mass_Pileup_up;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_VR1_pt70_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_VR1_pt70_Fpix_Mass_Pt_up;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_VR1_pt70_Fpix_Mass_Trigger_up;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_VR1_pt70_Fpix_Mass_K_up1;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_K_down1;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_C_up1;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_VR1_pt70_Fpix_Mass_K_up2;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_K_down2;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_C_up2;
+  TH1F* PostS_VR1_pt70_Fpix_Mass_C_down2;
+
+  //VR1 0.3<Fpix<0.8 pT  > 100
+ 
+  TH1F* PostS_VR1_pt100_Fpix_Mass;
+  TH1F* PostS_VR1_pt100_Fpix;
+  //PU
+  TH1F* PostS_VR1_pt100_Fpix_Mass_Pileup_up;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_VR1_pt100_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_VR1_pt100_Fpix_Mass_Pt_up;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_VR1_pt100_Fpix_Mass_Trigger_up;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_VR1_pt100_Fpix_Mass_K_up1;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_K_down1;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_C_up1;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_VR1_pt100_Fpix_Mass_K_up2;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_K_down2;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_C_up2;
+  TH1F* PostS_VR1_pt100_Fpix_Mass_C_down2;
+
+
+  //VR1 0.3<Fpix<0.8 pT  > 200
+ 
+  TH1F* PostS_VR1_pt200_Fpix_Mass;
+  TH1F* PostS_VR1_pt200_Fpix;
+  //PU
+  TH1F* PostS_VR1_pt200_Fpix_Mass_Pileup_up;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_VR1_pt200_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_VR1_pt200_Fpix_Mass_Pt_up;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_VR1_pt200_Fpix_Mass_Trigger_up;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_VR1_pt200_Fpix_Mass_K_up1;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_K_down1;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_C_up1;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_VR1_pt200_Fpix_Mass_K_up2;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_K_down2;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_C_up2;
+  TH1F* PostS_VR1_pt200_Fpix_Mass_C_down2;
+
+  //VR1 0.3<Fpix<0.8 pT  > 300
+ 
+  TH1F* PostS_VR1_pt300_Fpix_Mass;
+  TH1F* PostS_VR1_pt300_Fpix;
+  //PU
+  TH1F* PostS_VR1_pt300_Fpix_Mass_Pileup_up;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_VR1_pt300_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_VR1_pt300_Fpix_Mass_Pt_up;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_VR1_pt300_Fpix_Mass_Trigger_up;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_VR1_pt300_Fpix_Mass_K_up1;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_K_down1;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_C_up1;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_VR1_pt300_Fpix_Mass_K_up2;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_K_down2;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_C_up2;
+  TH1F* PostS_VR1_pt300_Fpix_Mass_C_down2;
+
+
+  //***********************************************************
+
+
+  //SR0 Fpix >0.8 pT  > 70 
+
+  TH1F* PostS_SR0_pt70_Fpix_Mass;
+  TH1F* PostS_SR0_pt70_Fpix;
+  //PU
+  TH1F* PostS_SR0_pt70_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR0_pt70_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR0_pt70_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR0_pt70_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR0_pt70_Fpix_Mass_K_up1;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_K_down1;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_C_up1;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR0_pt70_Fpix_Mass_K_up2;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_K_down2;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_C_up2;
+  TH1F* PostS_SR0_pt70_Fpix_Mass_C_down2;
+
+  //SR0 Fpix >0.8 pT  > 100 
+
+  TH1F* PostS_SR0_pt100_Fpix_Mass;
+  TH1F* PostS_SR0_pt100_Fpix;
+  //PU
+  TH1F* PostS_SR0_pt100_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR0_pt100_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR0_pt100_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR0_pt100_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR0_pt100_Fpix_Mass_K_up1;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_K_down1;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_C_up1;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR0_pt100_Fpix_Mass_K_up2;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_K_down2;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_C_up2;
+  TH1F* PostS_SR0_pt100_Fpix_Mass_C_down2;
+
+  //SR0 Fpix >0.8 pT  > 200 
+
+  TH1F* PostS_SR0_pt200_Fpix_Mass;
+  TH1F* PostS_SR0_pt200_Fpix;
+  //PU
+  TH1F* PostS_SR0_pt200_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR0_pt200_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR0_pt200_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR0_pt200_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR0_pt200_Fpix_Mass_K_up1;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_K_down1;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_C_up1;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR0_pt200_Fpix_Mass_K_up2;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_K_down2;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_C_up2;
+  TH1F* PostS_SR0_pt200_Fpix_Mass_C_down2;
+
+  //SR0 Fpix >0.8 pT  > 300 
+
+  TH1F* PostS_SR0_pt300_Fpix_Mass;
+  TH1F* PostS_SR0_pt300_Fpix;
+  //PU
+  TH1F* PostS_SR0_pt300_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR0_pt300_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR0_pt300_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR0_pt300_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR0_pt300_Fpix_Mass_K_up1;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_K_down1;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_C_up1;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR0_pt300_Fpix_Mass_K_up2;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_K_down2;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_C_up2;
+  TH1F* PostS_SR0_pt300_Fpix_Mass_C_down2;
+
+  //**********************************************************
+
+
+  //SR1 Fpix >0.9 pT  > 70 
+
+  TH1F* PostS_SR1_pt70_Fpix_Mass;
+  TH1F* PostS_SR1_pt70_Fpix;
+  //PU
+  TH1F* PostS_SR1_pt70_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR1_pt70_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR1_pt70_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR1_pt70_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR1_pt70_Fpix_Mass_K_up1;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_K_down1;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_C_up1;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR1_pt70_Fpix_Mass_K_up2;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_K_down2;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_C_up2;
+  TH1F* PostS_SR1_pt70_Fpix_Mass_C_down2;
+
+  //SR1 Fpix >0.9 pT  > 100 
+
+  TH1F* PostS_SR1_pt100_Fpix_Mass;
+  TH1F* PostS_SR1_pt100_Fpix;
+  //PU
+  TH1F* PostS_SR1_pt100_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR1_pt100_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR1_pt100_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR1_pt100_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR1_pt100_Fpix_Mass_K_up1;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_K_down1;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_C_up1;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR1_pt100_Fpix_Mass_K_up2;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_K_down2;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_C_up2;
+  TH1F* PostS_SR1_pt100_Fpix_Mass_C_down2;
+
+  //SR1 Fpix >0.9 pT  > 200 
+
+  TH1F* PostS_SR1_pt200_Fpix_Mass;
+  TH1F* PostS_SR1_pt200_Fpix;
+  //PU
+  TH1F* PostS_SR1_pt200_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR1_pt200_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR1_pt200_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR1_pt200_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR1_pt200_Fpix_Mass_K_up1;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_K_down1;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_C_up1;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR1_pt200_Fpix_Mass_K_up2;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_K_down2;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_C_up2;
+  TH1F* PostS_SR1_pt200_Fpix_Mass_C_down2;
+
+  //SR1 Fpix >0.9 pT  > 300 
+
+  TH1F* PostS_SR1_pt300_Fpix_Mass;
+  TH1F* PostS_SR1_pt300_Fpix;
+  //PU
+  TH1F* PostS_SR1_pt300_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR1_pt300_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR1_pt300_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR1_pt300_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR1_pt300_Fpix_Mass_K_up1;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_K_down1;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_C_up1;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR1_pt300_Fpix_Mass_K_up2;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_K_down2;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_C_up2;
+  TH1F* PostS_SR1_pt300_Fpix_Mass_C_down2;
+
+  //**********************************************************
+
+
+  //SR2 Fpix >0.99 pT  > 70 
+  
+  TH1F* PostS_SR2_pt70_Fpix_Mass;
+  TH1F* PostS_SR2_pt70_Fpix;
+  //PU
+  TH1F* PostS_SR2_pt70_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR2_pt70_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR2_pt70_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR2_pt70_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR2_pt70_Fpix_Mass_K_up1;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_K_down1;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_C_up1;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR2_pt70_Fpix_Mass_K_up2;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_K_down2;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_C_up2;
+  TH1F* PostS_SR2_pt70_Fpix_Mass_C_down2;
+
+  //SR2 Fpix >0.99 pT  > 100 
+  
+  TH1F* PostS_SR2_pt100_Fpix_Mass;
+  TH1F* PostS_SR2_pt100_Fpix;
+  //PU
+  TH1F* PostS_SR2_pt100_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR2_pt100_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR2_pt100_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR2_pt100_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR2_pt100_Fpix_Mass_K_up1;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_K_down1;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_C_up1;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR2_pt100_Fpix_Mass_K_up2;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_K_down2;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_C_up2;
+  TH1F* PostS_SR2_pt100_Fpix_Mass_C_down2;
+
+  //SR2 Fpix >0.99 pT  > 200 
+
+  TH1F* PostS_SR2_pt200_Fpix_Mass;
+  TH1F* PostS_SR2_pt200_Fpix;
+  //PU
+  TH1F* PostS_SR2_pt200_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR2_pt200_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR2_pt200_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR2_pt200_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR2_pt200_Fpix_Mass_K_up1;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_K_down1;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_C_up1;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR2_pt200_Fpix_Mass_K_up2;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_K_down2;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_C_up2;
+  TH1F* PostS_SR2_pt200_Fpix_Mass_C_down2;
+
+  //SR2 Fpix >0.99 pT  > 300 
+
+  TH1F* PostS_SR2_pt300_Fpix_Mass;
+  TH1F* PostS_SR2_pt300_Fpix;
+  //PU
+  TH1F* PostS_SR2_pt300_Fpix_Mass_Pileup_up;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_Pileup_down;
+  //Systematics plots for Fi rescaling
+  TH1F* PostS_SR2_pt300_Fpix_Mass_ProbQNoL1_up;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_ProbQNoL1_down;
+  //PT
+  TH1F* PostS_SR2_pt300_Fpix_Mass_Pt_up;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_Pt_down;
+  //TRIGGER
+  TH1F* PostS_SR2_pt300_Fpix_Mass_Trigger_up;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_Trigger_down;
+
+  //K&C senario 1
+  TH1F* PostS_SR2_pt300_Fpix_Mass_K_up1;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_K_down1;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_C_up1;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_C_down1;
+  //K&C senario 2
+  TH1F* PostS_SR2_pt300_Fpix_Mass_K_up2;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_K_down2;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_C_up2;
+  TH1F* PostS_SR2_pt300_Fpix_Mass_C_down2;
+
+  //**********************************************************
   // SR1: Ias-quantile 90% & pT>70 GeV
   TH1F* PostS_SR1_Mass;
   TH1F* PostS_SR1_Mass_Pileup_up;
@@ -1050,16 +1617,62 @@ struct Tuple {
   TH2F* PostPreS_ProbQNoL1VsIas_Pt_up;
   TH2F* PostPreS_ProbQNoL1VsIas_Pt_down;
 
+  TH1F* PostPreS_TriggerTimingPass;
+  TH1F* PostPreS_TriggerTimingReject;
+  TH1F* PostPreS_TriggerEtaReject;
+  TH1F* PostPreS_TriggerEtaPass;
+  TH2F* PostS_MuonTightVsBeta;
   TH2F* PostPreS_TriggerMuon50VsBeta;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaA;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL4DT;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaB;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL4DT;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaC;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp;
   TH2F* PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaD;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaD_BetaUp;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaD_BetaDown;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaE;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaE_BetaUp;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaE_BetaDown;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaF;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaF_BetaUp;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaF_BetaDown;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL1DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL4DT;
+  TH2F* PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL4DT;
+  
+  TH2F* PostS_SR2PASS_TriggerMuon50VsBeta_Beta;
+  TH2F* PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownHalfSigma;
+  TH2F* PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownOneSigma;
+  TH2F* PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownTwoSigma;
+  TH2F* PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpHalfSigma;
+  TH2F* PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpOneSigma;
+  TH2F* PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpTwoSigma;
   
   TH2F* PostPreS_TriggerMuonAllVsBeta;
   TH2F* PostPreS_TriggerMuonAllVsBeta_EtaA;
@@ -1196,12 +1809,14 @@ struct Tuple {
   TH1F* CutFlow;
   TH1F* EventCutFlow;
   TH1F* CutFlowReverse;
-
+  
+  TH2F* CutFlowProbQ;
+  TH2F* CutFlowIas;
   TH2F* CutFlowEta;
   TH2F* CutFlowEoP;
   TH2F* N1_FlowEta;
   TH2F* CutFlowPfType;
-  TH2F* CutFlowProbQ;
+  
 
   // TODO: better deal with these
 //  TH3F* PostPreS_IasAllIhVsLayer;
@@ -1277,6 +1892,10 @@ struct Tuple {
   TH2F* PostS_CutIdVsBeta_postPtAndIasAndTOF;
 
   TH1F* PostPreS_GenBeta;
+  TH1F* PostPreS_TriggerGenBeta;
+  TH1F* PostS_GenBeta;
+  TH1F* PostS_TriggerGenBeta;
+  
 
   //Prediction histograms
   TH1D* H_A;
@@ -1414,6 +2033,8 @@ struct Tuple {
   
   TH1F* PostS_RecoHSCParticleType;
   TH1F* PostS_HltMatchTrackLevel;
+  TH1F* PostS_NotMuonsGenBeta;
+  
 
   TH1D* CtrlPt_S1_Is;
   TH1D* CtrlPt_S2_Is;
@@ -1489,25 +2110,25 @@ struct Tuple {
  // K and C
  TH2F* K_and_C_Ih_noL1_VsP_loose1;
  TH2F* K_and_C_Ih_noL1_VsP_loose2;
- TH2F* K_and_C_Ih_noL1_VsP_eta1_loose1;
- TH2F* K_and_C_Ih_noL1_VsP_eta1_loose2;
- TH2F* K_and_C_Ih_noL1_VsP_eta2_loose1;
- TH2F* K_and_C_Ih_noL1_VsP_eta2_loose2;
  TH2F* K_and_C_Ih_strip_VsP_loose1;
  TH2F* K_and_C_Ih_strip_VsP_loose2;
+ TH2F* K_and_C_Ih_strip_VsP_eta1_loose1;
+ TH2F* K_and_C_Ih_strip_VsP_eta1_loose2;
+ TH2F* K_and_C_Ih_strip_VsP_eta2_loose1;
+ TH2F* K_and_C_Ih_strip_VsP_eta2_loose2;
 
  TH2F* K_and_C_Ih_noL1_VsP_1;
  TH2F* K_and_C_Ih_noL1_VsP_2;
- TH2F* K_and_C_Ih_noL1_VsP_eta1_1;
- TH2F* K_and_C_Ih_noL1_VsP_eta1_2;
- TH2F* K_and_C_Ih_noL1_VsP_eta2_1;
- TH2F* K_and_C_Ih_noL1_VsP_eta2_2;
  TH2F* K_and_C_Ih_strip_VsP_1;
  TH2F* K_and_C_Ih_strip_VsP_2;
- TH2F* K_and_C_Ih_noL1_VsP_noFcut1;
- TH2F* K_and_C_Ih_noL1_VsP_noFcut2;
- TH2F* K_and_C_Ih_strip_VsP_noFcut1;
- TH2F* K_and_C_Ih_strip_VsP_noFcut2;
+ TH2F* K_and_C_Ih_strip_VsP_eta1_1;
+ TH2F* K_and_C_Ih_strip_VsP_eta1_2;
+ TH2F* K_and_C_Ih_strip_VsP_eta2_1;
+ TH2F* K_and_C_Ih_strip_VsP_eta2_2;
+ TH2F* K_and_C_Ih_noL1_VsP_wFcut1;
+ TH2F* K_and_C_Ih_noL1_VsP_wFcut2;
+ TH2F* K_and_C_Ih_strip_VsP_wFcut1;
+ TH2F* K_and_C_Ih_strip_VsP_wFcut2;
 
  TH1F* K_and_C_Ih_noL1_1d;
  TH1F* K_and_C_Ih_strip_1d;
@@ -1534,6 +2155,19 @@ struct Tuple {
  TH2F* Stab_invB_VsRun;
  TH2F* Stab_invB_DT_VsRun;
  TH2F* Stab_invB_CSC_VsRun;
+ TH2F* Stab_CluDeDxPixLayer2_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxPixLayer3_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxPixLayer4_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer1_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer2_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer3_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer4_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer5_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer6_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer7_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer8_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer9_VsRun_CR_veryLowPt;
+ TH2F* Stab_CluDeDxStripsLayer10_VsRun_CR_veryLowPt;
 
  // Saturatopm
  TH1F* PostPreS_NumSat;
diff --git a/Analyzer/interface/TupleMaker.h b/Analyzer/interface/TupleMaker.h
index ec24c3a..fac9738 100644
--- a/Analyzer/interface/TupleMaker.h
+++ b/Analyzer/interface/TupleMaker.h
@@ -12,7 +12,7 @@ public:
                        unsigned int saveTree,
                        bool calcSyst_,
                        int TypeMode,
-                       bool sampleType_,
+                       int sampleType_,
                        bool doBefTrigPlots_,
                        bool doBefPreSplots_,
                        bool doPostPreSplots_,
@@ -37,7 +37,8 @@ public:
                         int etabins,
                         int ihbins,
                         int pbins,
-                        int massbins);
+                        int massbins,
+                        bool allRegions);
 
   void fillTreeBranches(Tuple *&tuple,
                         const unsigned int &Trig,
@@ -57,7 +58,6 @@ public:
                         const std::vector<int>  &pvNdof,
                         const std::vector<float>  &pvChi2,
                         const std::vector<float>  &pvSumPt2,
-
                         const unsigned int &Hscp,
                         const unsigned int &nMuons,
                         const unsigned int &njets,
@@ -70,7 +70,35 @@ public:
                         const std::vector<std::vector<float>> &triggerObjectPt,
                         const std::vector<std::vector<float>> &triggerObjectEta,
                         const std::vector<std::vector<float>> &triggerObjectPhi,
+                        const std::vector<float> &HSCP_GenBeta,
+                        const std::vector<float> &HSCP_dRclosestTrigAndCandidate,
+                        const std::vector<float> &HSCP_trigObjBeta,
+                        const float &trigObjBeta,
+                        const float& trigObjEta,
+                        const bool &L1_SingleMu22,
+                        const bool &L1_SingleMu22or25,
+                        const std::vector<float> &L1_22or25PT,
+                        const std::vector<float> &L1_22or25Eta,
+                        const std::vector<float> &L1_22or25Phi,
+                        const std::vector<float> &L1_22or25Mass,
+                        const bool &L1_mu22or25Filter0,
+                        const std::vector<float> &L1_22or25F0PT,
+                        const std::vector<float> &L1_22or25F0Eta,
+                        const std::vector<float> &L1_22or25F0Phi,
+                        const std::vector<float> &L1_22or25F0Mass,
+                        const bool &L1_mu22or25Filter10,
+                        const std::vector<float> &L1_22or25F10PT,
+                        const std::vector<float> &L1_22or25F10Eta,
+                        const std::vector<float> &L1_22or25F10Phi,
+                        const std::vector<float> &L1_22or25F10Mass,
+                        const bool &L1_mu22or25_l3Filter0,
+                        const bool &L1_LastMuFilter,
+                        const std::vector<float> &HLT_lastFilterPT,
+                        const std::vector<float> &HLT_lastFilterEta,
+                        const std::vector<float> &HLT_lastFilterPhi,
+                        const std::vector<float> &HLT_lastFilterMass,
                         const bool &HLT_Mu50,
+                        const int &nbMuTrigObj,
                         const bool &HLT_PFMET120_PFMHT120_IDTight,
                         const bool &HLT_PFHT500_PFMET100_PFMHT100_IDTight,
                         const bool &HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60,
@@ -150,6 +178,7 @@ public:
                         const std::vector<float> &muonPt,
                         const std::vector<float> &muonEta,
                         const std::vector<float> &muonPhi,
+                        const std::vector<float> &muonBeta,
                         const std::vector<int> &muonCharge,
                         const std::vector<bool> &muonIsLoose,
                         const std::vector<bool> &muonIsMedium,
@@ -198,6 +227,7 @@ public:
                         const std::vector<bool> &passCutPt55,
                         const std::vector<bool> &passPreselection,
                         const std::vector<bool> &passPreselectionSept8,
+                        const std::vector<bool> &passPreselectionTrigSys,
                         const std::vector<bool> &passSelection,
                         const std::vector<bool> &isPFMuon,
                         const std::vector<bool> &PFMuonPt,
@@ -225,6 +255,9 @@ public:
                         const std::vector<bool>  &isMuon,
                         const std::vector<bool>  &isPhoton,
                         const std::vector<bool>  &isElectron,
+                        const std::vector<float>  &gsfFbremElectron,
+                        const std::vector<float>  &gsfMomentumElectron,
+                        const std::vector<float>  &PFMomentumElectron,
                         const std::vector<bool>  &isChHadron,
                         const std::vector<bool>  &isNeutHadron,
                         const std::vector<bool>  &isPfTrack,
@@ -260,6 +293,8 @@ public:
                         const std::vector<float> &iso_ECAL,
                         const std::vector<float> &iso_HCAL,
                         const std::vector<float> &track_genTrackMiniIsoSumPt,
+                        const std::vector<float> &track_genTrackAbsIsoSumPtFix,
+                        const std::vector<float> &track_genTrackIsoSumPt_dr03,
                         const std::vector<float> &PFMiniIso_relative,
                         const std::vector<float> &PFMiniIso_wMuon_relative,
                         const std::vector<float> &track_PFIsolationR005_sumChargedHadronPt,
@@ -354,9 +389,11 @@ public:
                    float pterr,
                    float ih,
                    float ias,
+                   float probq,
                    float m,
                    float tof,
-                   float w);
+                   float w,
+                   bool allRegions);
 
   void writeRegions(Tuple *&tuple,
                     TFileDirectory &dir);
@@ -373,7 +410,7 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
                                  unsigned int saveTree,
                                  bool calcSyst_,
                                  int TypeMode,
-                                 bool sampleType_,
+                                 int sampleType_,
                                  bool doBefTrigPlots_,
                                  bool doBefPreSplots_,
                                  bool doPostPreSplots_,
@@ -400,7 +437,7 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
 
   tuple->IntLumi = dir.make<TProfile>("IntLumi", ";IntLumi", 1, 0, 1);
   tuple->XSection = dir.make<TProfile>("XSection", ";XSection", 1, 0, 1);
-  tuple->EventWeight = dir.make<TH1F>("EventWeight", ";EventWeight", 50, 0.75, 1.25);
+  tuple->EventWeight = dir.make<TH1F>("EventWeight", ";EventWeight;Events / 0.02", 25, 0.75, 1.25);
 
   tuple->NumEvents = dir.make<TH1F>("NumEvents", ";;Number of events / category", 5, 0.5, 5.5);
   tuple->NumEvents->GetXaxis()->SetBinLabel(1,"All events");
@@ -411,12 +448,14 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
 
 
   tuple->dRMinHLTMuon = dir.make<TH1F>("dRMinHLTMuon", ";#Delta R_{min,muReco,HLT};Events / 0.04",100,0.,4.);
+  
   tuple->dRMinHLTMuon_numTrigObjZero = dir.make<TH1F>("dRMinHLTMuon_numTrigObjZero", ";#Delta R_{min,muReco,HLT} (N_{HLT match} = 0, #eta < 1);Events / 0.04",100,0.,4.);
   tuple->dRMinHLTMuon_numTrigObjOne = dir.make<TH1F>("dRMinHLTMuon_numTrigObjOne", ";#Delta R_{min,muReco,HLT} (N_{HLT match} = 1, #eta < 1);Events / 0.04",100,0.,4.);
   tuple->dRMinHLTMuon_numTrigObjTwo = dir.make<TH1F>("dRMinHLTMuon_numTrigObjTwo", ";#Delta R_{min,muReco,HLT} (N_{HLT match} = 2, #eta < 1);Events / 0.04",100,0.,4.);
   tuple->dRMinHLTMuon_lowDeltaR = dir.make<TH1F>("dRMinHLTMuon_lowDeltaR", ";#Delta R_{min,muReco,HLT};Events / 0.01",40,0.,0.4);
   tuple->dRMinHLTMuonLoose_lowDeltaR = dir.make<TH1F>("dRMinHLTMuonLoose_lowDeltaR", ";#Delta R_{min,muRecoLoose,HLT};Events / 0.01",40,0.,0.4);
   tuple->dRGloballyMinHLTMuon = dir.make<TH1F>("dRGloballyMinHLTMuon", ";#Delta R_{min,muReco,HLT};Events / 0.04",100,0.,4.);
+  tuple->PostS_dRMinHLTMuon = dir.make<TH1F>("dRMinHLTMuon", ";#Delta R_{min,muReco,HLT};Events / 0.04",100,0.,4.);
 
   tuple->ErrorHisto = dir.make<TH1F>("ErrorHisto", ";;", 11, -0.5, 10.5);
   tuple->ErrorHisto->GetXaxis()->SetBinLabel(1,"All tracks");
@@ -517,6 +556,23 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   tuple->CutFlowProbQ->GetYaxis()->SetBinLabel(14,"#sigma_{p_{T}} / p_{T}^{2}");
   tuple->CutFlowProbQ->GetYaxis()->SetBinLabel(15,"F_{i}");
 
+  tuple->CutFlowIas = dir.make<TH2F>("CutFlowIas", ";G_{i}^{strips};", 10, 0., 1., 17, -0.5, 16.5);
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(1,"Trigger");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(2,"p_{T}");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(3,"#eta");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(4,"N_{no-L1 pixel hits}");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(5,"f_{valid/all hits}");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(6,"N_{dEdx hits}");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(7,"HighPurity");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(8,"#chi^{2} / N_{dof}");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(9,"d_{z}");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(10,"d_{xy}");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(11,"MiniRelIsoAll");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(12,"MiniRelTkIso");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(13,"E/p");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(14,"#sigma_{p_{T}} / p_{T}^{2}");
+  tuple->CutFlowIas->GetYaxis()->SetBinLabel(15,"F_{i}");
+  
   tuple->CutFlowEta = dir.make<TH2F>("CutFlowEta", ";#eta;", 50, -2.6, 2.6, 17, -0.5, 16.5);
   tuple->CutFlowEta->GetYaxis()->SetBinLabel(1,"Trigger");
   tuple->CutFlowEta->GetYaxis()->SetBinLabel(2,"p_{T}");
@@ -596,8 +652,8 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   tuple->N1_FlowEta->GetYaxis()->SetBinLabel(15,"F_{i}");
 
   tuple->N1_Eta = dir.make<TH1F>("N1_Eta", ";#eta;Tracks / 0.05", 52, -2.6, 2.6);
-  tuple->N1_Pt = dir.make<TH1F>("N1_Pt", ";p_{T} (GeV);Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-  tuple->N1_Pt_lowPt = dir.make<TH1F>("N1_Pt_lowPt", ";p_{T} (GeV);Tracks / 10 GeV", 50, 0., 500);
+  tuple->N1_Pt = dir.make<TH1F>("N1_Pt", ";p_{T} [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+  tuple->N1_Pt_lowPt = dir.make<TH1F>("N1_Pt_lowPt", ";p_{T} [GeV];Tracks / 10 GeV", 50, 0., 500);
   tuple->N1_Chi2oNdof = dir.make<TH1F>("N1_Chi2oNdof", ";#chi^{2} / N_{dof};Tracks / 1", 20, 0, 20);
 
   tuple->N1_Qual = dir.make<TH1F>("N1_Qual", ";;Tracks / category", 2, -0.5, 1.5);
@@ -608,27 +664,27 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   tuple->N1_TNOHFraction = dir.make<TH1F>("N1_TNOHFraction", ";Number of valid hit fraction;Tracks / 0.02", 50, 0., 1);
 //  tuple->N1_nDof = dir.make<TH1F>("nDof", ";N_{dof}", 40, -0.5, 39.5);
 //  tuple->N1_tofError = dir.make<TH1F>("tofError", ";tofError", 25, 0, 0.25);
-  tuple->N1_TIsol = dir.make<TH1F>("N1_TIsol", ";#Sigma_{R<0.3} p_{T} - p_{T,cand} (GeV) / 4 GeV", 25, 0, 100);
+  tuple->N1_TIsol = dir.make<TH1F>("N1_TIsol", ";#Sigma_{R<0.3} p_{T} - p_{T,cand} [GeV]; Tracks / 4 GeV", 25, 0, 100);
   tuple->N1_EoP = dir.make<TH1F>("N1_EoP", ";PF calo energy / momentum; Tracks / 0.06", 25, 0, 1.5);
   tuple->N1_ECalEoP = dir.make<TH1F>("N1_ECalEoP", ";PF ECal energy / momentum; Tracks / 0.06", 25, 0, 1.5);
   tuple->N1_HCalEoP = dir.make<TH1F>("N1_HCalEoP", ";PF HCal energy / momentum; Tracks / 0.06", 25, 0, 1.5);
   tuple->N1_DrMinPfJet = dir.make<TH1F>("N1_DrMinPfJet", ";dRMinPfJet",100,0.,5.0);
   tuple->N1_SumpTOverpT = dir.make<TH1F>("N1_SumpTOverpT", ";#Sigma p_{T} / p_{T}; Tracks / 0.025", 80, 0, 2);
-  tuple->N1_Ih = dir.make<TH1F>("N1_Ih", ";I_{h} (MeV/cm)", 200, 0, dEdxM_UpLim);
+  tuple->N1_Ih = dir.make<TH1F>("N1_Ih", ";I_{h} [MeV/cm]", 200, 0, dEdxM_UpLim);
   tuple->N1_I = dir.make<TH1F>("N1_I", ";I", NCuts, 0, NCuts);
   tuple->N1_TOF = dir.make<TH1F>("N1_TOF", ";TOF", NCuts, 0, NCuts);
 
   tuple->N1_Stations = dir.make<TH1F>("N1_Stations", ";Stations; Tracks / 1", 1, 0, 1);
-  tuple->N1_Dxy = dir.make<TH1F>("N1_Dxy", ";d_{xy} (cm); Tracks / 0.001 cm", 200, -0.1, 0.1);
-  tuple->N1_Dz = dir.make<TH1F>("N1_Dz", ";d_{z} (cm); Tracks / 0.003 cm", 200, -0.3, 0.3);
+  tuple->N1_Dxy = dir.make<TH1F>("N1_Dxy", ";d_{xy} [cm]; Tracks / 0.001 cm", 200, -0.1, 0.1);
+  tuple->N1_Dz = dir.make<TH1F>("N1_Dz", ";d_{z} [cm]; Tracks / 0.003 cm", 200, -0.3, 0.3);
 
-  tuple->N1_PtErrOverPt = dir.make<TH1F>("N1_PtErrOverPt", ";#sigma_{p_{T}}/p_{T};Tracks / 0.05", 20, 0, 1);
+  tuple->N1_PtErrOverPt = dir.make<TH1F>("N1_PtErrOverPt", ";#sigma_{p_{T}}/p_{T};Tracks / 0.05", 40, 0., 2.);
   tuple->N1_PtErrOverPt2 = dir.make<TH1F>("N1_PtErrOverPt2", ";#sigma_{p_{T}}/p_{T}^{2};Tracks / 7.5e-5 ", 40, 0, 0.003);
-  tuple->N1_PtErrOverPtVsPt = dir.make<TH2F>("N1_PtErrOverPtVsPt", ";#sigma_{p_{T}}/p_{T};p_{T} (GeV)",  40, 0., 1., 40, 0., 4000.);
-  tuple->N1_PtErrOverPtVsPt_lowPt = dir.make<TH2F>("N1_PtErrOverPtVsPt_lowPt", ";#sigma_{p_{T}}/p_{T};p_{T} (GeV)",  40, 0., 1., 50, 0., 1000.);
+  tuple->N1_PtErrOverPtVsPt = dir.make<TH2F>("N1_PtErrOverPtVsPt", ";#sigma_{p_{T}}/p_{T};p_{T} [GeV]",  40, 0., 1., 40, 0., 4000.);
+  tuple->N1_PtErrOverPtVsPt_lowPt = dir.make<TH2F>("N1_PtErrOverPtVsPt_lowPt", ";#sigma_{p_{T}}/p_{T};p_{T} [GeV]",  40, 0., 1., 50, 0., 1000.);
   tuple->N1_PtErrOverPtVsGenBeta = dir.make<TH2F>("N1_PtErrOverPtVsGenBeta", ";#sigma_{p_{T}}/p_{T};Gen #beta",  40, 0., 1., 100, 0., 1.);
   tuple->N1_PtErrOverPt2VsIas =  dir.make<TH2F>("N1_PtErrOverPt2VsIas", ";#sigma_{p_{T}}/p_{T}^{2};G_{i}^{strips};Tracks", 40, 0., 0.003, 20, 0.,1.);
-  tuple->N1_PtErrOverPt2VsProbQNoL1 =  dir.make<TH2F>("N1_PtErrOverPt2VsProbQNoL1", ";#sigma_{p_{T}}/p_{T}^{2};prob_{Q,pixelAV} (pixels);Tracks", 40, 0., 0.003, 20, 0.,1.);
+  tuple->N1_PtErrOverPt2VsProbQNoL1 =  dir.make<TH2F>("N1_PtErrOverPt2VsProbQNoL1", ";#sigma_{p_{T}}/p_{T}^{2};prob_{Q} (pixels);Tracks", 40, 0., 0.003, 20, 0.,1.);
 
   tuple->N1_ProbQNoL1 = dir.make<TH1F>("N1_ProbQNoL1", ";F_{i}^{pixels};Tracks / 0.01", 40, 0., 1.);
   tuple->N1_ProbQNoL1VsIas = dir.make<TH2F>("N1_ProbQNoL1VsIas", ";F_{i}^{pixels};G_{i}^{strips}", 100, 0.0, 1.0, 100, 0.0, 1.0);
@@ -637,13 +693,13 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   tuple->N1_MiniRelIsoAll_lowMiniRelIso = dir.make<TH1F>("N1_MiniRelIsoAll_lowMiniRelIso", ";MiniRelIsoAll;Tracks / 0.0001",  100, 0.0, 0.1);
   tuple->N1_MiniRelTkIso = dir.make<TH1F>("N1_MiniRelTkIso", ";MiniRelTkIso;Tracks / 0.01",  150, 0.0, 1.5);
   tuple->N1_MiniRelTkIso_lowMiniRelIso = dir.make<TH1F>("N1_MiniRelTkIso_lowMiniRelIso", ";MiniRelTkIso;Tracks / 0.001",  100, 0.0, 0.1);
-  tuple->N1_MiniTkIso = dir.make<TH1F>("N1_MiniTkIso", ";MiniTkIso (GeV);Tracks / 0.5",  100, 0.0, 50.);
+  tuple->N1_MiniTkIso = dir.make<TH1F>("N1_MiniTkIso", ";MiniTkIso [GeV];Tracks / 0.5",  100, 0.0, 50.);
   tuple->N1_MiniRelTkIso_lowMiniRelIso_PUA = dir.make<TH1F>("N1_MiniRelTkIso_lowMiniRelIso_PUA", ";MiniRelTkIso (PU < 15);Tracks / 0.01",  100, 0.0, 0.1);
   tuple->N1_MiniRelTkIso_lowMiniRelIso_PUB = dir.make<TH1F>("N1_MiniRelTkIso_lowMiniRelIso_PUB", ";MiniRelTkIso (15 =< PU < 30);Tracks / 0.01",  100, 0.0, 0.1);
   tuple->N1_MiniRelTkIso_lowMiniRelIso_PUC = dir.make<TH1F>("N1_MiniRelTkIso_lowMiniRelIso_PUC", ";MiniRelTkIso (PU >= 30);Tracks / 0.01",  100, 0.0, 0.1);
-  tuple->N1_MiniTkIso_PUA = dir.make<TH1F>("N1_MiniTkIso_PUA", ";MiniTkIso (PU < 15) (GeV);Tracks / 0.3",  150, 0.0, 50.);
-  tuple->N1_MiniTkIso_PUB = dir.make<TH1F>("N1_MiniTkIso_PUB", ";MiniTkIso (15 =< PU < 30) (GeV);Tracks / 0.3",  150, 0.0, 50.);
-  tuple->N1_MiniTkIso_PUC = dir.make<TH1F>("N1_MiniTkIso_PUC", ";MiniTkIso (PU >= 30) (GeV);Tracks / 0.3",  150, 0.0, 50.);
+  tuple->N1_MiniTkIso_PUA = dir.make<TH1F>("N1_MiniTkIso_PUA", ";MiniTkIso (PU < 15) [GeV];Tracks / 0.3",  150, 0.0, 50.);
+  tuple->N1_MiniTkIso_PUB = dir.make<TH1F>("N1_MiniTkIso_PUB", ";MiniTkIso (15 =< PU < 30) [GeV];Tracks / 0.3",  150, 0.0, 50.);
+  tuple->N1_MiniTkIso_PUC = dir.make<TH1F>("N1_MiniTkIso_PUC", ";MiniTkIso (PU >= 30) [GeV];Tracks / 0.3",  150, 0.0, 50.);
 
   tuple->N1_PfType = dir.make<TH1F>("N1_PfType", ";;Tracks / category", 9, -0.5, 8.5);
   tuple->N1_PfType->GetXaxis()->SetBinLabel(1,"AllTracks");
@@ -661,7 +717,7 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   tuple->Gen_Beta_Triggered = dir.make<TH1F>("Beta_Triggered", ";#beta (Triggered);Gen candidate / 0.05", 20, 0, 1);
 
   tuple->Gen_Binning = dir.make<TH1F>("Gen_Binning", ";Gen_Binning",1200,0.,1200.);
-  tuple->Gen_pT = dir.make<TH1F>("Gen_pT", ";Generator candidate p_{T} (GeV);Gen candidate / 100 GeV", 40, 0., PtHistoUpperBound);
+  tuple->Gen_pT = dir.make<TH1F>("Gen_pT", ";Generator candidate p_{T} [GeV];Gen candidate / 100 GeV", 40, 0., PtHistoUpperBound);
   tuple->Gen_Eta = dir.make<TH1F>("Gen_Eta", ";Generator candidate #eta;Gen candidate / 0.05", 52, -2.6, 2.6);
   tuple->Gen_Beta = dir.make<TH1F>("Gen_Beta", ";Generator candidate #beta;Gen candidate / 0.05", 20, 0., 1.);
   tuple->Gen_BetaGamma = dir.make<TH1F>("Gen_BetaGamma", ";Generator candidate #beta #gamma;Gen candidate/ 0.1",4500,0.,450.);
@@ -669,13 +725,19 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   
   if (doBefTrigPlots_) {
     tuple->BefTrig_ProbQNoL1 = dir.make<TH1F>("BefTrig_ProbQNoL1", ";F_{i}^{pixels};Tracks / 0.1", 10, 0., 1.);
-    tuple->BefTrig_Ih = dir.make<TH1F>("BefTrig_Ih", ";I_{h} (MeV/cm)", 200, 0, dEdxM_UpLim);
+    tuple->BefTrig_Ih = dir.make<TH1F>("BefTrig_Ih", ";I_{h} [MeV/cm]", 200, 0, dEdxM_UpLim);
     tuple->BefTrig_Ias = dir.make<TH1F>("BefTrig_Ias", ";G_{i}^{strips};Tracks / 0.05", 20, 0., 1.);
     tuple->BefTrig_TriggerMuon50VsPt_lowPt = dir.make<TH2F>("BefTrig_TriggerMuon50VsPt_lowPt", ";Muon50 triggered;Track p_{T};Tracks / bin",2,-.5,1.5,40,-0.05,200.05);
     tuple->BefTrig_TriggerMuonAllVsPt_lowPt = dir.make<TH2F>("BefTrig_TriggerMuonAllVsPt_lowPt", ";Muon50 triggered;Track p_{T};Tracks / bin",2,-.5,1.5,40,-0.05,200.05);
   }
   if (doBefPreSplots_) {
-    tuple->BefPreS_MatchedMuonPt25Pt = dir.make<TH1F>("BefPreS_MatchedMuonPt25Pt", ";p_{T}^{reco}_{#mu} (GeV) (p_{T} > 25);Events / 5 GeV", 40,-0.05,200.05);
+    tuple->BefPreS_TriggerMuonType = dir.make<TH1F>("BefPreS_TriggerMuonType", ";;Events / bin", 4,0.5,4.5);
+    tuple->BefPreS_TriggerMuonType->GetXaxis()->SetBinLabel(1,"Mu50 w/ TightID muon");
+    tuple->BefPreS_TriggerMuonType->GetXaxis()->SetBinLabel(2,"Bin 1 + OR IsoMu24");
+    tuple->BefPreS_TriggerMuonType->GetXaxis()->SetBinLabel(3,"Bin 2 + isPFIsoTight");
+    tuple->BefPreS_TriggerMuonType->GetXaxis()->SetBinLabel(4,"Bin 2 + isHighPtMuon");
+    
+    tuple->BefPreS_MatchedMuonPt25Pt = dir.make<TH1F>("BefPreS_MatchedMuonPt25Pt", ";p_{T}^{reco}_{#mu} [GeV] (p_{T} > 25);Events / 5 GeV", 40,-0.05,200.05);
     tuple->BefPreS_RelDiffMatchedMuonPtAndTrigObjPt = dir.make<TH1F>("BefPreS_RelDiffMatchedMuonPtAndTrigObjPt", ";( p_{T}^{reco}_{#mu} - p_{T}^{HLT}) / p_{T}^{HLT};Tracks / bin", 60,-1.0,2.0);
     tuple->BefPreS_RelDiffTrigObjPtAndMatchedMuonPt = dir.make<TH1F>("BefPreS_RelDiffTrigObjPtAndMatchedMuonPt", ";(p_{T}^{HLT} - p_{T}^{reco}_{#mu} ) /  p_{T}^{reco}_{#mu};Tracks / bin", 60,-1.0,2.0);
     tuple->BefPreS_RelDiffTrigObjPtAndMatchedMuonPtVsPt = dir.make<TH2F>("BefPreS_RelDiffTrigObjPtAndMatchedMuonPtVsPt", ";(p_{T}^{HLT} - p_{T}^{reco}_{#mu} ) /  p_{T}^{reco}_{#mu};p_{T}^{reco}_{#mu}", 60,-1.0,2.0,40, 0., PtHistoUpperBound);
@@ -698,6 +760,8 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->BefPreS_TriggerGenMatch->GetXaxis()->SetBinLabel(6,"Gen match: else");
     tuple->BefPreS_TriggerGenMatch->GetXaxis()->SetBinLabel(7,"Gen eta < 1.0");
     
+    tuple->BefPreS_TriggerGenBeta = dir.make<TH1F>("BefPreS_TriggerGenBeta", ";#beta^{HLT};Tracks / 0.05", 20, 0., 1.);
+    
     tuple->BefPreS_TriggerType = dir.make<TH1F>("BefPreS_TriggerType", ";;Events / category", 5, -0.5, 4.5);
     tuple->BefPreS_TriggerType->GetXaxis()->SetBinLabel(1,"Neither Muon nor MET triggered");
     tuple->BefPreS_TriggerType->GetXaxis()->SetBinLabel(2,"Muon triggered");
@@ -729,9 +793,9 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
 
     tuple->BefPreS_GenPtVsdRMinGen = dir.make<TH2F>("BefPreS_GenPtVsdRMinGen", ";GenPt;dRMinGen", 40, 0., PtHistoUpperBound, 100, 0., 1.);
     tuple->BefPreS_GendRMin = dir.make<TH1F>("BefPreS_GendRMin", ";dR_min;Gen candidate / 0.032",100,0.,3.2);
-    tuple->BefPreS_GenPtVsdRMinGenPostCut = dir.make<TH2F>("BefPreS_GenPtVsdRMinGenPostCut", ";GenPt (GeV);dRMinGen (after cut)", 40, 0., PtHistoUpperBound, 50, 0., 0.05);
+    tuple->BefPreS_GenPtVsdRMinGenPostCut = dir.make<TH2F>("BefPreS_GenPtVsdRMinGenPostCut", ";GenPt [GeV];dRMinGen (after cut)", 40, 0., PtHistoUpperBound, 50, 0., 0.05);
     tuple->BefPreS_GenPtVsGenMinPt = dir.make<TH2F>("BefPreS_GenPtVsGenMinPt", ";GenPtVsGenMinPt", 40, 0., PtHistoUpperBound, 100, 0, 1.);
-    tuple->BefPreS_GenPtVsRecoPt = dir.make<TH2F>("BefPreS_GenPtVsRecoPt", ";Generator p_{T} (GeV);Reco p_{T} (GeV)", 40, 0., PtHistoUpperBound, 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_GenPtVsRecoPt = dir.make<TH2F>("BefPreS_GenPtVsRecoPt", ";Generator p_{T} [GeV];Reco p_{T} [GeV]", 40, 0., PtHistoUpperBound, 40, 0., PtHistoUpperBound);
     
     tuple->BefPreS_RatioCleanAndAllStripsClu = dir.make<TH1F>("BefPreS_RatioCleanAndAllStripsClu",";Clean / all strips clu;Tracks / 0.05",20,-0.05,1.05);
     tuple->BefPreS_RatioCleanAndAllPixelClu = dir.make<TH1F>("BefPreS_RatioCleanAndAllPixelClu",";Clean / all pixel clu;Tracks / 0.05",20,-0.05,1.05);
@@ -747,16 +811,16 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->BefPreS_PfType->GetXaxis()->SetBinLabel(8,"isUndefined");
     tuple->BefPreS_PfType->GetXaxis()->SetBinLabel(9,"notPFtrack");
     
-    tuple->BefPreS_MassT = dir.make<TH1F>("BefPreS_MassT", ";m_{T} (GeV);Tracks / 5 GeV", 50, 0.0, 250.0);
-    tuple->BefPreS_MassT_highMassT = dir.make<TH1F>("BefPreS_MassT_highMassT", ";m_{T} (GeV);Tracks / 10 GeV", 250, 0.0, 2500.0);
+    tuple->BefPreS_MassT = dir.make<TH1F>("BefPreS_MassT", ";m_{T} [GeV];Tracks / 5 GeV", 50, 0.0, 250.0);
+    tuple->BefPreS_MassT_highMassT = dir.make<TH1F>("BefPreS_MassT_highMassT", ";m_{T} [GeV];Tracks / 10 GeV", 250, 0.0, 2500.0);
 
     tuple->BefPreS_MiniRelIsoAll = dir.make<TH1F>("BefPreS_MiniRelIsoAll", ";MiniRelIsoAll;Tracks / 0.01", 150, 0.0, 1.5);
     tuple->BefPreS_MiniRelIsoChg = dir.make<TH1F>("BefPreS_MiniRelIsoChg", ";MiniRelIsoChg;Tracks / 0.01",  150, 0.0, 1.5);
     tuple->BefPreS_MiniRelTkIso = dir.make<TH1F>("BefPreS_MiniRelTkIso", ";MiniRelTkIso;Tracks / 0.01",  150, 0.0, 1.5);
     tuple->BefPreS_MiniTkIso = dir.make<TH1F>("BefPreS_MiniTkIso", ";MiniTkIso;Tracks / 0.05",  100, 0.0, 50);
     
-    tuple->BefPreS_RecoPFMET = dir.make<TH1F>("BefPreS_RecoPFMET", ";RecoPFMET (GeV);Events / 20 GeV",  100, 0.0, 2000.0);
-    tuple->BefPreS_RecoPfHT = dir.make<TH1F>("BefPreS_RecoPfHT", ";RecoPFHT (GeV);Events / 20 GeV",  100, 0.0, 2000.0);
+    tuple->BefPreS_RecoPFMET = dir.make<TH1F>("BefPreS_RecoPFMET", ";RecoPFMET [GeV];Events / 20 GeV",  100, 0.0, 2000.0);
+    tuple->BefPreS_RecoPfHT = dir.make<TH1F>("BefPreS_RecoPfHT", ";RecoPFHT [GeV];Events / 20 GeV",  100, 0.0, 2000.0);
     tuple->BefPreS_RecoPfJetsNum = dir.make<TH1F>("BefPreS_RecoPfJetsNum", ";Number of PF jets;Tracks / 1",  16, -0.5, 15.5);
     tuple->BefPreS_CaloJetsNum = dir.make<TH1F>("BefPreS_CaloJetsNum", ";Number of calo jets;Tracks / 1",  16, -0.5, 15.5);
 
@@ -766,8 +830,8 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->BefPreS_Qual->GetXaxis()->SetBinLabel(1,"Not-HighPurity");
     tuple->BefPreS_Qual->GetXaxis()->SetBinLabel(2,"HighPurity");
 
-    tuple->BefPreS_TNOH_PUA = dir.make<TH1F>("BefPreS_TNOH_PUA", ";TNOH (PUA);Tracks / bin",  40, -0.5, 39.5);
-    tuple->BefPreS_TNOH_PUB = dir.make<TH1F>("BefPreS_TNOH_PUB", ";TNOH (PUB);Tracks / bin", 40, -0.5, 39.5);
+    tuple->BefPreS_TNOH_PUA = dir.make<TH1F>("BefPreS_TNOH_PUA", ";Number of hits (low PU);Tracks / 1",  40, -0.5, 39.5);
+    tuple->BefPreS_TNOH_PUB = dir.make<TH1F>("BefPreS_TNOH_PUB", ";Number of hits (mid PU);Tracks / 1", 40, -0.5, 39.5);
     tuple->BefPreS_TNOHFraction = dir.make<TH1F>("BefPreS_TNOHFraction", ";Number of valid hit fraction;Tracks / 0.05", 20, 0., 1.);
     tuple->BefPreS_TNOPH = dir.make<TH1F>("BefPreS_TNOPH", ";Number of pixel hits;Tracks / bin", 8, -0.5, 7.5);
     tuple->BefPreS_TNOHFractionTillLast = dir.make<TH1F>("BefPreS_TNOHFractionTillLast",";TNOHFractionTillLastTracks / bin", 50, 0., 1);
@@ -778,42 +842,42 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->BefPreS_TNOM_PUB = dir.make<TH1F>("BefPreS_TNOM_PUB", ";Number of measurements (high PU); Tracks / 1 ", 40, -0.5, 39.5);
     tuple->BefPreS_nDof = dir.make<TH1F>("BefPreS_nDof", ";Number of DF;Tracks / bin", 40, -0.5, 39.5);
     tuple->BefPreS_TOFError = dir.make<TH1F>("BefPreS_TOFError", ";TOFError;Tracks / bin", 25, 0, 0.25);
-    tuple->BefPreS_PtErrOverPt = dir.make<TH1F>("BefPreS_PtErrOverPt", ";#sigma_{p_{T}}/p_{T};Tracks / 0.05", 20, 0, 1);
+    tuple->BefPreS_PtErrOverPt = dir.make<TH1F>("BefPreS_PtErrOverPt", ";#sigma_{p_{T}}/p_{T};Tracks / 0.05", 40, 0., 2.);
     tuple->BefPreS_PtErrOverPt2 = dir.make<TH1F>("BefPreS_PtErrOverPt2", ";#sigma_{p_{T}}/p_{T}^{2};Tracks / 7.5e-5 ", 40, 0, 0.003);
-    tuple->BefPreS_Pt = dir.make<TH1F>("BefPreS_Pt", ";p_{T} (GeV);Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_Pt_lowPt = dir.make<TH1F>("BefPreS_Pt_lowPt", ";p_{T} (GeV);Tracks / 10 GeV", 50, 0., 500);
+    tuple->BefPreS_Pt = dir.make<TH1F>("BefPreS_Pt", ";p_{T} [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt_lowPt = dir.make<TH1F>("BefPreS_Pt_lowPt", ";p_{T} [GeV];Tracks / 10 GeV", 50, 0., 500);
     tuple->BefPreS_Ias = dir.make<TH1F>("BefPreS_Ias", ";G_{i}^{strips};Tracks / 0.1", 10, 0., 1.);
     tuple->BefPreS_IasForStatus91 = dir.make<TH1F>("BefPreS_IasForStatus91", ";G_{i}^{strips};Tracks / 0.1", 10, 0., 1.);
     tuple->BefPreS_IasForStatusNot91 = dir.make<TH1F>("BefPreS_IasForStatusNot91", ";G_{i}^{strips};Tracks / 0.1", 10, 0., 1.);
-    tuple->BefPreS_Ih = dir.make<TH1F>("BefPreS_Ih", ";I_{h} (MeV/cm)", 200, 0, dEdxM_UpLim);
+    tuple->BefPreS_Ih = dir.make<TH1F>("BefPreS_Ih", ";I_{h} [MeV/cm]", 200, 0, dEdxM_UpLim);
     tuple->BefPreS_MTOF = dir.make<TH1F>("BefPreS_MTOF", ";MTOF;Tracks / bin", 50, -2, 5);
-    tuple->BefPreS_TIsol = dir.make<TH1F>("BefPreS_TIsol", ";#Sigma_{R<0.3} p_{T} - p_{T,cand} (GeV);Tracks / 4 GeV", 25, 0, 100);
+    tuple->BefPreS_TIsol = dir.make<TH1F>("BefPreS_TIsol", ";#Sigma_{R<0.3} p_{T} - p_{T,cand} [GeV];Tracks / 4 GeV", 25, 0, 100);
     tuple->BefPreS_EoP = dir.make<TH1F>("BefPreS_EoP", ";PF calo energy / momentum; Tracks / 0.06", 25, 0, 1.5);
     tuple->BefPreS_ECalEoP = dir.make<TH1F>("BefPreS_ECalEoP", ";PF ECal energy / momentum; Tracks / 0.06", 25, 0, 1.5);
     tuple->BefPreS_HCalEoP = dir.make<TH1F>("BefPreS_HCalEoP", ";PF HCal energy / momentum; Tracks / 0.06", 25, 0, 1.5);
     tuple->BefPreS_SumpTOverpT = dir.make<TH1F>("BefPreS_SumpTOverpT", ";#Sigma p_{T} / p_{T};Tracks / bin", 80, 0.0, 2.0);
     tuple->BefPreS_LastHitDXY = dir.make<TH1F>("BefPreS_LastHitDXY", ";LastHitDXY;Tracks / bin", 75, 0, 150);
     tuple->BefPreS_LastHitD3D = dir.make<TH1F>("BefPreS_LastHitD3D", ";LastHitD3D;Tracks / bin", 175, 0, 350);
-    tuple->BefPreS_P = dir.make<TH1F>("BefPreS_P", ";P;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_Pt = dir.make<TH1F>("BefPreS_Pt", ";Pt;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_Pt_PUA = dir.make<TH1F>("BefPreS_Pt_PUA", ";p_{T} (PUA);Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_Pt_PUB = dir.make<TH1F>("BefPreS_Pt_PUB", ";p_{T} (PUB);Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_P = dir.make<TH1F>("BefPreS_P", ";Momentum [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt = dir.make<TH1F>("BefPreS_Pt", ";p_{T} [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt_PUA = dir.make<TH1F>("BefPreS_Pt_PUA", ";p_{T} (PUA) [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt_PUB = dir.make<TH1F>("BefPreS_Pt_PUB", ";p_{T} (PUB) [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
     tuple->BefPreS_Pt_Cosmic = dir.make<TH1F>("BefPreS_Pt_Cosmic", ";p_{T} (Cosmic);Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_Pt_DT = dir.make<TH1F>("BefPreS_Pt_DT", ";Pt_DT;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_Pt_CSC = dir.make<TH1F>("BefPreS_Pt_CSC", ";Pt_CSC;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt_DT = dir.make<TH1F>("BefPreS_Pt_DT", ";p_{T} (DT) [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt_CSC = dir.make<TH1F>("BefPreS_Pt_CSC", ";p_{T} (CSC) [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
     tuple->BefPreS_Ias = dir.make<TH1F>("BefPreS_Ias", ";G_{i}^{strips};Tracks / bin", 100, 0, dEdxS_UpLim);
     tuple->BefPreS_Ias_PUA = dir.make<TH1F>("BefPreS_Ias_PUA", ";G_{i}^{strips} (PUA);Tracks / bin", 100, 0, dEdxS_UpLim);
     tuple->BefPreS_Ias_PUB = dir.make<TH1F>("BefPreS_Ias_PUB", ";G_{i}^{strips} (PUB);Tracks / bin", 100, 0, dEdxS_UpLim);
-    tuple->BefPreS_Ias_Cosmic = dir.make<TH1F>("BefPreS_Ias_Cosmic", ";G_{i}^{strips}_Cosmic;Tracks / bin", 100, 0, dEdxS_UpLim);
-    tuple->BefPreS_Ih_Cosmic = dir.make<TH1F>("BefPreS_Ih_Cosmic", ";I_{h} (Cosmic);Tracks / bin", 200, 0, dEdxM_UpLim);
-    tuple->BefPreS_Ih = dir.make<TH1F>("BefPreS_Ih", ";I_{h} (MeV/cm);Tracks / bin", 200, 0, dEdxM_UpLim);
-    tuple->BefPreS_Ih_PUA = dir.make<TH1F>("BefPreS_Ih_PUA", ";I_{h} (PUA);Tracks / bin", 200, 0, dEdxM_UpLim);
-    tuple->BefPreS_Ih_PUB = dir.make<TH1F>("BefPreS_Ih_PUB", ";I_{h} (PUB);Tracks / bin", 200, 0, dEdxM_UpLim);
+    tuple->BefPreS_Ias_Cosmic = dir.make<TH1F>("BefPreS_Ias_Cosmic", ";G_{i}^{strips} (Cosmic);Tracks / bin", 100, 0, dEdxS_UpLim);
+    tuple->BefPreS_Ih_Cosmic = dir.make<TH1F>("BefPreS_Ih_Cosmic", ";I_{h} (Cosmic) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+    tuple->BefPreS_Ih = dir.make<TH1F>("BefPreS_Ih", ";I_{h} [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+    tuple->BefPreS_Ih_PUA = dir.make<TH1F>("BefPreS_Ih_PUA", ";I_{h} (PUA) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+    tuple->BefPreS_Ih_PUB = dir.make<TH1F>("BefPreS_Ih_PUB", ";I_{h} (PUB) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
     tuple->BefPreS_TOF = dir.make<TH1F>("BefPreS_TOF", ";TOF;Tracks / 0.05", 120, -1, 5);
-    tuple->BefPreS_TOF_PUA = dir.make<TH1F>("BefPreS_TOF_PUA", ";TOF_PUA;Tracks / 0.05", 120, -1, 5);
-    tuple->BefPreS_TOF_PUB = dir.make<TH1F>("BefPreS_TOF_PUB", ";TOF_PUB;Tracks / 0.05", 120, -1, 5);
-    tuple->BefPreS_TOF_DT = dir.make<TH1F>("BefPreS_TOF_DT", ";TOF_DT;Tracks / 0.05", 120, -1, 5);
-    tuple->BefPreS_TOF_CSC = dir.make<TH1F>("BefPreS_TOF_CSC", ";TOF_CSC;Tracks / 0.05", 120, -1, 5);
+    tuple->BefPreS_TOF_PUA = dir.make<TH1F>("BefPreS_TOF_PUA", ";TOF (PUA);Tracks / 0.05", 120, -1, 5);
+    tuple->BefPreS_TOF_PUB = dir.make<TH1F>("BefPreS_TOF_PUB", ";TOF (PUB);Tracks / 0.05", 120, -1, 5);
+    tuple->BefPreS_TOF_DT = dir.make<TH1F>("BefPreS_TOF_DT", ";TOF (DT);Tracks / 0.05", 120, -1, 5);
+    tuple->BefPreS_TOF_CSC = dir.make<TH1F>("BefPreS_TOF_CSC", ";TOF (CSC);Tracks / 0.05", 120, -1, 5);
     tuple->BefPreS_dR_NVTrack = dir.make<TH1F>("BefPreS_dR_NVTrack", ";dR_NVTrack;Tracks / 0.025", 40, 0, 1);
     tuple->BefPreS_MatchedStations = dir.make<TH1F>("BefPreS_MatchedStations", ";MatchedStations;Tracks / bin", 8, -0.5, 7.5);
     tuple->BefPreS_InnerInvPtDiff = dir.make<TH1F>("BefPreS_InnerInvPtDiff", ";InnerInvPtDiff;Tracks / bin", 120, -4, 4);
@@ -828,8 +892,8 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->BefPreS_PV_NoEventWeight = dir.make<TH1F>("BefPreS_PV_NoEventWeight", ";N_{PV} (NoEventWeight);Tracks / 1", 60, -0.5, 59.5);
     tuple->BefPreS_NOMoNOH = dir.make<TH1F>("BefPreS_NOMoNOH", ";Num of measurment / num of hits;Tracks / bin",10,0.,1.0);
     tuple->BefPreS_NOMoNOHvsPV = dir.make<TProfile>("BefPreS_NOMoNOHvsPV", ";NOMoNOHvsPV;Tracks / bin", 60, 0, 60);
-    tuple->BefPreS_Dz = dir.make<TH1F>("BefPreS_Dz",";d_{z} (cm);Tracks / 0.003 cm", 200, -0.3, 0.3);
-    tuple->BefPreS_Dxy = dir.make<TH1F>("BefPreS_Dxy","d_{xy} (cm);Tracks / 0.001 cm", 200, -0.1, 0.1);
+    tuple->BefPreS_Dz = dir.make<TH1F>("BefPreS_Dz",";d_{z} [cm];Tracks / 0.003 cm", 200, -0.3, 0.3);
+    tuple->BefPreS_Dxy = dir.make<TH1F>("BefPreS_Dxy",";d_{xy} [cm];Tracks / 0.001 cm", 200, -0.1, 0.1);
 
     tuple->BefPreS_SegSep = dir.make<TH1F>("BefPreS_SegSep", ";SegSep;Tracks / bin", 50, 0., 2.5);
     tuple->BefPreS_SegMinEtaSep = dir.make<TH1F>("BefPreS_SegMinEtaSep", ";SegMinEtaSep;Tracks / bin", 50, -1., 1.);
@@ -842,47 +906,47 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->BefPreS_Dz_Cosmic = dir.make<TH1F>("BefPreS_Dz_Cosmic", ";Dz_Cosmic;Tracks / bin", 150, -IPbound, IPbound);
     tuple->BefPreS_Dz_CSC = dir.make<TH1F>("BefPreS_Dz_CSC", ";Dz_CSC;Tracks / bin", 150, -IPbound, IPbound);
     tuple->BefPreS_Dz_DT = dir.make<TH1F>("BefPreS_Dz_DT", ";Dz_DT;Tracks / bin", 150, -IPbound, IPbound);
-    tuple->BefPreS_Pt_FailDz = dir.make<TH1F>("BefPreS_Pt_FailDz", ";Pt_FailDz;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_Pt_FailDz_DT = dir.make<TH1F>("BefPreS_Pt_FailDz_DT", ";Pt_FailDz_DT;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_Pt_FailDz_CSC = dir.make<TH1F>("BefPreS_Pt_FailDz_CSC", ";Pt_FailDz_CSC;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_TOF_FailDz = dir.make<TH1F>("BefPreS_TOF_FailDz", ";TOF_FailDz;Tracks / 0.05", 120, -1, 5);
-    tuple->BefPreS_TOF_FailDz_DT = dir.make<TH1F>("BefPreS_TOF_FailDz_DT", ";TOF_FailDz_DT;Tracks / 0.05", 120, -1, 5);
-    tuple->BefPreS_TOF_FailDz_CSC = dir.make<TH1F>("BefPreS_TOF_FailDz_CSC", ";TOF_FailDz_CSC;Tracks / 0.05", 120, -1, 5);
+    tuple->BefPreS_Pt_FailDz = dir.make<TH1F>("BefPreS_Pt_FailDz", ";p_{T} (FailDz;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt_FailDz_DT = dir.make<TH1F>("BefPreS_Pt_FailDz_DT", ";p_{T} (FailDz_DT;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt_FailDz_CSC = dir.make<TH1F>("BefPreS_Pt_FailDz_CSC", ";p_{T} (FailDz_CSC;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_TOF_FailDz = dir.make<TH1F>("BefPreS_TOF_FailDz", ";TOF (FailDz;Tracks / 0.05", 120, -1, 5);
+    tuple->BefPreS_TOF_FailDz_DT = dir.make<TH1F>("BefPreS_TOF_FailDz_DT", ";TOF (FailDz_DT;Tracks / 0.05", 120, -1, 5);
+    tuple->BefPreS_TOF_FailDz_CSC = dir.make<TH1F>("BefPreS_TOF_FailDz_CSC", ";TOF (FailDz_CSC;Tracks / 0.05", 120, -1, 5);
     tuple->BefPreS_GenPtVsRecoPt = dir.make<TH2F>("BefPreS_GenPtVsRecoPt", ";GenPt;RecoPt;Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 40, 0., PtHistoUpperBound);
     tuple->BefPreS_PtErrOverPtVsPt = dir.make<TH2F>("BefPreS_PtErrOverPtVsPt",  ";#sigma_{p_{T}}/p_{T};p_{T};Tracks / bin",  40, 0., 1., 40, 0., 4000);
     tuple->BefPreS_PtErrOverPtVsPtErrOverPt2 = dir.make<TH2F>("BefPreS_PtErrOverPtVsPtErrOverPt2",  ";#sigma_{p_{T}}/p_{T};p_{T}^{2};Tracks / bin",  40, 0., 1., 40, 0., 0.003);
 
     tuple->BefPreS_ProbQ = dir.make<TH1F>("BefPreS_ProbQ", ";F_{i}^{pixels};Tracks / bin", 100, 0, 1);
-    tuple->BefPreS_ProbXY = dir.make<TH1F>("BefPreS_ProbXY", ";Prob_{XY,pixelAV} (pixels);Tracks / bin", 100, 0, 1);
+    tuple->BefPreS_ProbXY = dir.make<TH1F>("BefPreS_ProbXY", ";Prob_{XY} (pixels);Tracks / bin", 100, 0, 1);
     tuple->BefPreS_ProbQNoL1 = dir.make<TH1F>("BefPreS_ProbQNoL1", ";F_{i}^{pixels};Tracks / bin", 100, 0, 1);
-    tuple->BefPreS_ProbXYNoL1 = dir.make<TH1F>("BefPreS_ProbXYNoL1", ";Prob_{XY,pixelAV} (pixels, no-L1);Tracks / bin", 100, 0, 1);
-    tuple->BefPreS_MassErr = dir.make<TH1F>("BefPreS_MassErr", ";MassErr;Tracks / bin", 50, 0., 10.);
+    tuple->BefPreS_ProbXYNoL1 = dir.make<TH1F>("BefPreS_ProbXYNoL1", ";Prob_{XY} (pixels, no-L1);Tracks / bin", 100, 0, 1);
+    tuple->BefPreS_MassErr = dir.make<TH1F>("BefPreS_MassErr", ";MassErr/Mass;Tracks / bin", 50, 0., 10.);
     tuple->BefPreS_ProbQVsIas = dir.make<TH2F>("BefPreS_ProbQVsIas", ";F_{i}^{pixels};G_{i}^{strips};Tracks / bin", 100, 0.0, 1.0, 100, 0.0, 1.0);
 
     tuple->BefPreS_EtaVsIas = dir.make<TH2F>("BefPreS_EtaVsIas", ";#eta;G_{i}^{strips};Tracks / bin", 50, -3, 3, 10, 0., 1.);
-    tuple->BefPreS_EtaVsIh = dir.make<TH2F>("BefPreS_EtaVsIh", ";#eta;I_{h} (MeV/cm);Tracks / bin", 50, -3, 3, 100, 0, dEdxM_UpLim);
-    tuple->BefPreS_EtaVsP = dir.make<TH2F>("BefPreS_EtaVsP", ";#eta;P (GeV);Tracks / bin", 50, -3, 3, 40, 0., PtHistoUpperBound);
-    tuple->BefPreS_EtaVsPt = dir.make<TH2F>("BefPreS_EtaVsPt", ";#eta;p_{T} (GeV);Tracks / bin", 50, -3, 3, 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_EtaVsIh = dir.make<TH2F>("BefPreS_EtaVsIh", ";#eta;I_{h} [MeV/cm];Tracks / bin", 50, -3, 3, 100, 0, dEdxM_UpLim);
+    tuple->BefPreS_EtaVsP = dir.make<TH2F>("BefPreS_EtaVsP", ";#eta;P [GeV];Tracks / bin", 50, -3, 3, 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_EtaVsPt = dir.make<TH2F>("BefPreS_EtaVsPt", ";#eta;p_{T} [GeV];Tracks / bin", 50, -3, 3, 40, 0., PtHistoUpperBound);
     tuple->BefPreS_EtaVsTOF = dir.make<TH2F>("BefPreS_EtaVsTOF", ";#eta;TOF;Tracks / bin", 50, -3, 3, 50, 0., 3);
     tuple->BefPreS_EtaVsNBH = dir.make<TH2F>("BefPreS_EtaVsNBH", ";#eta;Number of bad hits;Tracks / bin", 60, -3., 3., 24, 0., 24.);
-    tuple->BefPreS_EtaVsDz = dir.make<TH2F>("BefPreS_EtaVsDz", ";#eta;D_{z} (cm);Tracks / bin", 50, -3, 3, 50, -IPbound, IPbound);
+    tuple->BefPreS_EtaVsDz = dir.make<TH2F>("BefPreS_EtaVsDz", ";#eta;D_{z} [cm];Tracks / bin", 50, -3, 3, 50, -IPbound, IPbound);
     tuple->BefPreS_PVsIas = dir.make<TH2F>("BefPreS_PVsIas", ";P;G_{i}^{strips};Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 100, 0, dEdxS_UpLim);
-    tuple->BefPreS_IhVsIas = dir.make<TH2F>("BefPreS_IhVsIas", ";I_{h} (MeV/cm);G_{i}^{strips};Tracks / bin", 50, 0., dEdxM_UpLim, 20, 0, dEdxS_UpLim);
-    tuple->BefPreS_PVsIh = dir.make<TH2F>("BefPreS_PVsIh", ";P;I_{h} (MeV/cm);Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 50, 0., dEdxM_UpLim);
-    tuple->BefPreS_PtVsIas = dir.make<TH2F>("BefPreS_PtVsIas", ";p_{T} (GeV);G_{i}^{strips};Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 10, 0., 1.);
-    tuple->BefPreS_PtVsIh = dir.make<TH2F>("BefPreS_PtVsIh", ";p_{T} (GeV);I_{h} (MeV/cm);Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 100, 0, dEdxM_UpLim);
+    tuple->BefPreS_IhVsIas = dir.make<TH2F>("BefPreS_IhVsIas", ";I_{h} [MeV/cm];G_{i}^{strips};Tracks / bin", 50, 0., dEdxM_UpLim, 20, 0, dEdxS_UpLim);
+    tuple->BefPreS_PVsIh = dir.make<TH2F>("BefPreS_PVsIh", ";P;I_{h} [MeV/cm];Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 50, 0., dEdxM_UpLim);
+    tuple->BefPreS_PtVsIas = dir.make<TH2F>("BefPreS_PtVsIas", ";p_{T} [GeV];G_{i}^{strips};Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 10, 0., 1.);
+    tuple->BefPreS_PtVsIh = dir.make<TH2F>("BefPreS_PtVsIh", ";p_{T} [GeV];I_{h} [MeV/cm];Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 100, 0, dEdxM_UpLim);
     tuple->BefPreS_PtVsTOF = dir.make<TH2F>("BefPreS_PtVsTOF", ";Pt;TOF;Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 50, 0., 5);
       //tuple->BefPreS_TOFIs = dir.make<TH2F>("BefPreS_TOFIs", ";TOFIs", 100, 1, 5, 100, 0, dEdxS_UpLim);
     tuple->BefPreS_TOFVsIs = dir.make<TH2F>("BefPreS_TOFVsIs", ";TOF;G_{i}^{strips};Tracks / bin", 50, 0., 5, 10, 0., 1.);
       //tuple->BefPreS_TOFIm = dir.make<TH2F>("BefPreS_TOFIh", ";TOFIh", 100, 1, 5, 100, 0, dEdxM_UpLim);
-    tuple->BefPreS_TOFVsIh = dir.make<TH2F>("BefPreS_TOFVsIh", ";TOF;I_{h} (MeV/cm);Tracks / bin", 50, 0., 5, 100, 0, dEdxM_UpLim);
+    tuple->BefPreS_TOFVsIh = dir.make<TH2F>("BefPreS_TOFVsIh", ";TOF;I_{h} [MeV/cm];Tracks / bin", 50, 0., 5, 100, 0, dEdxM_UpLim);
 
     tuple->BefPreS_CluProbHasFilled = dir.make<TH1F>("BefPreS_CluProbHasFilled", ";;Clusters / category", 2, -0.5, 1.5);
     tuple->BefPreS_CluProbHasFilled->GetXaxis()->SetBinLabel(1,"ProbHasFailed");
     tuple->BefPreS_CluProbHasFilled->GetXaxis()->SetBinLabel(2,"ProbHasFilled");
 
     tuple->BefPreS_CluProbQVsPixelLayer = dir.make<TH2F>("BefPreS_CluProbQVsPixelLayer", ";Cluster Prob_{Q} (pixels);Layer",20,0.,1.,4,0.,4.);
-    tuple->BefPreS_CluProbXYVsPixelLayer = dir.make<TH2F>("BefPreS_CluProbXYVsPixelLayer", ";Cluster Prob_{XZ,pixelAV} (pixels);Layer",100,0.,1.,4,0.,4.);
+    tuple->BefPreS_CluProbXYVsPixelLayer = dir.make<TH2F>("BefPreS_CluProbXYVsPixelLayer", ";Cluster Prob_{XZ} (pixels);Layer",100,0.,1.,4,0.,4.);
     tuple->BefPreS_CluNormChargeVsPixelLayer = dir.make<TH2F>("BefPreS_CluNormChargeVsPixelLayer", ";CluNormCharge (e/um);Layer",100,0.,600.,4,0.,4.);
     tuple->BefPreS_CluNormChargeVsPixelLayer_lowBetaGamma = dir.make<TH2F>("BefPreS_CluNormChargeVsPixelLayer_lowBetaGamma", ";CluNormCharge (e/um);Layer",100,0.,600.,4,0.,4.);
     tuple->BefPreS_CluSizeVsPixelLayer = dir.make<TH2F>("BefPreS_CluSizeVsPixelLayer", ";CluSize;Layer",10,0.,10.,4,0.,4.);
@@ -899,14 +963,14 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->BefPreS_CluNormChargeVsStripLayer_higherBetaGamma = dir.make<TH2F>("BefPreS_CluNormChargeVsStripLayer_higherBetaGamma", ";CluNormCharge;Layer",600,0.,600.,24,-0.5,23.5);
     tuple->BefPreS_CluNormChargeVsStripLayer_higherBetaGamma_Stat91 = dir.make<TH2F>("BefPreS_CluNormChargeVsStripLayer_higherBetaGamma_Stat91", ";CluNormCharge;Layer",600,0.,600.,24,-0.5,23.5);
     tuple->BefPreS_CluNormChargeVsStripLayer_higherBetaGamma_StatNot91 = dir.make<TH2F>("BefPreS_CluNormChargeVsStripLayer_higherBetaGamma_StatNot91", ";CluNormCharge;Layer",600,0.,600.,24,-0.5,23.5);
-    tuple->BefPreS_CluNormChargeVsStripLayer_higherBetaGamma_StatHigherThan2 = dir.make<TH2F>("BefPreS_CluNormChargeVsStripLayer_higherBetaGamma_StatHigherThan2", ";CluNormCharge;Layer",600,0.,600.,20,0.,20.);
+    tuple->BefPreS_CluNormChargeVsStripLayer_higherBetaGamma_StatHigherThan2 = dir.make<TH2F>("BefPreS_CluNormChargeVsStripLayer_higherBetaGamma_StatHigherThan2", ";CluNormCharge;Layer",600,0.,600.,24,-0.5,23.5);
 
     tuple->BefPreS_dRMinPfJet = dir.make<TH1F>("BefPreS_dRMinPfJet", ";dRMinPfJet;Tracks / bin",100,0.,5.0);
     tuple->BefPreS_dRMinPfJetVsIas =  dir.make<TH2F>("BefPreS_dRMinPfJetVsIas", ";dRMinPfJet;G_{i}^{strips};Tracks / bin",100,0.,5.0,10,0.,1.);
     tuple->BefPreS_dRMinCaloJet= dir.make<TH1F>("BefPreS_dRMinCaloJet", ";dRMinCaloJet;Tracks / bin",100,0.,5.0);
     tuple->BefPreS_dRMinCaloJetVsIas =  dir.make<TH2F>("BefPreS_dRMinCaloJetVsIas", ";dRMinCaloJet;G_{i}^{strips};Tracks / bin",100,0.,5.0,10,0.,1.);
     tuple->BefPreS_genGammaBetaVsProbXYNoL1 =  dir.make<TH2F>("BefPreS_genGammaBetaVsProbXYNoL1", ";#gamma #beta;ProbXYNoL1",10,0.,1.3,20,0.,1.);
-    tuple->BefPreS_dRVsPtPfJet = dir.make<TH2F>("BefPreS_dRVsPtPfJet", ";dR(cand,jet);p_{T} (GeV)",100,0.,1.5,100,0.,1000.);
+    tuple->BefPreS_dRVsPtPfJet = dir.make<TH2F>("BefPreS_dRVsPtPfJet", ";dR(cand,jet);p_{T} [GeV]",100,0.,1.5,100,0.,1000.);
     tuple->BefPreS_dRVsdPtPfCaloJet = dir.make<TH2F>("BefPreS_dRVsdPtPfCaloJet", ";dRmin;dPtPfCaloJet",100,0.,1.5,20,0.,100.);
     tuple->BefPreS_GenBeta = dir.make<TH1F>("BefPreS_GenBeta", ";#beta;Tracks / bin", 20, 0., 1.);
     tuple->BefPreS_NumCandidates = dir.make<TH1F>("BefPreS_NumCandidates", ";Number of HSCP candidates;Events / bin", 11, -0.5, 10.5);
@@ -921,6 +985,15 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->BefPreS_TriggerMuon50VsBeta_EtaC = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaC", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaUp = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaC_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaDown = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaC_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaD = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaD", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaD_BetaUp = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaD_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaD_BetaDown = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaD_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaE = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaE", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaE_BetaUp = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaE_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaE_BetaDown = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaE_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaF = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaF", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaF_BetaUp = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaF_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->BefPreS_TriggerMuon50VsBeta_EtaF_BetaDown = dir.make<TH2F>("BefPreS_TriggerMuon50VsBeta_EtaF_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     
     tuple->BefPreS_TriggerMuonAllVsBeta = dir.make<TH2F>("BefPreS_TriggerMuonAllVsBeta", ";MuonAll triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->BefPreS_TriggerMuonAllVsBeta_EtaA = dir.make<TH2F>("BefPreS_TriggerMuonAllVsBeta_EtaA", ";MuonAll triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
@@ -935,15 +1008,20 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     
     tuple->BefPreS_TriggerMuon50VsPt = dir.make<TH2F>("BefPreS_TriggerMuon50VsPt", ";Muon50 triggered;Track p_{T};Tracks / bin",2,-.5,1.5,50,-0.05,1000.05);
     tuple->BefPreS_TriggerMuonAllVsPt = dir.make<TH2F>("BefPreS_TriggerMuonAllVsPt", ";MuonAll triggered;Track p_{T};Tracks / bin",2,-.5,1.5,50,-0.05,1000.05);
-    
+
     tuple->BefPreS_TriggerMETallVsBeta = dir.make<TH2F>("BefPreS_TriggerMETallVsBeta", ";OR of MET triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
-    tuple->BefPreS_TriggerMETallVsMet = dir.make<TH2F>("BefPreS_TriggerMETallVsMet", ";OR of MET triggered;MET (GeV);Tracks / bin",2,-.5,1.5,50,-0.05,2000.05);
-    tuple->BefPreS_TriggerMETallVsHT = dir.make<TH2F>("BefPreS_TriggerMETallVsHT", ";OR of MET triggered;H_{T} (GeV);Tracks / bin",2,-.5,1.5,50,-0.05,2000.05);
+    tuple->BefPreS_TriggerMETallVsMet = dir.make<TH2F>("BefPreS_TriggerMETallVsMet", ";OR of MET triggered;MET [GeV];Tracks / bin",2,-.5,1.5,50,-0.05,2000.05);
+    tuple->BefPreS_TriggerMETallVsHT = dir.make<TH2F>("BefPreS_TriggerMETallVsHT", ";OR of MET triggered;H_{T} [GeV];Tracks / bin",2,-.5,1.5,50,-0.05,2000.05);
     tuple->BefPreS_TriggerMETallVsMetOverHt = dir.make<TH2F>("BefPreS_TriggerMETallVsMetOverHt", ";OR of MET triggered;MET / H_{T};Tracks / bin",2,-.5,1.5,30,-0.05,2.95);
-    tuple->BefPreS_TriggerMETallVsMetVsHT = dir.make<TH3F>("BefPreS_TriggerMETallVsMetVsHT", ";OR of MET triggered;MET (GeV);H_{T} (GeV);Tracks / bin",2,-.5,1.5,50,-0.05,2000.05,50,-0.05,2000.05);
-  }
+    tuple->BefPreS_TriggerMETallVsMetVsHT = dir.make<TH3F>("BefPreS_TriggerMETallVsMetVsHT", ";OR of MET triggered;MET [GeV];H_{T} [GeV];Tracks / bin",2,-.5,1.5,50,-0.05,2000.05,50,-0.05,2000.05);
+    tuple->BefPreS_TriggerTimingPass = dir.make<TH1F>("BefPreS_TriggerTimingPass", ";#Delta t_{PV,DT L2} [ns] (trigger passed);Tracks / bin", 100, 0.0, 100);
+    tuple->BefPreS_TriggerTimingReject = dir.make<TH1F>("BefPreS_TriggerTimingReject", ";#Delta t_{PV,DT L2} [ns] (trigger rejected);Tracks / bin", 100, 0.0, 100);
+    
+    tuple->BefPreS_TriggerEtaReject = dir.make<TH1F>("BefPreS_TriggerEtaReject", ";Trigger object #eta (trigger passed);Tracks / bin", 25, 0.0, 2.5);
+    tuple->BefPreS_TriggerEtaPass = dir.make<TH1F>("BefPreS_TriggerEtaPass", ";Trigger object #eta (trigger passed);Tracks / bin", 25, 0.0, 2.5);
+  } // end condition on bef pre plots
   
-  if (createGiTemplates_) {
+  if (createGiTemplates_ && sampleType_ < 2) {
     tuple->Calibration_GiTemplate =  dir.make<TH3F>("Calibration_GiTemplate", ";Module geometry;Path lenght (mm);Path normalised charge (ke / cm)", 15, 1.0, 16.0, 42, 0.2, 1.6, 500, 0.0, 5000.0);
     tuple->Calibration_GiTemplate->GetXaxis()->SetBinLabel(1,"IB1");
     tuple->Calibration_GiTemplate->GetXaxis()->SetBinLabel(2,"IB2");
@@ -1089,18 +1167,18 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_PfType->GetXaxis()->SetBinLabel(8,"isUndefined");
     tuple->PostPreS_PfType->GetXaxis()->SetBinLabel(9,"notPFtrack");
 
-    tuple->PostPreS_MassT = dir.make<TH1F>("PostPreS_MassT", ";m_{T} (GeV);Tracks / 5 GeV", 50, 0.0, 250.0);
-    tuple->PostPreS_MassT_highMassT = dir.make<TH1F>("PostPreS_MassT_highMassT", ";m_{T} (GeV);Tracks / 10 GeV", 250, 0.0, 2500.0);
-    tuple->PostPreS_MassTVsIas = dir.make<TH2F>("PostPreS_MassTVsIas", ";m_{T} (GeV);G_{i}^{strips}",50, 0.0, 250.0, 20, 0., 1.);
+    tuple->PostPreS_MassT = dir.make<TH1F>("PostPreS_MassT", ";m_{T} [GeV];Tracks / 5 GeV", 50, 0.0, 250.0);
+    tuple->PostPreS_MassT_highMassT = dir.make<TH1F>("PostPreS_MassT_highMassT", ";m_{T} [GeV];Tracks / 10 GeV", 250, 0.0, 2500.0);
+    tuple->PostPreS_MassTVsIas = dir.make<TH2F>("PostPreS_MassTVsIas", ";m_{T} [GeV];G_{i}^{strips}",50, 0.0, 250.0, 20, 0., 1.);
 
     tuple->PostPreS_MiniRelIsoAll = dir.make<TH1F>("PostPreS_MiniRelIsoAll", ";MiniRelIsoAll;Tracks / 0.001", 100, 0.0, 0.1);
     tuple->PostPreS_MiniRelIsoAllVsIas =  dir.make<TH2F>("PostPreS_MiniRelIsoAllVsIas",";MiniRelIsoAll;G_{i}^{strips}", 100, 0.0, 0.1, 10, 0.,1.);
     tuple->PostPreS_MiniRelIsoChg = dir.make<TH1F>("PostPreS_MiniRelIsoChg", ";MiniRelIsoChg;Tracks / 0.01",  150, 0.0, 1.5);
-    tuple->PostPreS_MiniTkIso = dir.make<TH1F>("PostPreS_MiniTkIso", ";MiniTkIso (GeV);Tracks / 0.05", 100, 0.0, 50.);
+    tuple->PostPreS_MiniTkIso = dir.make<TH1F>("PostPreS_MiniTkIso", ";MiniTkIso [GeV];Tracks / 0.05", 100, 0.0, 50.);
     tuple->PostPreS_MiniRelTkIso = dir.make<TH1F>("PostPreS_MiniRelTkIso", ";MiniRelTkIso;Tracks / 0.01", 150, 0.0, 1.5);
 
-    tuple->PostPreS_RecoPFMET = dir.make<TH1F>("PostPreS_RecoPFMET", ";RecoPFMET (GeV);Tracks / 10 GeV",  200, 0.0, 2000.0);
-    tuple->PostPreS_RecoPFHT = dir.make<TH1F>("PostPreS_RecoPFHT", ";RecoPFHT (GeV);Tracks / 10 GeV",  200, 0.0, 2000.0);
+    tuple->PostPreS_RecoPFMET = dir.make<TH1F>("PostPreS_RecoPFMET", ";RecoPFMET [GeV];Tracks / 10 GeV",  200, 0.0, 2000.0);
+    tuple->PostPreS_RecoPFHT = dir.make<TH1F>("PostPreS_RecoPFHT", ";RecoPFHT [GeV];Tracks / 10 GeV",  200, 0.0, 2000.0);
     tuple->PostPreS_CaloJetsNum = dir.make<TH1F>("PostPreS_CaloJetsNum", ";Number of calo jets;Tracks / 1",  16, -0.5, 15.5);
     tuple->PostPreS_Chi2oNdof = dir.make<TH1F>("PostPreS_Chi2oNdof", ";#chi^{2}/N_{dof};Tracks / 1", 20, 0, 20);
     tuple->PostPreS_Chi2oNdofVsIas = dir.make<TH2F>("PostPreS_Chi2oNdofVsIas", ";#chi^{2}/Ndof;G_{i}^{strips}",20, 0, 20,10,0.,1.);
@@ -1131,32 +1209,33 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_TNOM_PUC = dir.make<TH1F>("PostPreS_TNOM_PUB",  ";Number of measurement (high PU);Tracks / 1",  40, -0.5, 39.5);
     tuple->PostPreS_nDof = dir.make<TH1F>("PostPreS_nDof", ";nDof;Tracks / 1",  40, -0.5, 39.5);
     tuple->PostPreS_TOFError = dir.make<TH1F>("PostPreS_TOFError", ";TOFError;Tracks / 0.01", 25, 0, 0.25);
-    tuple->PostPreS_PtErrOverPt = dir.make<TH1F>("PostPreS_PtErrOverPt", ";#sigma_{p_{T}}/p_{T};Tracks / 0.05", 20, 0, 1);
+    tuple->PostPreS_PtErrOverPt = dir.make<TH1F>("PostPreS_PtErrOverPt", ";#sigma_{p_{T}}/p_{T};Tracks / 0.05", 40, 0., 2.);
     tuple->PostPreS_PtErrOverPtVsIas =  dir.make<TH2F>("PostPreS_PtErrOverPtVsIas", ";#sigma_{p_{T}}/p_{T};G_{i}^{strips};Tracks / bin", 40, 0, 1, 20, 0.,1.);
     tuple->PostPreS_PtErrOverPt2VsIas =  dir.make<TH2F>("PostPreS_PtErrOverPt2VsIas", ";#sigma_{p_{T}}/p_{T}^{2};G_{i}^{strips};Tracks / bin", 40, 0., 0.003, 20, 0.,1.);
     tuple->PostPreS_PtErrOverPt2 = dir.make<TH1F>("PostPreS_PtErrOverPt2", ";#sigma_{p_{T}}/p_{T}^{2};Tracks / bin", 40, 0, 0.003);
-    tuple->PostPreS_Pt = dir.make<TH1F>("PostPreS_Pt", ";p_{T} (GeV);Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->PostPreS_Pt_lowPt = dir.make<TH1F>("PostPreS_Pt_lowPt", ";p_{T} (GeV);Tracks / 10 GeV", 50, 0., 500.);
+    tuple->PostPreS_Pt = dir.make<TH1F>("PostPreS_Pt", ";p_{T} [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->PostPreS_Pt_lowPt = dir.make<TH1F>("PostPreS_Pt_lowPt", ";p_{T} [GeV];Tracks / 10 GeV", 50, 0., 500.);
     tuple->PostPreS_PtVsIas = dir.make<TH2F>("PostPreS_PtVsIas",";p_{T};G_{i}^{strips};Tracks / 80 GeV", 40, 0., PtHistoUpperBound, 20, 0., 1.);
     tuple->PostPreS_Ias_CR = dir.make<TH1F>("PostPreS_Ias_CR", ";G_{i}^{strips};Tracks / 0.1", 10, 0, dEdxS_UpLim);
-    tuple->PostPreS_Ih_CR= dir.make<TH1F>("PostPreS_Ih_CR", ";I_{h} (MeV/cm)", 200, 0, dEdxM_UpLim);
-    tuple->PostPreS_Ihstrip_CR= dir.make<TH1F>("PostPreS_Ihstrip_CR", ";I_{h} (strip only) (MeV/cm)", 200, 0, dEdxM_UpLim);
-    tuple->PostPreS_Ih_nopixcl_CR= dir.make<TH1F>("PostPreS_Ih_nopixcl_CR", ";I_{h}(no pix cleaning) (MeV/cm)", 200, 0, dEdxM_UpLim);
-    tuple->PostPreS_Pt_lowPt_CR = dir.make<TH1F>("PostPreS_Pt_lowPt_CR", ";p_{T} (GeV);Tracks / 10 GeV", 50, 0., 500.);
-    tuple->PostPreS_MassVsIas_fail_CR= dir.make<TH2F>("PostPreS_MassVsIas_fail_CR", ";G_{i}^{strips} in Fail ;Mass(GeV)", 10,0., 1., 80, 0., 400.);
-    tuple->PostPreS_MassVsIas_pass_CR= dir.make<TH2F>("PostPreS_MassVsIas_pass_CR", ";G_{i}^{strips} in Pass ;Mass(GeV)", 10,0., 1., 80, 0., 400.);
+    tuple->PostPreS_Ih_CR= dir.make<TH1F>("PostPreS_Ih_CR", ";I_{h} [MeV/cm]", 200, 0, dEdxM_UpLim);
+//    tuple->PostPreS_Ihstrip_CR= dir.make<TH1F>("PostPreS_Ihstrip_CR", ";I_{h} (strip only) [MeV/cm]", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_Ih_noL1_CR= dir.make<TH1F>("PostPreS_Ih_noL1_CR", ";I_{h} (no L1) [MeV/cm]", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_Ih_nopixcl_CR= dir.make<TH1F>("PostPreS_Ih_nopixcl_CR", ";I_{h}(no pix cleaning) [MeV/cm]", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_Pt_lowPt_CR = dir.make<TH1F>("PostPreS_Pt_lowPt_CR", ";p_{T} [GeV];Tracks / 10 GeV", 50, 0., 500.);
+    tuple->PostPreS_MassVsIas_fail_CR= dir.make<TH2F>("PostPreS_MassVsIas_fail_CR", ";G_{i}^{strips} in Fail ;Mass[GeV]", 20,0., 1., 80, 0., 400.);
+    tuple->PostPreS_MassVsIas_pass_CR= dir.make<TH2F>("PostPreS_MassVsIas_pass_CR", ";G_{i}^{strips} in Pass ;Mass[GeV]", 20,0., 1., 80, 0., 400.);
 
 
     tuple->PostPreS_Ias_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ias_CR_veryLowPt", ";G_{i}^{strips};Tracks / 0.1", 10, 0, dEdxS_UpLim);
-    tuple->PostPreS_P_CR_veryLowPt = dir.make<TH1F>("PostPreS_P_CR_veryLowPt", ";p (GeV);Tracks / 10 GeV", 50, 0., 50);
-    tuple->PostPreS_Pt_lowPt = dir.make<TH1F>("PostPreS_Pt_lowPt", ";p_{T} (GeV);Tracks / 10 GeV", 50, 0., 500.);
+    tuple->PostPreS_P_CR_veryLowPt = dir.make<TH1F>("PostPreS_P_CR_veryLowPt", ";p [GeV];Tracks / 10 GeV", 50, 0., 50);
+    tuple->PostPreS_Pt_lowPt = dir.make<TH1F>("PostPreS_Pt_lowPt", ";p_{T} [GeV];Tracks / 10 GeV", 50, 0., 500.);
     tuple->PostPreS_Ias_NoEventWeight = dir.make<TH1F>("PostPreS_Ias_NoEventWeight", ";G_{i}^{strips} (NoEventWeight);Tracks / 0.1", 10, 0, dEdxS_UpLim);
     tuple->PostPreS_FiStrips_NoEventWeight = dir.make<TH1F>("PostPreS_FiStrips_NoEventWeight", ";F_{i}^{strips} (NoEventWeight);Tracks / 0.05", 20, 0., 1.);
-    tuple->PostPreS_Ih = dir.make<TH1F>("PostPreS_Ih", ";I_{h} (MeV/cm)", 200, 0, dEdxM_UpLim);
-    tuple->PostPreS_IhVsIas = dir.make<TH2F>("PostPreS_IhVsIas",";I_{h} (MeV/cm);G_{i}^{strips}",200, 0, dEdxM_UpLim, 20, 0.,1.);
-    tuple->PostPreS_Ih_NoEventWeight = dir.make<TH1F>("PostPreS_Ih_NoEventWeight", ";I_{h} (NoEventWeight) (MeV/cm);Tracks / bin", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_Ih = dir.make<TH1F>("PostPreS_Ih", ";I_{h} [MeV/cm]", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_IhVsIas = dir.make<TH2F>("PostPreS_IhVsIas",";I_{h} [MeV/cm];G_{i}^{strips}",200, 0, dEdxM_UpLim, 20, 0.,1.);
+    tuple->PostPreS_Ih_NoEventWeight = dir.make<TH1F>("PostPreS_Ih_NoEventWeight", ";I_{h} (NoEventWeight) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
     tuple->PostPreS_MTOF = dir.make<TH1F>("PostPreS_MTOF", ";MTOF;Tracks / bin", 50, -2, 5);
-    tuple->PostPreS_TIsol = dir.make<TH1F>("PostPreS_TIsol", ";#Sigma_{R<0.3} p_{T} - p_{T,cand} (GeV);Tracks / 4 GeV", 25, 0, 100);
+    tuple->PostPreS_TIsol = dir.make<TH1F>("PostPreS_TIsol", ";#Sigma_{R<0.3} p_{T} - p_{T,cand} [GeV];Tracks / 4 GeV", 25, 0, 100);
     tuple->PostPreS_TIsolVsIas = dir.make<TH2F>("PostPreS_TIsolVsIas","TIsol;Cluster G_{i}^{strips};Tracks / bin",25, 0, 100, 10, 0., 1.);
     tuple->PostPreS_EoP = dir.make<TH1F>("PostPreS_EoP", ";PF calo energy / momentum; Tracks / 0.06", 25, 0, 1.5);
     tuple->PostPreS_ECalEoP = dir.make<TH1F>("PostPreS_ECalEoP", ";PF ECal energy / momentum; Tracks / 0.06", 25, 0, 1.5);
@@ -1168,7 +1247,7 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_LastHitDXYVsEta  = dir.make<TH2F>("PostPreS_LastHitDXYVsEta","PostPreS_LastHitDXYVsEta;LastHitDXY;#eta", 75, 0, 150, 20, 0.,1.);
     tuple->PostPreS_LastHitD3D = dir.make<TH1F>("PostPreS_LastHitD3D", ";LastHitD3D", 175, 0, 350);
     tuple->PostPreS_LastHitD3DVsEta = dir.make<TH2F>("PostPreS_LastHitD3DVsEta","PostPreS_LastHitD3DVsEta;LastHitD3D;#eta", 175, 0, 350, 20, 0.,1.);
-    tuple->PostPreS_P = dir.make<TH1F>("PostPreS_P", ";Momentum (GeV);Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->PostPreS_P = dir.make<TH1F>("PostPreS_P", ";Momentum [GeV];Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
     tuple->PostPreS_dR_NVTrack = dir.make<TH1F>("PostPreS_dR_NVTrack", ";dR_NVTrack;Tracks / 0.025", 40, 0, 1);
     tuple->PostPreS_MatchedStations = dir.make<TH1F>("PostPreS_MatchedStations", ";MatchedStations",8, -0.5, 7.5);
     tuple->PostPreS_InnerInvPtDiff = dir.make<TH1F>("PostPreS_InnerInvPtDiff", ";InnerInvPtDiff", 120, -4, 4);
@@ -1183,12 +1262,12 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_PV_NoEventWeight = dir.make<TH1F>("PostPreS_PV_NoEventWeight", ";PV_NoEventWeight;Tracks / bin", 60, 0, 60);
     tuple->PostPreS_NOMoNOH = dir.make<TH1F>("PostPreS_NOMoNOH", ";Num of measurment / num of hits;Tracks / bin",10,0.,1.0);
     tuple->PostPreS_NOMoNOHvsPV = dir.make<TProfile>("PostPreS_NOMoNOHvsPV", ";NOMoNOHvsPV", 60, 0, 60);
-    tuple->PostPreS_Dz = dir.make<TH1F>( "PostPreS_Dz", ";d_{z} (cm);Tracks / 0.003 cm", 200, -0.3, 0.3);
-    tuple->PostPreS_DzVsIas = dir.make<TH2F>( "PostPreS_DzVsIas", ";d_{z} (cm);G_{i}^{strips};Tracks", 200, -0.3, 0.3, 20, 0.0, 1.0);
-    tuple->PostPreS_DzVsGenID = dir.make<TH2F>( "PostPreS_DzVsGenID", ";d_{z} (cm);GenID;Tracks", 200, -0.3, 0.3, 4000, 0.0, 4000.0);
-    tuple->PostPreS_Dxy = dir.make<TH1F>("PostPreS_Dxy", ";d_{xy} (cm);Tracks / 0.001 cm", 200, -0.1, 0.1);
-    tuple->PostPreS_DxyVsIas = dir.make<TH2F>("PostPreS_DxyVsIas", ";d_{xy} (cm);G_{i}^{strips};Tracks", 200, -0.1, 0.1, 20, 0.0, 1.0);
-    tuple->PostPreS_DxyVsGenID = dir.make<TH2F>("PostPreS_DxyVsGenID", ";d_{xy} (cm);GenID;Tracks", 200, -0.1, 0.1, 4000, 0.0, 4000.0);
+    tuple->PostPreS_Dz = dir.make<TH1F>( "PostPreS_Dz", ";d_{z} [cm];Tracks / 0.003 cm", 200, -0.3, 0.3);
+    tuple->PostPreS_DzVsIas = dir.make<TH2F>( "PostPreS_DzVsIas", ";d_{z} [cm];G_{i}^{strips};Tracks", 200, -0.3, 0.3, 20, 0.0, 1.0);
+    tuple->PostPreS_DzVsGenID = dir.make<TH2F>( "PostPreS_DzVsGenID", ";d_{z} [cm];GenID;Tracks", 200, -0.3, 0.3, 4000, 0.0, 4000.0);
+    tuple->PostPreS_Dxy = dir.make<TH1F>("PostPreS_Dxy", ";d_{xy} [cm];Tracks / 0.001 cm", 200, -0.1, 0.1);
+    tuple->PostPreS_DxyVsIas = dir.make<TH2F>("PostPreS_DxyVsIas", ";d_{xy} [cm];G_{i}^{strips};Tracks", 200, -0.1, 0.1, 20, 0.0, 1.0);
+    tuple->PostPreS_DxyVsGenID = dir.make<TH2F>("PostPreS_DxyVsGenID", ";d_{xy} [cm];GenID;Tracks", 200, -0.1, 0.1, 4000, 0.0, 4000.0);
 
     tuple->PostPreS_SegSep = dir.make<TH1F>("PostPreS_SegSep", ";SegSep;Tracks / bin", 50, 0., 2.5);
     tuple->PostPreS_SegMinEtaSep = dir.make<TH1F>("PostPreS_SegMinEtaSep", ";SegMinEtaSep;Tracks / bin", 50, -1., 1.);
@@ -1201,29 +1280,56 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_Dz_Cosmic = dir.make<TH1F>("PostPreS_Dz_Cosmic", ";Dz_Cosmic;Tracks / bin", 150, -IPbound, IPbound);
     tuple->PostPreS_Dz_CSC = dir.make<TH1F>("PostPreS_Dz_CSC", ";Dz_CSC;Tracks / bin", 150, -IPbound, IPbound);
     tuple->PostPreS_Dz_DT = dir.make<TH1F>("PostPreS_Dz_DT", ";Dz_DT;Tracks / bin", 150, -IPbound, IPbound);
-    tuple->PostPreS_Pt_FailDz = dir.make<TH1F>("PostPreS_Pt_FailDz", ";Pt_FailDz;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->PostPreS_Pt_FailDz_DT = dir.make<TH1F>("PostPreS_Pt_FailDz_DT", ";Pt_FailDz_DT;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->PostPreS_Pt_FailDz_CSC = dir.make<TH1F>("PostPreS_Pt_FailDz_CSC", ";Pt_FailDz_CSC;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
-    tuple->PostPreS_TOF_FailDz = dir.make<TH1F>("PostPreS_TOF_FailDz", ";TOF_FailDz;Tracks / 0.05", 120, -1, 5);
-    tuple->PostPreS_TOF_FailDz_DT = dir.make<TH1F>("PostPreS_TOF_FailDz_DT", ";TOF_FailDz_DT;Tracks / 0.05", 120, -1, 5);
-    tuple->PostPreS_TOF_FailDz_CSC = dir.make<TH1F>("PostPreS_TOF_FailDz_CSC", ";TOF_FailDz_CSC;Tracks / 0.05", 120, -1, 5);
+    tuple->PostPreS_Pt_FailDz = dir.make<TH1F>("PostPreS_Pt_FailDz", ";p_{T} (FailDz;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->PostPreS_Pt_FailDz_DT = dir.make<TH1F>("PostPreS_Pt_FailDz_DT", ";p_{T} (FailDz_DT;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->PostPreS_Pt_FailDz_CSC = dir.make<TH1F>("PostPreS_Pt_FailDz_CSC", ";p_{T} (FailDz_CSC;Tracks / 100 GeV", 40, 0., PtHistoUpperBound);
+    tuple->PostPreS_TOF_FailDz = dir.make<TH1F>("PostPreS_TOF_FailDz", ";TOF (FailDz;Tracks / 0.05", 120, -1, 5);
+    tuple->PostPreS_TOF_FailDz_DT = dir.make<TH1F>("PostPreS_TOF_FailDz_DT", ";TOF (FailDz_DT;Tracks / 0.05", 120, -1, 5);
+    tuple->PostPreS_TOF_FailDz_CSC = dir.make<TH1F>("PostPreS_TOF_FailDz_CSC", ";TOF (FailDz_CSC;Tracks / 0.05", 120, -1, 5);
     tuple->PostPreS_PtErrOverPtVsPtErrOverPt2 = dir.make<TH2F>("PostPreS_PtErrOverPtVsPtErrOverPt2",  ";#sigma_{p_{T}}/p_{T};p_{T}^{2}",  40, 0., 1., 40, 0., 0.003);
     tuple->PostPreS_PtErrOverPtVsPt = dir.make<TH2F>("PostPreS_PtErrOverPtVsPt",  ";#sigma_{p_{T}}/p_{T};p_{T}",  40, 0., 1., 40, 0., 4000);
-    tuple->PostPreS_GenPtVsRecoPt = dir.make<TH2F>("PostPreS_GenPtVsRecoPt", ";p_{T}^{gen} (GeV);p_{T}^{reco} (GeV)", 40, 0., PtHistoUpperBound, 40, 0., PtHistoUpperBound);
+    tuple->PostPreS_GenPtVsRecoPt = dir.make<TH2F>("PostPreS_GenPtVsRecoPt", ";p_{T}^{gen} [GeV];p_{T}^{reco} [GeV]", 40, 0., PtHistoUpperBound, 40, 0., PtHistoUpperBound);
 
     tuple->PostPreS_ProbQ = dir.make<TH1F>("PostPreS_ProbQ", ";F_{i}^{pixels};Tracks / 0.01", 100, 0., 1.);
     tuple->PostPreS_ProbQVsIas = dir.make<TH2F>("PostPreS_ProbQVsIas", ";F_{i}^{pixels};G_{i}^{strips}", 100, 0., 1., 100, 0., 1.);
-    tuple->PostPreS_IhVsProbQNoL1VsIas = dir.make<TH3F>("PostPreS_IhVsProbQVsIas", ";I_{h} (MeV/cm);F_{i}^{pixels};G_{i}^{strips}",200, 0, dEdxM_UpLim, 100, 0.0, 1.0, 100, 0.0, 1.0);
-    tuple->PostPreS_MomentumVsProbQNoL1VsIas = dir.make<TH3F>("PostPreS_MomentumVsProbQVsIas", ";p (GeV);F_{i}^{pixels};G_{i}^{strips}", 40, 0., PtHistoUpperBound, 100, 0.0, 1.0, 100, 0.0, 1.0);
-    tuple->PostPreS_ProbXY = dir.make<TH1F>("PostPreS_ProbXY", ";Prob_{XY,pixelAV} (pixels);Tracks / bin", 100, 0, 1);
+    tuple->PostPreS_IhVsProbQNoL1VsIas = dir.make<TH3F>("PostPreS_IhVsProbQVsIas", ";I_{h} [MeV/cm];F_{i}^{pixels};G_{i}^{strips}",200, 0, dEdxM_UpLim, 100, 0.0, 1.0, 100, 0.0, 1.0);
+    tuple->PostPreS_MomentumVsProbQNoL1VsIas = dir.make<TH3F>("PostPreS_MomentumVsProbQVsIas", ";p [GeV];F_{i}^{pixels};G_{i}^{strips}", 40, 0., PtHistoUpperBound, 100, 0.0, 1.0, 100, 0.0, 1.0);
+    tuple->PostPreS_ProbXY = dir.make<TH1F>("PostPreS_ProbXY", ";Prob_{XY} (pixels);Tracks / bin", 100, 0, 1);
     tuple->PostPreS_ProbXY_highIas = dir.make<TH1F>("PostPreS_ProbXY_highIas", ";ProbXY (G_{i}^{strips} > 0.6);Tracks / bin", 100, 0, 1);
     tuple->PostPreS_ProbXYVsIas = dir.make<TH2F>("PostPreS_ProbXYVsIas", ";ProbXY;G_{i}^{strips};Tracks / bin",  100, 0, 1, 10, 0., 1.);
     tuple->PostPreS_ProbXYVsIas_highIas = dir.make<TH2F>("PostPreS_ProbXYVsIas_highIas", ";ProbXY (G_{i}^{strips} > 0.6);G_{i}^{strips} (G_{i}^{strips} > 0.6);Tracks / bin",  100, 0, 1, 10, 0., 1.);
-    tuple->PostPreS_ProbXYVsProbQ = dir.make<TH2F>("PostPreS_ProbXYVsProbQ", ";Prob_{XY,pixelAV} (pixels);F_{i}^{pixels};Tracks / bin",  100, 0., 1., 10, 0., 1.);
+    tuple->PostPreS_ProbXYVsProbQ = dir.make<TH2F>("PostPreS_ProbXYVsProbQ", ";Prob_{XY} (pixels);F_{i}^{pixels};Tracks / bin",  100, 0., 1., 10, 0., 1.);
     tuple->PostPreS_ProbXYVsProbQ_highIas = dir.make<TH2F>("PostPreS_ProbXYVsProbQ_highIas", ";ProbXY (G_{i}^{strips} > 0.6);ProbQ (G_{i}^{strips} > 0.6);Tracks / bin",  100, 0., 1., 10, 0., 1.);
+
+    tuple->PostPreS_MassVsIas_fail= dir.make<TH2F>("PostPreS_MassVsIas_fail", "TO BLIND ! ;G_{i}^{strips} in Fail ;Mass[GeV]", 20,0., 1., 80, 0., 4000.);
+    tuple->PostPreS_MassVsIas_pass= dir.make<TH2F>("PostPreS_MassVsIas_pass", "TO BLIND ! ;G_{i}^{strips} in Pass ;Mass[GeV]", 20,0., 1., 80, 0., 4000.);
+    tuple->PostPreS_MassVsIas_fail_CR2= dir.make<TH2F>("PostPreS_MassVsIas_fail_CR2", ";G_{i}^{strips} in Fail ;Mass[GeV]", 20,0., 1., 80, 0., 1000.);
+    tuple->PostPreS_MassVsIas_pass_CR2= dir.make<TH2F>("PostPreS_MassVsIas_pass_CR2", ";G_{i}^{strips} in Pass ;Mass[GeV]", 20,0., 1., 80, 0., 1000.);
+    tuple->PostPreS_MassVsIas_fail_CR3= dir.make<TH2F>("PostPreS_MassVsIas_fail_CR3", ";G_{i}^{strips} in Fail ;Mass[GeV]", 20,0., 1., 80, 0., 1000.);
+    tuple->PostPreS_MassVsIas_pass_CR3= dir.make<TH2F>("PostPreS_MassVsIas_pass_CR3", ";G_{i}^{strips} in Pass ;Mass[GeV]", 20,0., 1., 80, 0., 1000.);
+    tuple->PostPreS_MassVsIas_fail_SR2= dir.make<TH2F>("PostPreS_MassVsIas_fail_SR2", "TO BLIND ! ;G_{i}^{strips} in Fail ;Mass[GeV]", 20,0., 1., 80, 0., 4000.);
+    tuple->PostPreS_MassVsIas_pass_SR2= dir.make<TH2F>("PostPreS_MassVsIas_pass_SR2", "TO BLIND ! ;G_{i}^{strips} in Pass ;Mass[GeV]", 20,0., 1., 80, 0., 4000.);
     
+
+    tuple->PostPreS_Ias_CR2 = dir.make<TH1F>("PostPreS_Ias_CR2", ";G_{i}^{strips};Tracks / 0.1", 10, 0, dEdxS_UpLim);
+    tuple->PostPreS_Ih_CR2= dir.make<TH1F>("PostPreS_Ih_CR2", ";I_{h} [MeV/cm]", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_Ih_noL1_CR2= dir.make<TH1F>("PostPreS_Ih_noL1_CR2", ";I_{h} (no L1) [MeV/cm]", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_Pt_CR2 = dir.make<TH1F>("PostPreS_Pt_CR2", ";p_{T} [GeV];Tracks / 10 GeV", 50, 0., 500.);
+    tuple->PostPreS_ProbQNoL1_CR2 = dir.make<TH1F>("PostPreS_ProbQNoL1_CR2", ";F_{i}^{pixels};Tracks / 0.05", 20, 0., 1.);
+    tuple->PostPreS_ProbQNoL1VsIas_CR2 = dir.make<TH2F>("PostPreS_ProbQNoL1VsIas_CR2", ";F_{i}^{pixels};G_{i}^{strips}",20, 0., 1., 20, 0., 1.);
+    tuple->PostPreS_Ias_CR3 = dir.make<TH1F>("PostPreS_Ias_CR3", ";G_{i}^{strips};Tracks / 0.1", 10, 0, dEdxS_UpLim);
+    tuple->PostPreS_Ih_CR3= dir.make<TH1F>("PostPreS_Ih_CR3", ";I_{h} [MeV/cm]", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_Ih_noL1_CR3= dir.make<TH1F>("PostPreS_Ih_noL1_CR3", ";I_{h} (no L1) [MeV/cm]", 200, 0, dEdxM_UpLim);
+    tuple->PostPreS_Pt_CR3 = dir.make<TH1F>("PostPreS_Pt_CR3", ";p_{T} [GeV];Tracks / 10 GeV", 50, 0., 500.);
+    tuple->PostPreS_ProbQNoL1_CR3 = dir.make<TH1F>("PostPreS_ProbQNoL1_CR3", ";F_{i}^{pixels};Tracks / 0.05", 20, 0., 1.);
+    tuple->PostPreS_ProbQNoL1VsIas_CR3 = dir.make<TH2F>("PostPreS_ProbQNoL1VsIas_CR3", ";F_{i}^{pixels};G_{i}^{strips}",20, 0., 1., 20, 0., 1.);
+
+
+
     tuple->PostPreS_ProbQNoL1_CR = dir.make<TH1F>("PostPreS_ProbQNoL1_CR", ";F_{i}^{pixels};Tracks / 0.05", 20, 0., 1.);
+   
     
+ 
     tuple->PostPreS_ProbQNoL1VsIas_CR = dir.make<TH2F>("PostPreS_ProbQNoL1VsIas_CR", ";F_{i}^{pixels};G_{i}^{strips}",20, 0., 1., 20, 0., 1.);
     if (doSystsPlots_) {
       tuple->PostPreS_ProbQNoL1VsIas_CR_Pileup_up = dir.make<TH2F>("PostPreS_ProbQNoL1VsIas_CR_Pileup_up", ";F_{i}^{pixels};G_{i}^{strips};Tracks / bin",20, 0., 1., 20, 0., 1.);
@@ -1249,17 +1355,74 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
       tuple->PostPreS_ProbQNoL1VsIas_Ias_up = dir.make<TH2F>("PostPreS_ProbQNoL1VsIas_Ias_up", ";F_{i}^{pixels};G_{i}^{strips};Tracks / bin",20, 0., 1., 20, 0., 1.);
       tuple->PostPreS_ProbQNoL1VsIas_Ias_down = dir.make<TH2F>("PostPreS_ProbQNoL1VsIas_Ias_down", ";F_{i}^{pixels};G_{i}^{strips};Tracks / bin",20, 0., 1., 20, 0., 1.);
     }
+    
+    tuple->PostPreS_TriggerTimingPass = dir.make<TH1F>("PostPreS_TriggerTimingPass", ";#Delta t_{PV,DT L2} [ns] (trigger passed);Tracks / bin", 100, 0.0, 100);
+    tuple->PostPreS_TriggerTimingReject = dir.make<TH1F>("PostPreS_TriggerTimingReject", ";#Delta t_{PV,DT L2} [ns] (trigger rejected);Tracks / bin", 100, 0.0, 100);
+    
+    tuple->PostPreS_TriggerEtaPass = dir.make<TH1F>("PostPreS_TriggerEtaPass", ";Trigger object #eta (trigger passed);Tracks / bin", 25, 0.0, 2.5);
+    tuple->PostPreS_TriggerEtaReject = dir.make<TH1F>("PostPreS_TriggerEtaReject", ";Trigger object #eta (trigger rejected);Tracks / bin", 25, 0.0, 2.5);
+    
+    tuple->PostS_MuonTightVsBeta = dir.make<TH2F>("PostS_MuonTightVsBeta", ";Tight ID mu;Gen #beta",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuon50VsBeta = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuon50VsBeta_EtaA = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaA", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    
     tuple->PostPreS_TriggerMuon50VsBeta_EtaB = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaB", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    
     tuple->PostPreS_TriggerMuon50VsBeta_EtaC = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaC", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaD = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaD", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUp = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaD_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDown = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaD_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    
+    
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaE = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaE", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUp = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaE_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDown = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaE_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaF = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaF", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUp = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaF_BetaUp", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDown = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaF_BetaDown", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL1DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL1DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL4DT = dir.make<TH2F>("PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL4DT", ";Muon50 triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    
+    
+    tuple->PostS_SR2PASS_TriggerGenBeta = dir.make<TH1F>("PostS_SR2PASS_TriggerGenBeta", ";#beta^{HLT};Tracks / 0.05", 20, 0., 1.);
+    tuple->PostS_SR2PASS_TriggerMuon50VsBeta_Beta = dir.make<TH2F>("PostS_SR2PASS_TriggerMuon50VsBeta_Beta", ";Muon50 triggered (SR2 region);Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownHalfSigma = dir.make<TH2F>("PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownHalfSigma", ";Muon50 triggered (SR2 region);Gen #beta (down half sigma);Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownOneSigma = dir.make<TH2F>("PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownOneSigma", ";Muon50 triggered (SR2 region);Gen #beta (down one sigma);Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownTwoSigma = dir.make<TH2F>("PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownTwoSigma", ";Muon50 triggered (SR2 region);Gen #beta (down two sigma);Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpHalfSigma = dir.make<TH2F>("PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpHalfSigma", ";Muon50 triggered (SR2 region);Gen #beta (up half sigma);Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpOneSigma = dir.make<TH2F>("PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpOneSigma", ";Muon50 triggered (SR2 region);Gen #beta (up one sigma);Tracks / bin",2,-.5,1.5,20,0.,1.);
+    tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpTwoSigma = dir.make<TH2F>("PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpTwoSigma", ";Muon50 triggered (SR2 region);Gen #beta (up two sigma);Tracks / bin",2,-.5,1.5,20,0.,1.);
+        
     tuple->PostPreS_TriggerMuonAllVsBeta = dir.make<TH2F>("PostPreS_TriggerMuonAllVsBeta", ";MuonAll triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuonAllVsBeta_EtaA = dir.make<TH2F>("PostPreS_TriggerMuonAllVsBeta_EtaA", ";MuonAll triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
     tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaUp = dir.make<TH2F>("PostPreS_TriggerMuonAllVsBeta_EtaA_BetaUp", ";MuonAll triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
@@ -1288,8 +1451,8 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_TriggerMuonAllVsPt = dir.make<TH2F>("PostPreS_TriggerMuonAllVsPt", ";MuonAll triggered;Track p_{T};Tracks / bin",2,-.5,1.5,50,-0.05,1000.05);
     
     tuple->PostPreS_TriggerMETallVsBeta = dir.make<TH2F>("PostPreS_TriggerMETallVsBeta", ";OR of MET triggered;Gen #beta;Tracks / bin",2,-.5,1.5,20,0.,1.);
-    tuple->PostPreS_TriggerMETallVsMet = dir.make<TH2F>("PostPreS_TriggerMETallVsMet", ";OR of MET triggered;MET (GeV);Tracks / bin",2,-.5,1.5,50,-0.05,2000.05);
-    tuple->PostPreS_TriggerMETallVsHT = dir.make<TH2F>("PostPreS_TriggerMETallVsHT", ";OR of MET triggered;H_{T} (GeV);Tracks / bin",2,-.5,1.5,50,-0.05,2000.05);
+    tuple->PostPreS_TriggerMETallVsMet = dir.make<TH2F>("PostPreS_TriggerMETallVsMet", ";OR of MET triggered;MET [GeV];Tracks / bin",2,-.5,1.5,50,-0.05,2000.05);
+    tuple->PostPreS_TriggerMETallVsHT = dir.make<TH2F>("PostPreS_TriggerMETallVsHT", ";OR of MET triggered;H_{T} [GeV];Tracks / bin",2,-.5,1.5,50,-0.05,2000.05);
     tuple->PostPreS_TriggerMETallVsMetOverHt = dir.make<TH2F>("PostPreS_TriggerMETallVsMetOverHt", ";OR of MET triggered;MET / H_{T};Tracks / bin",2,-.5,1.5,30,-0.05,2.95);
     
     tuple->PostS_TriggerMETallVsMetOverHt_Cand0 = dir.make<TH2F>("PostS_TriggerMETallVsMetOverHt_Cand0", ";OR of MET triggered;MET / H_{T};Tracks / bin",2,-.5,1.5,30,-0.05,2.95);
@@ -1303,8 +1466,8 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostS_MetOverHt_Cand2 = dir.make<TH1F>("PostS_MetOverHt_Cand2", ";MET / H_{T};Events / bin",30,-0.05,2.95);
     
     
-    tuple->PostPreS_MetVsHT = dir.make<TH2F>("PostPreS_MetVsHT", ";MET (GeV);H_{T} (GeV);Tracks / bin",25,-0.05,2000.05,25,-0.05,2000.05);
-    tuple->PostPreS_TriggerMETallVsMetVsHT = dir.make<TH3F>("PostPreS_TriggerMETallVsMetVsHT", ";OR of MET triggered;MET (GeV);H_{T} (GeV);Tracks / bin",2,-.5,1.5,50,-0.05,2000.05,50,-0.05,2000.05);
+    tuple->PostPreS_MetVsHT = dir.make<TH2F>("PostPreS_MetVsHT", ";MET [GeV];H_{T} [GeV];Tracks / bin",25,-0.05,2000.05,25,-0.05,2000.05);
+    tuple->PostPreS_TriggerMETallVsMetVsHT = dir.make<TH3F>("PostPreS_TriggerMETallVsMetVsHT", ";OR of MET triggered;MET [GeV];H_{T} [GeV];Tracks / bin",2,-.5,1.5,50,-0.05,2000.05,50,-0.05,2000.05);
 
     tuple->PostPreS_ProbXYNoL1 = dir.make<TH1F>("PostPreS_ProbXYNoL1", ";ProbXYNoL1;Tracks / bin", 100, 0, 1);
     tuple->PostPreS_ProbXYNoL1_highIas = dir.make<TH1F>("PostPreS_ProbXYNoL1_highIas", ";ProbXYNoL1 for (G_{i}^{strips} > 0.6);Tracks / bin", 100, 0, 1);
@@ -1324,34 +1487,34 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
 
     tuple->PostPreS_ProbQVsGenEnviromentID = dir.make<TH2F>("PostPreS_ProbQVsGenEnviromentID", ";F_{i}^{pixels};GenEnviromentID",20, 0.0, 1.0, 4000, 0.0, 4000.0);
     tuple->PostPreS_ProbXYVsGenID = dir.make<TH2F>("PostPreS_ProbXYVsGenID", ";ProbXY;GenID", 100, 0.0, 1.0, 4000, 0.0, 4000.0);
-    tuple->PostPreS_PtVsGenID = dir.make<TH2F>("PostPreS_PtVsGenID", ";p_{T} (GeV);GenID", 40, 0., PtHistoUpperBound, 4000, 0.0, 4000.0);
+    tuple->PostPreS_PtVsGenID = dir.make<TH2F>("PostPreS_PtVsGenID", ";p_{T} [GeV];GenID", 40, 0., PtHistoUpperBound, 4000, 0.0, 4000.0);
     tuple->PostPreS_EoPVsGenID = dir.make<TH2F>("PostPreS_EoPVsGenID", ";EoPVsGenID", 25, 0, 1.5, 4000, 0.0, 4000.0);
-    tuple->PostPreS_IhVsGenID = dir.make<TH2F>("PostPreS_IhVsGenID", ";I_{h} (MeV/cm);GenID", 200, 0, dEdxM_UpLim, 4000, 0.0, 4000.0);
+    tuple->PostPreS_IhVsGenID = dir.make<TH2F>("PostPreS_IhVsGenID", ";I_{h} [MeV/cm];GenID", 200, 0, dEdxM_UpLim, 4000, 0.0, 4000.0);
     tuple->PostPreS_IasVsGenID = dir.make<TH2F>("PostPreS_IasVsGenID", ";G_{i}^{strips};GenID", 10, 0., 1., 4000, 0.0, 4000.0);
     tuple->PostPreS_IasVsGenEnviromentID = dir.make<TH2F>("PostPreS_IasVsGenEnviromentID", ";G_{i}^{strips};GenEnviromentID", 10, 0., 1., 4000, 0.0, 4000.0);
-    tuple->PostPreS_MassTVsGenID = dir.make<TH2F>("PostPreS_massTVsGenID", ";m_{T} (GeV);GenID", 50, 0.0, 250.0, 4000, 0.0, 4000.0);
+    tuple->PostPreS_MassTVsGenID = dir.make<TH2F>("PostPreS_massTVsGenID", ";m_{T} [GeV];GenID", 50, 0.0, 250.0, 4000, 0.0, 4000.0);
     tuple->PostPreS_MiniIsoChgVsGenID = dir.make<TH2F>("PostPreS_MiniIsoChgVsGenID", ";miniIsoChg;GenID", 20, 0.0, 0.1, 4000, 0.0, 4000.0);
     tuple->PostPreS_MiniIsoAllVsGenID = dir.make<TH2F>("PostPreS_MiniIsoAllVsGenID", ";miniIsoAll;GenID", 20, 0.0, 0.1, 4000, 0.0, 4000.0);
-    tuple->PostPreS_MassVsGenID = dir.make<TH2F>("PostPreS_MassVsGenID", ";Mass (GeV);GenID",80,0.,4000.,4000, 0.0, 4000.0);
+    tuple->PostPreS_MassVsGenID = dir.make<TH2F>("PostPreS_MassVsGenID", ";Mass [GeV];GenID",80,0.,4000.,4000, 0.0, 4000.0);
 
     tuple->PostPreS_EtaVsMomGenID = dir.make<TH2F>("PostPreS_EtaVsMomGenID", ";#eta;MomGenID",  50, -2.6, 2.6, 4000, 0.0, 4000.0);
     tuple->PostPreS_ProbQVsMomGenID = dir.make<TH2F>("PostPreS_ProbQVsMomGenID", ";F_{i}^{pixels};MomGenID", 20, 0.0, 1.0, 4000, 0.0, 4000.0);
     tuple->PostPreS_ProbXYVsMomGenID = dir.make<TH2F>("PostPreS_ProbXYVsMomGenID", ";ProbXY;MomGenID", 20, 0.0, 1.0, 4000, 0.0, 4000.0);
-    tuple->PostPreS_PtVsMomGenID = dir.make<TH2F>("PostPreS_PtVsMomGenID", ";p_{T} (GeV);MomGenID", 40, 0., PtHistoUpperBound, 4000, 0.0, 4000.0);
-    tuple->PostPreS_EoPVsMomGenID = dir.make<TH2F>("PostPreS_EoPVsMomGenID", ";EoPVsMomGenID", 25, 0, 1.5, 4000, 0.0, 4000.0);
-    tuple->PostPreS_IhVsMomGenID = dir.make<TH2F>("PostPreS_IhVsMomGenID", ";I_{h} (MeV/cm);MomGenID", 200, 0, dEdxM_UpLim, 4000, 0.0, 4000.0);
+    tuple->PostPreS_PtVsMomGenID = dir.make<TH2F>("PostPreS_PtVsMomGenID", ";p_{T} [GeV];MomGenID", 40, 0., PtHistoUpperBound, 4000, 0.0, 4000.0);
+    tuple->PostPreS_EoPVsMomGenID = dir.make<TH2F>("PostPreS_EoPVsMomGenID", ";EoP;MomGenID", 25, 0, 1.5, 4000, 0.0, 4000.0);
+    tuple->PostPreS_IhVsMomGenID = dir.make<TH2F>("PostPreS_IhVsMomGenID", ";I_{h} [MeV/cm];MomGenID", 200, 0, dEdxM_UpLim, 4000, 0.0, 4000.0);
     tuple->PostPreS_IasVsMomGenID = dir.make<TH2F>("PostPreS_IasVsMomGenID", ";G_{i}^{strips};MomGenID", 10, 0., 1., 4000, 0.0, 4000.0);
-    tuple->PostPreS_MassTVsMomGenID = dir.make<TH2F>("PostPreS_massTVsMomGenID", ";m_{T} (GeV);MomGenID", 50, 0.0, 250.0, 4000, 0.0, 4000.0);
+    tuple->PostPreS_MassTVsMomGenID = dir.make<TH2F>("PostPreS_massTVsMomGenID", ";m_{T} [GeV];MomGenID", 50, 0.0, 250.0, 4000, 0.0, 4000.0);
     tuple->PostPreS_MiniIsoChgVsMomGenID = dir.make<TH2F>("PostPreS_MiniIsoChgVsMomGenID", ";miniIsoChg;MomGenID", 20, 0.0, 0.1, 4000, 0.0, 4000.0);
     tuple->PostPreS_MiniIsoAllVsMomGenID = dir.make<TH2F>("PostPreS_MiniIsoAllVsMomGenID", ";miniIsoAll;MomGenID", 20, 0.0, 0.1, 4000, 0.0, 4000.0);
-    tuple->PostPreS_MassVsMomGenID = dir.make<TH2F>("PostPreS_MassVsMomGenID","PostPreS_MassVsMomGenID;Mass;MomGenID",80,0.,4000.,4000, 0.0, 4000.0);
+    tuple->PostPreS_MassVsMomGenID = dir.make<TH2F>("PostPreS_MassVsMomGenID",";Mass [GeV];MomGenID",80,0.,4000.,4000, 0.0, 4000.0);
 
     tuple->PostPreS_EtaVsSiblingGenID = dir.make<TH2F>("PostPreS_EtaVsSiblingGenID", ";#eta;SiblingGenID",  50, -2.6, 2.6, 4000, 0.0, 4000.0);
     tuple->PostPreS_ProbQVsSiblingGenID = dir.make<TH2F>("PostPreS_ProbQVsSiblingGenID", ";F_{i}^{pixels};SiblingGenID", 20, 0.0, 1.0, 4000, 0.0, 4000.0);
     tuple->PostPreS_ProbXYVsSiblingGenID = dir.make<TH2F>("PostPreS_ProbXYVsSiblingGenID", ";ProbXY;SiblingGenID", 20, 0.0, 1.0, 4000, 0.0, 4000.0);
-    tuple->PostPreS_PtVsSiblingGenID = dir.make<TH2F>("PostPreS_PtVsSiblingGenID", ";p_{T} (GeV);SiblingGenID", 40, 0., PtHistoUpperBound, 4000, 0.0, 4000.0);
+    tuple->PostPreS_PtVsSiblingGenID = dir.make<TH2F>("PostPreS_PtVsSiblingGenID", ";p_{T} [GeV];SiblingGenID", 40, 0., PtHistoUpperBound, 4000, 0.0, 4000.0);
     tuple->PostPreS_EoPVsSiblingGenID = dir.make<TH2F>("PostPreS_EoPVsSiblingGenID", ";EoPVsSiblingGenID", 25, 0, 1.5, 4000, 0.0, 4000.0);
-    tuple->PostPreS_IhVsSiblingGenID = dir.make<TH2F>("PostPreS_IhVsSiblingGenID", ";I_{h} (MeV/cm);SiblingGenID", 200, 0, dEdxM_UpLim, 4000, 0.0, 4000.0);
+    tuple->PostPreS_IhVsSiblingGenID = dir.make<TH2F>("PostPreS_IhVsSiblingGenID", ";I_{h} [MeV/cm];SiblingGenID", 200, 0, dEdxM_UpLim, 4000, 0.0, 4000.0);
     tuple->PostPreS_IasVsSiblingGenID = dir.make<TH2F>("PostPreS_IasVsSiblingGenID", ";G_{i}^{strips};SiblingGenID", 10, 0., 1., 4000, 0.0, 4000.0);
     tuple->PostPreS_MassTVsSiblingGenID = dir.make<TH2F>("PostPreS_massTVsSiblingGenID", ";massT;SiblingGenID", 50, 0.0, 250.0, 4000, 0.0, 4000.0);
     tuple->PostPreS_MassVsSiblingGenID = dir.make<TH2F>("PostPreS_MassVsSiblingGenID", ";Mass;SiblingGenID",80, 0.0, 4000.0, 4000, 0.0, 4000.0);
@@ -1359,11 +1522,11 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_EtaVsGenAngle = dir.make<TH2F>("PostPreS_EtaVsGenAngle", ";#eta;GenAngle",  50, -2.6, 2.6, 100, 0.0, 1.0);
     tuple->PostPreS_ProbQVsGenAngle = dir.make<TH2F>("PostPreS_ProbQVsGenAngle", ";F_{i}^{pixels};GenAngle", 20, 0.0, 1.0, 100, 0.0,1.0);
     tuple->PostPreS_ProbXYVsGenAngle = dir.make<TH2F>("PostPreS_ProbXYVsGenAngle", ";ProbXY;GenAngle", 20, 0.0, 1.0, 100, 0.0, 1.0);
-    tuple->PostPreS_PtVsGenAngle = dir.make<TH2F>("PostPreS_PtVsGenAngle", ";p_{T} (GeV);GenAngle", 40, 0., PtHistoUpperBound, 100, 0.0, 1.0);
+    tuple->PostPreS_PtVsGenAngle = dir.make<TH2F>("PostPreS_PtVsGenAngle", ";p_{T} [GeV];GenAngle", 40, 0., PtHistoUpperBound, 100, 0.0, 1.0);
     tuple->PostPreS_EoPVsGenAngle = dir.make<TH2F>("PostPreS_EoPVsGenAngle", ";EoPVsGenAngle", 25, 0, 1.5, 100, 0.0, 1.0);
-    tuple->PostPreS_IhVsGenAngle = dir.make<TH2F>("PostPreS_IhVsGenAngle", ";I_{h} (MeV/cm);GenAngle", 200, 0, dEdxM_UpLim, 100, 0.0, 1.0);
+    tuple->PostPreS_IhVsGenAngle = dir.make<TH2F>("PostPreS_IhVsGenAngle", ";I_{h} [MeV/cm];GenAngle", 200, 0, dEdxM_UpLim, 100, 0.0, 1.0);
     tuple->PostPreS_IasVsGenAngle = dir.make<TH2F>("PostPreS_IasVsGenAngle", ";G_{i}^{strips};GenAngle", 10, 0., 1., 100, 0.0, 1.0);
-    tuple->PostPreS_MassTVsGenAngle = dir.make<TH2F>("PostPreS_massTVsGenAngle", ";m_{T} (GeV);GenAngle", 50, 0.0, 250.0, 100, 0.0, 1.0);
+    tuple->PostPreS_MassTVsGenAngle = dir.make<TH2F>("PostPreS_massTVsGenAngle", ";m_{T} [GeV];GenAngle", 50, 0.0, 250.0, 100, 0.0, 1.0);
     tuple->PostPreS_MiniIsoChgVsGenAngle = dir.make<TH2F>("PostPreS_MiniIsoChgVsGenAngle", ";miniIsoChg;GenAngle", 20, 0.0, 0.1, 100, 0.0, 1.0);
     tuple->PostPreS_MiniIsoAllVsGenAngle = dir.make<TH2F>("PostPreS_MiniIsoAllVsGenAngle", ";miniIsoAll;GenAngle", 20, 0.0, 0.1, 100, 0.0, 1.0);
     tuple->PostPreS_MassVsGenAngle = dir.make<TH2F>("PostPreS_MassVsGenAngle", ";Mass;GenAngle",80, 0.0,4000.0,  100, 0.0, 1.0);
@@ -1371,11 +1534,11 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_EtaVsGenMomAngle = dir.make<TH2F>("PostPreS_EtaVsGenMomAngle", ";#eta;GenMomAngle",  50, -2.6, 2.6, 100, 0.0, 1.0);
     tuple->PostPreS_ProbQVsGenMomAngle = dir.make<TH2F>("PostPreS_ProbQVsGenMomAngle", ";F_{i}^{pixels};GenMomAngle", 20, 0.0, 1.0, 100, 0.0,1.0);
     tuple->PostPreS_ProbXYVsGenMomAngle = dir.make<TH2F>("PostPreS_ProbXYVsGenMomAngle", ";ProbXY;GenMomAngle", 20, 0.0, 1.0, 100, 0.0, 1.0);
-    tuple->PostPreS_PtVsGenMomAngle = dir.make<TH2F>("PostPreS_PtVsGenMomAngle", ";p_{T} (GeV);GenMomAngle", 40, 0., PtHistoUpperBound, 100, 0.0, 1.0);
+    tuple->PostPreS_PtVsGenMomAngle = dir.make<TH2F>("PostPreS_PtVsGenMomAngle", ";p_{T} [GeV];GenMomAngle", 40, 0., PtHistoUpperBound, 100, 0.0, 1.0);
     tuple->PostPreS_EoPVsGenMomAngle = dir.make<TH2F>("PostPreS_EoPVsGenMomAngle", ";EoPVsGenMomAngle", 25, 0, 1.5, 100, 0.0, 1.0);
-    tuple->PostPreS_IhVsGenMomAngle = dir.make<TH2F>("PostPreS_IhVsGenMomAngle", ";I_{h} (MeV/cm);GenMomAngle", 100, 0, dEdxM_UpLim, 100, 0.0, 1.0);
+    tuple->PostPreS_IhVsGenMomAngle = dir.make<TH2F>("PostPreS_IhVsGenMomAngle", ";I_{h} [MeV/cm];GenMomAngle", 100, 0, dEdxM_UpLim, 100, 0.0, 1.0);
     tuple->PostPreS_IasVsGenMomAngle = dir.make<TH2F>("PostPreS_IasVsGenMomAngle", ";G_{i}^{strips};GenMomAngle", 10, 0., 1., 100, 0.0, 1.0);
-    tuple->PostPreS_MassTVsGenMomAngle = dir.make<TH2F>("PostPreS_massTVsGenMomAngle", ";m_{T} (GeV);GenMomAngle", 50, 0.0, 250.0, 100, 0.0, 1.0);
+    tuple->PostPreS_MassTVsGenMomAngle = dir.make<TH2F>("PostPreS_massTVsGenMomAngle", ";m_{T} [GeV];GenMomAngle", 50, 0.0, 250.0, 100, 0.0, 1.0);
     tuple->PostPreS_MiniIsoChgVsGenMomAngle = dir.make<TH2F>("PostPreS_MiniIsoChgVsGenMomAngle", ";miniIsoChg;GenMomAngle", 20, 0.0, 0.1, 100, 0.0, 1.0);
     tuple->PostPreS_MiniIsoAllVsGenMomAngle = dir.make<TH2F>("PostPreS_MiniIsoAllVsGenMomAngle", ";miniIsoAll;GenMomAngle", 20, 0.0, 0.1, 100, 0.0, 1.0);
     tuple->PostPreS_MassVsGenMomAngle = dir.make<TH2F>("PostPreS_MassVsGenMomAngle", ";Mass;GenMomAngle",80,0.,4000., 100, 0.0, 1.0);
@@ -1385,41 +1548,41 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_EtaVsGenNumSibling = dir.make<TH2F>("PostPreS_EtaVsGenNumSibling", ";#eta;GenNumSibling",  50, -2.6, 2.6, 100, 0.0, 10.0);
     tuple->PostPreS_ProbQVsGenNumSibling = dir.make<TH2F>("PostPreS_ProbQVsGenNumSibling", ";F_{i}^{pixels};GenNumSibling", 20, 0., 1., 10, 0.0,10.);
     tuple->PostPreS_ProbXYVsGenNumSibling = dir.make<TH2F>("PostPreS_ProbXYVsGenNumSibling", ";ProbXY;GenNumSibling", 20, 0.0, 1.0, 10, 0.0, 10.0);
-    tuple->PostPreS_PtVsGenNumSibling = dir.make<TH2F>("PostPreS_PtVsGenNumSibling", ";p_{T} (GeV);GenNumSibling", 40, 0., PtHistoUpperBound, 100, 0.0, 10.0);
+    tuple->PostPreS_PtVsGenNumSibling = dir.make<TH2F>("PostPreS_PtVsGenNumSibling", ";p_{T} [GeV];GenNumSibling", 40, 0., PtHistoUpperBound, 100, 0.0, 10.0);
     tuple->PostPreS_EoPVsGenNumSibling = dir.make<TH2F>("PostPreS_EoPVsGenNumSibling", ";EoPVsGenNumSibling", 25, 0, 1.5, 100, 0.0, 10.0);
-    tuple->PostPreS_IhVsGenNumSibling = dir.make<TH2F>("PostPreS_IhVsGenNumSibling", ";I_{h} (MeV/cm);GenNumSibling", 200, 0, dEdxM_UpLim, 100, 0.0, 10.0);
+    tuple->PostPreS_IhVsGenNumSibling = dir.make<TH2F>("PostPreS_IhVsGenNumSibling", ";I_{h} [MeV/cm];GenNumSibling", 200, 0, dEdxM_UpLim, 100, 0.0, 10.0);
     tuple->PostPreS_IasVsGenNumSibling = dir.make<TH2F>("PostPreS_IasVsGenNumSibling", ";G_{i}^{strips};GenNumSibling", 10, 0., 1., 100, 0.0, 10.0);
-    tuple->PostPreS_MassTVsGenNumSibling = dir.make<TH2F>("PostPreS_massTVsGenNumSibling", ";m_{T} (GeV);GenNumSibling", 50, 0.0, 250.0, 100, 0.0, 10.0);
+    tuple->PostPreS_MassTVsGenNumSibling = dir.make<TH2F>("PostPreS_massTVsGenNumSibling", ";m_{T} [GeV];GenNumSibling", 50, 0.0, 250.0, 100, 0.0, 10.0);
     tuple->PostPreS_MiniIsoChgVsGenNumSibling = dir.make<TH2F>("PostPreS_MiniIsoChgVsGenNumSibling", ";miniIsoChg;GenNumSibling", 20, 0.0, 0.1, 100, 0.0, 10.0);
     tuple->PostPreS_MiniIsoAllVsGenNumSibling = dir.make<TH2F>("PostPreS_MiniIsoAllVsGenNumSibling", ";miniIsoAll;GenNumSibling", 20, 0.0, 1.0, 100, 0.0, 10.0);
 
-    tuple->PostPreS_EoPVsPfType = dir.make<TH2F>("PostPreS_EoPVsPfType", ";EoPVsPfType", 25, 0.0, 1.5, 9, 0.0, 9.0);
-    tuple->PostPreS_Mass = dir.make<TH1F>("PostPreS_Mass","PostPreS_Mass;Mass (GeV);Tracks / 50 GeV", 80,0.,4000.);
-    tuple->PostPreS_MassVsPfType = dir.make<TH2F>("PostPreS_MassVsPfType","PostPreS_MassVsPfType;Mass (GeV);PF ID",80,0.,4000.,9, 0.0, 9.0);
-    tuple->PostPreS_MassVsPt = dir.make<TH2F>("PostPreS_MassVsPt", ";Mass (GeV);", 80,0.,4000.,80,0.,4000.);
-    tuple->PostPreS_MassVsP = dir.make<TH2F>("PostPreS_MassVsP", ";Mass (GeV);", 80,0.,4000.,80,0.,4000.);
-    tuple->PostPreS_MassVsTNOHFraction = dir.make<TH2F>("PostPreS_MassVsTNOHFraction", ";Mass (GeV);Number of valid hit fraction", 80,0.,4000.,20, 0., 1.);
-    tuple->PostPreS_MassVsTNOPH = dir.make<TH2F>("PostPreS_MassVsTNOPH", ";Mass (GeV);TNOPH", 80,0.,4000.,8, -0.5, 7.5);
-    tuple->PostPreS_MassVsTNOM = dir.make<TH2F>("PostPreS_MassVsTNOM", ";Mass (GeV);Number of measurements;", 80,0.,4000.,40, -0.5, 39.5);
-    tuple->PostPreS_MassVsProbQNoL1 = dir.make<TH2F>("PostPreS_MassVsProbQNoL1", ";Mass (GeV);F_{i}^{pixels}", 80,0.,4000.,20,0.,1.);
-    tuple->PostPreS_MassVsProbXYNoL1 = dir.make<TH2F>("PostPreS_MassVsProbXYNoL1", ";Mass (GeV);ProbXY", 80,0.,4000.,20,0.,1.);
-    tuple->PostPreS_MassVsEoP = dir.make<TH2F>("PostPreS_MassVsEoP", ";Mass (GeV);E/p", 80,0.,4000.,30, 0, 0.3);
-    tuple->PostPreS_MassVsSumpTOverpT = dir.make<TH2F>("PostPreS_MassVsSumpTOverpT", ";Mass (GeV);SumpTOverpT", 80,0.,4000.,80, 0, 2);
-    tuple->PostPreS_MassVsPtErrOverPt = dir.make<TH2F>("PostPreS_MassVsPtErrOverPt", ";Mass (GeV);PtErrOverPt", 80,0.,4000.,40, 0, 1);
-    tuple->PostPreS_MassVsTIsol = dir.make<TH2F>("PostPreS_MassVsTIsol", ";Mass (GeV);TIsol", 80,0.,4000., 25, 0, 100);
-    tuple->PostPreS_MassVsIh = dir.make<TH2F>("PostPreS_MassVsIh", ";Mass (GeV);I_{h} (MeV/cm)", 80,0.,4000.,200, 0, dEdxM_UpLim);
-    tuple->PostPreS_MassVsMassT = dir.make<TH2F>("PostPreS_MassVsMassT", ";Mass (GeV);m_{T} (GeV)", 80,0.,4000.,50, 0.0, 250.0);
-    tuple->PostPreS_MassVsMiniRelIsoAll = dir.make<TH2F>("PostPreS_MassVsMiniRelIsoAll", ";Mass (GeV);MiniRelIsoAll", 80,0.,4000.,20, 0., 0.2);
-    tuple->PostPreS_MassVsMassErr = dir.make<TH2F>("PostPreS_MassVsMassErr", ";Mass (GeV);MassErr", 80,0.,4000.,50, 0., 10.);
+    tuple->PostPreS_EoPVsPfType = dir.make<TH2F>("PostPreS_EoPVsPfType", ";EoP;PfType", 25, 0.0, 1.5, 9, 0.0, 9.0);
+    tuple->PostPreS_Mass = dir.make<TH1F>("PostPreS_Mass","PostPreS_Mass;Mass [GeV];Tracks / 50 GeV", 80,0.,4000.);
+    tuple->PostPreS_MassVsPfType = dir.make<TH2F>("PostPreS_MassVsPfType",";Mass [GeV];PF ID",80,0.,4000.,9, 0.0, 9.0);
+    tuple->PostPreS_MassVsPt = dir.make<TH2F>("PostPreS_MassVsPt", ";Mass [GeV];", 80,0.,4000.,80,0.,4000.);
+    tuple->PostPreS_MassVsP = dir.make<TH2F>("PostPreS_MassVsP", ";Mass [GeV];", 80,0.,4000.,80,0.,4000.);
+    tuple->PostPreS_MassVsTNOHFraction = dir.make<TH2F>("PostPreS_MassVsTNOHFraction", ";Mass [GeV];Number of valid hit fraction", 80,0.,4000.,20, 0., 1.);
+    tuple->PostPreS_MassVsTNOPH = dir.make<TH2F>("PostPreS_MassVsTNOPH", ";Mass [GeV];TNOPH", 80,0.,4000.,8, -0.5, 7.5);
+    tuple->PostPreS_MassVsTNOM = dir.make<TH2F>("PostPreS_MassVsTNOM", ";Mass [GeV];Number of measurements;", 80,0.,4000.,40, -0.5, 39.5);
+    tuple->PostPreS_MassVsProbQNoL1 = dir.make<TH2F>("PostPreS_MassVsProbQNoL1", ";Mass [GeV];F_{i}^{pixels}", 80,0.,4000.,20,0.,1.);
+    tuple->PostPreS_MassVsProbXYNoL1 = dir.make<TH2F>("PostPreS_MassVsProbXYNoL1", ";Mass [GeV];ProbXY", 80,0.,4000.,20,0.,1.);
+    tuple->PostPreS_MassVsEoP = dir.make<TH2F>("PostPreS_MassVsEoP", ";Mass [GeV];E/p", 80,0.,4000.,30, 0, 0.3);
+    tuple->PostPreS_MassVsSumpTOverpT = dir.make<TH2F>("PostPreS_MassVsSumpTOverpT", ";Mass [GeV];SumpTOverpT", 80,0.,4000.,80, 0, 2);
+    tuple->PostPreS_MassVsPtErrOverPt = dir.make<TH2F>("PostPreS_MassVsPtErrOverPt", ";Mass [GeV];PtErrOverPt", 80,0.,4000.,40, 0., 2.);
+    tuple->PostPreS_MassVsTIsol = dir.make<TH2F>("PostPreS_MassVsTIsol", ";Mass [GeV];TIsol [GeV]", 80,0.,4000., 25, 0., 100.);
+    tuple->PostPreS_MassVsIh = dir.make<TH2F>("PostPreS_MassVsIh", ";Mass [GeV];I_{h} [MeV/cm]", 80,0.,4000.,200, 0, dEdxM_UpLim);
+    tuple->PostPreS_MassVsMassT = dir.make<TH2F>("PostPreS_MassVsMassT", ";Mass [GeV];m_{T} [GeV]", 80,0.,4000.,50, 0.0, 250.0);
+    tuple->PostPreS_MassVsMiniRelIsoAll = dir.make<TH2F>("PostPreS_MassVsMiniRelIsoAll", ";Mass [GeV];MiniRelIsoAll", 80,0.,4000.,20, 0., 0.2);
+    tuple->PostPreS_MassVsMassErr = dir.make<TH2F>("PostPreS_MassVsMassErr", ";Mass [GeV];MassErr/Mass", 80,0.,4000.,50, 0., 10.);
 
     // Maybe we dont need these anymore
     // Have to deal with this later on, should a boolean to have them or not
-  //  tuple->PostPreS_IasAllIhVsLayer = dir.make<TH3F>("PostPreS_IasAllIhVsLayer", ";G_{i}^{strips};I_{h} (MeV/cm);LayerIndex (full tracker)", 50, 0., dEdxS_UpLim, 200, 0., dEdxM_UpLim, 35, 0.,35.);
-  //  tuple->PostPreS_IasPixelIhVsLayer = dir.make<TH3F>("PostPreS_IasPixelIhVsLayer", ";G_{i}^{strips};I_{h} (MeV/cm);LayerIndex (pixels)", 50, 0., dEdxS_UpLim, 200, 0., dEdxM_UpLim, 10, 0.,10.);
-  //  tuple->PostPreS_IasStripIhVsLayer = dir.make<TH3F>("PostPreS_IasStripIhVsLayer", ";G_{i}^{strips};I_{h} (MeV/cm);LayerIndex (strips)", 50, 0., dEdxS_UpLim, 200, 0., dEdxM_UpLim, 25, 0.,25.);
+  //  tuple->PostPreS_IasAllIhVsLayer = dir.make<TH3F>("PostPreS_IasAllIhVsLayer", ";G_{i}^{strips};I_{h} [MeV/cm];LayerIndex (full tracker)", 50, 0., dEdxS_UpLim, 200, 0., dEdxM_UpLim, 35, 0.,35.);
+  //  tuple->PostPreS_IasPixelIhVsLayer = dir.make<TH3F>("PostPreS_IasPixelIhVsLayer", ";G_{i}^{strips};I_{h} [MeV/cm];LayerIndex (pixels)", 50, 0., dEdxS_UpLim, 200, 0., dEdxM_UpLim, 10, 0.,10.);
+  //  tuple->PostPreS_IasStripIhVsLayer = dir.make<TH3F>("PostPreS_IasStripIhVsLayer", ";G_{i}^{strips};I_{h} [MeV/cm];LayerIndex (strips)", 50, 0., dEdxS_UpLim, 200, 0., dEdxM_UpLim, 25, 0.,25.);
 
     tuple->PostPreS_CluProbQVsPixelLayer = dir.make<TH2F>("PostPreS_CluProbQVsPixelLayer", ";Cluster Prob_{Q} (pixels);Pixel Layer",20,0.,1.,4,0.,4.);
-    tuple->PostPreS_CluProbXYVsPixelLayer = dir.make<TH2F>("PostPreS_CluProbXYVsPixelLayer", ";Cluster Prob_{XY,pixelAV} (pixels);Pixel Layer",100,0.,1.,4,0.,4.);
+    tuple->PostPreS_CluProbXYVsPixelLayer = dir.make<TH2F>("PostPreS_CluProbXYVsPixelLayer", ";Cluster Prob_{XY} (pixels);Pixel Layer",100,0.,1.,4,0.,4.);
     tuple->PostPreS_CluSizeVsPixelLayer = dir.make<TH2F>("PostPreS_CluSizeVsPixelLayer", ";CluSize;Pixel Layer",10,0.,10.,4,0.,4.);
     tuple->PostPreS_CluSizeXVsPixelLayer = dir.make<TH2F>("PostPreS_CluSizeXVsPixelLayer", ";CluSizeX;Pixel Layer",10,0.,10.,4,0.,4.);
     tuple->PostPreS_CluSizeYVsPixelLayer = dir.make<TH2F>("PostPreS_CluSizeYVsPixelLayer", ";CluSizeY;Pixel Layer",10,0.,10.,4,0.,4.);
@@ -1429,7 +1592,7 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_CluSpecInCPEVsPixelLayer->GetXaxis()->SetBinLabel(3,"spansTwoROCs");
 
     tuple->PostPreS_CluProbQVsPixelLayer_highIas = dir.make<TH2F>("PostPreS_CluProbQVsPixelLayer_highIas", ";Cluster Prob_{Q} (pixels);Layer",20,0.,1.,4,0.,4.);
-    tuple->PostPreS_CluProbXYVsPixelLayer_highIas = dir.make<TH2F>("PostPreS_CluProbXYVsPixelLayer_highIas", ";Cluster Prob_{XY,pixelAV} (pixels);Layer",100,0.,1.,4,0.,4.);
+    tuple->PostPreS_CluProbXYVsPixelLayer_highIas = dir.make<TH2F>("PostPreS_CluProbXYVsPixelLayer_highIas", ";Cluster Prob_{XY} (pixels);Layer",100,0.,1.,4,0.,4.);
     tuple->PostPreS_CluSizeVsPixelLayer_highIas = dir.make<TH2F>("PostPreS_CluSizeVsPixelLayer_highIas", ";CluSize;Layer",10,0.,10.,4,0.,4.);
     tuple->PostPreS_CluSizeXVsPixelLayer_highIas = dir.make<TH2F>("PostPreS_CluSizeXVsPixelLayer_highIas", ";CluSizeX;Layer",10,0.,10.,4,0.,4.);
     tuple->PostPreS_CluSizeYVsPixelLayer_highIas = dir.make<TH2F>("PostPreS_CluSizeYVsPixelLayer_highIas", ";CluSizeY;Layer",10,0.,10.,4,0.,4.);
@@ -1465,17 +1628,20 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostPreS_RecoPfJetsNum = dir.make<TH1F>("PostPreS_RecoPfJetsNum", ";Number of PF jets;Tracks / 1",  15, -0.5, 15.5);
     tuple->PostPreS_RecoPfHT = dir.make<TH1F>("PostPreS_RecoPfHT", ";PfHT",100,0.,2000.);
     tuple->PostPreS_GenBeta = dir.make<TH1F>("PostPreS_GenBeta", ";#beta;Gen candidate / 0.05", 20, 0., 1.);
+    tuple->PostPreS_TriggerGenBeta = dir.make<TH1F>("PostPreS_TriggerGenBeta", ";#beta^{HLT};Tracks / 0.05", 20, 0., 1.);
 
 
     // add  plots in Gitemplate region  to answer Slava's questions about charge resolution
-     tuple->PostPreS_CpPL_pix_CR_veryLowPt = dir.make<TH2F>("PostPreS_CpPL_pix_CR_veryLowPt","PostPreS_CpPL_pix_CR_veryLowPt",100,0,10,10,0,10);
-     tuple->PostPreS_CpPL_strip_CR_veryLowPt = dir.make<TH2F>("PostPreS_CpPL_strip_CR_veryLowPt","PostPreS_CpPL_strip_CR_veryLowPt",100,0,10,25,0,25);
-     tuple->PostPreS_Ih_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_CR_veryLowPt", ";I_{h} (MeV/cm);Tracks / bin", 200, 0, dEdxM_UpLim);
-     tuple->PostPreS_Ihstrip_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ihstrip_CR_veryLowPt", ";I_{h} (strip only) (MeV/cm);Tracks / bin", 200, 0, dEdxM_UpLim);
-     tuple->PostPreS_Ih_noclean_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_noclean_CR_veryLowPt", ";I_{h}(no cleaning) (MeV/cm);Tracks / bin", 200, 0, dEdxM_UpLim);
-     tuple->PostPreS_Ih_noinside_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_noinside_CR_veryLowPt", ";I_{h}(no clean no inside) (MeV/cm);Tracks / bin", 200, 0, dEdxM_UpLim);
-     tuple->PostPreS_Ih_nopixcl_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_nopixcl_CR_veryLowPt", ";I_{h}(no pix cleaning) (MeV/cm);Tracks / bin", 200, 0, dEdxM_UpLim);
-     tuple->PostPreS_Pt_CR_veryLowPt = dir.make<TH1F>("PostPreS_Pt_CR_veryLowPt", ";p_{T} (GeV);Tracks / bin", 50, 0., 50.);
+    tuple->PostPreS_CluPathLenghtVsPixLayer_CR_veryLowPt = dir.make<TH2F>("PostPreS_CluPathLenghtVsPixLayer_CR_veryLowPt",";Path lenght (um); Pixel layer",500, 250., 750.,10,0.,10.);
+     tuple->PostPreS_CluDeDxVsPixLayer_CR_veryLowPt = dir.make<TH2F>("PostPreS_CluDeDxVsPixLayer_CR_veryLowPt",";Cluster dEdx [MeV/cm]; Pixel layer",100,0.,10.,10,0.,10.);
+     tuple->PostPreS_CluDeDxVsStripsLayer_CR_veryLowPt = dir.make<TH2F>("PostPreS_CluDeDxVsStripsLayer_CR_veryLowPt",";Cluster dEdx [MeV/cm]; Strip layer",100,0.,10.,25,0.,25.);
+     tuple->PostPreS_Ih_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_CR_veryLowPt", ";I_{h} [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+//     tuple->PostPreS_Ihstrip_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ihstrip_CR_veryLowPt", ";I_{h} (strip only) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+     tuple->PostPreS_Ih_noL1_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_noL1_CR_veryLowPt", ";I_{h} (noL1) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+     tuple->PostPreS_Ih_noclean_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_noclean_CR_veryLowPt", ";I_{h}(no cleaning) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+     tuple->PostPreS_Ih_noinside_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_noinside_CR_veryLowPt", ";I_{h}(no clean no inside) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+     tuple->PostPreS_Ih_nopixcl_CR_veryLowPt = dir.make<TH1F>("PostPreS_Ih_nopixcl_CR_veryLowPt", ";I_{h}(no pix cleaning) [MeV/cm];Tracks / bin", 200, 0, dEdxM_UpLim);
+     tuple->PostPreS_Pt_CR_veryLowPt = dir.make<TH1F>("PostPreS_Pt_CR_veryLowPt", ";p_{T} [GeV];Tracks / bin", 50, 0., 50.);
      tuple->PostPreS_ProbQNoL1_CR_veryLowPt = dir.make<TH1F>("PostPreS_ProbQNoL1_CR_veryLowPt", ";F_{i}^{pixels};Tracks / bin", 20, 0., 1.);
 
   }
@@ -1487,7 +1653,9 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   tuple->PostS_HltMatchTrackLevel->GetXaxis()->SetBinLabel(5,"Bin 1 + best HSCP = #mu^{HLT}");
 //  tuple->PostS_HltMatchTrackLevel->GetYaxis()->SetLabelSize(12)
   
-  tuple->PostPreS_RecoPfMet = dir.make<TH1F>("PostPreS_RecoPfMet", ";PfMet",200,0.,2000.);
+  tuple->PostS_NotMuonsGenBeta = dir.make<TH1F>("PostS_NotMuonsGenBeta", ";Not-Tight ID mu's gen #beta;Events / 0.05",20,0.,1.);
+  
+  tuple->PostPreS_RecoPfMet = dir.make<TH1F>("PostPreS_RecoPfMet", ";PfMet [GeV]",200,0.,2000.);
   tuple->PostPreS_RecoPfMetPhi = dir.make<TH1F>("PostPreS_RecoPfMetPhi", ";PfMetPhi",30,0.,3.2);
 
   //Initialize histograms for number of bins.  For everything but muon only PredBins=0 so no histograms created
@@ -1495,9 +1663,9 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     char Suffix[1024];
     sprintf(Suffix, "_%i", i);
       Name.append(Suffix);
-    tuple->BefPreS_Pt_Binned[std::to_string(i)] = dir.make<TH1F>("BefPreS_Pt_Binned", ";Pt_Binned", 40, 0., PtHistoUpperBound);
+    tuple->BefPreS_Pt_Binned[std::to_string(i)] = dir.make<TH1F>("BefPreS_Pt_Binned", ";p_{T} (Binned) [GeV]", 40, 0., PtHistoUpperBound);
       Name.append(Suffix);
-    tuple->BefPreS_TOF_Binned[std::to_string(i)] = dir.make<TH1F>("BefPreS_TOF_Binned", ";TOF_Binned", 150, -1, 5);
+    tuple->BefPreS_TOF_Binned[std::to_string(i)] = dir.make<TH1F>("BefPreS_TOF_Binned", ";TOF (Binned) [GeV]", 150, -1, 5);
   }
 
   tuple->PostS_CutIdVsEta_RegionA = dir.make<TH2F>("PostS_CutIdVsEta_RegionA", ";NCuts;#eta (RegionA)", NCuts, 0, NCuts, 52, -2.6, 2.6);
@@ -1513,20 +1681,20 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
 //  tuple->PostS_CutIdVsBeta_postPtAndIas = dir.make<TH2F>("PostS_CutIdVsBeta_postPtAndIas", ";NCuts;#beta (p_{T} > p_{T,cut} and G_{i}^{strips} > I_{as,cut} )", NCuts, 0, NCuts, 20, 0, 1);
 //  tuple->PostS_CutIdVsBeta_postPtAndIasAndTOF = dir.make<TH2F>("PostS_CutIdVsBeta_postPtAndIasAndTOF", ";NCuts;#beta (p_{T} > p_{T,cut} and G_{i}^{strips} > I_{as,cut} and TOF > TOF_{cut} ", NCuts, 0, NCuts, 20, 0, 1);
 
-  tuple->PostS_CutIdVsP = dir.make<TH2F>("PostS_CutIdVsP", ";NCuts;p (GeV)", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound);
-  tuple->PostS_CutIdVsPt = dir.make<TH2F>("PostS_CutIdVsPt", ";NCuts;p_{T} (GeV)", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound);
+  tuple->PostS_CutIdVsP = dir.make<TH2F>("PostS_CutIdVsP", ";NCuts;p [GeV]", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound);
+  tuple->PostS_CutIdVsPt = dir.make<TH2F>("PostS_CutIdVsPt", ";NCuts;p_{T} [GeV]", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound);
   tuple->PostS_CutIdVsIas = dir.make<TH2F>("PostS_CutIdVsIas", ";NCuts;G_{i}^{strips}", NCuts, 0, NCuts, 10, 0., 1.);
-  tuple->PostS_CutIdVsIh = dir.make<TH2F>("PostS_CutIdVsIh", ";NCuts;I_{h} (MeV/cm)", NCuts, 0, NCuts, 100, 0, dEdxM_UpLim);
+  tuple->PostS_CutIdVsIh = dir.make<TH2F>("PostS_CutIdVsIh", ";NCuts;I_{h} [MeV/cm]", NCuts, 0, NCuts, 100, 0, dEdxM_UpLim);
 
     // not running this for a bit, they are not used currently, and being 3D histos they are quite big
-//    tuple->PostS_CutIdVsPVsIas = dir.make<TH3F>("PostS_CutIdVsPVsIas", ";NCuts;p (GeV);G_{i}^{strips}", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound, 10, 0., 1.);
-//    tuple->PostS_CutIdVsPVsIh = dir.make<TH3F>("PostS_CutIdVsPVsIh", ";NCuts;P;I_{h} (MeV/cm)", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound, 100, 0, dEdxM_UpLim);
-//  tuple->PostS_CutIdVsPtVsIas = dir.make<TH3F>("PostS_CutIdVsPtVsIas", ";NCuts;p_{T} (GeV);G_{i}^{strips}", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound, 10, 0., 1.);
-//  tuple->PostS_CutIdVsPtVsIh = dir.make<TH3F>("PostS_CutIdVsPtVsIh", ";NCuts;p_{T} (GeV);I_{h} (MeV/cm)", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound, 100, 0, dEdxM_UpLim);
+//    tuple->PostS_CutIdVsPVsIas = dir.make<TH3F>("PostS_CutIdVsPVsIas", ";NCuts;p [GeV];G_{i}^{strips}", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound, 10, 0., 1.);
+//    tuple->PostS_CutIdVsPVsIh = dir.make<TH3F>("PostS_CutIdVsPVsIh", ";NCuts;P;I_{h} [MeV/cm]", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound, 100, 0, dEdxM_UpLim);
+//  tuple->PostS_CutIdVsPtVsIas = dir.make<TH3F>("PostS_CutIdVsPtVsIas", ";NCuts;p_{T} [GeV];G_{i}^{strips}", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound, 10, 0., 1.);
+//  tuple->PostS_CutIdVsPtVsIh = dir.make<TH3F>("PostS_CutIdVsPtVsIh", ";NCuts;p_{T} [GeV];I_{h} [MeV/cm]", NCuts, 0, NCuts, 40, 0., PtHistoUpperBound, 100, 0, dEdxM_UpLim);
 //  if (TypeMode > 1) {
 //    tuple->PostS_CutIdVsTOF = dir.make<TH2F>("PostS_CutIdVsTOF", ";NCuts;TOF", NCuts, 0, NCuts, 50, 1, 5);
 //    tuple->PostS_CutIdVsTOFVsIas = dir.make<TH3F>("PostS_CutIdVsTOFVsIas", ";NCuts;TOF;G_{i}^{strips}", NCuts, 0, NCuts, 50, 0., 5, 10, 0., 1.);
-//    tuple->PostS_CutIdVsTOFVsIh = dir.make<TH3F>("PostS_CutIdVsTOFVsIh", ";NCuts;TOF;I_{h} (MeV/cm)", NCuts, 0, NCuts, 50, 0., 5, 100, 0, dEdxM_UpLim);
+//    tuple->PostS_CutIdVsTOFVsIh = dir.make<TH3F>("PostS_CutIdVsTOFVsIh", ";NCuts;TOF;I_{h} [MeV/cm]", NCuts, 0, NCuts, 50, 0., 5, 100, 0, dEdxM_UpLim);
 //  }
   
   tuple->PostS_RelativePtShift = dir.make<TH1F>("PostS_RelativePtShift", ";#Delta p_{T} / p_{T}; Events / bin", 20, 0., 0.1);
@@ -1544,66 +1712,82 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   tuple->PostS_SR2FAIL_Ias_PUC = dir.make<TH1F>("PostS_SR2FAIL_Ias_PUC", ";G_{i}^{strips} (p_{T} > 200 GeV, F_{i}^{pixels} < 0.9, PU > 30);Events / 0.1", 10, 0, dEdxS_UpLim);
   
   tuple->PostS_SR2FAIL_PV = dir.make<TH1F>("PostS_SR2FAIL_PV", ";PV (p_{T} > 200 GeV, F_{i}^{pixels} < 0.9, G_{i}^{strips} > 0.25);Events / 1", 60, -0.5, 59.5);
+  tuple->PostS_SR2FAIL_PtErrOverPtVsIas = dir.make<TH2F>("PostS_SR2FAIL_PtErrOverPtVsIas", ";#sigma_{p_{T}}/p_{T} (p_{T} > 200 GeV, F_{i}^{pixels} < 0.9;G_{i}^{strips};Events / bin", 40, 0., 2., 20, 0., 1.);
+  tuple->PostS_SR2FAIL_TIsolVsIas = dir.make<TH2F>("PostS_SR2FAIL_TIsolVsIas", ";#Sigma_{R<0.3} p_{T} - p_{T,cand} [GeV] (p_{T} > 200 GeV, F_{i}^{pixels} < 0.9);G_{i}^{strips};Events / bin", 20, 0., 100., 20, 0., 1.);
   tuple->PostS_SR2FAIL_PtErrOverPt2 = dir.make<TH1F>("PostS_SR2FAIL_PtErrOverPt2", ";#sigma_{p_{T}}/p_{T}^{2} (p_{T} > 200 GeV, F_{i}^{pixels} < 0.9, G_{i}^{strips} > 0.25);Events / bin", 40, 0, 0.003);
   tuple->PostS_SR2FAIL_RelDiffTrackPtAndTruthPt = dir.make<TH1F>("PostS_SR2FAIL_RelDiffTrackPtAndTruthPt", ";(track p_{T}^{reco} - p_{T}^{gen}) / p_{T}^{gen} (p_{T} > 200 GeV, F_{i}^{pixels} < 0.9, G_{i}^{strips} > 0.25);Events / bin", 60,-1.0,2.0);
   tuple->PostS_SR2FAIL_RelDiffTrackPtAndTruthPtVsTruthPt = dir.make<TH2F>("PostS_SR2FAIL_RelDiffTrackPtAndTruthPtVsTruthPt", ";(track p_{T}^{reco} - p_{T}^{gen}) / p_{T}^{gen} (p_{T} > 200 GeV, F_{i}^{pixels} < 0.9, G_{i}^{strips} > 0.25);p_{T}^{gen}", 60,-1.0,2.0,20,0.,4000.);
   
+  tuple->PostS_SR2PASS_PtErrOverPtVsIas = dir.make<TH2F>("PostS_SR2PASS_PtErrOverPtVsIas", ";#sigma_{p_{T}}/p_{T} (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9;G_{i}^{strips};Events / bin", 40, 0., 2., 20, 0., 1.);
+  tuple->PostS_SR2PASS_TIsolVsIas = dir.make<TH2F>("PostS_SR2PASS_TIsolVsIas", ";#Sigma_{R<0.3} p_{T} - p_{T,cand} [GeV] (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9);G_{i}^{strips};Events / bin", 20, 0., 100., 20, 0., 1.);
+  
   
   tuple->PostS_SR2PASS_Ias_PUA = dir.make<TH1F>("PostS_SR2PASS_Ias_PUA", ";G_{i}^{strips} (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9, PU < 15);Events / 0.1", 10, 0, dEdxS_UpLim);
   tuple->PostS_SR2PASS_Ias_PUB = dir.make<TH1F>("PostS_SR2PASS_Ias_PUB", ";G_{i}^{strips} (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9, 15 < PU < 30);Events / 0.1", 10, 0, dEdxS_UpLim);
   tuple->PostS_SR2PASS_Ias_PUC = dir.make<TH1F>("PostS_SR2PASS_Ias_PUC", ";G_{i}^{strips} (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9, PU > 30);Events / 0.1", 10, 0, dEdxS_UpLim);
   
+  tuple->PostS_SR2PASS_RunVsLs = dir.make<TH2F>("PostS_SR2PASS_RunVsLs", ";Run number;Lumisection",  545, 271000,325500, 1500, 0.,1500.);
+  tuple->PostS_SR2PASS_Ls = dir.make<TH1F>("PostS_SR2PASS_Ls", ";Lumisection", 1500, 0.,1500.);
+  
   tuple->PostS_SR2PASS_PV = dir.make<TH1F>("PostS_SR2PASS_PV", ";PV (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9, G_{i}^{strips} > 0.25);Events / 1", 60, -0.5, 59.5);
   tuple->PostS_SR2PASS_PtErrOverPt2 = dir.make<TH1F>("PostS_SR2PASS_PtErrOverPt2", ";#sigma_{p_{T}}/p_{T}^{2} (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9, G_{i}^{strips} > 0.25);Events / bin", 40, 0, 0.003);
   tuple->PostS_SR2PASS_RelDiffTrackPtAndTruthPt = dir.make<TH1F>("PostS_SR2PASS_RelDiffTrackPtAndTruthPt", ";(track p_{T}^{reco} - p_{T}^{gen}) / p_{T}^{gen} (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9, G_{i}^{strips} > 0.25);Events / bin", 60,-1.0,2.0);
-  tuple->PostS_SR2PASS_RelDiffTrackPtAndTruthPtVsTruthPt = dir.make<TH2F>("PostS_SR2PASS_RelDiffTrackPtAndTruthPtVsTruthPt", ";(track p_{T}^{reco} - p_{T}^{gen}) / p_{T}^{gen} (p_{T} > 200 GeV, F_{i}^{pixels} < 0.9, G_{i}^{strips} > 0.25);p_{T}^{gen}", 60,-1.0,2.0,20,0.,4000.);
+  tuple->PostS_SR2PASS_RelDiffTrackPtAndTruthPtVsTruthPt = dir.make<TH2F>("PostS_SR2PASS_RelDiffTrackPtAndTruthPtVsTruthPt", ";(track p_{T}^{reco} - p_{T}^{gen}) / p_{T}^{gen} (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9, G_{i}^{strips} > 0.25);p_{T}^{gen}", 60,-1.0,2.0,20,0.,4000.);
   
-  tuple->PostS_ProbQNoL1VsIasVsPt = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+  tuple->PostS_ProbQNoL1VsIasVsPt = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
   if (doSystsPlots_) {
-    tuple->PostS_ProbQNoL1VsIasVsPt_Pileup_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Pileup_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_Pileup_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Pileup_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_Ias_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Ias_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_Ias_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Ias_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_Pt_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Pt_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_Pt_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Pt_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_Trigger_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Trigger_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_Trigger_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Trigger_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Pileup_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Pileup_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Pileup_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Pileup_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_ProbQNoL1_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Ias_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Ias_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_IasShift_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_IasShift_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Ias_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Ias_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+
+    tuple->PostS_ProbQNoL1VsIasVsPt_IasShift_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_IasShift_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+
+
+
+    tuple->PostS_ProbQNoL1VsIasVsPt_Pt_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Pt_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Pt_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Pt_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Trigger_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Trigger_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Trigger_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_Trigger_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
   }
-  tuple->PostS_ProbQNoL1VsFiStripsVsPt = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+  tuple->PostS_ProbQNoL1VsFiStripsVsPt = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
   if (doSystsPlots_) {
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pileup_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Pileup_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pileup_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Pileup_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_ProbQNoL1_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_ProbQNoL1_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_ProbQNoL1_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_ProbQNoL1_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Ias_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Ias_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Ias_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Ias_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pt_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Pt_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pt_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Pt_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Trigger_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Trigger_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Trigger_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Trigger_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pileup_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Pileup_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pileup_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Pileup_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_ProbQNoL1_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_ProbQNoL1_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_ProbQNoL1_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_ProbQNoL1_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Ias_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Ias_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Ias_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Ias_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pt_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Pt_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pt_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Pt_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Trigger_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Trigger_up", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Trigger_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsVsPt_Trigger_down", ";F_{i}^{pixels};F_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
   }
+  tuple->PostS_ProbQNoL1VsFiStripsLogVsPt = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+  tuple->PostS_GenBeta = dir.make<TH1F>("PostS_GenBeta", ";#beta;Gen candidate / 0.05", 20, 0., 1.);
+  tuple->PostS_TriggerGenBeta = dir.make<TH1F>("PostS_TriggerGenBeta", ";#beta^{HLT};Events / 0.05", 20, 0., 1.);
 
-  tuple->PostS_ProbQNoL1VsFiStripsLogVsPt = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
   if (doSystsPlots_) {
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_ProbQNoL1_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_ProbQNoL1_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_ProbQNoL1_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_ProbQNoL1_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} (GeV)",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_ProbQNoL1_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_ProbQNoL1_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_ProbQNoL1_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_ProbQNoL1_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_up = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_up", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_down = dir.make<TH3F>("PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_down", ";F_{i}^{pixels};-log(1-F_{i}^{strips});p_{T} [GeV]",20, 0., 1., 120, 0., 6.,160, 0., PtHistoUpperBound);
     
-    tuple->PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_MuonIDSF_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonIDSF_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_MuonIDSF_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonIDSF_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
-    tuple->PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} (GeV)",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_MuonIDSF_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonIDSF_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_MuonIDSF_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonIDSF_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_up = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_up", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
+    tuple->PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_down = dir.make<TH3F>("PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_down", ";F_{i}^{pixels};G_{i}^{strips};p_{T} [GeV]",20, 0., 1., 100, 0., 1.,160, 0., PtHistoUpperBound);
 
     // Inclusive 2D plots for Alphabet
     tuple->PostS_ProbQNoL1VsIas_Pileup_up = dir.make<TH2F>("PostS_ProbQNoL1VsIas_Pileup_up", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
@@ -1646,7 +1830,9 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->PostS_SR2_ProbQNoL1VsIas_Pt_up = dir.make<TH2F>("PostS_SR2_ProbQNoL1VsIas_Pt_up", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
     tuple->PostS_SR2_ProbQNoL1VsIas_Pt_down = dir.make<TH2F>("PostS_SR2_ProbQNoL1VsIas_Pt_down", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
     tuple->PostS_SR2_ProbQNoL1VsIas_Ias_up = dir.make<TH2F>("PostS_SR2_ProbQNoL1VsIas_Ias_up", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
+    tuple->PostS_SR2_ProbQNoL1VsIas_IasShift_up = dir.make<TH2F>("PostS_SR2_ProbQNoL1VsIas_IasShift_up", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
     tuple->PostS_SR2_ProbQNoL1VsIas_Ias_down = dir.make<TH2F>("PostS_SR2_ProbQNoL1VsIas_Ias_down", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
+    tuple->PostS_SR2_ProbQNoL1VsIas_IasShift_down = dir.make<TH2F>("PostS_SR2_ProbQNoL1VsIas_IasShift_down", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
     tuple->PostS_SR2_ProbQNoL1VsIas_Trigger_up = dir.make<TH2F>("PostS_SR2_ProbQNoL1VsIas_Trigger_up", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
     tuple->PostS_SR2_ProbQNoL1VsIas_Trigger_down = dir.make<TH2F>("PostS_SR2_ProbQNoL1VsIas_Trigger_down", ";F_{i}^{pixels};G_{i}^{strips};Events",20, 0., 1., 50, 0., 1.);
   }
@@ -1732,6 +1918,441 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
   tuple->PostS_VR3_Mass_C_down2 = dir.make<TH1F>("PostS_VR3_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
 
 
+  //Fpix mass reconstruction method
+
+  //VR1 pt 70
+  tuple->PostS_VR1_pt70_Fpix_Mass = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix = dir.make<TH1F>("PostS_VR1_pt70_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_VR1_pt70_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt70_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt70_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt70_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt70_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt70_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_VR1_pt70_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  //END VR1 pt 100
+
+
+  //VR1 pt 100
+  tuple->PostS_VR1_pt100_Fpix_Mass = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix = dir.make<TH1F>("PostS_VR1_pt100_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_VR1_pt100_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt100_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt100_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt100_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt100_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt100_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_VR1_pt100_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  //END VR1 pt 100
+
+  
+  //VR1 pt 200
+  tuple->PostS_VR1_pt200_Fpix_Mass = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix = dir.make<TH1F>("PostS_VR1_pt200_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_VR1_pt200_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt200_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt200_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt200_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt200_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt200_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_VR1_pt200_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  //END VR1 pt 200
+
+  //VR1 pt 300
+  tuple->PostS_VR1_pt300_Fpix_Mass = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix = dir.make<TH1F>("PostS_VR1_pt300_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_VR1_pt300_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt300_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt300_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt300_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_VR1_pt300_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_VR1_pt300_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_VR1_pt300_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  //END VR1 pt 300
+
+  //*************************************************************************
+  //************************ SEARCH REGIONS *********************************
+  //*************************************************************************
+
+
+  //SR0 (Fpix > 0.8) pt 70
+  tuple->PostS_SR0_pt70_Fpix_Mass = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix = dir.make<TH1F>("PostS_SR0_pt70_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR0_pt70_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt70_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt70_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt70_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt70_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt70_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR0_pt70_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+
+  //SR0 (Fpix > 0.8) pt 100
+  tuple->PostS_SR0_pt100_Fpix_Mass = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix = dir.make<TH1F>("PostS_SR0_pt100_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR0_pt100_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt100_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt100_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt100_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt100_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt100_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR0_pt100_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+  //SR0 (Fpix > 0.8) pt 200
+  tuple->PostS_SR0_pt200_Fpix_Mass = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix = dir.make<TH1F>("PostS_SR0_pt200_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR0_pt200_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt200_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt200_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt200_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt200_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt200_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR0_pt200_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+  //SR0 (Fpix > 0.8) pt 300
+  tuple->PostS_SR0_pt300_Fpix_Mass = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix = dir.make<TH1F>("PostS_SR0_pt300_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR0_pt300_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt300_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt300_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt300_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR0_pt300_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR0_pt300_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR0_pt300_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  //*************************************************************************
+  //END SR0 (Fpix > 0.8)
+
+
+  //SR1 (Fpix > 0.9) pt 70
+  tuple->PostS_SR1_pt70_Fpix_Mass = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix = dir.make<TH1F>("PostS_SR1_pt70_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR1_pt70_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt70_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt70_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt70_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt70_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt70_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR1_pt70_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+
+
+  //SR1 (Fpix > 0.9) pt 100
+  tuple->PostS_SR1_pt100_Fpix_Mass = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix = dir.make<TH1F>("PostS_SR1_pt100_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR1_pt100_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt100_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt100_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt100_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt100_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt100_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR1_pt100_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+  //SR1 (Fpix > 0.9) pt 200
+  tuple->PostS_SR1_pt200_Fpix_Mass = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix = dir.make<TH1F>("PostS_SR1_pt200_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR1_pt200_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt200_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt200_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt200_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt200_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt200_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR1_pt200_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+  //SR1 (Fpix > 0.9) pt 300
+  tuple->PostS_SR1_pt300_Fpix_Mass = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix = dir.make<TH1F>("PostS_SR1_pt300_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR1_pt300_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt300_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt300_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt300_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR1_pt300_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR1_pt300_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR1_pt300_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  //*************************************************************************
+
+
+  //SR2 (Fpix > 0.99) pt 70
+  tuple->PostS_SR2_pt70_Fpix_Mass = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix = dir.make<TH1F>("PostS_SR2_pt70_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR2_pt70_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt70_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt70_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt70_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt70_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt70_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR2_pt70_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+
+  //SR2 (Fpix > 0.99) pt 100
+  tuple->PostS_SR2_pt100_Fpix_Mass = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix = dir.make<TH1F>("PostS_SR2_pt100_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR2_pt100_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt100_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt100_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt100_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt100_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt100_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR2_pt100_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+  //SR2 (Fpix > 0.99) pt 200
+  tuple->PostS_SR2_pt200_Fpix_Mass = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix = dir.make<TH1F>("PostS_SR2_pt200_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR2_pt200_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt200_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt200_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt200_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt200_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt200_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR2_pt200_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  
+  //SR2 (Fpix > 0.99) pt 300
+  tuple->PostS_SR2_pt300_Fpix_Mass = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix = dir.make<TH1F>("PostS_SR2_pt300_Fpix", ";F_{i}^{pixels};Events / bin", 20, 0., 1.);
+
+  tuple->PostS_SR2_pt300_Fpix_Mass_Pileup_up = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_Pileup_down = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt300_Fpix_Mass_ProbQNoL1_up = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_ProbQNoL1_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_ProbQNoL1_down = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_ProbQNoL1_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt300_Fpix_Mass_Pt_up = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_Pt_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_Pt_down = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_Pt_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt300_Fpix_Mass_Trigger_up = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_Trigger_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_Trigger_down = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_Trigger_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+  tuple->PostS_SR2_pt300_Fpix_Mass_K_up1 = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_K_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_K_down1 = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_K_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_C_up1 = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_C_up1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_C_down1 = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_C_down1", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_K_up2 = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_K_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_K_down2 = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_K_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_C_up2 = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_C_up2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+  tuple->PostS_SR2_pt300_Fpix_Mass_C_down2 = dir.make<TH1F>("PostS_SR2_pt300_Fpix_Mass_C_down2", ";Mass [GeV];Events / bin", 400, 0, 4000);
+
+
+  //*************************************************************************
+  //*************************************************************************
+
   tuple->PostS_SR1_Mass = dir.make<TH1F>("PostS_SR1_Mass", ";Mass [GeV];Events / bin", 400, 0, 4000);
   tuple->PostS_SR1_Mass_Pileup_up = dir.make<TH1F>("PostS_SR1_Mass_Pileup_up", ";Mass [GeV];Events / bin", 400, 0, 4000);
   tuple->PostS_SR1_Mass_Pileup_down = dir.make<TH1F>("PostS_SR1_Mass_Pileup_down", ";Mass [GeV];Events / bin", 400, 0, 4000);
@@ -2038,35 +2659,35 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     // K and C
     tuple->K_and_C_Ih_noL1_VsP_loose1 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_loose1",";P_loose1;Ih_noL1", 50,0,5, 240, 2.,14.);
     tuple->K_and_C_Ih_noL1_VsP_loose2 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_loose2",";P_loose2;Ih_noL1", 250,0,50, 240, 2.,14.);
-    tuple->K_and_C_Ih_noL1_VsP_eta1_loose1 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_eta1_loose1",";eta1_loose1;Ih_noL1", 50,0,5, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_eta1_loose2 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_eta1_loose2",";eta1_loose2;Ih_noL1", 250,0,50, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_eta2_loose1 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_eta2_loose1",";P_eta2_loose1;Ih_noL1", 50,0,5, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_eta2_loose2 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_eta2_loose2",";P_eta2_loose2;Ih_noL1", 250,0,50, 240, 2., 14.);
     tuple->K_and_C_Ih_strip_VsP_loose1 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_loose1",";P_loose1;Ih_strip", 50,0,5, 240, 2., 14.);
     tuple->K_and_C_Ih_strip_VsP_loose2 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_loose2",";P_loose2;Ih_strip", 250,0,50, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_eta1_loose1 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_eta1_loose1",";eta1_loose1;Ih_strip", 50,0,5, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_eta1_loose2 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_eta1_loose2",";eta1_loose2;Ih_strip", 250,0,50, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_eta2_loose1 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_eta2_loose1",";P_eta2_loose1;Ih_strip", 50,0,5, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_eta2_loose2 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_eta2_loose2",";P_eta2_loose2;Ih_strip", 250,0,50, 240, 2., 14.);
 
     tuple->K_and_C_Ih_noL1_VsP_1 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_1",";Ih_noL1_VsP_1", 50,0,5, 240, 2., 14.);
     tuple->K_and_C_Ih_noL1_VsP_2 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_2",";Ih_noL1_VsP_2", 250,0,50, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_eta1_1 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_eta1_1",";Ih_noL1_VsP_eta1_1", 50,0,5, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_eta1_2 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_eta1_2",";Ih_noL1_VsP_eta1_2", 250,0,50, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_eta2_1 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_eta2_1",";Ih_noL1_VsP_eta2_1", 50,0,5, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_eta2_2 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_eta2_2",";Ih_noL1_VsP_eta2_2", 250,0,50, 240, 2., 14.);
     tuple->K_and_C_Ih_strip_VsP_1 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_1",";Ih_strip_VsP_1", 50,0,5, 240, 2., 14.);
     tuple->K_and_C_Ih_strip_VsP_2 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_2",";Ih_strip_VsP_2", 250,0,50, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_noFcut1 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_noFcut1",";Ih_noL1_VsP_noFcut1", 50,0,5, 240, 2., 14.);
-    tuple->K_and_C_Ih_noL1_VsP_noFcut2 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_noFcut2",";Ih_noL1_VsP_noFcut2", 250,0,50, 240, 2., 14.);
-    tuple->K_and_C_Ih_strip_VsP_noFcut1 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_noFcut1",";Ih_strip_VsP_noFcut1", 50,0,5, 240, 2., 14.);
-    tuple->K_and_C_Ih_strip_VsP_noFcut2 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_noFcut2",";Ih_strip_VsP_noFcut2", 250,0,50, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_eta1_1 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_eta1_1",";Ih_strip_VsP_eta1_1", 50,0,5, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_eta1_2 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_eta1_2",";Ih_strip_VsP_eta1_2", 250,0,50, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_eta2_1 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_eta2_1",";Ih_strip_VsP_eta2_1", 50,0,5, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_eta2_2 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_eta2_2",";Ih_strip_VsP_eta2_2", 250,0,50, 240, 2., 14.);
+    tuple->K_and_C_Ih_noL1_VsP_wFcut1 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_wFcut1",";Ih_noL1_VsP_wFcut1", 50,0,5, 240, 2., 14.);
+    tuple->K_and_C_Ih_noL1_VsP_wFcut2 = dir.make<TH2F>("K_and_C_Ih_noL1_VsP_wFcut2",";Ih_noL1_VsP_wFcut2", 250,0,50, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_wFcut1 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_wFcut1",";Ih_strip_VsP_wFcut1", 50,0,5, 240, 2., 14.);
+    tuple->K_and_C_Ih_strip_VsP_wFcut2 = dir.make<TH2F>("K_and_C_Ih_strip_VsP_wFcut2",";Ih_strip_VsP_wFcut2", 250,0,50, 240, 2., 14.);
 
     tuple->K_and_C_Ih_noL1_1d = dir.make<TH1F>("K_and_C_Ih_noL1_1d",";Ih_noL1 (for 3<p<5)",170,2.5,4.2);
     tuple->K_and_C_Ih_strip_1d = dir.make<TH1F>("K_and_C_Ih_strip_1d",";Ih_noL1 (for 3<p<5)",170,2.5,4.2);
 
-    tuple->K_and_C_Kin_Mass = dir.make<TH1F>("K_and_C_Kin_Mass",";Mass (GeV)",100,0.,5.);
-    tuple->K_and_C_Kin_p = dir.make<TH1F>("K_and_C_Kin_p",";p (GeV)",50,0.,5.);
+    tuple->K_and_C_Kin_Mass = dir.make<TH1F>("K_and_C_Kin_Mass",";Mass [GeV];Tracks / 0.05 GeV",100,0.,5.);
+    tuple->K_and_C_Kin_p = dir.make<TH1F>("K_and_C_Kin_p",";p [GeV]",50,0.,5.);
     tuple->K_and_C_Kin_phi = dir.make<TH1F>("K_and_C_Kin_phi",";#phi",  24, -1.*acos(-1),acos(-1));
     tuple->K_and_C_Kin_eta = dir.make<TH1F>("K_and_C_Kin_eta",";#eta", 18, -2.25, 2.25);
-    tuple->K_and_C_NumSat = dir.make<TH1F>("K_and_C_NumSat",";Number of saturated measurements", 11, -0.5, 10.5);
-    tuple->K_and_C_FracSat = dir.make<TH1F>("K_and_C_FracSat",";Fraction of saturated measurements", 50, 0., 1.);
+    tuple->K_and_C_NumSat = dir.make<TH1F>("K_and_C_NumSat",";Number of saturated measurements;Tracks / 1", 11, -0.5, 10.5);
+    tuple->K_and_C_FracSat = dir.make<TH1F>("K_and_C_FracSat",";Fraction of saturated measurements;Tracks / 0.05", 20, 0., 1.);
 
   // Stability
     tuple->Stab_RunNumVsPixCluChargeAfterSFsL1 = dir.make<TH2F>("Stab_RunNumVsPixCluChargeAfterSFsL1",";Run;Norm pixel cluster charge after SFs on L1", 545, 271000,325500, 150, 0.,300.);
@@ -2076,16 +2697,30 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->Stab_Ih_NoL1_VsRun    = dir.make<TH2F>("Stab_Ih_NoL1_VsRun",";Run;I_{h,NoL1}", 545, 271000,325500, 60, 0.,15.);
     tuple->Stab_Ih_pixNoL1_VsRun = dir.make<TH2F>("Stab_Ih_pixNoL1_VsRun",";Run;I_{h,NoPixL1}", 545, 271000,325500, 60, 0.,15.);
     tuple->Stab_Ih_strip_VsRun   = dir.make<TH2F>("Stab_Ih_strip_VsRun",";Run;dEdX(strip)", 545, 271000,325500, 60, 0.,15.);
-    tuple->Stab_Gi_strip_VsRun   = dir.make<TH2F>("Stab_Gi_strip_VsRun",";Run;Gi(strip)", 545, 271000,325500, 80, 0.,1.);
+    tuple->Stab_Gi_strip_VsRun   = dir.make<TH2F>("Stab_Gi_strip_VsRun",";Run;G_{i}^{Strip}", 545, 271000,325500, 80, 0.,1.);
     tuple->Stab_Gi_NoL1_VsRun    = dir.make<TH2F>("Stab_Gi_NoL1_VsRun", ";Run;G_{i}^{NoL1}", 545, 271000,325500, 80, 0.,1.);
     tuple->Stab_Fi_pixNoL1_VsRun = dir.make<TH2F>("Stab_Fi_pixNoL1_VsRun", ";Run;F_{i}^{Pixels}", 545, 271000,325500, 81, 0.,1.0125);
     tuple->Stab_invB_VsRun       = dir.make<TH2F>("Stab_invB_VsRun",";Run;invBeta", 545, 271000,325500, 90,-1.,2.);
     tuple->Stab_invB_DT_VsRun    = dir.make<TH2F>("Stab_invB_DT_VsRun",";Run;invBeta(DT)", 545, 271000,325500, 90,-1.,2.);
     tuple->Stab_invB_CSC_VsRun   = dir.make<TH2F>("Stab_invB_CSC_VsRun",";Run;invBeta(CSC)", 545, 271000,325500, 90,-1.,2.);
+    tuple->Stab_CluDeDxPixLayer2_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxPixLayer2_VsRun_CR_veryLowPt",";Run;BPIXL2 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxPixLayer3_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxPixLayer3_VsRun_CR_veryLowPt",";Run;BPIXL3 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxPixLayer4_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxPixLayer4_VsRun_CR_veryLowPt",";Run;BPIXL4 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer1_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer1_VsRun_CR_veryLowPt",";Run;TIB1 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer2_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer2_VsRun_CR_veryLowPt",";Run;TIB2 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer3_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer3_VsRun_CR_veryLowPt",";Run;TIB3 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer4_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer4_VsRun_CR_veryLowPt",";Run;TIB4 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer5_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer5_VsRun_CR_veryLowPt",";Run;TOB1 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer6_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer6_VsRun_CR_veryLowPt",";Run;TOB2 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer7_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer7_VsRun_CR_veryLowPt",";Run;TOB3 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer8_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer8_VsRun_CR_veryLowPt",";Run;TOB4 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer9_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer9_VsRun_CR_veryLowPt",";Run;TOB5 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+    tuple->Stab_CluDeDxStripsLayer10_VsRun_CR_veryLowPt = dir.make<TH2F>("Stab_CluDeDxStripsLayer10_VsRun_CR_veryLowPt",";Run;TOB6 Cluster dEdx [MeV/cm]", 545, 271000,325500, 100,0.,10.);
+
 
   // saturation
-    tuple->PostPreS_NumSat = dir.make<TH1F>("PostPreS_NumSat",";Number of saturated measurements", 11, -0.5, 10.5);
-    tuple->PostPreS_FracSat = dir.make<TH1F>("PostPreS_FracSat",";Fraction of saturated measurements", 50, 0., 1.);
+    tuple->PostPreS_NumSat = dir.make<TH1F>("PostPreS_NumSat",";Number of saturated measurements;Tracks / 1", 11, -0.5, 10.5);
+    tuple->PostPreS_FracSat = dir.make<TH1F>("PostPreS_FracSat",";Fraction of saturated measurements;Tracks / 0.05", 20, 0., 1.);
 
   }
 
@@ -2130,7 +2765,45 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->Tree->Branch("triggerObjectEta", &tuple->Tree_triggerObjectEta);
     tuple->Tree->Branch("triggerObjectPhi", &tuple->Tree_triggerObjectPhi);
 
+    tuple->Tree->Branch("HSCP_GenBeta", &tuple->Tree_HSCP_GenBeta);
+    tuple->Tree->Branch("HSCP_dRclosestTrigAndCandidate", &tuple->Tree_HSCP_dRclosestTrigAndCandidate);
+    tuple->Tree->Branch("HSCP_trigObjBeta", &tuple->Tree_HSCP_trigObjBeta);
+
+    tuple->Tree->Branch("trigObjBeta", &tuple->Tree_trigObjBeta, "trigObjBeta/F");
+    tuple->Tree->Branch("trigObjEta", &tuple->Tree_trigObjEta, "trigObjEta/F");
+    tuple->Tree->Branch("L1_SingleMu22", &tuple->Tree_L1_SingleMu22, "L1_SingleMu22/O");
+    tuple->Tree->Branch("L1_SingleMu22or25", &tuple->Tree_L1_SingleMu22or25, "L1_SingleMu22or25/O");
+
+    tuple->Tree->Branch("L1_22or25PT", &tuple->Tree_L1_22or25PT);
+    tuple->Tree->Branch("L1_22or25Eta", &tuple->Tree_L1_22or25Eta);
+    tuple->Tree->Branch("L1_22or25Phi", &tuple->Tree_L1_22or25Phi);
+    tuple->Tree->Branch("L1_22or25Mass", &tuple->Tree_L1_22or25Mass);
+
+
+    tuple->Tree->Branch("L1_mu22or25Filter0", &tuple->Tree_L1_mu22or25Filter0, "L1_mu22or25Filter0/O");
+    tuple->Tree->Branch("L1_22or25F0PT", &tuple->Tree_L1_22or25F0PT);
+    tuple->Tree->Branch("L1_22or25F0Eta", &tuple->Tree_L1_22or25F0Eta);
+    tuple->Tree->Branch("L1_22or25F0Phi", &tuple->Tree_L1_22or25F0Phi);
+    tuple->Tree->Branch("L1_22or25F0Mass", &tuple->Tree_L1_22or25F0Mass);
+
+    tuple->Tree->Branch("L1_mu22or25Filter10", &tuple->Tree_L1_mu22or25Filter10, "L1_mu22or25Filter10/O");
+    tuple->Tree->Branch("L1_22or25F10PT", &tuple->Tree_L1_22or25F10PT);
+    tuple->Tree->Branch("L1_22or25F10Eta", &tuple->Tree_L1_22or25F10Eta);
+    tuple->Tree->Branch("L1_22or25F10Phi", &tuple->Tree_L1_22or25F10Phi);
+    tuple->Tree->Branch("L1_22or25F10Mass", &tuple->Tree_L1_22or25F10Mass);
+
+    tuple->Tree->Branch("L1_mu22or25_l3Filter0", &tuple->Tree_L1_mu22or25_l3Filter0, "L1_mu22or25_l3Filter0/O");
+    tuple->Tree->Branch("L1_LastMuFilter", &tuple->Tree_L1_LastMuFilter, "L1_LastMuFilter/O");
+
+    tuple->Tree->Branch("HLT_lastFilterPT", &tuple->Tree_HLT_lastFilterPT);
+    tuple->Tree->Branch("HLT_lastFilterEta", &tuple->Tree_HLT_lastFilterEta);
+    tuple->Tree->Branch("HLT_lastFilterPhi", &tuple->Tree_HLT_lastFilterPhi);
+    tuple->Tree->Branch("HLT_lastFilterMass", &tuple->Tree_HLT_lastFilterMass);
+
+
     tuple->Tree->Branch("HLT_Mu50", &tuple->Tree_HLT_Mu50, "HLT_Mu50/O");
+    tuple->Tree->Branch("HLT_Multiplicity_mu50", &tuple->Tree_Multiplicity_Mu50, "HLT_Multiplicity_mu50/I");
+
     tuple->Tree->Branch("HLT_PFMET120_PFMHT120_IDTight",
                         &tuple->Tree_HLT_PFMET120_PFMHT120_IDTight,
                         "HLT_PFMET120_PFMHT120_IDTight/O");
@@ -2219,6 +2892,8 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->Tree->Branch("muonPt", &tuple->Tree_muonPt);
     tuple->Tree->Branch("muonEta", &tuple->Tree_muonEta);
     tuple->Tree->Branch("muonPhi", &tuple->Tree_muonPhi);
+    tuple->Tree->Branch("muonBeta", &tuple->Tree_muonBeta);
+    
     tuple->Tree->Branch("muonCharge", &tuple->Tree_muonCharge);
     tuple->Tree->Branch("muonIsLoose", &tuple->Tree_muonIsLoose);
     tuple->Tree->Branch("muonIsMedium", &tuple->Tree_muonIsMedium);
@@ -2275,6 +2950,7 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
       tuple->Tree->Branch("passCutPt55", &tuple->Tree_passCutPt55);
       tuple->Tree->Branch("passPreselection", &tuple->Tree_passPreselection);
       tuple->Tree->Branch("passPreselectionSept8", &tuple->Tree_passPreselectionSept8);
+      tuple->Tree->Branch("passPreselectionTrigSys", &tuple->Tree_passPreselectionTrigSys);
       tuple->Tree->Branch("passSelection", &tuple->Tree_passSelection);
     }
     tuple->Tree->Branch("isPFMuon", &tuple->Tree_isPFMuon);
@@ -2303,6 +2979,12 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->Tree->Branch("isMuon", &tuple->Tree_isMuon);
     tuple->Tree->Branch("isPhoton", &tuple->Tree_isPhoton);
     tuple->Tree->Branch("isElectron", &tuple->Tree_isElectron);
+
+   
+    tuple->Tree->Branch("gsfFbremElectron", &tuple->Tree_gsfFbremElectron);
+    tuple->Tree->Branch("gsfMomentumElectron", &tuple->Tree_gsfMomentumElectron);
+    tuple->Tree->Branch("PFMomentumElectron", &tuple->Tree_PFMomentumElectron);
+   
     tuple->Tree->Branch("isChHadron", &tuple->Tree_isChHadron);
     tuple->Tree->Branch("isNeutHadron", &tuple->Tree_isNeutHadron);
     tuple->Tree->Branch("isPfTrack", &tuple->Tree_isPfTrack);
@@ -2338,6 +3020,8 @@ void TupleMaker::initializeTuple(Tuple *&tuple,
     tuple->Tree->Branch("iso_ECAL", &tuple->Tree_iso_ECAL);
     tuple->Tree->Branch("iso_HCAL", &tuple->Tree_iso_HCAL);
     tuple->Tree->Branch("track_genTrackMiniIsoSumPt", &tuple->Tree_track_genTrackMiniIsoSumPt);
+    tuple->Tree->Branch("track_genTrackAbsIsoSumPtFix", &tuple->Tree_track_genTrackAbsIsoSumPtFix);
+    tuple->Tree->Branch("track_genTrackIsoSumPt_dr03", &tuple->Tree_track_genTrackIsoSumPt_dr03);
     tuple->Tree->Branch("HSCP_tuneP_Pt", &tuple->Tree_HSCP_tuneP_Pt);
     tuple->Tree->Branch("HSCP_tuneP_PtErr", &tuple->Tree_HSCP_tuneP_PtErr);
     tuple->Tree->Branch("HSCP_tuneP_Eta", &tuple->Tree_HSCP_tuneP_Eta);
@@ -2409,29 +3093,30 @@ void TupleMaker::initializeRegions(Tuple *&tuple,
                                 int etabins,
                                 int ihbins,
                                 int pbins,
-                                int massbins) {
+                                int massbins,
+                                bool allRegions=true) {
     tuple->rA_ias50.setSuffix("_regionA_ias50"); tuple->rA_ias50.initHisto(dir, etabins, ihbins, pbins, massbins);
     tuple->rC_ias50.setSuffix("_regionC_ias50"); tuple->rC_ias50.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_50ias60.setSuffix("_regionB_50ias60"); tuple->rB_50ias60.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_60ias70.setSuffix("_regionB_60ias70"); tuple->rB_60ias70.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_70ias80.setSuffix("_regionB_70ias80"); tuple->rB_70ias80.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_80ias90.setSuffix("_regionB_80ias90"); tuple->rB_80ias90.initHisto(dir, etabins, ihbins, pbins, massbins);
+    if(allRegions){tuple->rB_50ias60.setSuffix("_regionB_50ias60"); tuple->rB_50ias60.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rB_60ias70.setSuffix("_regionB_60ias70"); tuple->rB_60ias70.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rB_70ias80.setSuffix("_regionB_70ias80"); tuple->rB_70ias80.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rB_80ias90.setSuffix("_regionB_80ias90"); tuple->rB_80ias90.initHisto(dir, etabins, ihbins, pbins, massbins);}
     tuple->rB_50ias90.setSuffix("_regionB_50ias90"); tuple->rB_50ias90.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_50ias99.setSuffix("_regionB_50ias99"); tuple->rB_50ias99.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_50ias999.setSuffix("_regionB_50ias999"); tuple->rB_50ias999.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_90ias100.setSuffix("_regionB_90ias100"); tuple->rB_90ias100.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_99ias100.setSuffix("_regionB_99ias100"); tuple->rB_99ias100.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rB_999ias100.setSuffix("_regionB_999ias100"); tuple->rB_999ias100.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_50ias60.setSuffix("_regionD_50ias60"); tuple->rD_50ias60.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_60ias70.setSuffix("_regionD_60ias70"); tuple->rD_60ias70.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_70ias80.setSuffix("_regionD_70ias80"); tuple->rD_70ias80.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_80ias90.setSuffix("_regionD_80ias90"); tuple->rD_80ias90.initHisto(dir, etabins, ihbins, pbins, massbins);
+    if(allRegions){tuple->rB_50ias99.setSuffix("_regionB_50ias99"); tuple->rB_50ias99.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rB_50ias999.setSuffix("_regionB_50ias999"); tuple->rB_50ias999.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rB_90ias100.setSuffix("_regionB_90ias100"); tuple->rB_90ias100.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rB_99ias100.setSuffix("_regionB_99ias100"); tuple->rB_99ias100.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rB_999ias100.setSuffix("_regionB_999ias100"); tuple->rB_999ias100.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rD_50ias60.setSuffix("_regionD_50ias60"); tuple->rD_50ias60.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rD_60ias70.setSuffix("_regionD_60ias70"); tuple->rD_60ias70.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rD_70ias80.setSuffix("_regionD_70ias80"); tuple->rD_70ias80.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rD_80ias90.setSuffix("_regionD_80ias90"); tuple->rD_80ias90.initHisto(dir, etabins, ihbins, pbins, massbins);}
     tuple->rD_50ias90.setSuffix("_regionD_50ias90"); tuple->rD_50ias90.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_50ias99.setSuffix("_regionD_50ias99"); tuple->rD_50ias99.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_50ias999.setSuffix("_regionD_50ias999"); tuple->rD_50ias999.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_90ias100.setSuffix("_regionD_90ias100"); tuple->rD_90ias100.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_99ias100.setSuffix("_regionD_99ias100"); tuple->rD_99ias100.initHisto(dir, etabins, ihbins, pbins, massbins);
-    tuple->rD_999ias100.setSuffix("_regionD_999ias100"); tuple->rD_999ias100.initHisto(dir, etabins, ihbins, pbins, massbins);
+    if(allRegions){tuple->rD_50ias99.setSuffix("_regionD_50ias99"); tuple->rD_50ias99.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rD_50ias999.setSuffix("_regionD_50ias999"); tuple->rD_50ias999.initHisto(dir, etabins, ihbins, pbins, massbins);}
+    if(allRegions){tuple->rD_90ias100.setSuffix("_regionD_90ias100"); tuple->rD_90ias100.initHisto(dir, etabins, ihbins, pbins, massbins,true);}
+    if(allRegions){tuple->rD_99ias100.setSuffix("_regionD_99ias100"); tuple->rD_99ias100.initHisto(dir, etabins, ihbins, pbins, massbins,true);}
+    if(allRegions){tuple->rD_999ias100.setSuffix("_regionD_999ias100"); tuple->rD_999ias100.initHisto(dir, etabins, ihbins, pbins, massbins,true);}
 }
 
 //=============================================================
@@ -2470,7 +3155,35 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
                                   const std::vector<std::vector<float>> &triggerObjectPt,
                                   const std::vector<std::vector<float>> &triggerObjectEta,
                                   const std::vector<std::vector<float>> &triggerObjectPhi,
+                                  const std::vector<float> &HSCP_GenBeta, 
+                                  const std::vector<float> &HSCP_dRclosestTrigAndCandidate, 
+                                  const std::vector<float> &HSCP_trigObjBeta, 
+                                  const float& trigObjBeta,
+                                  const float& trigObjEta,
+                                  const bool &L1_SingleMu22,
+                                  const bool &L1_SingleMu22or25,
+                                  const std::vector<float> &L1_22or25PT,
+                                  const std::vector<float> &L1_22or25Eta,
+                                  const std::vector<float> &L1_22or25Phi,
+                                  const std::vector<float> &L1_22or25Mass,
+                                  const bool &L1_mu22or25Filter0,
+                                  const std::vector<float> &L1_22or25F0PT,
+                                  const std::vector<float> &L1_22or25F0Eta,
+                                  const std::vector<float> &L1_22or25F0Phi,
+                                  const std::vector<float> &L1_22or25F0Mass,
+                                  const bool &L1_mu22or25Filter10,
+                                  const std::vector<float> &L1_22or25F10PT,
+                                  const std::vector<float> &L1_22or25F10Eta,
+                                  const std::vector<float> &L1_22or25F10Phi,
+                                  const std::vector<float> &L1_22or25F10Mass,
+                                  const bool &L1_mu22or25_l3Filter0,
+                                  const bool &L1_LastMuFilter,
+                                  const std::vector<float> &HLT_lastFilterPT,
+                                  const std::vector<float> &HLT_lastFilterEta,
+                                  const std::vector<float> &HLT_lastFilterPhi,
+                                  const std::vector<float> &HLT_lastFilterMass,
                                   const bool &HLT_Mu50,
+                                  const int &nbMuTrigObj,
                                   const bool &HLT_PFMET120_PFMHT120_IDTight,
                                   const bool &HLT_PFHT500_PFMET100_PFMHT100_IDTight,
                                   const bool &HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60,
@@ -2550,6 +3263,7 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
                                   const std::vector<float> &muonPt,
                                   const std::vector<float> &muonEta,
                                   const std::vector<float> &muonPhi,
+                                  const std::vector<float> &muonBeta,
                                   const std::vector<int> &muonCharge,
                                   const std::vector<bool> &muonIsLoose,
                                   const std::vector<bool> &muonIsMedium,
@@ -2598,6 +3312,7 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
                                   const std::vector<bool> &passCutPt55,
                                   const std::vector<bool> &passPreselection,
                                   const std::vector<bool> &passPreselectionSept8,
+                                  const std::vector<bool> &passPreselectionTrigSys,
                                   const std::vector<bool> &passSelection,
                                   const std::vector<bool> &isPFMuon,
                                   const std::vector<bool> &PFMuonPt,
@@ -2625,6 +3340,9 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
                                   const std::vector<bool>  &isMuon,
                                   const std::vector<bool>  &isPhoton,
                                   const std::vector<bool>  &isElectron,
+                                  const std::vector<float>  &gsfFbremElectron,
+                                  const std::vector<float>  &gsfMomentumElectron,
+                                  const std::vector<float>  &PFMomentumElectron,
                                   const std::vector<bool>  &isChHadron,
                                   const std::vector<bool>  &isNeutHadron,
                                   const std::vector<bool>  &isPfTrack,
@@ -2660,8 +3378,8 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
                                   const std::vector<float> &iso_ECAL,
                                   const std::vector<float> &iso_HCAL,
                                   const std::vector<float> &track_genTrackMiniIsoSumPt,
-
-
+                                  const std::vector<float> &track_genTrackAbsIsoSumPtFix,
+                                  const std::vector<float> &track_genTrackIsoSumPt_dr03,
                                   const std::vector<float> &PFMiniIso_relative,
                                   const std::vector<float> &PFMiniIso_wMuon_relative,
                                   const std::vector<float> &track_PFIsolationR005_sumChargedHadronPt,
@@ -2743,7 +3461,44 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
   tuple->Tree_triggerObjectPt = triggerObjectPt;
   tuple->Tree_triggerObjectEta = triggerObjectEta;
   tuple->Tree_triggerObjectPhi = triggerObjectPhi;
+
+  tuple->Tree_HSCP_GenBeta = HSCP_GenBeta;
+  tuple->Tree_HSCP_dRclosestTrigAndCandidate = HSCP_dRclosestTrigAndCandidate;
+  tuple->Tree_HSCP_trigObjBeta = HSCP_trigObjBeta;
+  tuple->Tree_trigObjBeta =trigObjBeta;
+  tuple->Tree_trigObjEta =trigObjEta;
   tuple->Tree_HLT_Mu50 = HLT_Mu50;
+  tuple->Tree_Multiplicity_Mu50 = nbMuTrigObj;
+
+  tuple->Tree_L1_SingleMu22 = L1_SingleMu22;
+  tuple->Tree_L1_SingleMu22or25 = L1_SingleMu22or25;
+  tuple->Tree_L1_22or25PT = L1_22or25PT;
+  tuple->Tree_L1_22or25Eta = L1_22or25Eta;
+  tuple->Tree_L1_22or25Phi = L1_22or25Phi;
+  tuple->Tree_L1_22or25Mass = L1_22or25Mass;
+
+
+  tuple->Tree_L1_mu22or25Filter0 = L1_mu22or25Filter0;
+
+  tuple->Tree_L1_22or25F0PT = L1_22or25F0PT;
+  tuple->Tree_L1_22or25F0Eta = L1_22or25F0Eta;
+  tuple->Tree_L1_22or25F0Phi = L1_22or25F0Phi;
+  tuple->Tree_L1_22or25F0Mass = L1_22or25F0Mass;
+
+  tuple->Tree_L1_mu22or25Filter10 = L1_mu22or25Filter10;
+  tuple->Tree_L1_22or25F10PT = L1_22or25F10PT;
+  tuple->Tree_L1_22or25F10Eta = L1_22or25F10Eta;
+  tuple->Tree_L1_22or25F10Phi = L1_22or25F10Phi;
+  tuple->Tree_L1_22or25F10Mass = L1_22or25F10Mass;
+
+  tuple->Tree_L1_mu22or25_l3Filter0 = L1_mu22or25_l3Filter0;
+  tuple->Tree_L1_LastMuFilter = L1_LastMuFilter;
+
+  tuple->Tree_HLT_lastFilterPT = HLT_lastFilterPT;
+  tuple->Tree_HLT_lastFilterEta = HLT_lastFilterEta;
+  tuple->Tree_HLT_lastFilterPhi = HLT_lastFilterPhi;
+  tuple->Tree_HLT_lastFilterMass = HLT_lastFilterMass;
+
   tuple->Tree_HLT_PFMET120_PFMHT120_IDTight = HLT_PFMET120_PFMHT120_IDTight;
   tuple->Tree_HLT_PFHT500_PFMET100_PFMHT100_IDTight = HLT_PFHT500_PFMET100_PFMHT100_IDTight;
   tuple->Tree_HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 = HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60;
@@ -2831,6 +3586,7 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
   tuple->Tree_muonPt = muonPt;
   tuple->Tree_muonEta = muonEta;
   tuple->Tree_muonPhi = muonPhi;
+  tuple->Tree_muonBeta = muonBeta;
   tuple->Tree_muonCharge = muonCharge;
   tuple->Tree_muonIsLoose = muonIsLoose;
   tuple->Tree_muonIsMedium = muonIsMedium;
@@ -2881,6 +3637,7 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
   tuple->Tree_passCutPt55 = passCutPt55;
   tuple->Tree_passPreselection = passPreselection;
   tuple->Tree_passPreselectionSept8 = passPreselectionSept8;
+  tuple->Tree_passPreselectionTrigSys = passPreselectionTrigSys;
   tuple->Tree_passSelection = passSelection;
   tuple->Tree_isPFMuon = isPFMuon;
   tuple->Tree_PFMuonPt = PFMuonPt;
@@ -2908,6 +3665,9 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
   tuple->Tree_isMuon = isMuon;
   tuple->Tree_isPhoton = isPhoton;
   tuple->Tree_isElectron = isElectron;
+  tuple->Tree_gsfFbremElectron = gsfFbremElectron;
+  tuple->Tree_gsfMomentumElectron = gsfMomentumElectron;
+  tuple->Tree_PFMomentumElectron =  PFMomentumElectron;
   tuple->Tree_isChHadron = isChHadron;
   tuple->Tree_isNeutHadron = isNeutHadron;
   tuple->Tree_isPfTrack = isPfTrack;
@@ -2943,6 +3703,8 @@ void TupleMaker::fillTreeBranches(Tuple *&tuple,
   tuple->Tree_iso_ECAL = iso_ECAL;
   tuple->Tree_iso_HCAL = iso_HCAL;
   tuple->Tree_track_genTrackMiniIsoSumPt = track_genTrackMiniIsoSumPt;
+  tuple->Tree_track_genTrackAbsIsoSumPtFix = track_genTrackAbsIsoSumPtFix;
+  tuple->Tree_track_genTrackIsoSumPt_dr03 = track_genTrackIsoSumPt_dr03;
   tuple->Tree_PFMiniIso_relative = PFMiniIso_relative;
   tuple->Tree_PFMiniIso_wMuon_relative = PFMiniIso_wMuon_relative;
   tuple->Tree_track_PFIsolationR005_sumChargedHadronPt = track_PFIsolationR005_sumChargedHadronPt;
@@ -3377,33 +4139,35 @@ void TupleMaker::fillRegions(Tuple *&tuple,
                              float pterr,
                              float ih,
                              float ias,
+                             float probq,
                              float m,
                              float tof,
-                             float w){
+                             float w,
+                             bool allRegions=true){
   if(pt<=pt_cut){
-    if(ias<Ias_quantiles[1]) tuple->rA_ias50.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[2]) tuple->rB_50ias60.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[2] && ias<Ias_quantiles[3]) tuple->rB_60ias70.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[3] && ias<Ias_quantiles[4]) tuple->rB_70ias80.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[4] && ias<Ias_quantiles[5]) tuple->rB_80ias90.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[5]) tuple->rB_50ias90.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[6]) tuple->rB_50ias99.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[7]) tuple->rB_50ias999.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[5])                         tuple->rB_90ias100.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[6])                         tuple->rB_99ias100.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[7])                         tuple->rB_999ias100.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
+    if(ias<Ias_quantiles[1]) tuple->rA_ias50.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[2] && allRegions) tuple->rB_50ias60.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[2] && ias<Ias_quantiles[3] && allRegions) tuple->rB_60ias70.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[3] && ias<Ias_quantiles[4] && allRegions) tuple->rB_70ias80.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[4] && ias<Ias_quantiles[5] && allRegions) tuple->rB_80ias90.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[5]) tuple->rB_50ias90.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[6] && allRegions) tuple->rB_50ias99.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[7] && allRegions) tuple->rB_50ias999.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[5] && allRegions)                         tuple->rB_90ias100.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[6] && allRegions)                         tuple->rB_99ias100.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[7] && allRegions)                         tuple->rB_999ias100.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
   }else{
-    if(ias<Ias_quantiles[1]) tuple->rC_ias50.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[2]) tuple->rD_50ias60.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[2] && ias<Ias_quantiles[3]) tuple->rD_60ias70.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[3] && ias<Ias_quantiles[4]) tuple->rD_70ias80.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[4] && ias<Ias_quantiles[5]) tuple->rD_80ias90.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[5]) tuple->rD_50ias90.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[6]) tuple->rD_50ias99.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[7]) tuple->rD_50ias999.fill(eta,p,pt,pterr,ih,ias,m,tof,w);
-    if(ias>=Ias_quantiles[5])        {m<400?m=m:m=-1; tuple->rD_90ias100.fill(eta,p,pt,pterr,ih,ias,m,tof,w);} //blind in the last quantile
-    if(ias>=Ias_quantiles[6])        {m<400?m=m:m=-1; tuple->rD_99ias100.fill(eta,p,pt,pterr,ih,ias,m,tof,w);} //blind in the last quantile
-    if(ias>=Ias_quantiles[7])        {m<400?m=m:m=-1; tuple->rD_999ias100.fill(eta,p,pt,pterr,ih,ias,m,tof,w);} //blind in the last quantile
+    if(ias<Ias_quantiles[1]) tuple->rC_ias50.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[2] && allRegions) tuple->rD_50ias60.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[2] && ias<Ias_quantiles[3] && allRegions) tuple->rD_60ias70.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[3] && ias<Ias_quantiles[4] && allRegions) tuple->rD_70ias80.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[4] && ias<Ias_quantiles[5] && allRegions) tuple->rD_80ias90.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[5]) tuple->rD_50ias90.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[6] && allRegions) tuple->rD_50ias99.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[1] && ias<Ias_quantiles[7] && allRegions) tuple->rD_50ias999.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w);
+    if(ias>=Ias_quantiles[5] && allRegions)        {tuple->rD_90ias100.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w,true);} 
+    if(ias>=Ias_quantiles[6] && allRegions)        {tuple->rD_99ias100.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w,true);} 
+    if(ias>=Ias_quantiles[7] && allRegions)        {tuple->rD_999ias100.fill(eta,p,pt,pterr,ih,ias,probq,m,tof,w,true);} 
   }
 }
 
diff --git a/Analyzer/plugins/Analyzer.cc b/Analyzer/plugins/Analyzer.cc
index eb24bd6..e6021a7 100644
--- a/Analyzer/plugins/Analyzer.cc
+++ b/Analyzer/plugins/Analyzer.cc
@@ -62,7 +62,37 @@
 // - 44p3: Add one more bin to the PostS_HltMatchTrackLevel plot, apply all SFs from the POG, make new syst plots for each POG SFs, change Ias systematics back to factor on the Gi value, postPreS status 91 plot fix
 // - 44p4: Adding PR107 and PR113, pixel cleaning in Ih, corrections for Gi templates, new dEdX SF, saturation plots, new DeDxSF_1 and  DeDxSF_0 values, CreateGiTemplates = True
 // - 44p5: CreateGiTemplates = True, BefPreS_RelDiffTrigObjPtAndMatchedMuonPtVsPt, reset eventWeight_ event level, dRMinHLTMuonLoose_lowDeltaR, get rid of SaveGenTree
-// - 44p6: Include PR120 (many CR_veryLowPt), Move SR2 PV plot under GiS > 0.25 region, intro RelDiffTrackPtAndTruthPtVsTruthPt, dRMinHLTMuon_numTrigObj plots, fix when not to update
+// - 44p6: Include PR120 (many CR_veryLowPt), Move SR2 PV plot under GiS > 0.25 region, intro RelDiffTrackPtAndTruthPtVsTruthPt, dRMinHLTMuon_numTrigObj plots, fix when not to update the trigger match
+// - 44p7: Include PR122 (fix to pixel SFs), PostS_dRMinHLTMuon
+// - 44p8: SR2PASS_TriggerMuon50VsBeta plots, PostS_GenBeta
+// - 44p9: Take beta from the trigger object in the systematics plots, PostPreS_MuonTightVsBeta, PostPreS_TriggerTiming* plots
+// - 45p0: Submission for 2017 MC samples
+// - 45p1: Fix trigObjPt for non-triggered objects
+// - 45p2: Dont cut on trigObjPt for the systematics checks plots
+// - 45p3: Move PostS_MuonTightVsBeta to the end, add eta < 1 to TriggerMuon50VsBeta
+// - 45p4: Add PostS_NotMuonsGenBeta, encode interesting events PostS_SR2PASS_RunVsLs and PostS_SR2PASS_Ls
+// - 45p5: Add D-F Eta bins in the systematics
+// - 45p6: Add PostPreS_CluPathLenghtVsPixLayer_CR_veryLowPt, add PR129, add befPreS plots for EtaD-F, TriggerEtaReject/Pass plots
+// - 45p7: Add PRs PR135 and PR136
+// - 45p8: Patch to GiS systs param types
+// - 45p9: Possible fix for segfault
+// - 46pX: same code as 45p9 but different CRAB productions
+// - 32p1: Same as 45p9, but exit when not MC match found
+// - 46p3: Same as 45p9
+// - 46p4: ExitWhenGenMatchNotFound = true, new plot TriggerMuonType, adding IsoMu24 temp for the SFs study requested by the muon POG
+// - 46p5: ExitWhenGenMatchNotFound = false
+// - 46p6: cout for event list in SR, add PostS_SR2FAIL_PtErrOverPtVsIas, PostS_SR2FAIL_TIsolVsIas, CutFlowIas for bkg, ExitWhenGenMatchNotFound = true
+// - 46p7: Add PostS_SR2PASS_PtErrOverPtVsIas, PostS_SR2PASS_TIsolVsIas
+// - 46p8: Fix MuonPOG systs
+// - 46p9: Add AtL1DT and AtL4DT trigger beta plots
+// - 47p0: Add AtL1DT and AtL4DT trigger beta plots
+// - 47p1: Fix to DT timings
+// - 47p2: Same but for the endcap muon chambers
+// - 47p3: Fix so eta>1 plots are filled too
+// - 47p4: Include trigger scale factors determined in 47p3
+// - 47p5: Change so the trigger beta and eta are used for the trig syst
+// - 47p6: Temp to check the most conservative timings at L1 of DT / CSC
+// - 47p7: Back to 47p5
 
 // v25 Dylan
 // - add EoP in the ntuple
@@ -123,6 +153,7 @@ Analyzer::Analyzer(const edm::ParameterSet& iConfig)
           iConfig.getParameter<edm::InputTag>("TrackToGenAssoc"))),
       pfCandToken_(consumes<reco::PFCandidateCollection>(iConfig.getParameter<edm::InputTag>("PfCand"))),
       genEventToken_(consumes<GenEventInfoProduct>(iConfig.getParameter<edm::InputTag>("GenCollection"))),
+      l1GtReadoutRecordToken_(consumes<L1GlobalTriggerReadoutRecord>(iConfig.getParameter<edm::InputTag>("gtDigis"))),
       // HLT triggers
       trigger_met_(iConfig.getUntrackedParameter<vector<string>>("Trigger_MET")),
       trigger_mu_(iConfig.getUntrackedParameter<vector<string>>("Trigger_Mu")),
@@ -175,6 +206,9 @@ Analyzer::Analyzer(const edm::ParameterSet& iConfig)
       createAndExitGitemplates_(iConfig.getUntrackedParameter<bool>("CreateAndExitGitemplates")),
       NbPuBins_(iConfig.getUntrackedParameter<int>("NbPileUpBins")),
       PuBins_(iConfig.getUntrackedParameter<vector<int>>("PileUpBins")),
+      GiSysParamOne_(iConfig.getUntrackedParameter<double>("GiSysParamOne")),
+      GiSysParamTwo_(iConfig.getUntrackedParameter<double>("GiSysParamTwo")),
+      NominalEntries_(iConfig.getUntrackedParameter<vector<int>>("NominalEntries")),
       exitWhenGenMatchNotFound_(iConfig.getUntrackedParameter<bool>("ExitWhenGenMatchNotFound")),
       useTemplateLayer_(iConfig.getUntrackedParameter<bool>("UseTemplateLayer")),
       dEdxSF_0_(iConfig.getUntrackedParameter<double>("DeDxSF_0")),
@@ -184,10 +218,13 @@ Analyzer::Analyzer(const edm::ParameterSet& iConfig)
       dEdxTemplate_(iConfig.getUntrackedParameter<string>("DeDxTemplate")),
       timeOffset_(iConfig.getUntrackedParameter<string>("TimeOffset")),
       saveTree_(iConfig.getUntrackedParameter<int>("SaveTree")),
+      plotsPreS_massSpectrumApproach_(iConfig.getUntrackedParameter<bool>("plotsPreS_massSpectrumApproach")),
       pixelCPE_(iConfig.getParameter<std::string>("PixelCPE")),
       debug_(iConfig.getUntrackedParameter<int>("DebugLevel")),
       hasMCMatch_(iConfig.getUntrackedParameter<bool>("HasMCMatch")),
-      calcSyst_(iConfig.getUntrackedParameter<bool>("CalcSystematics"))
+      calcSyst_(iConfig.getUntrackedParameter<bool>("CalcSystematics")),
+      calibrateTOF_(iConfig.getUntrackedParameter<bool>("CalibrateTOF"))
+
  {
 //now do what ever initialization is needed
 // define the selection to be considered later for the optimization
@@ -212,8 +249,21 @@ Analyzer::Analyzer(const edm::ParameterSet& iConfig)
   } else {
       dEdxTemplates = loadDeDxTemplate(dEdxTemplate_, splitByModuleType,false,0);
   }
-
-  tofCalculator.loadTimeOffset(timeOffset_);
+  //protection
+  if(calibrateTOF_){ 
+      tofCalculator.loadTimeOffset(timeOffset_);
+  }
+  /*
+  effl1Mu22 = new TEfficiency("eff1", "RAW EfficiencyL1 mu 22 vs bg", 100, 0, 5);
+  effl1Mu22or25 = new TEfficiency("eff2", "RAW Efficiency L1 mu 22 or 25 vs bg", 100, 0, 5);
+  effl1LastMu = new TEfficiency("eff3", "RAW Efficiency Last L1 see mu50 vs betagamma", 100, 0, 5);
+  effHltMu50 = new TEfficiency("eff4", "RAW Efficiency HLT Mu 50 vs betagamma", 100, 0, 5);
+
+  effl1Mu22PostS = new TEfficiency("eff1", "PostS EfficiencyL1 mu 22 vs bg", 100, 0, 5);
+  effl1Mu22or25PostS = new TEfficiency("eff2", "PostS Efficiency L1 mu 22 or 25 vs bg", 100, 0, 5);
+  effl1LastMuPostS = new TEfficiency("eff3", "PostS Efficiency Last L1 see mu50 vs betagamma", 100, 0, 5);
+  effHltMu50PostS = new TEfficiency("eff4", "PostS Efficiency HLT Mu 50 vs betagamma", 100, 0, 5);
+  */
 }
 
 Analyzer::~Analyzer() = default;
@@ -227,9 +277,60 @@ void Analyzer::beginJob() {
   // Book histograms using TFileService
   edm::Service<TFileService> fs;
   TFileDirectory dir = fs->mkdir(sampleName_.c_str(), sampleName_.c_str());
+  
+  // -------- NOMENCLATURE 
+  //SigmaPt1 : no SigmaPt cut
+  //SigmaPt2 : SigmaPtOverPt2 cut
+  //SigmaPt3 : SigmaPtOverPt2 cut + SigmaPtOverPt2 > 0 + SigmaPtOverPt < 1.0
+  //SigmaPt4 : SigmaPtOverPt2 cut + SigmaPtOverPt2 > 0 + SigmaPtOverPt < 2.0
+  //SigmaPt5 : SigmaPtOverPt2 cut + SigmaPtOverPt2 > 0 
+  //iso0 : FixedConeGeneralIso < 50 GeV 
+  //iso1 : miniGeneralIso < 15 GeV + miniRelIso cut 
+  //iso2 : FixedConeGeneralIso < 15 GeV + miniRelIso cut 
+  //IhCut1 : no Ih cut
+  //IhCut2 : Ih > C
+  //IhCut3 : Ih > 3.47 (C ultra-relativistic) 
+  //PtCut1 : no pT cut max
+  //PtCut2 : pT < 2500 GeV
+  //PtCut3 : pT < 3000 GeV
+  //PtCut4 : pT < 4000 GeV
+  
+  TFileDirectory dir_SigmaPt1_iso1_IhCut1_PtCut1 = fs->mkdir("SigmaPt1_iso1_IhCut1_PtCut1", "SigmaPt1_iso1_IhCut1_PtCut1");
+  //TFileDirectory dir_SigmaPt2_iso1_IhCut1_PtCut1 = fs->mkdir("SigmaPt2_iso1_IhCut1_PtCut1", "SigmaPt2_iso1_IhCut1_PtCut1");
+  TFileDirectory dir_SigmaPt3_iso1_IhCut1_PtCut1 = fs->mkdir("SigmaPt3_iso1_IhCut1_PtCut1", "SigmaPt3_iso1_IhCut1_PtCut1");
+  //TFileDirectory dir_SigmaPt4_iso1_IhCut1_PtCut1 = fs->mkdir("SigmaPt4_iso1_IhCut1_PtCut1", "SigmaPt4_iso1_IhCut1_PtCut1");
+  TFileDirectory dir_SigmaPt5_iso1_IhCut1_PtCut1 = fs->mkdir("SigmaPt5_iso1_IhCut1_PtCut1", "SigmaPt5_iso1_IhCut1_PtCut1");
+  
+  
+  TFileDirectory dir_SigmaPt3_iso0_IhCut1_PtCut1 = fs->mkdir("SigmaPt3_iso0_IhCut1_PtCut1", "SigmaPt3_iso0_IhCut1_PtCut1");
+  TFileDirectory dir_SigmaPt3_iso2_IhCut1_PtCut1 = fs->mkdir("SigmaPt3_iso2_IhCut1_PtCut1", "SigmaPt3_iso2_IhCut1_PtCut1");
+  
+  //TFileDirectory dir_SigmaPt3_iso2_IhCut2_PtCut1 = fs->mkdir("SigmaPt3_iso2_IhCut2_PtCut1", "SigmaPt3_iso2_IhCut2_PtCut1");
+  //TFileDirectory dir_SigmaPt3_iso2_IhCut3_PtCut1 = fs->mkdir("SigmaPt3_iso2_IhCut3_PtCut1", "SigmaPt3_iso2_IhCut3_PtCut1");
+  
+  //TFileDirectory dir_SigmaPt3_iso2_IhCut1_PtCut2 = fs->mkdir("SigmaPt3_iso2_IhCut1_PtCut2", "SigmaPt3_iso2_IhCut1_PtCut2");
+  //TFileDirectory dir_SigmaPt3_iso2_IhCut1_PtCut3 = fs->mkdir("SigmaPt3_iso2_IhCut1_PtCut3", "SigmaPt3_iso2_IhCut1_PtCut3");
+  TFileDirectory dir_SigmaPt3_iso2_IhCut1_PtCut4 = fs->mkdir("SigmaPt3_iso2_IhCut1_PtCut4", "SigmaPt3_iso2_IhCut1_PtCut4");
 
   // create histograms & trees
   tuple = new Tuple();
+  
+  tuple_SigmaPt1_iso1_IhCut1_PtCut1 = new Tuple();
+  //tuple_SigmaPt2_iso1_IhCut1_PtCut1 = new Tuple();
+  tuple_SigmaPt3_iso1_IhCut1_PtCut1 = new Tuple();
+  //tuple_SigmaPt4_iso1_IhCut1_PtCut1 = new Tuple();
+  tuple_SigmaPt5_iso1_IhCut1_PtCut1 = new Tuple();
+  
+  tuple_SigmaPt3_iso0_IhCut1_PtCut1 = new Tuple();
+  tuple_SigmaPt3_iso2_IhCut1_PtCut1 = new Tuple();
+  
+  //tuple_SigmaPt3_iso2_IhCut2_PtCut1 = new Tuple();
+  //tuple_SigmaPt3_iso2_IhCut3_PtCut1 = new Tuple();
+  
+  //tuple_SigmaPt3_iso2_IhCut1_PtCut2 = new Tuple();
+  //tuple_SigmaPt3_iso2_IhCut1_PtCut3 = new Tuple();
+  tuple_SigmaPt3_iso2_IhCut1_PtCut4 = new Tuple();
+  
   initializeCuts(fs, CutPt_, CutI_, CutTOF_, CutPt_Flip_, CutI_Flip_, CutTOF_Flip_);
   
   tuple_maker->initializeTuple(tuple,
@@ -264,6 +365,102 @@ void Analyzer::beginJob() {
                                  reg_pbins_,
                                  reg_massbins_);
 
+  tuple_maker->initializeRegions(tuple_SigmaPt1_iso1_IhCut1_PtCut1,
+                                 dir_SigmaPt1_iso1_IhCut1_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_);
+
+  /*tuple_maker->initializeRegions(tuple_SigmaPt2_iso1_IhCut1_PtCut1,
+                                 dir_SigmaPt2_iso1_IhCut1_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_);*/
+
+  tuple_maker->initializeRegions(tuple_SigmaPt3_iso1_IhCut1_PtCut1,
+                                 dir_SigmaPt3_iso1_IhCut1_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_);
+
+  /*tuple_maker->initializeRegions(tuple_SigmaPt4_iso1_IhCut1_PtCut1,
+                                 dir_SigmaPt4_iso1_IhCut1_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_,
+                                 false);*/
+
+  tuple_maker->initializeRegions(tuple_SigmaPt5_iso1_IhCut1_PtCut1,
+                                 dir_SigmaPt5_iso1_IhCut1_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_
+                                 );
+
+
+  tuple_maker->initializeRegions(tuple_SigmaPt3_iso0_IhCut1_PtCut1,
+                                 dir_SigmaPt3_iso0_IhCut1_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_
+                                 );
+
+
+  tuple_maker->initializeRegions(tuple_SigmaPt3_iso2_IhCut1_PtCut1,
+                                 dir_SigmaPt3_iso2_IhCut1_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_
+                                 );
+
+  /*tuple_maker->initializeRegions(tuple_SigmaPt3_iso2_IhCut2_PtCut1,
+                                 dir_SigmaPt3_iso2_IhCut2_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_,
+                                 false);*/
+
+  /*tuple_maker->initializeRegions(tuple_SigmaPt3_iso2_IhCut3_PtCut1,
+                                 dir_SigmaPt3_iso2_IhCut3_PtCut1,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_);*/
+
+  /*tuple_maker->initializeRegions(tuple_SigmaPt3_iso2_IhCut1_PtCut2,
+                                 dir_SigmaPt3_iso2_IhCut1_PtCut2,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_,
+                                 false);*/
+  
+  /*tuple_maker->initializeRegions(tuple_SigmaPt3_iso2_IhCut1_PtCut3,
+                                 dir_SigmaPt3_iso2_IhCut1_PtCut3,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_);*/
+  
+  tuple_maker->initializeRegions(tuple_SigmaPt3_iso2_IhCut1_PtCut4,
+                                 dir_SigmaPt3_iso2_IhCut1_PtCut4,
+                                 reg_etabins_,
+                                 reg_ihbins_,
+                                 reg_pbins_,
+                                 reg_massbins_
+                                 );
+
+
+
+
   // Re-weighting
   // Functions defined in Analyzer/interface/MCWeight.h
   if (!isData) {
@@ -317,6 +514,7 @@ void Analyzer::beginJob() {
   MaxMass_SystHUp = new float[CutPt_.size()];
   MaxMass_SystHDown = new float[CutPt_.size()];
 
+
   // Check if we are dealing with data or MC
   if (sampleType_ == 0 ) {
     if (debug_> 0) edm::LogPrint(MOD) << "This is data processing";
@@ -337,14 +535,17 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   eventWeight_ = 1.;
   
   static constexpr const char* const MOD = "Analyzer";
-  static constexpr const float cm2umUnit = 0.0001;
+  static constexpr const float um2cmUnit = 0.0001;
   using namespace edm;
   using namespace trigger;
 
   //if run change, update conditions
   if (currentRun_ != iEvent.id().run()) {
     currentRun_ = iEvent.id().run();
-    tofCalculator.setRun(currentRun_);
+    //same protection bool to recompute with correct calibration
+    if(calibrateTOF_){
+        tofCalculator.setRun(currentRun_);
+    }
     dEdxSF[0] = dEdxSF_0_;
     dEdxSF[1] = dEdxSF_1_;
   }
@@ -442,7 +643,6 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         tuple->Gen_Beta->Fill(gen.p() / gen.energy(), SignalEventWeight);
         tuple->Gen_BetaGamma->Fill(gen.p() / gen.mass(), SignalEventWeight);
         tuple->Gen_BetaGamma_lowBetaGamma->Fill(gen.p() / gen.mass(), SignalEventWeight);
-
       } else if (isBckg) {
         // Fill up pT, eta, and beta plots for gen-level background particles
         tuple->Gen_pT->Fill(gen.pt());
@@ -579,7 +779,6 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       gParticleMotherIndex[i] = -1;
     }
   }
-
   //------------------------------------------------------------------
   // Get trigger results for this event
   //------------------------------------------------------------------
@@ -589,6 +788,9 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   //edm::Handle<pat::PackedTriggerPrescales> triggerPrescales = iEvent.getHandle(triggerPrescalesToken_);
 
+
+
+   
   //------------------------------------------------------------------
   //Read in HLT Trigger Path List from config file
   //------------------------------------------------------------------
@@ -639,15 +841,136 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   trigInfo_ = 0;
 
   // These are used in the tree alone, otherwise we use passTriggerPatterns to check the triggers
+  edm::Handle<trigger::TriggerEvent> trigEvent2 = iEvent.getHandle(trigEventToken_);
+
+  std::string singleMu22 = "hltL1sSingleMu22";
+  std::string singleMu25 = "hltL1sSingleMu22or25";
+  std::string singleMu22or25Filter0 = "hltL1fL1sMu22or25L1Filtered0";
+  std::string singleMu22or25Filter10 = "hltL2fL1sMu22or25L1f0L2Filtered10Q";
+  std::string singleMu22or25_l3Filter0 = "hltL1fForIterL3L1fL1sMu22or25L1Filtered0";
+  std::string last_singlemu = "hltL3fL1sMu22Or25L1f0L2f10QL3Filtered50Q";
+
+  std::vector<float> L1_22or25PT;
+  std::vector<float> L1_22or25Eta;
+  std::vector<float> L1_22or25Phi;
+  std::vector<float> L1_22or25Mass;
+
+  std::vector<TLorentzVector> trigObjP4sL1Mu22or25;
+  trigtools::getP4sOfObsPassingFilter(trigObjP4sL1Mu22or25,*trigEvent2,singleMu25,"HLT");
+
+  for (const auto& objP4 : trigObjP4sL1Mu22or25){
+      double pT = objP4.Pt();
+      double eta = objP4.Eta();
+      double phi = objP4.Phi();
+      double mass = objP4.M();
+
+      L1_22or25PT.push_back(pT);
+      L1_22or25Eta.push_back(eta);
+      L1_22or25Phi.push_back(phi);
+      L1_22or25Mass.push_back(mass);
+  }
+
+  std::vector<float> L1_22or25F0PT;
+  std::vector<float> L1_22or25F0Eta;
+  std::vector<float> L1_22or25F0Phi;
+  std::vector<float> L1_22or25F0Mass;
+
+  std::vector<TLorentzVector> trigObjP4sL1Mu22or25Filter0;
+  trigtools::getP4sOfObsPassingFilter(trigObjP4sL1Mu22or25Filter0,*trigEvent2,singleMu22or25Filter0,"HLT");
+
+  for (const auto& objP4 : trigObjP4sL1Mu22or25Filter0){
+      double pT = objP4.Pt();
+      double eta = objP4.Eta();
+      double phi = objP4.Phi();
+      double mass = objP4.M();
+
+      L1_22or25F0PT.push_back(pT);
+      L1_22or25F0Eta.push_back(eta);
+      L1_22or25F0Phi.push_back(phi);
+      L1_22or25F0Mass.push_back(mass);
+  }
+
+  std::vector<float> L1_22or25F10PT;
+  std::vector<float> L1_22or25F10Eta;
+  std::vector<float> L1_22or25F10Phi;
+  std::vector<float> L1_22or25F10Mass;
+
+  std::vector<TLorentzVector> trigObjP4sL1Mu22or25Filter10;
+  trigtools::getP4sOfObsPassingFilter(trigObjP4sL1Mu22or25Filter10,*trigEvent2,singleMu22or25Filter10,"HLT");
+
+  for (const auto& objP4 : trigObjP4sL1Mu22or25Filter10){
+      double pT = objP4.Pt();
+      double eta = objP4.Eta();
+      double phi = objP4.Phi();
+      double mass = objP4.M();
+
+      L1_22or25F10PT.push_back(pT);
+      L1_22or25F10Eta.push_back(eta);
+      L1_22or25F10Phi.push_back(phi);
+      L1_22or25F10Mass.push_back(mass);
+  }
+
+  std::vector<float> HLT_lastFilterPT;
+  std::vector<float> HLT_lastFilterEta;
+  std::vector<float> HLT_lastFilterPhi;
+  std::vector<float> HLT_lastFilterMass;
+
+  std::vector<TLorentzVector> trigObjP4sLastHLTFilter;
+  trigtools::getP4sOfObsPassingFilter(trigObjP4sLastHLTFilter,*trigEvent2,last_singlemu,"HLT");
+
+  for (const auto& objP4 : trigObjP4sLastHLTFilter){
+      double pT = objP4.Pt();
+      double eta = objP4.Eta();
+      double phi = objP4.Phi();
+      double mass = objP4.M();
+
+      HLT_lastFilterPT.push_back(pT);
+      HLT_lastFilterEta.push_back(eta);
+      HLT_lastFilterPhi.push_back(phi);
+      HLT_lastFilterMass.push_back(mass);
+  }
+
+
+  bool L1mu22 = false;
+  bool L1mu22or25 = false;
+  bool L1mu22or25Filter0 = false;
+  bool L1mu22or25Filter10 = false;
+  bool L1mu22or25_l3Filter0 = false;
+  bool L1lastmu = false;
+  
+  if(trigtools::passedFilter(*trigEvent2,singleMu22)){
+      L1mu22 = true;
+  }
+  if(trigtools::passedFilter(*trigEvent2,singleMu25)){
+      L1mu22or25=true;
+  } 
+  if(trigtools::passedFilter(*trigEvent2,singleMu22or25Filter0)){
+      L1mu22or25Filter0=true;
+  } 
+  if(trigtools::passedFilter(*trigEvent2,singleMu22or25Filter10)){
+      L1mu22or25Filter10=true;
+  } 
+  if(trigtools::passedFilter(*trigEvent2,singleMu22or25_l3Filter0)){
+      L1mu22or25_l3Filter0=true;
+  } 
+  if(trigtools::passedFilter(*trigEvent2,last_singlemu)){
+      L1lastmu = true;
+  }
+
+
   bool HLT_Mu50 = false;
   bool HLT_PFMET120_PFMHT120_IDTight = false;
   bool HLT_PFHT500_PFMET100_PFMHT100_IDTight = false;
   bool HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 = false;
   bool HLT_MET105_IsoTrk50 = false;
+  bool HLT_isoMu24 = false;
+  bool HLT_isoMu27 = false;
   
   bool metTrig = passTriggerPatterns(triggerH, triggerNames, trigger_met_);
   bool muTrig = passTriggerPatterns(triggerH, triggerNames, trigger_mu_);
 
+
+  
   for (unsigned int i = 0; i < triggerH->size(); i++) {
     if (TString(triggerNames.triggerName(i)).Contains("HLT_Mu50_v") && triggerH->accept(i))
       HLT_Mu50 = true;
@@ -660,20 +983,26 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 = true;
     if (TString(triggerNames.triggerName(i)).Contains("HLT_MET105_IsoTrk50_v") && triggerH->accept(i))
       HLT_MET105_IsoTrk50 = true;
+    if (TString(triggerNames.triggerName(i)).Contains("HLT_IsoMu27_v") && triggerH->accept(i))
+      HLT_isoMu27 = true;
+    if (TString(triggerNames.triggerName(i)).Contains("HLT_IsoMu24_v") && triggerH->accept(i))
+      HLT_isoMu24 = true;
   }
 
   // Should this be a bin in error histo?
-  if (HLT_Mu50 != triggerDecision.at(196)) cout<<"TRIGGER DECISION DOESN'T AGREE!!"<<endl;
+  if (HLT_Mu50 != triggerDecision.at(196)) cout << "TRIGGER DECISION DOESN'T AGREE!!" << endl;
 
   // Get handle for trigEvent
   edm::Handle<trigger::TriggerEvent> trigEvent = iEvent.getHandle(trigEventToken_);
   // Get muon collections
   vector<reco::Muon> muonColl = iEvent.get(muonToken_);
 
+
   // Match muon track to HLT muon track
   std::vector<TLorentzVector> trigObjP4s;
   trigtools::getP4sOfObsPassingFilter(trigObjP4s,*trigEvent,filterName_,"HLT");
-  
+
+
   bool matchedMuonWasFound = false;
   
   int closestTrigMuIndex = -1;
@@ -783,6 +1112,18 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   if (muTrig && dr_min_hltMuon_hscpCand_inEvent < 0.15) {
     matchedMuonWasFound = true;
     const reco::Muon* triggerObjMatchedMu = &(muonColl)[closestTrigMuIndex];
+    // To prove that it's fine to use the official SFs
+    if (fabs(triggerObjMatchedMu->eta()) < 1.0) {
+      // Baseline: Muon50 + Tight ID
+      if (HLT_Mu50)                tuple->BefPreS_TriggerMuonType->Fill(1);
+        // Exploration: Muon50 + Tight ID + IsoMu24
+      if (HLT_Mu50 || HLT_isoMu24) tuple->BefPreS_TriggerMuonType->Fill(2);
+      bool isPFIsoTight = triggerObjMatchedMu->passed(reco::Muon::PFIsoTight);
+      if ((HLT_Mu50 || HLT_isoMu24) && isPFIsoTight) tuple->BefPreS_TriggerMuonType->Fill(3);
+      bool isHighPtMuon = muon::isHighPtMuon(*triggerObjMatchedMu, highestSumPt2Vertex);
+      if ((HLT_Mu50 || HLT_isoMu24) && isHighPtMuon) tuple->BefPreS_TriggerMuonType->Fill(4);
+    }
+
     if (doBefPreSplots_) {
       tuple->BefPreS_RelDiffMatchedMuonPtAndTrigObjPt->Fill((triggerObjMatchedMu->pt()-trigObjP4s[closestTrigObjIndex].Pt())/(trigObjP4s[closestTrigObjIndex].Pt()));
       tuple->BefPreS_RelDiffTrigObjPtAndMatchedMuonPt->Fill((trigObjP4s[closestTrigObjIndex].Pt()-triggerObjMatchedMu->pt())/(triggerObjMatchedMu->pt()));
@@ -811,74 +1152,103 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   // Triggered(Mu|Obj) - GEN track matching
   int triggerObjMatchedMuGenIndex = -1;
-  if (!isData && (trigInfo_ > 0)) {
-    if (debug_> 0 ) LogPrint(MOD) << "Triggered(Mu|Obj) - GEN track matching";
-    const reco::Muon* triggerObjMatchedMu = &(muonColl)[closestTrigMuIndex];
+  int triggerObjGenIndex = -1;
+  float maxGenBeta = -1;
+  float maxGenEta = 9999;
+  float maxGenTheta = 9999;
+  float maxGenPt = -1;
+  if (!isData) {
+    if (trigInfo_ > 0) {
+      if (debug_> 0 ) LogPrint(MOD) << "Triggered(Mu|Obj) - GEN track matching";
+      const reco::Muon* triggerObjMatchedMu = &(muonColl)[closestTrigMuIndex];
 
-    float drGenTrigMatchedMuMin = 9999.0;
-    float drGenTrigObjMin = 9999.0;
-    int triggerObjGenIndex = -1;
-    for (unsigned int g = 0; g < genColl.size(); g++) {
-      if (genColl[g].pt() < 10) { continue; }
-      if (genColl[g].status() != 1) { continue; }
+      float drGenTrigMatchedMuMin = 9999.0;
+      float drGenTrigObjMin = 9999.0;
+      
+      for (unsigned int g = 0; g < genColl.size(); g++) {
+        if (genColl[g].pt() < 10) { continue; }
+        if (genColl[g].status() != 1) { continue; }
+        
+        // Let's match the matched muon to gen level tracks
+        float drGenTrigMatchedMu = deltaR(genColl[g].eta(),genColl[g].phi(),triggerObjMatchedMu->eta(),triggerObjMatchedMu->phi());
+        if (drGenTrigMatchedMu < drGenTrigMatchedMuMin) {
+          drGenTrigMatchedMuMin = drGenTrigMatchedMu;
+          triggerObjMatchedMuGenIndex = g;
+        }
+        // Let's match the original trigger object to gen level tracks
+        float drGenTrigObj = deltaR(genColl[g].eta(),genColl[g].phi(),trigObjP4s[closestTrigObjIndex].Eta(),trigObjP4s[closestTrigObjIndex].Phi());
+        if (drGenTrigObj < drGenTrigObjMin) {
+          drGenTrigObjMin = drGenTrigObj;
+          triggerObjGenIndex = g;
+        }
+      } // end loop on gen collection
       
-      // Let's match the matched muon to gen level tracks
-      float drGenTrigMatchedMu = deltaR(genColl[g].eta(),genColl[g].phi(),triggerObjMatchedMu->eta(),triggerObjMatchedMu->phi());
-      if (drGenTrigMatchedMu < drGenTrigMatchedMuMin) {
-        drGenTrigMatchedMuMin = drGenTrigMatchedMu;
-        triggerObjMatchedMuGenIndex = g;
-      }
-      // Let's match the original trigger object to gen level tracks
-      float drGenTrigObj = deltaR(genColl[g].eta(),genColl[g].phi(),trigObjP4s[closestTrigObjIndex].Eta(),trigObjP4s[closestTrigObjIndex].Phi());
-      if (drGenTrigObj < drGenTrigObjMin) {
-        drGenTrigObjMin = drGenTrigObj;
-        triggerObjGenIndex = g;
-      }
-    } // end loop on gen collection
-
-    if (dr_min_hltMuon_hscpCand_inEvent < 0.15 && doBefPreSplots_) {
-      // Event triggered with reco muon match
-      tuple->BefPreS_TriggerGenMatch->Fill(1.);
-      if (triggerObjGenIndex != triggerObjMatchedMuGenIndex) {
-        LogPrint(MOD) << "TrigObj based gen index= " << triggerObjGenIndex << " with PDG ID = " << genColl[triggerObjGenIndex].pdgId() << " with dR= " << drGenTrigObjMin << " != TrigObjMatchedMuon based gen index = " << triggerObjMatchedMuGenIndex  << " with PDG ID = " << genColl[triggerObjMatchedMuGenIndex].pdgId() << " with dR= " << drGenTrigMatchedMuMin;
-      }
-
-      if (drGenTrigObjMin < 0.015 || drGenTrigMatchedMuMin < 0.015) {
-        if (debug_> 5 ) LogPrint(MOD) << " > Trig object matches to muon that matches to gen object, drGenTrigObjMin = " << drGenTrigObjMin << " and drGenTrigMatchedMuMin = " << drGenTrigMatchedMuMin ;
-        // Gen match was found
-        tuple->BefPreS_TriggerGenMatch->Fill(2.);
-        if (isHSCPgenID(genColl[triggerObjGenIndex])) {
-          // Gen match is an HSCP
-          tuple->BefPreS_TriggerGenMatch->Fill(3.);
-        } else if (abs(genColl[triggerObjGenIndex].pdgId()) == 13) {
-          // Gen match is a muon
-          tuple->BefPreS_TriggerGenMatch->Fill(4.);
-          if (isSignal && debug_ > 3) {
-            LogPrint(MOD) << "Trigger object's gen match is a muon with drGenTrigObjMin = " << drGenTrigObjMin << " and drGenTrigMatchedMuMin= " << drGenTrigMatchedMuMin << " has eta = " << genColl[triggerObjGenIndex].eta() << " in the event = " << iEvent.id().event() << ", lumi =  " << iEvent.id().luminosityBlock() << " vx = " << genColl[triggerObjGenIndex].vx()  << " vy = " << genColl[triggerObjGenIndex].vy()  << " vz = " << genColl[triggerObjGenIndex].vz() << " pT = " << genColl[triggerObjGenIndex].pt();
-            LogPrint(MOD) << "MatchedMu has eta = " << triggerObjMatchedMu->eta() << " dz = " << triggerObjMatchedMu->muonBestTrack()->dz(highestSumPt2Vertex.position()) << " pT = " << triggerObjMatchedMu->muonBestTrack()->pt();
+      if (dr_min_hltMuon_hscpCand_inEvent < 0.15 && doBefPreSplots_) {
+        // Event triggered with reco muon match
+        tuple->BefPreS_TriggerGenMatch->Fill(1.);
+        if (triggerObjGenIndex != triggerObjMatchedMuGenIndex) {
+          LogPrint(MOD) << "TrigObj based gen index= " << triggerObjGenIndex << " with PDG ID = " << genColl[triggerObjGenIndex].pdgId() << " with dR= " << drGenTrigObjMin << " != TrigObjMatchedMuon based gen index = " << triggerObjMatchedMuGenIndex  << " with PDG ID = " << genColl[triggerObjMatchedMuGenIndex].pdgId() << " with dR= " << drGenTrigMatchedMuMin;
+        }
+
+        if (drGenTrigObjMin < 0.015 || drGenTrigMatchedMuMin < 0.015) {
+          if (debug_> 5 ) LogPrint(MOD) << " > Trig object matches to muon that matches to gen object, drGenTrigObjMin = " << drGenTrigObjMin << " and drGenTrigMatchedMuMin = " << drGenTrigMatchedMuMin ;
+          // Gen match was found
+          tuple->BefPreS_TriggerGenMatch->Fill(2.);
+          if (isHSCPgenID(genColl[triggerObjGenIndex])) {
+            // Gen match is an HSCP
+            tuple->BefPreS_TriggerGenMatch->Fill(3.);
+          } else if (abs(genColl[triggerObjGenIndex].pdgId()) == 13) {
+            // Gen match is a muon
+            tuple->BefPreS_TriggerGenMatch->Fill(4.);
+            if (isSignal && debug_ > 3) {
+              LogPrint(MOD) << "Trigger object's gen match is a muon with drGenTrigObjMin = " << drGenTrigObjMin << " and drGenTrigMatchedMuMin= " << drGenTrigMatchedMuMin << " has eta = " << genColl[triggerObjGenIndex].eta() << " in the event = " << iEvent.id().event() << ", lumi =  " << iEvent.id().luminosityBlock() << " vx = " << genColl[triggerObjGenIndex].vx()  << " vy = " << genColl[triggerObjGenIndex].vy()  << " vz = " << genColl[triggerObjGenIndex].vz() << " pT = " << genColl[triggerObjGenIndex].pt();
+              LogPrint(MOD) << "MatchedMu has eta = " << triggerObjMatchedMu->eta() << " dz = " << triggerObjMatchedMu->muonBestTrack()->dz(highestSumPt2Vertex.position()) << " pT = " << triggerObjMatchedMu->muonBestTrack()->pt();
+            }
+          } else if (abs(genColl[triggerObjGenIndex].pdgId()) == 211 || abs(genColl[triggerObjGenIndex].pdgId()) == 321) {
+            // Gen match is a pion or kaon
+            tuple->BefPreS_TriggerGenMatch->Fill(5.);
+            if (isSignal) {
+              LogPrint(MOD) << "Gen match is a pion or kaon (ID=" << genColl[triggerObjGenIndex].pdgId() << ") with drGenTrigObjMin = " << drGenTrigObjMin << " and drGenTrigMatchedMuMin= " << drGenTrigMatchedMuMin << " has eta = " << genColl[triggerObjGenIndex].eta() << " in the event = " << iEvent.id().event() << ", lumi =  " << iEvent.id().luminosityBlock() << " vx = " << genColl[triggerObjGenIndex].vx()  << " vy = " << genColl[triggerObjGenIndex].vy()  << " vz = " << genColl[triggerObjGenIndex].vz() << " pT = " << genColl[triggerObjGenIndex].pt();
+              LogPrint(MOD) << "MatchedMu has eta = " << triggerObjMatchedMu->eta() << " dz = " << triggerObjMatchedMu->muonBestTrack()->dz(highestSumPt2Vertex.position()) << " pT = " << triggerObjMatchedMu->muonBestTrack()->pt();
+            }
+          } else {
+            // Gen match: else
+            tuple->BefPreS_TriggerGenMatch->Fill(6.);
+            LogPrint(MOD) << "Gen match has an ID of " << genColl[triggerObjGenIndex].pdgId();
           }
-        } else if (abs(genColl[triggerObjGenIndex].pdgId()) == 211 || abs(genColl[triggerObjGenIndex].pdgId()) == 321) {
-          // Gen match is a pion or kaon
-          tuple->BefPreS_TriggerGenMatch->Fill(5.);
-          if (isSignal) {
-            LogPrint(MOD) << "Gen match is a pion or kaon (ID=" << genColl[triggerObjGenIndex].pdgId() << ") with drGenTrigObjMin = " << drGenTrigObjMin << " and drGenTrigMatchedMuMin= " << drGenTrigMatchedMuMin << " has eta = " << genColl[triggerObjGenIndex].eta() << " in the event = " << iEvent.id().event() << ", lumi =  " << iEvent.id().luminosityBlock() << " vx = " << genColl[triggerObjGenIndex].vx()  << " vy = " << genColl[triggerObjGenIndex].vy()  << " vz = " << genColl[triggerObjGenIndex].vz() << " pT = " << genColl[triggerObjGenIndex].pt();
-            LogPrint(MOD) << "MatchedMu has eta = " << triggerObjMatchedMu->eta() << " dz = " << triggerObjMatchedMu->muonBestTrack()->dz(highestSumPt2Vertex.position()) << " pT = " << triggerObjMatchedMu->muonBestTrack()->pt();
+          if (fabs(genColl[triggerObjGenIndex].eta()) < globalMaxEta_) {
+          // Eta cut enforced
+            tuple->BefPreS_TriggerGenMatch->Fill(7.);
           }
         } else {
-          // Gen match: else
-          tuple->BefPreS_TriggerGenMatch->Fill(6.);
-          LogPrint(MOD) << "Gen match has an ID of " << genColl[triggerObjGenIndex].pdgId();
+          LogPrint(MOD) << "Gen match found but too far, drGenTrigObjMin = " << drGenTrigObjMin;
         }
-        if (fabs(genColl[triggerObjGenIndex].eta()) < globalMaxEta_) {
-        // Eta cut enforced
-          tuple->BefPreS_TriggerGenMatch->Fill(7.);
-        }
-      } else {
-        LogPrint(MOD) << "Gen match found but too far, drGenTrigObjMin = " << drGenTrigObjMin;
       }
-    }
-  } // end condition for being MC and passed trigger
+    } // end condiions on passed trigger
+    // let's find the beta of the non-triggered event, we choose the highest
+    else {
+      for (unsigned int g = 0; g < genColl.size(); g++) {
+        if (isSignal && !isHSCPgenID(genColl[g])) {
+          continue;
+        }
+        if (genColl[g].pt() < 10) { continue; }
+        if (genColl[g].status() != 1) { continue; }
+        float tempBeta = genColl[g].p() / genColl[g].energy();
+        if (tempBeta > maxGenBeta) {
+          maxGenBeta = tempBeta;
+          maxGenEta =  genColl[g].eta();
+          maxGenTheta =  genColl[g].theta();
+          maxGenPt =  genColl[g].pt();
+        }
+      } // end loop on gen collection
+    } // situation when the trigger is not passed
+  } // end condition for being MC
   
+  float trigObjBeta = (triggerObjGenIndex > -1) ?  genColl[triggerObjGenIndex].p() / genColl[triggerObjGenIndex].energy() : maxGenBeta;
+  float trigObjTheta = (triggerObjGenIndex > -1) ?  genColl[triggerObjGenIndex].theta() : maxGenTheta;
+  float trigObjEta = (triggerObjGenIndex > -1) ?  genColl[triggerObjGenIndex].eta() : maxGenEta;
+  float trigObjPt = (triggerObjGenIndex > -1) ?  genColl[triggerObjGenIndex].pt() : maxGenPt;
+
   // Compute event weight from different SFs
   if (!isData) {
     float PUWeight = mcWeight->getEventPUWeight(iEvent, pileupInfoToken_, PUSystFactor_);
@@ -925,7 +1295,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       if (HSCPgenBeta1 >= 0)
         tuple->Gen_Beta_Triggered->Fill(HSCPgenBeta1, eventWeight_);
       if (HSCPgenBeta2 >= 0)
-        tuple->Gen_Beta_Triggered->Fill(HSCPgenBeta2, eventWeight_);
+          tuple->Gen_Beta_Triggered->Fill(HSCPgenBeta2, eventWeight_);
     }
   }
 
@@ -945,11 +1315,11 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   edm::ESHandle<TrackerTopology> TopoHandle;
   iSetup.get<TrackerTopologyRcd>().get(TopoHandle);
   const TrackerTopology* tTopo = TopoHandle.product();
-  
+
   // Retrieve tracker geometry from the event setup
   edm::ESHandle<TrackerGeometry> tkGeometry;
   iSetup.get<TrackerDigiGeometryRecord>().get(tkGeometry);
-  
+
   // Retrieve CPE from the event setup
   edm::ESHandle<PixelClusterParameterEstimator> pixelCPE;
   iSetup.get<TkPixelCPERecord>().get(pixelCPE_, pixelCPE);
@@ -964,41 +1334,41 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   //================= Handle For Muon DT/CSC Segment ===============
   if (!isBckg) {//do not recompute TOF on MC background
-    iEvent.getByToken(muonCscSegmentToken_, CSCSegmentCollH);
-    if (!CSCSegmentCollH.isValid()) {
-      LogError("Analyzer") << "CSC Segment Collection not found!";
-      return;
-    }
+      iEvent.getByToken(muonCscSegmentToken_, CSCSegmentCollH);
+      if (!CSCSegmentCollH.isValid()) {
+          LogError("Analyzer") << "CSC Segment Collection not found!";
+          return;
+      }
 
-    iEvent.getByToken(muonDtSegmentToken_, DTSegmentCollH);
-    if (!DTSegmentCollH.isValid()) {
-      LogError("Analyzer") << "DT Segment Collection not found!";
-      return;
-    }
+      iEvent.getByToken(muonDtSegmentToken_, DTSegmentCollH);
+      if (!DTSegmentCollH.isValid()) {
+          LogError("Analyzer") << "DT Segment Collection not found!";
+          return;
+      }
   }
 
   //===================== Handle For PileUp ================
   unsigned int pileup_fromLumi = 0;
   const edm::Handle<LumiScalersCollection> lumiScalers = iEvent.getHandle(lumiScalersToken_);
   if (lumiScalers.isValid() && !lumiScalers->empty()) {
-    LumiScalersCollection::const_iterator scalit = lumiScalers->begin();
-    pileup_fromLumi = scalit->pileup();
+      LumiScalersCollection::const_iterator scalit = lumiScalers->begin();
+      pileup_fromLumi = scalit->pileup();
   }
-  
+
   std::vector<int> bunchXing;
   std::vector<int> nPU;
   std::vector<float> nPUmean;
   edm::Handle<std::vector<PileupSummaryInfo> > puInfo;
 
   if (!isData) {
-    iEvent.getByToken(pileupInfoToken_,puInfo);
-    for(const PileupSummaryInfo &pu : *puInfo) {
-         bunchXing.push_back(pu.getBunchCrossing());
-         nPU.push_back(pu.getPU_NumInteractions());
-         nPUmean.push_back(pu.getTrueNumInteractions());
-    }
+      iEvent.getByToken(pileupInfoToken_,puInfo);
+      for(const PileupSummaryInfo &pu : *puInfo) {
+          bunchXing.push_back(pu.getBunchCrossing());
+          nPU.push_back(pu.getPU_NumInteractions());
+          nPUmean.push_back(pu.getTrueNumInteractions());
+      }
   }
-  
+
   // Needs to be defined at event level, used in several functions
   float RecoCaloMET = -10, RecoCaloMET_phi = -10, RecoCaloMET_sigf = -10;
 
@@ -1041,6 +1411,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   std::vector<float> ele_OneOverEminusOneOverP;
 
 
+
+
   iEvent.getByToken(electron_cutbasedID_decisions_veto_Token_, electron_cutbasedID_decisions_veto);
   iEvent.getByToken(electron_cutbasedID_decisions_loose_Token_, electron_cutbasedID_decisions_loose);
   iEvent.getByToken(electron_cutbasedID_decisions_medium_Token_, electron_cutbasedID_decisions_medium);
@@ -1059,74 +1431,76 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   // Loop on the electron collection
   for (uint i = 0; i < electrons->size(); ++i){
-    const reco::GsfElectron ele = (*electrons)[i];
-    reco::GsfElectronRef eleRef(electrons, i);
-    if(ele.pt() < 5) continue;
-
-    eleE.push_back(ele.energy());
-    elePt.push_back(ele.pt());
-    eleEta.push_back(ele.eta());
-    elePhi.push_back(ele.phi());
-    eleCharge.push_back(ele.charge());
-    ele.hadronicOverEm();
-    eleE_SC.push_back(ele.superCluster()->energy());
-    eleEta_SC.push_back(ele.superCluster()->eta());
-    elePhi_SC.push_back(ele.superCluster()->phi());
-
-    eleSigmaIetaIeta.push_back(ele.sigmaIetaIeta());
-    eleFull5x5SigmaIetaIeta.push_back(ele.full5x5_sigmaIetaIeta());
-    eleR9.push_back(ele.r9());
-    ele_dEta.push_back(ele.deltaEtaSuperClusterTrackAtVtx() - ele.superCluster()->eta() + ele.superCluster()->seed()->eta());
-
-    ele_dPhi.push_back(ele.deltaPhiSuperClusterTrackAtVtx());
-    ele_HoverE.push_back(ele.hcalOverEcal());
-    ele_d0.push_back(ele.gsfTrack().get()->dxy(highestSumPt2Vertex.position()));
-    ele_dZ.push_back(ele.gsfTrack().get()->dz(highestSumPt2Vertex.position()));
-
-    ele_pileupIso.push_back(ele.pfIsolationVariables().sumPUPt);
-    ele_chargedIso.push_back(ele.pfIsolationVariables().sumChargedHadronPt);
-    ele_photonIso.push_back(ele.pfIsolationVariables().sumPhotonEt);
-    ele_neutralHadIso.push_back(ele.pfIsolationVariables().sumNeutralHadronEt);
-    ele_MissHits.push_back(ele.gsfTrack()->hitPattern().numberOfAllHits(reco::HitPattern::MISSING_INNER_HITS));
-    ele_passCutBasedIDVeto.push_back((*electron_cutbasedID_decisions_veto)[eleRef]);
-    ele_passCutBasedIDLoose.push_back((*electron_cutbasedID_decisions_loose)[eleRef]);
-    ele_passCutBasedIDMedium.push_back((*electron_cutbasedID_decisions_medium)[eleRef]);
-    ele_passCutBasedIDTight.push_back((*electron_cutbasedID_decisions_tight)[eleRef]);
-    ele_passMVAIsoIDWP80.push_back((*electron_mvaIsoID_decisions_wp80)[eleRef]);
-    ele_passMVAIsoIDWP90.push_back((*electron_mvaIsoID_decisions_wp90)[eleRef]);
-    ele_passMVAIsoIDWPHZZ.push_back((*electron_mvaIsoID_decisions_wpHZZ)[eleRef]);
-    ele_passMVAIsoIDWPLoose.push_back((*electron_mvaIsoID_decisions_wpLoose)[eleRef]);
-    ele_passMVANoIsoIDWP80.push_back((*electron_mvaNoIsoID_decisions_wp80)[eleRef]);
-    ele_passMVANoIsoIDWP90.push_back((*electron_mvaNoIsoID_decisions_wp90)[eleRef]);
-    ele_passMVANoIsoIDWPLoose.push_back((*electron_mvaNoIsoID_decisions_wpLoose)[eleRef]);
-
-    //---------------
-    //Conversion Veto
-    //---------------
-    !ConversionTools::hasMatchedConversion(ele,(*conversions),beamSpot->position());
-
-    if( beamSpot.isValid() && conversions.isValid() )
-    {
-      ele_PassConvVeto.push_back(!ConversionTools::hasMatchedConversion(ele,(*conversions),beamSpot->position()));
-    } else {
-      ele_PassConvVeto.push_back(false);
-    }
-    // 1/E - 1/P
-    if( ele.ecalEnergy() == 0 ){
-      ele_OneOverEminusOneOverP.push_back(1e30);
-    } else if( !std::isfinite(ele.ecalEnergy())){
-      ele_OneOverEminusOneOverP.push_back(1e30);
-    } else {
-    ele_OneOverEminusOneOverP.push_back(1./ele.ecalEnergy()  -  ele.eSuperClusterOverP()/ele.ecalEnergy());
-    }
+      const reco::GsfElectron ele = (*electrons)[i];
+      reco::GsfElectronRef eleRef(electrons, i);
+      if(ele.pt() < 5) continue;
+
+      eleE.push_back(ele.energy());
+      elePt.push_back(ele.pt());
+      eleEta.push_back(ele.eta());
+      elePhi.push_back(ele.phi());
+      eleCharge.push_back(ele.charge());
+      ele.hadronicOverEm();
+      eleE_SC.push_back(ele.superCluster()->energy());
+      eleEta_SC.push_back(ele.superCluster()->eta());
+      elePhi_SC.push_back(ele.superCluster()->phi());
+
+      eleSigmaIetaIeta.push_back(ele.sigmaIetaIeta());
+      eleFull5x5SigmaIetaIeta.push_back(ele.full5x5_sigmaIetaIeta());
+      eleR9.push_back(ele.r9());
+      ele_dEta.push_back(ele.deltaEtaSuperClusterTrackAtVtx() - ele.superCluster()->eta() + ele.superCluster()->seed()->eta());
+
+      ele_dPhi.push_back(ele.deltaPhiSuperClusterTrackAtVtx());
+      ele_HoverE.push_back(ele.hcalOverEcal());
+      ele_d0.push_back(ele.gsfTrack().get()->dxy(highestSumPt2Vertex.position()));
+      ele_dZ.push_back(ele.gsfTrack().get()->dz(highestSumPt2Vertex.position()));
+
+      ele_pileupIso.push_back(ele.pfIsolationVariables().sumPUPt);
+      ele_chargedIso.push_back(ele.pfIsolationVariables().sumChargedHadronPt);
+      ele_photonIso.push_back(ele.pfIsolationVariables().sumPhotonEt);
+      ele_neutralHadIso.push_back(ele.pfIsolationVariables().sumNeutralHadronEt);
+      ele_MissHits.push_back(ele.gsfTrack()->hitPattern().numberOfAllHits(reco::HitPattern::MISSING_INNER_HITS));
+      ele_passCutBasedIDVeto.push_back((*electron_cutbasedID_decisions_veto)[eleRef]);
+      ele_passCutBasedIDLoose.push_back((*electron_cutbasedID_decisions_loose)[eleRef]);
+      ele_passCutBasedIDMedium.push_back((*electron_cutbasedID_decisions_medium)[eleRef]);
+      ele_passCutBasedIDTight.push_back((*electron_cutbasedID_decisions_tight)[eleRef]);
+      ele_passMVAIsoIDWP80.push_back((*electron_mvaIsoID_decisions_wp80)[eleRef]);
+      ele_passMVAIsoIDWP90.push_back((*electron_mvaIsoID_decisions_wp90)[eleRef]);
+      ele_passMVAIsoIDWPHZZ.push_back((*electron_mvaIsoID_decisions_wpHZZ)[eleRef]);
+      ele_passMVAIsoIDWPLoose.push_back((*electron_mvaIsoID_decisions_wpLoose)[eleRef]);
+      ele_passMVANoIsoIDWP80.push_back((*electron_mvaNoIsoID_decisions_wp80)[eleRef]);
+      ele_passMVANoIsoIDWP90.push_back((*electron_mvaNoIsoID_decisions_wp90)[eleRef]);
+      ele_passMVANoIsoIDWPLoose.push_back((*electron_mvaNoIsoID_decisions_wpLoose)[eleRef]);
+
+      //---------------
+      //Conversion Veto
+      //---------------
+      !ConversionTools::hasMatchedConversion(ele,(*conversions),beamSpot->position());
+
+      if( beamSpot.isValid() && conversions.isValid() )
+      {
+          ele_PassConvVeto.push_back(!ConversionTools::hasMatchedConversion(ele,(*conversions),beamSpot->position()));
+      } else {
+          ele_PassConvVeto.push_back(false);
+      }
+      // 1/E - 1/P
+      if( ele.ecalEnergy() == 0 ){
+          ele_OneOverEminusOneOverP.push_back(1e30);
+      } else if( !std::isfinite(ele.ecalEnergy())){
+          ele_OneOverEminusOneOverP.push_back(1e30);
+      } else {
+          ele_OneOverEminusOneOverP.push_back(1./ele.ecalEnergy()  -  ele.eSuperClusterOverP()/ele.ecalEnergy());
+      }
   } // end loop on electrons
-  
+
   // add all muons
   unsigned int nMuons = 0;
   std::vector<float> muonE;
   std::vector<float> muonPt;
   std::vector<float> muonEta;
   std::vector<float> muonPhi;
+  std::vector<float> muonBeta;
+
   std::vector<int> muonCharge;
   std::vector<bool> muonIsLoose;
   std::vector<bool> muonIsMedium;
@@ -1158,34 +1532,34 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   // read muon HLT filter names
   for (int i = 0; i<MAX_MuonHLTFilters; ++i) muonHLTFilterNames[i] = "";
-   ifstream myMuonHLTFilterFile (edm::FileInPath(muonHLTFilterNamesFile_.c_str()).fullPath().c_str()) ;
-   if (myMuonHLTFilterFile.is_open()) {
-     char tmp[1024];
-     string line;
-     int index;
-     string hltfiltername;
-
-     while(myMuonHLTFilterFile>>line) {
-
-       if ( line.empty() || line.substr(0,1) == "#") {
-         myMuonHLTFilterFile.getline(tmp,1024);
-         continue;
-       }
-       index = atoi(line.c_str());
-       myMuonHLTFilterFile >> hltfiltername;
-       if (index < MAX_MuonHLTFilters) {
-        muonHLTFilterNames[index] = hltfiltername;
-       }
-     }
-     myMuonHLTFilterFile.close();
-   } else {
-    LogError(MOD) << "ERROR!!! Could not open trigger path name file : " << edm::FileInPath(muonHLTFilterNamesFile_.c_str()).fullPath().c_str() << "\n";
-   }
+  ifstream myMuonHLTFilterFile (edm::FileInPath(muonHLTFilterNamesFile_.c_str()).fullPath().c_str()) ;
+  if (myMuonHLTFilterFile.is_open()) {
+      char tmp[1024];
+      string line;
+      int index;
+      string hltfiltername;
+
+      while(myMuonHLTFilterFile>>line) {
+
+          if ( line.empty() || line.substr(0,1) == "#") {
+              myMuonHLTFilterFile.getline(tmp,1024);
+              continue;
+          }
+          index = atoi(line.c_str());
+          myMuonHLTFilterFile >> hltfiltername;
+          if (index < MAX_MuonHLTFilters) {
+              muonHLTFilterNames[index] = hltfiltername;
+          }
+      }
+      myMuonHLTFilterFile.close();
+  } else {
+      LogError(MOD) << "ERROR!!! Could not open trigger path name file : " << edm::FileInPath(muonHLTFilterNamesFile_.c_str()).fullPath().c_str() << "\n";
+  }
 
   // loop on the muon collection
   for (unsigned int i = 0; i < muonColl.size(); i++) {
-    const reco::Muon* mu = &(muonColl)[i];
-
+      const reco::Muon* mu = &(muonColl)[i];
+      muonBeta.push_back(mu->p()*1.0/0.1057);
       muonE.push_back(mu->energy());
       muonPt.push_back(mu->pt());
       muonEta.push_back(mu->eta());
@@ -1200,41 +1574,41 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       // muon_ip3d.push_back(mu->dB(pat::Muon::PV3D));
       // muon_ip3dSignificance.push_back(mu->dB(pat::Muon::PV3D)/mu->edB(pat::Muon::PV3D));
       muonType.push_back(mu->isMuon() + 2*mu->isGlobalMuon() + 4*mu->isTrackerMuon() + 8*mu->isStandAloneMuon()
-        + 16*mu->isCaloMuon() + 32*mu->isPFMuon() + 64*mu->isRPCMuon());
+              + 16*mu->isCaloMuon() + 32*mu->isPFMuon() + 64*mu->isRPCMuon());
       muonQuality.push_back(
-        muon::isGoodMuon(*mu,muon::All)
-        + pow(2,1)*muon::isGoodMuon(*mu,muon::AllGlobalMuons)
-      + pow(2,2)*muon::isGoodMuon(*mu,muon::AllStandAloneMuons)
-      + pow(2,3)*muon::isGoodMuon(*mu,muon::AllTrackerMuons)
-      + pow(2,4)*muon::isGoodMuon(*mu,muon::TrackerMuonArbitrated)
-      + pow(2,5)*muon::isGoodMuon(*mu,muon::AllArbitrated)
-      + pow(2,6)*muon::isGoodMuon(*mu,muon::GlobalMuonPromptTight)
-      + pow(2,7)*muon::isGoodMuon(*mu,muon::TMLastStationLoose)
-      + pow(2,8)*muon::isGoodMuon(*mu,muon::TMLastStationTight)
-      + pow(2,9)*muon::isGoodMuon(*mu,muon::TM2DCompatibilityLoose)
-      + pow(2,10)*muon::isGoodMuon(*mu,muon::TM2DCompatibilityTight)
-      + pow(2,11)*muon::isGoodMuon(*mu,muon::TMOneStationLoose)
-      + pow(2,12)*muon::isGoodMuon(*mu,muon::TMOneStationTight)
-      + pow(2,13)*muon::isGoodMuon(*mu,muon::TMLastStationOptimizedLowPtLoose)
-      + pow(2,14)*muon::isGoodMuon(*mu,muon::TMLastStationOptimizedLowPtTight)
-      + pow(2,15)*muon::isGoodMuon(*mu,muon::GMTkChiCompatibility)
-      + pow(2,16)*muon::isGoodMuon(*mu,muon::GMStaChiCompatibility)
-      + pow(2,17)*muon::isGoodMuon(*mu,muon::GMTkKinkTight)
-      + pow(2,18)*muon::isGoodMuon(*mu,muon::TMLastStationAngLoose)
-      + pow(2,19)*muon::isGoodMuon(*mu,muon::TMLastStationAngTight)
-      + pow(2,20)*muon::isGoodMuon(*mu,muon::TMOneStationAngLoose)
-      + pow(2,21)*muon::isGoodMuon(*mu,muon::TMOneStationAngTight)
-      + pow(2,22)*muon::isGoodMuon(*mu,muon::TMLastStationOptimizedBarrelLowPtLoose)
-      + pow(2,23)*muon::isGoodMuon(*mu,muon::TMLastStationOptimizedBarrelLowPtTight)
-      + pow(2,24)*muon::isGoodMuon(*mu,muon::RPCMuLoose)
-      // //This is the soft muon ID
-      + pow(2,25)*( muon::isGoodMuon(*mu,muon::TMOneStationTight)
-        && mu->innerTrack()->hitPattern().trackerLayersWithMeasurement() > 5
-        && mu->innerTrack()->hitPattern().pixelLayersWithMeasurement() > 0
-        && mu->innerTrack()->quality(reco::TrackBase::highPurity)
-        && fabs(mu->innerTrack()->dxy(highestSumPt2Vertex.position())) < 0.3
-        && fabs(mu->innerTrack()->dz(highestSumPt2Vertex.position())) < 20.
-      ));
+              muon::isGoodMuon(*mu,muon::All)
+              + pow(2,1)*muon::isGoodMuon(*mu,muon::AllGlobalMuons)
+              + pow(2,2)*muon::isGoodMuon(*mu,muon::AllStandAloneMuons)
+              + pow(2,3)*muon::isGoodMuon(*mu,muon::AllTrackerMuons)
+              + pow(2,4)*muon::isGoodMuon(*mu,muon::TrackerMuonArbitrated)
+              + pow(2,5)*muon::isGoodMuon(*mu,muon::AllArbitrated)
+              + pow(2,6)*muon::isGoodMuon(*mu,muon::GlobalMuonPromptTight)
+              + pow(2,7)*muon::isGoodMuon(*mu,muon::TMLastStationLoose)
+              + pow(2,8)*muon::isGoodMuon(*mu,muon::TMLastStationTight)
+              + pow(2,9)*muon::isGoodMuon(*mu,muon::TM2DCompatibilityLoose)
+              + pow(2,10)*muon::isGoodMuon(*mu,muon::TM2DCompatibilityTight)
+              + pow(2,11)*muon::isGoodMuon(*mu,muon::TMOneStationLoose)
+              + pow(2,12)*muon::isGoodMuon(*mu,muon::TMOneStationTight)
+              + pow(2,13)*muon::isGoodMuon(*mu,muon::TMLastStationOptimizedLowPtLoose)
+              + pow(2,14)*muon::isGoodMuon(*mu,muon::TMLastStationOptimizedLowPtTight)
+              + pow(2,15)*muon::isGoodMuon(*mu,muon::GMTkChiCompatibility)
+              + pow(2,16)*muon::isGoodMuon(*mu,muon::GMStaChiCompatibility)
+              + pow(2,17)*muon::isGoodMuon(*mu,muon::GMTkKinkTight)
+              + pow(2,18)*muon::isGoodMuon(*mu,muon::TMLastStationAngLoose)
+              + pow(2,19)*muon::isGoodMuon(*mu,muon::TMLastStationAngTight)
+              + pow(2,20)*muon::isGoodMuon(*mu,muon::TMOneStationAngLoose)
+              + pow(2,21)*muon::isGoodMuon(*mu,muon::TMOneStationAngTight)
+              + pow(2,22)*muon::isGoodMuon(*mu,muon::TMLastStationOptimizedBarrelLowPtLoose)
+              + pow(2,23)*muon::isGoodMuon(*mu,muon::TMLastStationOptimizedBarrelLowPtTight)
+              + pow(2,24)*muon::isGoodMuon(*mu,muon::RPCMuLoose)
+              // //This is the soft muon ID
+              + pow(2,25)*( muon::isGoodMuon(*mu,muon::TMOneStationTight)
+                      && mu->innerTrack()->hitPattern().trackerLayersWithMeasurement() > 5
+                      && mu->innerTrack()->hitPattern().pixelLayersWithMeasurement() > 0
+                      && mu->innerTrack()->quality(reco::TrackBase::highPurity)
+                      && fabs(mu->innerTrack()->dxy(highestSumPt2Vertex.position())) < 0.3
+                      && fabs(mu->innerTrack()->dz(highestSumPt2Vertex.position())) < 20.
+                      ));
 
       muon_pileupIso.push_back(mu->pfIsolationR04().sumPUPt);
       muon_chargedIso.push_back(mu->pfIsolationR04().sumChargedHadronPt);
@@ -1274,7 +1648,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       nMuons++;
 
   } // end loop on muon collection
-  
+
   // Trigger objects
   std::vector<std::vector<float>> triggerObjectE;
   std::vector<std::vector<float>> triggerObjectPt;
@@ -1283,22 +1657,22 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   std::vector<TLorentzVector> trigObjP4sAll;
   for ( int q=0; q<MAX_MuonHLTFilters;q++) {
-  trigtools::getP4sOfObsPassingFilter(trigObjP4sAll,*trigEvent,muonHLTFilterNames[q].c_str(),"HLT");
-  std::vector<float> triggerObjectE_temp;
-  std::vector<float> triggerObjectPt_temp;
-  std::vector<float> triggerObjectEta_temp;
-  std::vector<float> triggerObjectPhi_temp;
-  for(size_t objNr=0; objNr<trigObjP4sAll.size(); objNr++) {
-    triggerObjectE_temp.push_back(trigObjP4sAll[objNr].Energy());
-    triggerObjectPt_temp.push_back(trigObjP4sAll[objNr].Pt());
-    triggerObjectEta_temp.push_back(trigObjP4sAll[objNr].Eta());
-    triggerObjectPhi_temp.push_back(trigObjP4sAll[objNr].Phi());
+      trigtools::getP4sOfObsPassingFilter(trigObjP4sAll,*trigEvent,muonHLTFilterNames[q].c_str(),"HLT");
+      std::vector<float> triggerObjectE_temp;
+      std::vector<float> triggerObjectPt_temp;
+      std::vector<float> triggerObjectEta_temp;
+      std::vector<float> triggerObjectPhi_temp;
+      for(size_t objNr=0; objNr<trigObjP4sAll.size(); objNr++) {
+          triggerObjectE_temp.push_back(trigObjP4sAll[objNr].Energy());
+          triggerObjectPt_temp.push_back(trigObjP4sAll[objNr].Pt());
+          triggerObjectEta_temp.push_back(trigObjP4sAll[objNr].Eta());
+          triggerObjectPhi_temp.push_back(trigObjP4sAll[objNr].Phi());
+      }
+      triggerObjectE.push_back(triggerObjectE_temp);
+      triggerObjectPt.push_back(triggerObjectPt_temp);
+      triggerObjectEta.push_back(triggerObjectEta_temp);
+      triggerObjectPhi.push_back(triggerObjectPhi_temp);
   }
-  triggerObjectE.push_back(triggerObjectE_temp);
-  triggerObjectPt.push_back(triggerObjectPt_temp);
-  triggerObjectEta.push_back(triggerObjectEta_temp);
-  triggerObjectPhi.push_back(triggerObjectPhi_temp);
-}
 
   float RecoPFMET = -10, RecoPFMET_phi = -10, RecoPFMET_sigf = -10, RecoPFMHT = -10;
   float HLTCaloMET = -10, HLTCaloMET_phi = -10, HLTCaloMET_sigf = -10;
@@ -1309,65 +1683,65 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   //===================== Handle For RecoCaloMET ===================
   if (recoCaloMETHandle.isValid() && !recoCaloMETHandle->empty()) {
-    for (unsigned int i = 0; i < recoCaloMETHandle->size(); i++) {
-      const reco::CaloMET* recoCaloMet = &(*recoCaloMETHandle)[i];
-      RecoCaloMET = recoCaloMet->et();
-      RecoCaloMET_phi = recoCaloMet->phi();
-      RecoCaloMET_sigf = recoCaloMet->significance();
-    }
+      for (unsigned int i = 0; i < recoCaloMETHandle->size(); i++) {
+          const reco::CaloMET* recoCaloMet = &(*recoCaloMETHandle)[i];
+          RecoCaloMET = recoCaloMet->et();
+          RecoCaloMET_phi = recoCaloMet->phi();
+          RecoCaloMET_sigf = recoCaloMet->significance();
+      }
   }
 
   //===================== Handle For RecoPFMET ===================
   if (recoPFMETHandle.isValid() && !recoPFMETHandle->empty()) {
-    for (unsigned int i = 0; i < recoPFMETHandle->size(); i++) {
-      const reco::PFMET* recoPFMet = &(*recoPFMETHandle)[i];
-      RecoPFMET = recoPFMet->et();
-      RecoPFMET_phi = recoPFMet->phi();
-      RecoPFMET_sigf = recoPFMet->significance();
-    }
+      for (unsigned int i = 0; i < recoPFMETHandle->size(); i++) {
+          const reco::PFMET* recoPFMet = &(*recoPFMETHandle)[i];
+          RecoPFMET = recoPFMet->et();
+          RecoPFMET_phi = recoPFMet->phi();
+          RecoPFMET_sigf = recoPFMet->significance();
+      }
   }
 
   //===================== Handle For HLT Trigger Summary ===================
   const edm::Handle<trigger::TriggerEvent> hltTriggerSummaryHandle = iEvent.getHandle(trigEventToken_);
   if (hltTriggerSummaryHandle.isValid()) {
 
-    int caloMETKey = 0, caloMETCleanKey = 0, caloMHTKey = 0, pfMHTKey = 0, pfMETKey = 0;
-  // loop over trigger object collections to find HLT CaloMET, CaloMETClean, CaloMHT, PFMHT, PFMET collections
-    for (int iC = 0; iC < hltTriggerSummaryHandle->sizeCollections(); iC++) {
-      if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltMet::HLT") {
-      // collectionKey(iC) gives trigger object key ONE PAST the object collection of interest
-        caloMETKey = hltTriggerSummaryHandle->collectionKey(iC);
-      // HLT MET object collections ALWAYS have four objects {MET, TET, MET significance, ELongitudinal}, hence -4 for MET value
-        HLTCaloMET = hltTriggerSummaryHandle->getObjects()[caloMETKey-4].pt();
-        HLTCaloMET_phi = hltTriggerSummaryHandle->getObjects()[caloMETKey-4].phi();
-      // and -2 for MET significance
-      // significance  saved as .pt() but obviously pt holds no meaning here
-        HLTCaloMET_sigf = hltTriggerSummaryHandle->getObjects()[caloMETKey-2].pt();
-      } if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltMetClean::HLT") {
-          caloMETCleanKey = hltTriggerSummaryHandle->collectionKey(iC);
-          HLTCaloMETClean = hltTriggerSummaryHandle->getObjects()[caloMETCleanKey-4].pt();
-          HLTCaloMETClean_phi = hltTriggerSummaryHandle->getObjects()[caloMETCleanKey-4].phi();
-          HLTCaloMETClean_sigf = hltTriggerSummaryHandle->getObjects()[caloMETCleanKey-2].pt();
-      } if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltMht::HLT") {
-          caloMHTKey = hltTriggerSummaryHandle->collectionKey(iC);
-        // HLT MHT object collections ALWAYS have four objects {MHT, THT, MHT significance, HLongitudinal}, hence -4 for MHT value
-          HLTCaloMHT = hltTriggerSummaryHandle->getObjects()[caloMHTKey-4].pt();
-          HLTCaloMHT_phi = hltTriggerSummaryHandle->getObjects()[caloMHTKey-4].phi();
-        // and -2 for MHT significance
-        // significance  saved as .pt() but obviously pt holds no meaning here
-          HLTCaloMHT_sigf = hltTriggerSummaryHandle->getObjects()[caloMHTKey-2].pt();
-      } if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltPFMHTTightID::HLT") {
-        pfMHTKey = hltTriggerSummaryHandle->collectionKey(iC);
-        HLTPFMHT = hltTriggerSummaryHandle->getObjects()[pfMHTKey-4].pt();
-        HLTPFMHT_phi = hltTriggerSummaryHandle->getObjects()[pfMHTKey-4].phi();
-        HLTPFMHT_sigf = hltTriggerSummaryHandle->getObjects()[pfMHTKey-2].pt();
-      } if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltPFMETProducer::HLT") {
-        pfMETKey = hltTriggerSummaryHandle->collectionKey(iC);
-        HLTPFMET = hltTriggerSummaryHandle->getObjects()[pfMETKey-4].pt();
-        HLTPFMET_phi = hltTriggerSummaryHandle->getObjects()[pfMETKey-4].phi();
-        HLTPFMET_sigf = hltTriggerSummaryHandle->getObjects()[pfMETKey-2].pt();
+      int caloMETKey = 0, caloMETCleanKey = 0, caloMHTKey = 0, pfMHTKey = 0, pfMETKey = 0;
+      // loop over trigger object collections to find HLT CaloMET, CaloMETClean, CaloMHT, PFMHT, PFMET collections
+      for (int iC = 0; iC < hltTriggerSummaryHandle->sizeCollections(); iC++) {
+          if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltMet::HLT") {
+              // collectionKey(iC) gives trigger object key ONE PAST the object collection of interest
+              caloMETKey = hltTriggerSummaryHandle->collectionKey(iC);
+              // HLT MET object collections ALWAYS have four objects {MET, TET, MET significance, ELongitudinal}, hence -4 for MET value
+              HLTCaloMET = hltTriggerSummaryHandle->getObjects()[caloMETKey-4].pt();
+              HLTCaloMET_phi = hltTriggerSummaryHandle->getObjects()[caloMETKey-4].phi();
+              // and -2 for MET significance
+              // significance  saved as .pt() but obviously pt holds no meaning here
+              HLTCaloMET_sigf = hltTriggerSummaryHandle->getObjects()[caloMETKey-2].pt();
+          } if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltMetClean::HLT") {
+              caloMETCleanKey = hltTriggerSummaryHandle->collectionKey(iC);
+              HLTCaloMETClean = hltTriggerSummaryHandle->getObjects()[caloMETCleanKey-4].pt();
+              HLTCaloMETClean_phi = hltTriggerSummaryHandle->getObjects()[caloMETCleanKey-4].phi();
+              HLTCaloMETClean_sigf = hltTriggerSummaryHandle->getObjects()[caloMETCleanKey-2].pt();
+          } if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltMht::HLT") {
+              caloMHTKey = hltTriggerSummaryHandle->collectionKey(iC);
+              // HLT MHT object collections ALWAYS have four objects {MHT, THT, MHT significance, HLongitudinal}, hence -4 for MHT value
+              HLTCaloMHT = hltTriggerSummaryHandle->getObjects()[caloMHTKey-4].pt();
+              HLTCaloMHT_phi = hltTriggerSummaryHandle->getObjects()[caloMHTKey-4].phi();
+              // and -2 for MHT significance
+              // significance  saved as .pt() but obviously pt holds no meaning here
+              HLTCaloMHT_sigf = hltTriggerSummaryHandle->getObjects()[caloMHTKey-2].pt();
+          } if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltPFMHTTightID::HLT") {
+              pfMHTKey = hltTriggerSummaryHandle->collectionKey(iC);
+              HLTPFMHT = hltTriggerSummaryHandle->getObjects()[pfMHTKey-4].pt();
+              HLTPFMHT_phi = hltTriggerSummaryHandle->getObjects()[pfMHTKey-4].phi();
+              HLTPFMHT_sigf = hltTriggerSummaryHandle->getObjects()[pfMHTKey-2].pt();
+          } if(hltTriggerSummaryHandle->collectionTag(iC).encode()=="hltPFMETProducer::HLT") {
+              pfMETKey = hltTriggerSummaryHandle->collectionKey(iC);
+              HLTPFMET = hltTriggerSummaryHandle->getObjects()[pfMETKey-4].pt();
+              HLTPFMET_phi = hltTriggerSummaryHandle->getObjects()[pfMETKey-4].phi();
+              HLTPFMET_sigf = hltTriggerSummaryHandle->getObjects()[pfMETKey-2].pt();
+          }
       }
-    }
   }
 
   // PF jet info for the ntuple
@@ -1393,61 +1767,61 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   // Loop on pfJetColl for the ntuple, for histos there is a matching to the HSCP candidates
   if (pfJetHandle.isValid() && !pfJetHandle->empty()) {
-    const reco::PFJetCollection* pfJetColl = pfJetHandle.product();
-    TLorentzVector pMHT;
-    for (unsigned int i = 0; i < pfJetColl->size(); i++) {
-      const reco::PFJet* jet = &(*pfJetColl)[i];
-      if (jet->pt() < 30) {
-        continue;
-      }
-      pfJetsNum++;
-      Jets_pt.push_back(jet->pt());
-      Jets_eta.push_back(jet->eta());
-      Jets_phi.push_back(jet->phi());
-      Jets_mass.push_back(jet->mass());
-      Jets_E.push_back(jet->energy());
-      Jets_pdgId.push_back(jet->pdgId());
-      Jets_et.push_back(jet->et());
-      Jets_chargedEmEnergyFraction.push_back(jet->chargedEmEnergyFraction());
-      Jets_neutralEmEnergyFraction.push_back(jet->neutralEmEnergyFraction());
-      Jets_chargedHadronEnergyFraction.push_back(jet->chargedHadronEnergyFraction());
-      Jets_neutralHadronEnergyFraction.push_back(jet->neutralHadronEnergyFraction());
-      Jets_muonEnergyFraction.push_back(jet->muonEnergyFraction());
-      Jets_chargedMultiplicity.push_back(jet->chargedMultiplicity());
-      Jets_neutralMultiplicity.push_back(jet->neutralMultiplicity());
-
-      Jets_jetArea.push_back(jet->jetArea());
-      Jets_pileupE.push_back(jet->pileup());
-    // Jets_pileupId.push_back(jet->userFloat("pileupJetId:fullDiscriminant"));
-    // Jets_pileupIdFlag.push_back(jet->userInt("pileupJetId:fullId")); //A bit map for loose, medium, and tight working points
-
-      pfJetHT += jet->pt();
-      TLorentzVector p4(jet->pt() * cos(jet->phi()), jet->pt() * sin(jet->phi()), 0, jet->et());
-      pMHT += p4;
-    }
-    RecoPFMHT = pMHT.Pt();
+      const reco::PFJetCollection* pfJetColl = pfJetHandle.product();
+      TLorentzVector pMHT;
+      for (unsigned int i = 0; i < pfJetColl->size(); i++) {
+          const reco::PFJet* jet = &(*pfJetColl)[i];
+          if (jet->pt() < 30) {
+              continue;
+          }
+          pfJetsNum++;
+          Jets_pt.push_back(jet->pt());
+          Jets_eta.push_back(jet->eta());
+          Jets_phi.push_back(jet->phi());
+          Jets_mass.push_back(jet->mass());
+          Jets_E.push_back(jet->energy());
+          Jets_pdgId.push_back(jet->pdgId());
+          Jets_et.push_back(jet->et());
+          Jets_chargedEmEnergyFraction.push_back(jet->chargedEmEnergyFraction());
+          Jets_neutralEmEnergyFraction.push_back(jet->neutralEmEnergyFraction());
+          Jets_chargedHadronEnergyFraction.push_back(jet->chargedHadronEnergyFraction());
+          Jets_neutralHadronEnergyFraction.push_back(jet->neutralHadronEnergyFraction());
+          Jets_muonEnergyFraction.push_back(jet->muonEnergyFraction());
+          Jets_chargedMultiplicity.push_back(jet->chargedMultiplicity());
+          Jets_neutralMultiplicity.push_back(jet->neutralMultiplicity());
+
+          Jets_jetArea.push_back(jet->jetArea());
+          Jets_pileupE.push_back(jet->pileup());
+          // Jets_pileupId.push_back(jet->userFloat("pileupJetId:fullDiscriminant"));
+          // Jets_pileupIdFlag.push_back(jet->userInt("pileupJetId:fullId")); //A bit map for loose, medium, and tight working points
+
+          pfJetHT += jet->pt();
+          TLorentzVector p4(jet->pt() * cos(jet->phi()), jet->pt() * sin(jet->phi()), 0, jet->et());
+          pMHT += p4;
+      }
+      RecoPFMHT = pMHT.Pt();
   }
 
 
 
   //reinitialize the bookeeping array for each event
   for (unsigned int CutIndex = 0; CutIndex < CutPt_.size(); CutIndex++) {
-    HSCPTk[CutIndex] = false;
-    HSCPTk_SystP[CutIndex] = false;
-    HSCPTk_SystI[CutIndex] = false;
-    HSCPTk_SystT[CutIndex] = false;
-    HSCPTk_SystM[CutIndex] = false;
-    HSCPTk_SystPU[CutIndex] = false;
-    HSCPTk_SystHUp[CutIndex] = false;
-    HSCPTk_SystHDown[CutIndex] = false;
-    MaxMass[CutIndex] = -1;
-    MaxMass_SystP[CutIndex] = -1;
-    MaxMass_SystI[CutIndex] = -1;
-    MaxMass_SystT[CutIndex] = -1;
-    MaxMass_SystM[CutIndex] = -1;
-    MaxMass_SystPU[CutIndex] = -1;
-    MaxMass_SystHUp[CutIndex] = -1;
-    MaxMass_SystHDown[CutIndex] = -1;
+      HSCPTk[CutIndex] = false;
+      HSCPTk_SystP[CutIndex] = false;
+      HSCPTk_SystI[CutIndex] = false;
+      HSCPTk_SystT[CutIndex] = false;
+      HSCPTk_SystM[CutIndex] = false;
+      HSCPTk_SystPU[CutIndex] = false;
+      HSCPTk_SystHUp[CutIndex] = false;
+      HSCPTk_SystHDown[CutIndex] = false;
+      MaxMass[CutIndex] = -1;
+      MaxMass_SystP[CutIndex] = -1;
+      MaxMass_SystI[CutIndex] = -1;
+      MaxMass_SystT[CutIndex] = -1;
+      MaxMass_SystM[CutIndex] = -1;
+      MaxMass_SystPU[CutIndex] = -1;
+      MaxMass_SystHUp[CutIndex] = -1;
+      MaxMass_SystHDown[CutIndex] = -1;
   }
 
   //load all event collection that will be used later on (HSCP, dEdx and TOF)
@@ -1457,11 +1831,18 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   std::vector<bool> HSCP_passCutPt55;
   std::vector<bool> HSCP_passPreselection;
   std::vector<bool> HSCP_passPreselectionSept8;
+  std::vector<bool> HSCP_passPreselectionTrigSys;
   std::vector<bool> HSCP_passSelection;
   std::vector<bool> HSCP_isPFMuon;
   std::vector<bool> HSCP_PFMuonPt;
   std::vector<float> HSCP_Charge;
   std::vector<float> HSCP_Pt;
+
+
+  std::vector<float> HSCP_trigObjBeta;
+  std::vector<float> HSCP_dRclosestTrigAndCandidate;
+  std::vector<float> HSCP_GenBeta;
+
   std::vector<float> HSCP_PtErr;
   std::vector<float> HSCP_Is_StripOnly;
   std::vector<float> HSCP_Ias;
@@ -1485,6 +1866,12 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   std::vector<bool>  HSCP_isMuon;
   std::vector<bool>  HSCP_isPhoton;
   std::vector<bool>  HSCP_isElectron;
+
+  std::vector<float>  HSCP_gsfFbremElectron;
+
+  std::vector<float>  HSCP_gsfMomentumElectron;
+  std::vector<float>  HSCP_PFMomentumElectron;
+
   std::vector<bool>  HSCP_isChHadron;
   std::vector<bool>  HSCP_isNeutHadron;
   std::vector<bool>  HSCP_isPfTrack;
@@ -1527,6 +1914,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   std::vector<float> HSCP_iso_ECAL;
   std::vector<float> HSCP_iso_HCAL;
   std::vector<float> HSCP_track_genTrackMiniIsoSumPt;
+  std::vector<float> HSCP_track_genTrackAbsIsoSumPtFix;
+  std::vector<float> HSCP_track_genTrackIsoSumPt_dr03;
   std::vector<float> HSCP_PFMiniIso_relative;
   std::vector<float> HSCP_PFMiniIso_wMuon_relative;
   std::vector<float> HSCP_track_PFIsolationR005_sumChargedHadronPt;
@@ -1577,8 +1966,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   std::vector<int> HSCP_ErrorHisto_bin;
   std::vector<int> HSCP_type;
-  
-//====================loop over HSCP candidates===================
+
+  //====================loop over HSCP candidates===================
   if (debug_ > 0 && trigInfo_ > 0) LogPrint(MOD) << "Loop over HSCP candidates:";
   unsigned int candidate_count = 0;
   unsigned int postPreS_candidate_count = 0;
@@ -1599,15 +1988,19 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   float bestCandidateFiStrips = -1.;
   float bestCandidateFiStripsLog = -1.;
   float bestCandidateProbQNoL1 = -1.;
+  float bestCandidateTIsol = -1.;
   float bestCandidateDrMinHltMuon = 9999.;
   float bestCandidateGenBeta = -1.;
   float anyCandidateDrMinHltMuon = 9999.0;
   unsigned int bestSoFarCandCutInd = 0;
   bool passTechnicalChecks = false;
-  
+  bool trigObjPassedPres = false;
+
   tuple->EventCutFlow->Fill(0.0, eventWeight_);
   
   for (const auto& hscp : iEvent.get(hscpToken_)) {
+
+
   // Number of tracks before any trigger or preselection
     tuple->CutFlow->Fill(0.);
     if (debug_> 0 && trigInfo_ > 0) LogPrint(MOD) << "  --------------------------------------------";
@@ -1767,8 +2160,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     
     if (!isData && closestGenIndex < 0 ) {
       if (debug_ > 4 && trigInfo_ > 0) {
-        LogPrint(MOD) << "min dr: " << dRMinGen << endl;
-        LogPrint(MOD) << "min dPt: " << dPtMinGen << endl;
+        LogPrint(MOD) << "min dr: " << dRMinGen;
+        LogPrint(MOD) << "min dPt: " << dPtMinGen;
         LogPrint(MOD) << "  >> Event where we didnt find the gen candidate";
       }
       // 5-th bin of the error histo, didnt find the gen canidate
@@ -1784,8 +2177,10 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     float genPhi = (closestGenIndex > 0) ? genColl[closestGenIndex].phi() : -9999.;
     float genGammaBeta = (closestGenIndex > 0) ? genColl[closestGenIndex].p() /  genColl[closestGenIndex].mass() : -1.;
     float genBeta = (closestGenIndex > 0) ? genColl[closestGenIndex].p() / genColl[closestGenIndex].energy() : -1.f;
-    
-    
+
+    HSCP_GenBeta.push_back(genBeta);
+    HSCP_trigObjBeta.push_back(trigObjBeta);
+ 
     if (!isData && trigInfo_ > 0 && doBefPreSplots_) {
       if (debug_ > 5) {
         LogPrint(MOD) << "  >> The min Gen candidate distance is " << dRMinGen << " for PDG ID " << genPdgId << " with pT " << genPt << " and eta " << genEta ;
@@ -1810,6 +2205,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     // the pt of the candidate and the number of siblings
     float closestBackgroundPDGsIDs[8] = {0.,0.,0.,9999.,9999.,0.,9999.,0.};
     // Look at the properties of the closes gen candidate
+
+
     if (isSignal) {
       closestHSCPsPDGsID = abs(genPdgId);
       // All HSCP candidates
@@ -1867,12 +2264,15 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
           tuple->Gen_HSCPCandidateType->Fill(5.);
         }
       }
+
+
     }
     
     // Match candidate track to HLT muon
     float dr_min_hltMuon_hscpCand = 9999.0;
     float hlt_match_pt = -9999.0;
     for(size_t objNr=0; objNr<trigObjP4s.size(); objNr++) {
+      if (trigObjP4s[objNr].Pt() < 50) continue;
       float temp_dr = deltaR(trigObjP4s[objNr].Eta(),trigObjP4s[objNr].Phi(), track->eta(), track->phi());
       if (temp_dr < dr_min_hltMuon_hscpCand) {
         dr_min_hltMuon_hscpCand = temp_dr;
@@ -1940,8 +2340,10 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     float dRMinPfJetWithNoCuts = 9999.0;
     float closestPfJetMuonFraction = 0.0;
     float closestPfJetElectronFraction = 0.0;
-    float closestPfJetPhotonFraction = 0.0;
-    
+    float closestPfJetPhotonFraction = 0.0; 
+    float EleGsfMomentum = 0;
+    float ElePFMomentum = 0;
+    float EleFbremLost = 0;
     if (debug_ > 5) LogPrint(MOD) << "      >> Calculating PF quantities";
     bool pf_isMuon = false, pf_isElectron = false, pf_isChHadron = false, pf_isNeutHadron = false;
     bool pf_isPfTrack = false,  pf_isPhoton = false, pf_isUndefined = false;
@@ -1962,6 +2364,16 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         
         if (pfCand->trackRef().isNonnull() && pfCand->trackRef().key() == track.key()) {
           pf_isElectron = pfCand->translatePdgIdToType(pfCand->pdgId()) == reco::PFCandidate::ParticleType::e;
+          if(pf_isElectron){
+              const auto& gsfTrackRef = pfCand->gsfTrackRef();
+              const auto& gsfEleRef = pfCand->gsfElectronRef();
+              if (gsfTrackRef.isNonnull()) {
+                  EleGsfMomentum = gsfTrackRef->p();
+                  EleFbremLost = gsfEleRef->fbrem();
+                  ElePFMomentum =pfCand->p4().P();
+                  //std::cout << "The momentum associated to the track is : " << track->p() << " and the momentum associated to the GSF electon associated to the PF cand that is the HSCP = " << EleGsfMomentum << " and the momentum associated to the PF candidate : " << ElePFMomentum << " the fraction lost by brehmstrahlung : " <<EleFbremLost <<  std::endl;
+              }
+          }
           pf_isMuon = pfCand->translatePdgIdToType(pfCand->pdgId()) == reco::PFCandidate::ParticleType::mu;
           pf_isPhoton = pfCand->translatePdgIdToType(pfCand->pdgId()) == reco::PFCandidate::ParticleType::gamma;
           
@@ -2064,7 +2476,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     
     HSCP_count++;
     
-    // Fixed size isolation and and EoP variable
+    // Fixed size isolation and EoP variable
     const edm::ValueMap<susybsm::HSCPIsolation> IsolationMap = iEvent.get(hscpIsoToken_);
     susybsm::HSCPIsolation hscpIso = IsolationMap.get((size_t)track.key());
     float IsoTK_SumEt = hscpIso.Get_TK_SumEt();
@@ -2074,10 +2486,14 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     
     // Loop on generalTracks to get genTrackMiniIso
     float track_genTrackMiniIsoSumPt = 0;
+
+    float track_genTrackMiniIsoSumPtFix = 0;
     for(unsigned int c=0;c<trackCollectionHandle->size();c++){
       reco::TrackRef genTrackRef = reco::TrackRef( trackCollectionHandle.product(), c );
         // Dont count the HSCP candidate in
       if (genTrackRef.isNonnull() && genTrackRef.key() != track.key()) {
+        float drForMiniIsoFix = 0.3;
+
         float drForMiniIso = 0.0;
         if (track->pt() < 50 ) {
           drForMiniIso = 0.2;
@@ -2088,6 +2504,10 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         }
         float pt = genTrackRef->pt();
         float dr = deltaR(genTrackRef->eta(),genTrackRef->phi(),track->eta(),track->phi());
+        if(dr < drForMiniIsoFix) {
+          track_genTrackMiniIsoSumPtFix+=pt;
+        }
+
         if (dr<drForMiniIso) {
           track_genTrackMiniIsoSumPt+=pt;
         }
@@ -2137,9 +2557,10 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     if (!dedxHitsPrescRef.isNull()) {
       preScaleForDeDx = (*dedxPrescCollH)[dedxHitsPrescRef];
     }
-    
+
     if (typeMode_ > 1 && typeMode_ != 5 && !hscp.muonRef().isNull()) {
       if (!isData) {
+
         tof = &(*tofMap)[hscp.muonRef()];
         dttof = &(*tofDtMap)[hscp.muonRef()];
         csctof = &(*tofCscMap)[hscp.muonRef()];
@@ -2147,10 +2568,17 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         const CSCSegmentCollection& CSCSegmentColl = *CSCSegmentCollH;
         const DTRecSegment4DCollection& DTSegmentColl = *DTSegmentCollH;
         // Apply T0 correction on data but not on signal MC
+        // Ne pas recalculer sur data ou MC  -> uniquement apres re-calibration
+
+        tof = &(*tofMap)[hscp.muonRef()];
+        dttof = &(*tofDtMap)[hscp.muonRef()];
+        csctof = &(*tofCscMap)[hscp.muonRef()];
+        /*
         tofCalculator.computeTOF(muon, CSCSegmentColl, DTSegmentColl, 1);
         tof = &tofCalculator.combinedTOF;
         dttof = &tofCalculator.dtTOF;
         csctof = &tofCalculator.cscTOF;
+        */
       }
     } // end conditions for TOF including analysis variables
     
@@ -2306,7 +2734,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         auto clustSizeY = pixelCluster->sizeY();
         auto clustCharge = pixelCluster->charge();
         
-        auto pixelNormCharge = cm2umUnit * dedxHits->charge(i) / dedxHits->pathlength(i);
+        auto pixelNormCharge = um2cmUnit * dedxHits->charge(i) / dedxHits->pathlength(i);
         
         if (clustCharge != dedxHits->charge(i)) {
           LogPrint(MOD) << "clustCharge != dedxHits->charge(i) -- this shouldnt happen";
@@ -2407,7 +2835,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         }
         
         if (trigInfo_ > 0) {
-          float stripNormCharge = cm2umUnit * dedxHits->charge(i) * 265 / dedxHits->pathlength(i);
+          float stripNormCharge = um2cmUnit * dedxHits->charge(i) * 265 / dedxHits->pathlength(i);
           unsigned int stripLayerIndex = 0;
           if (detid.subdetId() == StripSubdetector::TIB) stripLayerIndex = abs(int(tTopo->tibLayer(detid)));
           if (detid.subdetId() == StripSubdetector::TOB) stripLayerIndex = abs(int(tTopo->tobLayer(detid))) + 4;
@@ -2487,7 +2915,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                     mustBeInside, MaxStripNOM, correctFEDSat, crossTalkInvAlgo = 1, dropLowerDeDxValue = 0.0, &dEdxErr, useTemplateLayer_,
                     false,0, false, false, true, pixelCPE_, tTopo, track->px(), track->py(), track->pz(), track->charge());
     
-    reco::DeDxData* dedxMObj_FullTracker = dedxMObj_FullTrackerTmp.numberOfMeasurements() > 0 ? &dedxMObj_FullTrackerTmp : nullptr;
+//    reco::DeDxData* dedxMObj_FullTracker = dedxMObj_FullTrackerTmp.numberOfMeasurements() > 0 ? &dedxMObj_FullTrackerTmp : nullptr;
     
     // Ih Up
     auto dedxMUpObjTmp =
@@ -2507,7 +2935,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
     reco::DeDxData* dedxMDownObj = dedxMDownObjTmp.numberOfMeasurements() > 0 ? &dedxMDownObjTmp : nullptr;
 
-    // Ih no pixel L1 =====> THE GOLDEN VARIABLE :
+    // Ih no pixel L1 
     auto dedxIh_noL1_Tmp =
         computedEdx(track->eta(), iSetup, run_number, year, dedxHits, dEdxSF, localdEdxTemplates = nullptr, usePixel = true, useStrip = true, useClusterCleaning, useTruncated = false,
                     mustBeInside, MaxStripNOM, correctFEDSat, crossTalkInvAlgo = 1, dropLowerDeDxValue = 0.0, &dEdxErr, useTemplateLayer_, skipPixelL1 = true,
@@ -2523,7 +2951,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                     false,0, false, false, true,  pixelCPE_, tTopo, track->px(), track->py(), track->pz(), track->charge());
     reco::DeDxData* dedxIh_15drop = dedxIh_15drop_Tmp.numberOfMeasurements() > 0 ? &dedxIh_15drop_Tmp : nullptr;
     
-    // Ih Strip only
+    // Ih Strip only  =======>  THE GOLDEN VARIABLE (change applied on March 29, 2023):
     auto dedxIh_StripOnly_Tmp =
     computedEdx(track->eta(), iSetup, run_number, year, dedxHits, dEdxSF, localdEdxTemplates = nullptr, usePixel = false, useStrip = true, useClusterCleaning, useTruncated = false,
                     mustBeInside, MaxStripNOM, correctFEDSat, crossTalkInvAlgo = 1, dropLowerDeDxValue = 0.0, &dEdxErr, useTemplateLayer_,
@@ -2692,9 +3120,13 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         } // end loop on vertex collection
       } // end else
 
+    //
+    // Choice before March 29,2023
     // Choose of Ih definition - Ih_nodrop_noPixL1 for Phase-1 detector
     //                         - Ih_FullTracker for Phase-0 detector
-    auto dedxMObj = (numLayers > 3) ? dedxIh_noL1 : dedxMObj_FullTracker;
+    // auto dedxMObj = (numLayers > 3) ? dedxIh_noL1 : dedxMObj_FullTracker;
+    // Choice on March 29, 2023
+    auto dedxMObj = dedxIh_StripOnly;
     globalIh_ = (dedxMObj) ?  dedxMObj->dEdx() : -1.f;
     
     //Choose of Ias definition - strips only
@@ -2831,33 +3263,61 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       closestBackgroundPDGsIDs[6] = numSiblingsF;
     }
     // -- end TODO Sept 25
-    
-    // Before preselection print-outs
-    //  if (debug_ > 7 ) {
-    //    LogPrint(MOD) << "        >> Before preselection print-outs:";
-    //    LogPrint(MOD) << "        >> Trigger passed!";
-    //    LogPrint(MOD) << "        >>   track->eta()  " <<   track->eta() ;
-    //    LogPrint(MOD) << "        >>   track->pt()  " <<   track->pt() ;
-    //    LogPrint(MOD) << "        >>   track->found()  " <<   track->found() ;
-    //    LogPrint(MOD) << "        >>   track->hitPattern().numberOfValidPixelHits()  " <<   track->hitPattern().numberOfValidPixelHits() ;
-    //    LogPrint(MOD) << "        >>   track->validFraction()  " <<   track->validFraction() ;
-    //    LogPrint(MOD) << "        >>   numDeDxHits  " <<   numDeDxHits ;
-    //    LogPrint(MOD) << "        >>   track->chi2() / track->ndof()   " <<   track->chi2() / track->ndof()  ;
-    //    LogPrint(MOD) << "        >>   EoP   " <<   EoP  ;
-    //    LogPrint(MOD) << "        >>   PF E = " << pf_energy <<  " Cone based (0.3) E = " << hscpIso.Get_ECAL_Energy() + hscpIso.Get_HCAL_Energy() << " p = " << track->p() ;
-    //    LogPrint(MOD) << "        >>   dz  " <<   dz ;
-    //    LogPrint(MOD) << "        >>   dxy  " <<   dxy ;
-    //    LogPrint(MOD) << "        >>   track->ptError() / track->pt()  " <<   track->ptError() / track->pt() ;
-    //    LogPrint(MOD) << "        >>   pTerr_over_pT_etaBin(track->pt(), track->eta())  " <<   pTerr_over_pT_etaBin(track->pt(), track->eta()) ;
-    //    LogPrint(MOD) << "        >>   IsoTK_SumEt   " <<   IsoTK_SumEt  ;
-    //    LogPrint(MOD) << "        >>   miniRelIsoAll   " <<   miniRelIsoAll  ;
-    //    LogPrint(MOD) << "        >>   globalIh_  " <<   globalIh_ ;
-    //    LogPrint(MOD) << "        >>   globalIas_  " << globalIas_;
-    //    LogPrint(MOD) << "        >>   probQonTrack   " <<   probQonTrack  ;
-    //    LogPrint(MOD) << "        >>   probXYonTrack   " <<  probXYonTrack  ;
-    //
-    //  }
-    
+
+      //  // Before preselection print-outs
+      //  if (debug_ > 7 ) {
+      //    LogPrint(MOD) << "        >> Before preselection print-outs:";
+      //    LogPrint(MOD) << "        >> Trigger passed!";
+      //    LogPrint(MOD) << "        >>   track->eta()  " <<   track->eta() ;
+      //    LogPrint(MOD) << "        >>   track->pt()  " <<   track->pt() ;
+      //    LogPrint(MOD) << "        >>   track->found()  " <<   track->found() ;
+      //    LogPrint(MOD) << "        >>   track->hitPattern().numberOfValidPixelHits()  " <<   track->hitPattern().numberOfValidPixelHits() ;
+      //    LogPrint(MOD) << "        >>   track->validFraction()  " <<   track->validFraction() ;
+      //    LogPrint(MOD) << "        >>   numDeDxHits  " <<   numDeDxHits ;
+      //    LogPrint(MOD) << "        >>   track->chi2() / track->ndof()   " <<   track->chi2() / track->ndof()  ;
+      //    LogPrint(MOD) << "        >>   EoP   " <<   EoP  ;
+      //    LogPrint(MOD) << "        >>   PF E = " << pf_energy <<  " Cone based (0.3) E = " << hscpIso.Get_ECAL_Energy() + hscpIso.Get_HCAL_Energy() << " p = " << track->p() ;
+      //    LogPrint(MOD) << "        >>   dz  " <<   dz ;
+      //    LogPrint(MOD) << "        >>   dxy  " <<   dxy ;
+      //    LogPrint(MOD) << "        >>   track->ptError() / track->pt()  " <<   track->ptError() / track->pt() ;
+      //    LogPrint(MOD) << "        >>   pTerr_over_pT_etaBin(track->pt(), track->eta())  " <<   pTerr_over_pT_etaBin(track->pt(), track->eta()) ;
+      //    LogPrint(MOD) << "        >>   IsoTK_SumEt   " <<   IsoTK_SumEt  ;
+      //    LogPrint(MOD) << "        >>   miniRelIsoAll   " <<   miniRelIsoAll  ;
+      //    LogPrint(MOD) << "        >>   globalIh_  " <<   globalIh_ ;
+      //    LogPrint(MOD) << "        >>   globalIas_  " << globalIas_;
+      //    LogPrint(MOD) << "        >>   probQonTrack   " <<   probQonTrack  ;
+      //    LogPrint(MOD) << "        >>   probXYonTrack   " <<  probXYonTrack  ;
+      //
+      //  }
+
+      // Loop on generalTracks
+    track_genTrackMiniIsoSumPt = 0;
+    float track_genTrackIsoSumPt_dr03 = 0;
+    for(unsigned int c=0;c<trackCollectionHandle->size();c++){
+      reco::TrackRef genTrackRef = reco::TrackRef( trackCollectionHandle.product(), c );
+        // Dont count the HSCP candidate in
+      if (genTrackRef.isNonnull() && genTrackRef.key() != track.key()) {
+        float drForMiniIso = 0.0;
+        if (track->pt() < 50 ) {
+          drForMiniIso = 0.2;
+        } else if (track->pt() < 200) {
+          drForMiniIso = 10/track->pt();
+        } else {
+          drForMiniIso = 0.05;
+        }
+        float pt = genTrackRef->pt();
+        float dr = deltaR(genTrackRef->eta(),genTrackRef->phi(),track->eta(),track->phi());
+        if (dr<drForMiniIso) {
+          track_genTrackMiniIsoSumPt+=pt;
+        }
+        //drForMiniIso = 0.3;  //  fixed size cone for mass spectrum approach
+        if (dr<0.3) {
+          track_genTrackIsoSumPt_dr03+=pt;
+        }
+      }
+    }
+
+
     // number of tracks as the first bin
     if (trigInfo_ > 0 && doBefPreSplots_) {
       tuple->BefPreS_PfType->Fill(0., eventWeight_);
@@ -3071,6 +3531,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       tuple->BefPreS_RecoPfJetsNum->Fill(pfJetsNum, eventWeight_);
       if (genBeta >= 0) {
         tuple->BefPreS_GenBeta->Fill(genBeta, eventWeight_);
+        if (triggerObjGenIndex > -1) tuple->BefPreS_TriggerGenBeta->Fill(genColl[triggerObjGenIndex].p()/ genColl[triggerObjGenIndex].energy());
       }
       
       //Plotting segment separation depending on whether track passed dz cut
@@ -3179,14 +3640,14 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     // ----------------------------------------------------------------------------|
     // int sizeOfpassedCutsArrays = 15;
     // bool passedCutsArray[sizeOfpassedCutsArrays]; --> this didnt work out, TODO come back to this?
-    //TADA
+    //TODO
     bool passedCutsArray[15];
     std::fill(std::begin(passedCutsArray), std::end(passedCutsArray),false);
     
     // No cut, i.e. events after trigger
     passedCutsArray[0]  = (trigInfo_ > 0) ? true : false;
     // Cut on transverse momentum
-    // Single muon trigger threshold is 50 GeV
+    // Single muon trigger threshold is 50 GeV, our cut is at 55 Gev
     passedCutsArray[1]  = (track->pt() > globalMinPt_)? true : false;
     //passedCutsArray[1]  = ((track->pt() > globalMinPt_) && (track->pt() < globalMaxPt_))? true : false;  // test done by Dylan for the mass spectrum method
     // Check if eta is inside the max eta cut for detector homogeneity
@@ -3209,12 +3670,14 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                           || (typeMode_ == 3 && fabs(dxyFromBeamSpot) < 4)) ? true : false;
     // Cut on the PF based mini-isolation
     passedCutsArray[10] = ( miniRelIsoAll < globalMaxMiniRelIsoAll_ ) ? true : false;
-    // Cut on the absolute pT-dependent cone size TkIsolation
-    passedCutsArray[11] = ( track_genTrackMiniIsoSumPt < globalMaxTIsol_ ) ? true : false;
+    // Cut on the absolute pT-dependent cone size TkIsolation CHANGED TO FIXED COMNE SIZE DR = 0.3
+    //passedCutsArray[11] = ( track_genTrackMiniIsoSumPt < globalMaxTIsol_ ) ? true : false;
+    // Cut on the absolute pT-dependent cone size Mini TkIsolation CHANGED TO FIXED COMNE SIZE DR = 0.3
+    passedCutsArray[11] = ( (track_genTrackMiniIsoSumPtFix) < globalMaxTIsol_ ) ? true : false;
     // Cut on the energy over momenta
     passedCutsArray[12] = (EoP < globalMaxEoP_) ? true : false;
     // Cut on the uncertainty of the pt measurement, TODO the cut value should be made a global variable
-    passedCutsArray[13] = (typeMode_ != 3 && (track->ptError() / (track->pt()*track->pt()) < 0.0008)) ? true : false;
+    passedCutsArray[13] = (typeMode_ != 3 && (track->ptError() / (track->pt()*track->pt()) < 0.0008) && (track->ptError()/track->pt() < 1)) ? true : false;
     //passedCutsArray[13] = (typeMode_ != 3 && (track->ptError() / (track->pt()*track->pt()) < 0.0008) && (track->ptError() / (track->pt()*track->pt()) > 0)) ? true : false; // test done by Dylan for the mass spectrum method
 
     // Cut away background events based on the probQ
@@ -3261,6 +3724,29 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     passedCutsArraySept8[7] = passedCutsArray[7];
     passedCutsArraySept8[8] = passedCutsArray[8];
     passedCutsArraySept8[9] = passedCutsArray[9];
+
+
+    // Define preselection cuts for mass spectrum approach 
+    bool passedCutsArray_massSpectrum[15];
+    std::fill(std::begin(passedCutsArray_massSpectrum), std::end(passedCutsArray_massSpectrum),false);
+    
+    // To reduce mistakes, we just copy the first 10 cuts from earlier, those are the frozen cuts
+    passedCutsArray_massSpectrum[0]  = passedCutsArray[0];
+    passedCutsArray_massSpectrum[1]  = passedCutsArray[1];
+    passedCutsArray_massSpectrum[2]  = passedCutsArray[2];
+    passedCutsArray_massSpectrum[3]  = passedCutsArray[3];
+    passedCutsArray_massSpectrum[4]  = passedCutsArray[4];
+    passedCutsArray_massSpectrum[5]  = passedCutsArray[5];
+    passedCutsArray_massSpectrum[6]  = passedCutsArray[6];
+    passedCutsArray_massSpectrum[7] = passedCutsArray[7];
+    passedCutsArray_massSpectrum[8] = passedCutsArray[8];
+    passedCutsArray_massSpectrum[9] = passedCutsArray[9];
+    passedCutsArray_massSpectrum[10] = passedCutsArray[10];
+    passedCutsArray_massSpectrum[11] = ( track_genTrackIsoSumPt_dr03 < 15) ? true : false;
+    passedCutsArray_massSpectrum[12] = passedCutsArray[12];
+    passedCutsArray_massSpectrum[13] = (typeMode_ != 3 && (track->ptError() / (track->pt()*track->pt()) < 0.0008) && (track->ptError() / (track->pt()*track->pt()) > 0) && (track->ptError() / (track->pt()) < 1)) ? true : false;
+    passedCutsArray_massSpectrum[14] = passedCutsArray[14];
+
     
     // N-1 plots
     if (debug_ > 6 && trigInfo_ > 0) LogPrint(MOD) << "      >> Doing N1 plots";
@@ -3400,6 +3886,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       if (allCutsPassedSoFar) {
         tuple->CutFlowEta->Fill(track->eta(), i);
         tuple->CutFlowProbQ->Fill(1 - probQonTrackNoL1, i);
+        tuple->CutFlowIas->Fill(globalIas_, i);
         tuple->CutFlowEoP->Fill(EoP, i);
         tuple->CutFlowPfType->Fill(0., i);
         if (pf_isPfTrack) {
@@ -3460,20 +3947,20 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       tuple->PostPreS_ProbQNoL1VsIas_CR->Fill(1 - probQonTrackNoL1, globalIas_, eventWeight_);
 
       tuple->PostPreS_Ih_CR->Fill(globalIh_,eventWeight_);
-      tuple->PostPreS_Ihstrip_CR->Fill((dedxIh_StripOnly ? dedxIh_StripOnly->dEdx() : -1) ,eventWeight_);
+//      tuple->PostPreS_Ihstrip_CR->Fill((dedxIh_StripOnly ? dedxIh_StripOnly->dEdx() : -1) ,eventWeight_);
+      tuple->PostPreS_Ih_noL1_CR->Fill((dedxIh_noL1 ? dedxIh_noL1->dEdx() : -1) ,eventWeight_);
       tuple->PostPreS_Ih_nopixcl_CR->Fill((dedxtest_nopixcl ? dedxtest_nopixcl->dEdx() : -1) ,eventWeight_);
 
 
       float Masstest =0;
       // K and C values fixed to some test values
-      if (dedxIh_StripOnly) {
-         if (dedxIh_StripOnly->dEdx() > 3.18) Masstest= GetMass(track->p(), dedxIh_StripOnly->dEdx(), 2.52, 3.18);
-      }
+      // if (dedxIh_StripOnly->dEdx() > 3.18) Masstest= GetMass(track->p(), dedxIh_StripOnly->dEdx(), 2.52, 3.18);
+      if (globalIh_ > dEdxC_) Masstest= GetMass(track->p(), globalIh_, dEdxK_, dEdxC_);
       if ((1 - probQonTrackNoL1)<0.9) {
          tuple->PostPreS_MassVsIas_fail_CR->Fill(globalIas_, Masstest, eventWeight_);
       }
       else {
-          tuple->PostPreS_MassVsIas_pass_CR->Fill(globalIas_, Masstest,  eventWeight_);
+         tuple->PostPreS_MassVsIas_pass_CR->Fill(globalIas_, Masstest,  eventWeight_);
       }
       if (doSystsPlots_) {
         tuple->PostPreS_ProbQNoL1VsIas_CR_Pileup_up->Fill(1 - probQonTrackNoL1, globalIas_,  eventWeight_ * PUSystFactor_[0]);
@@ -3511,14 +3998,15 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
 
         tuple->PostPreS_Ih_CR_veryLowPt->Fill(globalIh_,preScaleForDeDx*eventWeight_);
-        tuple->PostPreS_Ihstrip_CR_veryLowPt->Fill((dedxIh_StripOnly ? dedxIh_StripOnly->dEdx() : -1) ,preScaleForDeDx*eventWeight_);
+//        tuple->PostPreS_Ihstrip_CR_veryLowPt->Fill((dedxIh_StripOnly ? dedxIh_StripOnly->dEdx() : -1) ,preScaleForDeDx*eventWeight_);
+        tuple->PostPreS_Ih_noL1_CR_veryLowPt->Fill((dedxIh_noL1 ? dedxIh_noL1->dEdx() : -1) ,preScaleForDeDx*eventWeight_);
         tuple->PostPreS_Ih_nopixcl_CR_veryLowPt->Fill((dedxtest_nopixcl ? dedxtest_nopixcl->dEdx() : -1) ,preScaleForDeDx*eventWeight_);
         tuple->PostPreS_Ih_noclean_CR_veryLowPt->Fill((dedxtest_noclean ? dedxtest_noclean->dEdx() : -1) ,preScaleForDeDx*eventWeight_);
         tuple->PostPreS_Ih_noinside_CR_veryLowPt->Fill((dedxtest_noinside ? dedxtest_noinside->dEdx() : -1) ,preScaleForDeDx*eventWeight_);
         tuple->PostPreS_Ias_CR_veryLowPt->Fill(globalIas_,preScaleForDeDx*eventWeight_);
         tuple->PostPreS_P_CR_veryLowPt->Fill(track->p(),preScaleForDeDx*eventWeight_);
         tuple->PostPreS_Pt_CR_veryLowPt->Fill(track->pt(),preScaleForDeDx*eventWeight_);
-        tuple->PostPreS_ProbQNoL1_CR_veryLowPt->Fill(1 - probQonTrackNoL1, eventWeight_);
+        tuple->PostPreS_ProbQNoL1_CR_veryLowPt->Fill(1 - probQonTrackNoL1,preScaleForDeDx*eventWeight_);
       }
       for(unsigned int h=0; h< dedxHits->size(); h++) {
         DetId detid(dedxHits->detId(h));
@@ -3542,13 +4030,55 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
               // Pixel corrections
               float pixelScaling = GetSFPixel(detid.subdetId(), detid, year, run_number);
               chargeForIndxH *= pixelScaling;
-        }
-        else {
-              // saturation correction of the charge
-              const SiStripCluster* cluster = dedxHits->stripCluster(h);
-              std::vector<int> amplitudes = convert(cluster->amplitudes());
-              amplitudes = SaturationCorrection(amplitudes,0.10,0.04,true,20,25);
-              float dedx_charge = 0;
+
+
+              // Taking the pixel cluster
+              auto const* pixelCluster =  dedxHits->pixelCluster(h);
+              if (pixelCluster == nullptr)  continue;
+              // Check on which geometry unit the hit is
+              const GeomDetUnit& geomDet = *tkGeometry->idToDetUnit(detid);
+              // Get the local vector for the track direction
+              LocalVector lv = geomDet.toLocal(GlobalVector(track->px(), track->py(), track->pz()));
+              // Re-run the CPE on this cluster with the lv above
+              // getParameters will return std::tuple<LocalPoint, LocalError, SiPixelRecHitQuality::QualWordType>;
+              // from this we pick the 2nd, the QualWordType
+              auto reCPE = std::get<2>(pixelCPE->getParameters(*pixelCluster, geomDet, LocalTrajectoryParameters(dedxHits->pos(h), lv, track->charge())));
+              // extract probQ and probXY from this
+              //float probQ = SiPixelRecHitQuality::thePacking.probabilityQ(reCPE);
+              // To measure how often the CPE fails
+              bool cpeHasFailed = false;
+              if (!SiPixelRecHitQuality::thePacking.hasFilledProb(reCPE)) {
+                  cpeHasFailed = true;
+              }
+              if (cpeHasFailed) cleaning = false;
+              if (cpeHasFailed) continue;
+
+             //  if (probQ <= 0.0 || probQ >= 1.f) probQ = 1.f;
+
+              bool isOnEdge = SiPixelRecHitQuality::thePacking.isOnEdge(reCPE);
+              bool hasBadPixels = SiPixelRecHitQuality::thePacking.hasBadPixels(reCPE);
+              bool spansTwoROCs = SiPixelRecHitQuality::thePacking.spansTwoROCs(reCPE);
+              bool specInCPE = (isOnEdge || hasBadPixels || spansTwoROCs) ? true : false;
+
+
+             //  bool isBPIXL1=false;
+             //  int numLayers = tkGeometry->numberOfLayers(PixelSubdetector::PixelBarrel);
+             //  if ((numLayers == 4) && ((detid.subdetId() == PixelSubdetector::PixelBarrel) && (tTopo->pxbLayer(detid) == 1))) isBPIXL1=true;
+
+             // cleaning in the pixel : ok if (!specInCPE) 
+              if (specInCPE) cleaning = false;
+   
+              auto clustSizeX = pixelCluster->sizeX();
+              auto clustSizeY = pixelCluster->sizeY();
+              if (clustSizeX==1 && clustSizeY==1) cleaning = false;
+
+        }
+        else {
+              // saturation correction of the charge
+              const SiStripCluster* cluster = dedxHits->stripCluster(h);
+              std::vector<int> amplitudes = convert(cluster->amplitudes());
+              amplitudes = SaturationCorrection(amplitudes,0.10,0.04,true,20,25);
+              float dedx_charge = 0;
               for (unsigned int s = 0; s < amplitudes.size(); s++) {
                  dedx_charge+=amplitudes[s];
               }
@@ -3560,13 +4090,14 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
               cleaning = clusterCleaning(amplitudesPrim, 1);
               dedx_inside = isHitInsideTkModule(dedxHits->pos(h), dedxHits->detId(h), cluster);
         }
-
+        // TODO
         if (cleaning && dedx_inside)  {
-          if (createGiTemplates_) {
+          // sampleType_ < 2 means dont create templates for signal samples
+          if (createGiTemplates_ && (sampleType_ < 2)) {
            int npv = vertexColl.size();
            for (int i = 0 ; i < NbPuBins_ ; i++){
              if (npv > PuBins_[i] && npv <= PuBins_[i+1]) {
-               std::cout << "Creating GiS templates for PU bin #" << (i+1) << std::endl;
+               if (debug_ > 3) LogPrint(MOD) << "Creating GiS templates for PU bin #" << (i+1);
                if(detid.subdetId() >= 3) { // For strips only 1 question : charge is already multiplied by sclae factor ?
                  if(i==0) tuple->Calibration_GiTemplate_PU_1->Fill(modulgeomForIndxH, pathlenghtForIndxH, scaleFactor*chargeForIndxH/pathlenghtForIndxH, preScaleForDeDx);
                  else if(i==1) tuple->Calibration_GiTemplate_PU_2->Fill(modulgeomForIndxH, pathlenghtForIndxH, scaleFactor*chargeForIndxH/pathlenghtForIndxH, preScaleForDeDx);
@@ -3594,7 +4125,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
           }
         }//end condition createGitemplates
 
-        // ADD plots to answer Slava's questions about Charge Resolution
+        // Plots to answer Slava's questions about Charge Resolution
         if (doPostPreSplots_) {
          int layer_num = 0;
          float scaleF = (detid.subdetId() < 3) ? dEdxSF_0_*dEdxSF_1_ : dEdxSF_0_;
@@ -3602,16 +4133,36 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
          float pathL = dedxHits->pathlength(h);
           // check if we are on the pixels
          if (detid.subdetId() < 3) {
-            if (detid.subdetId() == PixelSubdetector::PixelBarrel) layer_num=tTopo->pxbLayer(detid);
-            else layer_num=tTopo->pxfDisk(detid)+4;
-            tuple->PostPreS_CpPL_pix_CR_veryLowPt->Fill(scaleF*chargeForIndxH*factorChargeToE/pathL, layer_num, eventWeight_);
+           if (detid.subdetId() == PixelSubdetector::PixelBarrel) {
+             layer_num=tTopo->pxbLayer(detid);
+           }
+           else {
+            // Given the eta < 1 we nver get here
+            layer_num=tTopo->pxfDisk(detid)+4;
+          }
+           //TODO March21
+          tuple->PostPreS_CluPathLenghtVsPixLayer_CR_veryLowPt->Fill(pathL/um2cmUnit, layer_num, eventWeight_);
+          tuple->PostPreS_CluDeDxVsPixLayer_CR_veryLowPt->Fill(scaleF*chargeForIndxH*factorChargeToE/pathL, layer_num, eventWeight_);
+          if (detid.subdetId() == PixelSubdetector::PixelBarrel && layer_num==2) tuple->Stab_CluDeDxPixLayer2_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+          if (detid.subdetId() == PixelSubdetector::PixelBarrel && layer_num==3) tuple->Stab_CluDeDxPixLayer3_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+          if (detid.subdetId() == PixelSubdetector::PixelBarrel && layer_num==4) tuple->Stab_CluDeDxPixLayer4_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
          } // otherwise we are on the strips
          else {
            if (detid.subdetId() == StripSubdetector::TIB) layer_num = abs(int(tTopo->tibLayer(detid)));
            if (detid.subdetId() == StripSubdetector::TOB) layer_num = abs(int(tTopo->tobLayer(detid))) + 4;
            if (detid.subdetId() == StripSubdetector::TID) layer_num = abs(int(tTopo->tidWheel(detid))) + 10;
            if (detid.subdetId() == StripSubdetector::TEC) layer_num = abs(int(tTopo->tecWheel(detid))) + 13;
-           tuple->PostPreS_CpPL_strip_CR_veryLowPt->Fill(scaleF*chargeForIndxH*factorChargeToE/pathL, layer_num, eventWeight_);
+           tuple->PostPreS_CluDeDxVsStripsLayer_CR_veryLowPt->Fill(scaleF*chargeForIndxH*factorChargeToE/pathL, layer_num, eventWeight_);
+           if (layer_num==1) tuple->Stab_CluDeDxStripsLayer1_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==2) tuple->Stab_CluDeDxStripsLayer2_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==3) tuple->Stab_CluDeDxStripsLayer3_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==4) tuple->Stab_CluDeDxStripsLayer4_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==5) tuple->Stab_CluDeDxStripsLayer5_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==6) tuple->Stab_CluDeDxStripsLayer6_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==7) tuple->Stab_CluDeDxStripsLayer7_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==8) tuple->Stab_CluDeDxStripsLayer8_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==9) tuple->Stab_CluDeDxStripsLayer9_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
+           if (layer_num==10) tuple->Stab_CluDeDxStripsLayer10_VsRun_CR_veryLowPt->Fill(currentRun_, scaleF*chargeForIndxH*factorChargeToE/pathL , eventWeight_);
          } // end on condition for pixels or strips
         } // end condition on doPostPreSplots_
        } // end if on the cleaning and the inside
@@ -3626,10 +4177,15 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     }
     
     if (debug_ > 2 && trigInfo_ > 0) LogPrint(MOD) << "      >> Check if we pass Preselection";
-    bool passPre = passPreselection(passedCutsArray, true);
+    bool passPre = passPreselection(passedCutsArray, true);\
+
     if (debug_ > 2 && trigInfo_ > 0) LogPrint(MOD) << "      >> Check if we pass Preselection with Sept8 cuts";
     bool passPreSept8 = passPreselection(passedCutsArraySept8, true);
-    
+    bool passPre_massSpectrum = (passPreselection(passedCutsArray_massSpectrum, true) && globalIh_ > dEdxC_) ? true : false;
+   
+    if(plotsPreS_massSpectrumApproach_) passPre=passPre_massSpectrum;
+
+
     // Few more bins in CutFlow for SRs
     unsigned int passedCutsArraySize = sizeof(passedCutsArray);
     if (globalIas_ > 0.25 && probQonTrackNoL1 < 0.1 && passPre) {
@@ -3687,195 +4243,25 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       tuple->PostPreS_ProbQNoL1VsIas_Ias_down->Fill(1 - probQonTrackNoL1, globalIas_,  eventWeight_*0.98);
     }
     
-    // Systematics plots for trigger
     bool passedCutsArrayForTriggerSyst[15];
     std::copy(std::begin(passedCutsArray), std::end(passedCutsArray), std::begin(passedCutsArrayForTriggerSyst));
     passedCutsArrayForTriggerSyst[0] = true;
-    if (debug_ > 2 && trigInfo_ > 0) LogPrint(MOD) << "      >> Check if we pass Preselection for trigger systematics";
-    float distanceAtThisEta = 500.0/sin(track->phi());
-    float speedOfLightInCmPerNs = 29.97;
-    float timing = distanceAtThisEta / (genBeta*speedOfLightInCmPerNs);
-    
-    float genBetaPrimeUp =  -1.f;
-    float genBetaPrimeDown = -1.f;
-    genBetaPrimeUp = distanceAtThisEta / ((timing+1.5)*speedOfLightInCmPerNs);
-    if (((timing-1.5)*speedOfLightInCmPerNs) > 0.0) {
-      genBetaPrimeDown = distanceAtThisEta / ((timing-1.5)*speedOfLightInCmPerNs);
-    }
-    // // dr_min_hltMuon_hscpCand < 0.15 to make it event level? doesnt really work for the denominator
-    if (passPreselection(passedCutsArrayForTriggerSyst, false) && doPostPreSplots_) {
-      if (!HLT_Mu50) {
-        tuple->PostPreS_TriggerMuon50VsBeta->Fill(0., genBeta);
-        tuple->PostPreS_TriggerMuon50VsPt->Fill(0., track->pt());
-        if (fabs(track->eta()) < 0.3) {
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaA->Fill(0., genBeta);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown->Fill(0., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.3 && fabs(track->eta()) < 0.6) {
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaB->Fill(0., genBeta);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown->Fill(0., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.6 && fabs(track->eta()) < 1.0) {
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaC->Fill(0., genBeta);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown->Fill(0., genBetaPrimeDown);
-        }
-        
-      } else if (HLT_Mu50) {
-        tuple->PostPreS_TriggerMuon50VsBeta->Fill(1., genBeta);
-        tuple->PostPreS_TriggerMuon50VsPt->Fill(1., track->pt());
-        if (fabs(track->eta()) < 0.3) {
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaA->Fill(1., genBeta);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown->Fill(1., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.3 && fabs(track->eta()) < 0.6) {
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaB->Fill(1., genBeta);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown->Fill(1., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.6 && fabs(track->eta()) < 1.0) {
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaC->Fill(1., genBeta);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown->Fill(1., genBetaPrimeDown);
-        }
-      }
-      // Repeat the above but with all muon triggers
-      if (!muTrig) {
-        tuple->PostPreS_TriggerMuonAllVsBeta->Fill(0., genBeta);
-        tuple->PostPreS_TriggerMuonAllVsPt->Fill(0., track->pt());
-        if (fabs(track->eta()) < 0.3) {
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaA->Fill(0., genBeta);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaDown->Fill(0., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.3 && fabs(track->eta()) < 0.6) {
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaB->Fill(0., genBeta);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaB_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaB_BetaDown->Fill(0., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.6 && fabs(track->eta()) < 1.0) {
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaC->Fill(0., genBeta);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaC_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaC_BetaDown->Fill(0., genBetaPrimeDown);
-        }
-        
-      } else if (muTrig) {
-        tuple->PostPreS_TriggerMuonAllVsBeta->Fill(1., genBeta);
-        tuple->PostPreS_TriggerMuonAllVsPt->Fill(1., track->pt());
-        if (fabs(track->eta()) < 0.3) {
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaA->Fill(1., genBeta);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaDown->Fill(1., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.3 && fabs(track->eta()) < 0.6) {
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaB->Fill(1., genBeta);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaB_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaB_BetaDown->Fill(1., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.6 && fabs(track->eta()) < 1.0) {
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaC->Fill(1., genBeta);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaC_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->PostPreS_TriggerMuonAllVsBeta_EtaC_BetaDown->Fill(1., genBetaPrimeDown);
-        }
-      }
-      // Now for all MET triggers
-      if (!HLT_PFMET120_PFMHT120_IDTight && !HLT_PFHT500_PFMET100_PFMHT100_IDTight && !HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 && !HLT_MET105_IsoTrk50) {
-        tuple->PostPreS_TriggerMETallVsBeta->Fill(0., genBeta);
-        tuple->PostPreS_TriggerMETallVsMet->Fill(0., RecoPFMET);
-        tuple->PostPreS_TriggerMETallVsHT->Fill(0., pfJetHT);
-        tuple->PostPreS_TriggerMETallVsMetVsHT->Fill(0., RecoPFMET, pfJetHT);
-        tuple->PostPreS_TriggerMETallVsMetOverHt->Fill(0.,RecoPFMET/pfJetHT);
-      } else if (HLT_PFMET120_PFMHT120_IDTight || HLT_PFHT500_PFMET100_PFMHT100_IDTight || HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 || HLT_MET105_IsoTrk50) {
-        tuple->PostPreS_TriggerMETallVsBeta->Fill(1., genBeta);
-        tuple->PostPreS_TriggerMETallVsMet->Fill(1., RecoPFMET);
-        tuple->PostPreS_TriggerMETallVsHT->Fill(1., pfJetHT);
-        tuple->PostPreS_TriggerMETallVsMetVsHT->Fill(1., RecoPFMET, pfJetHT);
-        tuple->PostPreS_TriggerMETallVsMetOverHt->Fill(1., RecoPFMET/pfJetHT);
-      }
-    } // end of passedCutsArrayForTriggerSyst loop
-    // dr_min_hltMuon_hscpCand < 0.15 to make it event level? doesnt really work for the denominator
-    else if (doBefPreSplots_) {
-      if (!HLT_Mu50) {
-        tuple->BefPreS_TriggerMuon50VsBeta->Fill(0., genBeta);
-        tuple->BefPreS_TriggerMuon50VsPt->Fill(0., track->pt());
-        if (fabs(track->eta()) < 0.3) {
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaA->Fill(0., genBeta);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaA_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaA_BetaDown->Fill(0., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.3 && fabs(track->eta()) < 0.6) {
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaB->Fill(0., genBeta);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaB_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaB_BetaDown->Fill(0., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.6 && fabs(track->eta()) < 1.0) {
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaC->Fill(0., genBeta);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaDown->Fill(0., genBetaPrimeDown);
-        }
-      } else if (HLT_Mu50) {
-        tuple->BefPreS_TriggerMuon50VsBeta->Fill(1., genBeta);
-        tuple->BefPreS_TriggerMuon50VsPt->Fill(1., track->pt());
-        if (fabs(track->eta()) < 0.3) {
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaA->Fill(1., genBeta);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaA_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaA_BetaDown->Fill(1., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.3 && fabs(track->eta()) < 0.6) {
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaB->Fill(1., genBeta);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaB_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaB_BetaDown->Fill(1., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.6 && fabs(track->eta()) < 1.0) {
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaC->Fill(1., genBeta);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaDown->Fill(1., genBetaPrimeDown);
-        }
-      }
-      // Repeat the same with all muon trigs recom by POG
-      if (!muTrig) {
-        tuple->BefPreS_TriggerMuonAllVsBeta->Fill(0., genBeta);
-        tuple->BefPreS_TriggerMuonAllVsPt->Fill(0., track->pt());
-        if (fabs(track->eta()) < 0.3) {
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaA->Fill(0., genBeta);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaA_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaA_BetaDown->Fill(0., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.3 && fabs(track->eta()) < 0.6) {
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaB->Fill(0., genBeta);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaB_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaB_BetaDown->Fill(0., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.6 && fabs(track->eta()) < 1.0) {
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaC->Fill(0., genBeta);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaC_BetaUp->Fill(0., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaC_BetaDown->Fill(0., genBetaPrimeDown);
-        }
-      } else if (muTrig) {
-        tuple->BefPreS_TriggerMuonAllVsBeta->Fill(1., genBeta);
-        tuple->BefPreS_TriggerMuonAllVsPt->Fill(1., track->pt());
-        if (fabs(track->eta()) < 0.3) {
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaA->Fill(1., genBeta);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaA_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaA_BetaDown->Fill(1., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.3 && fabs(track->eta()) < 0.6) {
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaB->Fill(1., genBeta);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaB_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaB_BetaDown->Fill(1., genBetaPrimeDown);
-        } else  if (fabs(track->eta()) > 0.6 && fabs(track->eta()) < 1.0) {
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaC->Fill(1., genBeta);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaC_BetaUp->Fill(1., genBetaPrimeUp);
-          tuple->BefPreS_TriggerMuonAllVsBeta_EtaC_BetaDown->Fill(1., genBetaPrimeDown);
-        }
-      }
-      // Now for all MET triggers
-      if (!HLT_PFMET120_PFMHT120_IDTight && !HLT_PFHT500_PFMET100_PFMHT100_IDTight && !HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 && !HLT_MET105_IsoTrk50) {
-        tuple->BefPreS_TriggerMETallVsBeta->Fill(0., genBeta);
-        tuple->BefPreS_TriggerMETallVsMet->Fill(0., RecoPFMET);
-        tuple->BefPreS_TriggerMETallVsHT->Fill(0., pfJetHT);
-        tuple->BefPreS_TriggerMETallVsMetVsHT->Fill(0., RecoPFMET, pfJetHT);
-        tuple->BefPreS_TriggerMETallVsMetOverHt->Fill(0.,RecoPFMET/pfJetHT);
-      } else if (HLT_PFMET120_PFMHT120_IDTight || HLT_PFHT500_PFMET100_PFMHT100_IDTight || HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 || HLT_MET105_IsoTrk50) {
-        tuple->BefPreS_TriggerMETallVsBeta->Fill(1., genBeta);
-        tuple->BefPreS_TriggerMETallVsMet->Fill(1., RecoPFMET);
-        tuple->BefPreS_TriggerMETallVsHT->Fill(1., pfJetHT);
-        tuple->BefPreS_TriggerMETallVsMetVsHT->Fill(1., RecoPFMET, pfJetHT);
-        tuple->BefPreS_TriggerMETallVsMetOverHt->Fill(1., RecoPFMET/pfJetHT);
-      }
-    }
-    
-    
+    passedCutsArrayForTriggerSyst[2] = true;
+
+    float dRclosestTrigAndCandidate = (closestTrigObjIndex > -1) ? deltaR(trigObjP4s[closestTrigObjIndex].Eta(), trigObjP4s[closestTrigObjIndex].Phi(), track->eta(), track->phi()) : 9999;
+    HSCP_dRclosestTrigAndCandidate.push_back(dRclosestTrigAndCandidate);
+
+    bool passSelTrigSys = passPreselection(passedCutsArrayForTriggerSyst, false);
+    HSCP_passPreselectionTrigSys.push_back(passSelTrigSys); 
+
+    if (passPreselection(passedCutsArrayForTriggerSyst, false)) {
+      if (HLT_Mu50 && dRclosestTrigAndCandidate < 0.15 ) trigObjPassedPres = true;
+      if (!HLT_Mu50 ) trigObjPassedPres = true;
+    } // if preselection w/o trigger requirement is passed
+  
     //fill the ABCD histograms and a few other control plots
     if (passPre) {
+ 
       if (trigInfo_ < 1) {
         throw cms::Exception(MOD) << "we are pass preS but the trigger is not passed -- this is wrong!!!" << endl << endl << endl << endl ;
       }
@@ -3981,6 +4367,57 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         tuple->PostPreS_ProbQNoL1->Fill(1 - probQonTrackNoL1, eventWeight_);
         tuple->PostPreS_ProbQNoL1VsIas->Fill(1 - probQonTrackNoL1, globalIas_, eventWeight_);
         tuple->PostPreS_ProbQNoL1VsFiStrips->Fill(1 - probQonTrackNoL1, globalFiStrips_, eventWeight_);
+
+        if (55 < track->pt() && track->pt() < 70) {
+         tuple->PostPreS_Ias_CR2->Fill(globalIas_, eventWeight_);
+         tuple->PostPreS_Pt_CR2->Fill(track->pt(), eventWeight_);
+         tuple->PostPreS_ProbQNoL1_CR2->Fill(1 - probQonTrackNoL1, eventWeight_);
+         tuple->PostPreS_ProbQNoL1VsIas_CR2->Fill(1 - probQonTrackNoL1, globalIas_, eventWeight_);
+         tuple->PostPreS_Ih_CR2->Fill(globalIh_,eventWeight_);
+         tuple->PostPreS_Ih_noL1_CR2->Fill((dedxIh_noL1 ? dedxIh_noL1->dEdx() : -1) ,eventWeight_);
+        }
+        else if (track->pt() <70 && track->pt()<200) {
+         tuple->PostPreS_Ias_CR3->Fill(globalIas_, eventWeight_);
+         tuple->PostPreS_Pt_CR3->Fill(track->pt(), eventWeight_);
+         tuple->PostPreS_ProbQNoL1_CR3->Fill(1 - probQonTrackNoL1, eventWeight_);
+         tuple->PostPreS_ProbQNoL1VsIas_CR3->Fill(1 - probQonTrackNoL1, globalIas_, eventWeight_);
+         tuple->PostPreS_Ih_CR3->Fill(globalIh_,eventWeight_);
+         tuple->PostPreS_Ih_noL1_CR3->Fill((dedxIh_noL1 ? dedxIh_noL1->dEdx() : -1) ,eventWeight_);
+        }
+
+
+        // test --> Need to blind the data at the drawing
+        // for the moment K and C are hard-coded...
+        float Masstest =0;
+        // K and C values fixed to some test values
+        // if (dedxIh_StripOnly->dEdx() > 3.18) Masstest= GetMass(track->p(), dedxIh_StripOnly->dEdx(), 2.52, 3.18);
+        if (globalIh_ > dEdxC_) Masstest= GetMass(track->p(), globalIh_, dEdxK_, dEdxC_);
+        if ((1 - probQonTrackNoL1)<0.9) {
+           tuple->PostPreS_MassVsIas_fail->Fill(globalIas_, Masstest, eventWeight_);
+           if (55 < track->pt() && track->pt() < 70) {
+             tuple->PostPreS_MassVsIas_fail_CR2->Fill(globalIas_, Masstest, eventWeight_);
+           }
+           else if (track->pt() <70 && track->pt()<200) {
+             tuple->PostPreS_MassVsIas_fail_CR3->Fill(globalIas_, Masstest, eventWeight_);
+           }
+           else if (track->pt()>200) {
+             tuple->PostPreS_MassVsIas_fail_SR2->Fill(globalIas_, Masstest, eventWeight_);
+           }
+        }
+        else {
+            tuple->PostPreS_MassVsIas_pass->Fill(globalIas_, Masstest,  eventWeight_);
+           if (55 < track->pt() && track->pt() < 70) {
+             tuple->PostPreS_MassVsIas_pass_CR2->Fill(globalIas_, Masstest, eventWeight_);
+           }
+           else if (track->pt() <70 && track->pt()<200) {
+             tuple->PostPreS_MassVsIas_pass_CR3->Fill(globalIas_, Masstest, eventWeight_);
+           }
+           else if (track->pt()>200) {
+             tuple->PostPreS_MassVsIas_pass_SR2->Fill(globalIas_, Masstest, eventWeight_);
+           }
+        }
+
+
         if (doSystsPlots_) {
           tuple->PostPreS_ProbQNoL1VsIas_Pileup_up->Fill(1 - probQonTrackNoL1, globalIas_,  eventWeight_ * PUSystFactor_[0]);
           tuple->PostPreS_ProbQNoL1VsIas_Pileup_down->Fill(1 - probQonTrackNoL1, globalIas_,  eventWeight_ * PUSystFactor_[1]);
@@ -4040,7 +4477,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         tuple->PostPreS_PtErrOverPtVsPtErrOverPt2->Fill(track->ptError() / track->pt(),track->ptError() / (track->pt()*track->pt()), eventWeight_);
         tuple->PostPreS_PtErrOverPtVsPt->Fill(track->ptError() / track->pt(), track->pt(), eventWeight_);
         tuple->PostPreS_TIsol->Fill(IsoTK_SumEt, eventWeight_);
-        tuple->PostPreS_TIsolVsIas->Fill(IsoTK_SumEt, globalIas_,eventWeight_);
+        tuple->PostPreS_TIsolVsIas->Fill(IsoTK_SumEt, globalIas_, eventWeight_);
         tuple->PostPreS_Ih->Fill(globalIh_, eventWeight_);
         tuple->PostPreS_IhVsIas->Fill(globalIh_, globalIas_, eventWeight_);
         tuple->PostPreS_Ih_NoEventWeight->Fill(globalIh_);
@@ -4201,12 +4638,14 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         tuple->PostPreS_RecoPfHT->Fill(pfJetHT, eventWeight_);
         if (genBeta >= 0) {
           tuple->PostPreS_GenBeta->Fill(genBeta, eventWeight_);
+          if (triggerObjGenIndex > -1) tuple->PostPreS_TriggerGenBeta->Fill(genColl[triggerObjGenIndex].p()/ genColl[triggerObjGenIndex].energy());
         }
         
         // stability plots
-        tuple->Stab_Ih_NoL1_VsRun->Fill(currentRun_, globalIh_ , eventWeight_);
+        tuple->Stab_Ih_NoL1_VsRun->Fill(currentRun_, (dedxIh_noL1 ? dedxIh_noL1->dEdx() : -1)  , eventWeight_);
         tuple->Stab_Ih_pixNoL1_VsRun->Fill(currentRun_, (dedxIh_PixelOnlyh_noL1 ? dedxIh_PixelOnlyh_noL1->dEdx() : -1) , eventWeight_);
-        tuple->Stab_Ih_strip_VsRun->Fill(currentRun_, (dedxIh_StripOnly ? dedxIh_StripOnly->dEdx() : -1) , eventWeight_);
+//        tuple->Stab_Ih_strip_VsRun->Fill(currentRun_, (dedxIh_StripOnly ? dedxIh_StripOnly->dEdx() : -1) , eventWeight_);
+        tuple->Stab_Ih_strip_VsRun->Fill(currentRun_, globalIh_ , eventWeight_);
         tuple->Stab_Gi_strip_VsRun->Fill(currentRun_, globalIas_ , eventWeight_);
         tuple->Stab_Gi_NoL1_VsRun->Fill(currentRun_, (dedxIas_noL1 ? dedxIas_noL1->dEdx() : -1), eventWeight_);
         tuple->Stab_Fi_pixNoL1_VsRun->Fill(currentRun_, 1 - probQonTrackNoL1, eventWeight_);
@@ -4225,8 +4664,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         tuple->PostPreS_FracSat->Fill(fracsat_highp, eventWeight_);
       }
       
-      if ((((globalIas_ > 0.25 || Mass > 1000) && !isSignal) || (debug_ > 7))  && trigInfo_ > 0) {
-        if (globalIas_ > 0.25)    { LogPrint(MOD) << "\n        >> After passing preselection, the globalIas_ > 0.25";}
+      if ((((globalIas_ > 0.22 || Mass > 1000) && !isSignal) || (debug_ > 7))  && trigInfo_ > 0) {
+        if (globalIas_ > 0.22)    { LogPrint(MOD) << "\n        >> After passing preselection, the globalIas_ > 0.25";}
         if (Mass > 1000) { LogPrint(MOD) << "\n        >> After passing preselection, the Mass > 1000";}
         LogPrint(MOD) << "        >> LS: " << iEvent.luminosityBlock() << " Event number: " << iEvent.id().event();
         LogPrint(MOD) << "        >> -----------------------------------------------";
@@ -4275,11 +4714,12 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         bestCandidateFiStrips = globalFiStrips_;
         bestCandidateFiStripsLog = -log(1-globalFiStrips_);
         bestCandidateProbQNoL1 = probQonTrackNoL1;
+        bestCandidateTIsol = IsoTK_SumEt;
         bestCandidateDrMinHltMuon = dr_min_hltMuon_hscpCand;
         bestCandidateGenBeta = genBeta;
         bestCandidateGenIndex = closestGenIndex;
       }
-    }
+    } // passPre
     
     // Let's do some printouts after preselections for gen particles
     if (passPre && trigInfo_ > 0 && closestGenIndex > 0) {
@@ -4385,7 +4825,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                   float siblingPhi = genCandidateUnderStudy.mother(numMomIndx)->daughter(daughterIndx)->phi();
                   float siblingPt  = genCandidateUnderStudy.mother(numMomIndx)->daughter(daughterIndx)->pt();
                   float siblingDr = deltaR(genEta, genPhi, siblingEta, siblingPhi);
-                  if (globalIas_ > 0.25) std::cout << " (dR = " << siblingDr << ", pt = " << siblingPt <<  ") , ";
+                  if (globalIas_ > 0.25 && debug_ > 4) std::cout << " (dR = " << siblingDr << ", pt = " << siblingPt <<  ") , ";
                 }
                 if (globalIas_ > 0.25) std::cout << std::endl;
                 unsigned int numAunts = genCandidateUnderStudy.mother(numMomIndx)->mother(numGramMomIndx)->numberOfDaughters() -1;
@@ -4558,7 +4998,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
           auto clustSize = pixelCluster->size();
           auto clustSizeX = pixelCluster->sizeX();
           auto clustSizeY = pixelCluster->sizeY();
-          auto pixelNormCharge = cm2umUnit * dedxHits->charge(i) / dedxHits->pathlength(i);
+          auto pixelNormCharge = um2cmUnit * dedxHits->charge(i) / dedxHits->pathlength(i);
           auto pixelNormChargeAfterSF = pixelNormCharge *  dEdxSF[1] *  GetSFPixel(detid.subdetId(), detid, year, currentRun_);
           
           float tmp1 = geomDet.surface().toGlobal(Local3DPoint(0.,0.,0.)).perp();
@@ -4642,7 +5082,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
           unsigned int clusterCleaned = (clusterCleaning(amplitudesPrim, 1)) ? 0 : 1;
           
           
-          float stripNormCharge = cm2umUnit * dedxHits->charge(i) * 265 / dedxHits->pathlength(i);
+          float stripNormCharge = um2cmUnit * dedxHits->charge(i) * 265 / dedxHits->pathlength(i);
           float stripSize = stripsCluster->amplitudes().size();
           
           unsigned int stripLayerIndex = 0;
@@ -4739,9 +5179,109 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       MassDownComb = GetMassFromBeta(track->p(), (1 / tof->inverseBeta()));
     
     bool PassNonTrivialSelection = false;
+
+  // -------- NOMENCLATURE 
+  //SigmaPt1 : no SigmaPt cut
+  //SigmaPt2 : SigmaPtOverPt2 cut
+  //SigmaPt3 : SigmaPtOverPt2 cut + SigmaPtOverPt2 > 0 + SigmaPtOverPt < 1.0
+  //SigmaPt4 : SigmaPtOverPt2 cut + SigmaPtOverPt2 > 0 + SigmaPtOverPt < 2.0
+  //SigmaPt5 : SigmaPtOverPt2 cut + SigmaPtOverPt2 > 0 
+  //iso0 : FixedConeGeneralIso < 50 GeV
+  //iso1 : miniGeneralIso < 15 GeV + miniRelIso cut 
+  //iso2 : FixedConeGeneralIso < 15 GeV + miniRelIso cut 
+  //IhCut1 : no Ih cut
+  //IhCut2 : Ih > C
+  //IhCut3 : Ih > 3.47 (C ultra-relativistic) 
+  //PtCut1 : no pT cut max
+  //PtCut2 : pT < 2500 GeV
+  //PtCut3 : pT < 3000 GeV
+  //PtCut4 : pT < 4000 GeV
+  
     
-    if (passPre) {
-        tuple_maker->fillRegions(tuple,
+    bool passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1[15];
+    bool passedCutsArray_SigmaPt2_iso1_IhCut1_PtCut1[15];
+    bool passedCutsArray_SigmaPt3_iso1_IhCut1_PtCut1[15];
+    bool passedCutsArray_SigmaPt4_iso1_IhCut1_PtCut1[15];
+    bool passedCutsArray_SigmaPt5_iso1_IhCut1_PtCut1[15];
+    bool passedCutsArray_SigmaPt3_iso0_IhCut1_PtCut1[15];
+    bool passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1[15];
+    bool passedCutsArray_SigmaPt3_iso2_IhCut2_PtCut1[15];
+    bool passedCutsArray_SigmaPt3_iso2_IhCut3_PtCut1[15];
+    bool passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut2[15];
+    bool passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut3[15];
+    bool passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut4[15];
+
+    
+    std::copy(std::begin(passedCutsArray), std::end(passedCutsArray), std::begin(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1));
+    passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1[13] = true;
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt2_iso1_IhCut1_PtCut1));
+    passedCutsArray_SigmaPt2_iso1_IhCut1_PtCut1[13] = passedCutsArray[13];
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt3_iso1_IhCut1_PtCut1));
+    passedCutsArray_SigmaPt3_iso1_IhCut1_PtCut1[13] = (typeMode_ != 3 && (track->ptError() / (track->pt()*track->pt()) < 0.0008) && (track->ptError() / (track->pt()*track->pt()) > 0.0) && (track->ptError() / (track->pt()) < 1.0)) ? true : false;
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt4_iso1_IhCut1_PtCut1));
+    passedCutsArray_SigmaPt4_iso1_IhCut1_PtCut1[13] = (typeMode_ != 3 && (track->ptError() / (track->pt()*track->pt()) < 0.0008) && (track->ptError() / (track->pt()*track->pt()) > 0.0) && (track->ptError() / (track->pt()) < 2.0)) ? true : false;
+
+    std::copy(std::begin(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt5_iso1_IhCut1_PtCut1));
+    passedCutsArray_SigmaPt5_iso1_IhCut1_PtCut1[13] = (typeMode_ != 3 && (track->ptError() / (track->pt()*track->pt()) < 0.0008) && (track->ptError() / (track->pt()*track->pt()) > 0.0)) ? true : false;
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt3_iso1_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt3_iso1_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt3_iso0_IhCut1_PtCut1));
+    passedCutsArray_SigmaPt3_iso0_IhCut1_PtCut1[10] = true;
+    passedCutsArray_SigmaPt3_iso0_IhCut1_PtCut1[11] = ( track_genTrackIsoSumPt_dr03 < 50 ) ? true : false;
+
+    std::copy(std::begin(passedCutsArray_SigmaPt3_iso1_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt3_iso1_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1));
+    passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1[11] = ( track_genTrackIsoSumPt_dr03 < 15) ? true : false;
+
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt3_iso2_IhCut2_PtCut1));
+    passedCutsArray_SigmaPt3_iso2_IhCut2_PtCut1[14] = (probQonTrackNoL1 < globalMaxTrackProbQCut_ && probQonTrackNoL1 > globalMinTrackProbQCut_ && globalIh_ > dEdxC_) ? true : false; 
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt3_iso2_IhCut3_PtCut1));
+    passedCutsArray_SigmaPt3_iso2_IhCut3_PtCut1[14] = (probQonTrackNoL1 < globalMaxTrackProbQCut_ && probQonTrackNoL1 > globalMinTrackProbQCut_ && globalIh_ > 3.47) ? true : false; 
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut2));
+    passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut2[1] = ((track->pt() > globalMinPt_) && (track->pt() < 2500))? true : false;
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut3));
+    passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut3[1] = ((track->pt() > globalMinPt_) && (track->pt() < 3000))? true : false;
+    
+    std::copy(std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::end(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1), std::begin(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut4));
+    passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut4[1] = ((track->pt() > globalMinPt_) && (track->pt() < 4000))? true : false;
+
+    bool passPre_SigmaPt1_iso1_IhCut1_PtCut1 = passPreselection(passedCutsArray_SigmaPt1_iso1_IhCut1_PtCut1, false);
+    //bool passPre_SigmaPt2_iso1_IhCut1_PtCut1 = passPreselection(passedCutsArray_SigmaPt2_iso1_IhCut1_PtCut1, false);
+    bool passPre_SigmaPt3_iso1_IhCut1_PtCut1 = passPreselection(passedCutsArray_SigmaPt3_iso1_IhCut1_PtCut1, false);
+    //bool passPre_SigmaPt4_iso1_IhCut1_PtCut1 = passPreselection(passedCutsArray_SigmaPt4_iso1_IhCut1_PtCut1, false);
+    bool passPre_SigmaPt5_iso1_IhCut1_PtCut1 = passPreselection(passedCutsArray_SigmaPt5_iso1_IhCut1_PtCut1, false);
+    bool passPre_SigmaPt3_iso0_IhCut1_PtCut1 = passPreselection(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1, false);
+    bool passPre_SigmaPt3_iso2_IhCut1_PtCut1 = passPreselection(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut1, false);
+    //bool passPre_SigmaPt3_iso2_IhCut2_PtCut1 = passPreselection(passedCutsArray_SigmaPt3_iso2_IhCut2_PtCut1, false);
+    //bool passPre_SigmaPt3_iso2_IhCut3_PtCut1 = passPreselection(passedCutsArray_SigmaPt3_iso2_IhCut3_PtCut1, false);
+    //bool passPre_SigmaPt3_iso2_IhCut1_PtCut2 = passPreselection(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut2, false);
+    //bool passPre_SigmaPt3_iso2_IhCut1_PtCut3 = passPreselection(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut3, false);
+    bool passPre_SigmaPt3_iso2_IhCut1_PtCut4 = passPreselection(passedCutsArray_SigmaPt3_iso2_IhCut1_PtCut4, false);
+
+    /*
+    //passPre_SigmaPt1_iso1_IhCut1_PtCut1 = false;
+    passPre_SigmaPt2_iso1_IhCut1_PtCut1 = false;
+    //passPre_SigmaPt3_iso1_IhCut1_PtCut1 = false;
+    passPre_SigmaPt4_iso1_IhCut1_PtCut1 = false;
+    //passPre_SigmaPt5_iso1_IhCut1_PtCut1 = false;
+    
+    //passPre_SigmaPt3_iso0_IhCut1_PtCut1 = false;
+    //passPre_SigmaPt3_iso2_IhCut1_PtCut1 = false;
+    passPre_SigmaPt3_iso2_IhCut2_PtCut1 = false;
+    passPre_SigmaPt3_iso2_IhCut3_PtCut1 = false;
+    passPre_SigmaPt3_iso2_IhCut1_PtCut2 = false;
+    passPre_SigmaPt3_iso2_IhCut1_PtCut3 = false;
+    //passPre_SigmaPt3_iso2_IhCut1_PtCut4 = false;
+    */
+
+ 
+    if(passPre_SigmaPt1_iso1_IhCut1_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt1_iso1_IhCut1_PtCut1,
                                  pT_cut,
                                  Ias_quantiles,
                                  track->eta(),
@@ -4750,10 +5290,207 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                                  track->ptError(),
                                  dedxMObj ? dedxMObj->dEdx() : -1,
                                  dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
                                  Mass,
                                  tof ? tof->inverseBeta() : -99,
                                  eventWeight_);
+    }
+    /*if(passPre_SigmaPt2_iso1_IhCut1_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt2_iso1_IhCut1_PtCut1,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_,
+                                 false);
+    }*/
+    if(passPre_SigmaPt3_iso1_IhCut1_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt3_iso1_IhCut1_PtCut1,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_
+                                 );
+    }
+    /*if(passPre_SigmaPt4_iso1_IhCut1_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt4_iso1_IhCut1_PtCut1,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_,
+                                 false);
+    }*/
+    if(passPre_SigmaPt5_iso1_IhCut1_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt5_iso1_IhCut1_PtCut1,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_
+                                 );
+    }
+    if(passPre_SigmaPt3_iso0_IhCut1_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt3_iso0_IhCut1_PtCut1,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_
+                                 );
+    }
+    if(passPre_SigmaPt3_iso2_IhCut1_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt3_iso2_IhCut1_PtCut1,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_
+                                 );
+    }
+    /*if(passPre_SigmaPt3_iso2_IhCut2_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt3_iso2_IhCut2_PtCut1,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_,
+                                 false);
+    }*/
+    /*if(passPre_SigmaPt3_iso2_IhCut3_PtCut1){
+        tuple_maker->fillRegions(tuple_SigmaPt3_iso2_IhCut3_PtCut1,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_,
+                                 false);
+    }*/
+    /*if(passPre_SigmaPt3_iso2_IhCut1_PtCut2){
+        tuple_maker->fillRegions(tuple_SigmaPt3_iso2_IhCut1_PtCut2,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_,
+                                 false);
+    }
+    if(passPre_SigmaPt3_iso2_IhCut1_PtCut3){
+        tuple_maker->fillRegions(tuple_SigmaPt3_iso2_IhCut1_PtCut3,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_,
+                                 false);
+    }*/
+    if(passPre_SigmaPt3_iso2_IhCut1_PtCut4){
+        tuple_maker->fillRegions(tuple_SigmaPt3_iso2_IhCut1_PtCut4,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_
+                                 );
+    }
+    
+    if (passPre_massSpectrum) {
+        tuple_maker->fillRegions(tuple,
+                                 pT_cut,
+                                 Ias_quantiles,
+                                 track->eta(),
+                                 10000./track->p(),
+                                 track->pt(),
+                                 track->ptError(),
+                                 dedxMObj ? dedxMObj->dEdx() : -1,
+                                 dedxSObj ? dedxSObj->dEdx() : -1,
+                                 probQonTrackNoL1,
+                                 Mass,
+                                 tof ? tof->inverseBeta() : -99,
+                                 eventWeight_,
+                                 true);
+    }
 
+    
+    if (passPre) {
       if (debug_ > 3  && trigInfo_ > 0) LogPrint(MOD) << "      >> We enter the selection cut loop now";
       //==========================================================
       // Cut loop: over all possible selection (one of them, the optimal one, will be used later)
@@ -4861,7 +5598,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     HSCP_Ias_PixelOnly.push_back(dedxIas_PixelOnly ? dedxIas_PixelOnly->dEdx() : -1);
     HSCP_Ias_StripOnly.push_back(dedxIas_StripOnly ? dedxIas_StripOnly->dEdx() : -1);
     HSCP_Ias_PixelOnly_noL1.push_back(dedxIas_PixelOnly_noL1 ? dedxIas_PixelOnly_noL1->dEdx() : -1);
-    HSCP_Ih.push_back(dedxMObj_FullTracker ? dedxMObj_FullTracker->dEdx() : -1);
+//    HSCP_Ih.push_back(dedxMObj_FullTracker ? dedxMObj_FullTracker->dEdx() : -1);
+    HSCP_Ih.push_back(globalIh_);
     HSCP_Ick.push_back(dedxMObj ? Ick2 : -99);
     HSCP_Fmip.push_back(Fmip);
     HSCP_ProbXY.push_back(probXYonTrack);
@@ -4876,6 +5614,10 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     HSCP_isMuon.push_back(pf_isMuon);
     HSCP_isPhoton.push_back(pf_isPhoton);
     HSCP_isElectron.push_back(pf_isElectron);
+    HSCP_gsfFbremElectron.push_back(EleFbremLost);
+    HSCP_gsfMomentumElectron.push_back(EleGsfMomentum);
+    HSCP_PFMomentumElectron.push_back(ElePFMomentum);
+
     HSCP_isChHadron.push_back(pf_isChHadron);
     HSCP_isNeutHadron.push_back(pf_isNeutHadron);
     HSCP_isPfTrack.push_back(pf_isPfTrack);
@@ -4912,6 +5654,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     HSCP_iso_ECAL.push_back(iso_ECAL);
     HSCP_iso_HCAL.push_back(iso_HCAL);
     HSCP_track_genTrackMiniIsoSumPt.push_back(track_genTrackMiniIsoSumPt);
+    HSCP_track_genTrackAbsIsoSumPtFix.push_back(track_genTrackMiniIsoSumPtFix);
+    HSCP_track_genTrackIsoSumPt_dr03.push_back(track_genTrackIsoSumPt_dr03);
     HSCP_PFMiniIso_relative.push_back(miniRelIsoAll);
     HSCP_PFMiniIso_wMuon_relative.push_back(miniRelIsoAll_wMuon);
     HSCP_track_PFIsolationR005_sumChargedHadronPt.push_back(track_PFIso005_sumCharHadPt);
@@ -4969,6 +5713,355 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     tuple->EventCutFlow->Fill(1.0);
   }
   
+  // Systematics plots for trigger at event level
+  // Calc trigo once to ease computation
+  float sinTrigObjTheta = sin(trigObjTheta);
+  float cosTrigObjTheta = cos(trigObjTheta);
+  
+  float distanceAtThisEta = (trigObjTheta < 9999) ? fabs(500.0/sinTrigObjTheta) : 0;
+  float distanceAtThisEtaAtL1DT = (trigObjTheta < 9999) ? fabs(400.0/sinTrigObjTheta) : 0;
+  float distanceAtThisEtaAtL4DT = (trigObjTheta < 9999) ? fabs(750.0/sinTrigObjTheta) : 0;
+  if (fabs(trigObjEta) > 0.9) {
+    distanceAtThisEta = std::min(fabs(500.0/sinTrigObjTheta), fabs(820.0/cosTrigObjTheta));
+    distanceAtThisEtaAtL1DT = std::min(fabs(400.0/sinTrigObjTheta), fabs(700.0/cosTrigObjTheta));
+    distanceAtThisEtaAtL4DT = std::min(fabs(750.0/sinTrigObjTheta), fabs(1040.0/cosTrigObjTheta));
+  }
+  float speedOfLightInCmPerNs = 29.97;
+  float timing = distanceAtThisEta / (trigObjBeta*speedOfLightInCmPerNs);
+  float timingAtL1DT = distanceAtThisEtaAtL1DT / (trigObjBeta*speedOfLightInCmPerNs);
+  float timingAtL4DT = distanceAtThisEtaAtL4DT / (trigObjBeta*speedOfLightInCmPerNs);
+  
+  float genBetaPrimeUp =  -1.f;
+  float genBetaPrimeUpAtL1DT =  -1.f;
+  float genBetaPrimeUpAtL4DT =  -1.f;
+  float genBetaPrimeUpHalfSigma =  -1.f;
+  float genBetaPrimeUpTwoSigma =  -1.f;
+  float genBetaPrimeDown = -1.f;
+  float genBetaPrimeDownAtL1DT = -1.f;
+  float genBetaPrimeDownAtL4DT = -1.f;
+  float genBetaPrimeDownHalfSigma = -1.f;
+  float genBetaPrimeDownTwoSigma = -1.f;
+  if (timing > 0) {
+    genBetaPrimeUp = std::min(1.,distanceAtThisEta / ((timing+1.5)*speedOfLightInCmPerNs));
+    genBetaPrimeUpAtL1DT = std::min(1.,distanceAtThisEtaAtL1DT / ((timing+1.5)*speedOfLightInCmPerNs));
+    genBetaPrimeUpAtL4DT = std::min(1.,distanceAtThisEtaAtL4DT / ((timing+1.5)*speedOfLightInCmPerNs));
+    genBetaPrimeUpHalfSigma = std::min(1.,distanceAtThisEta / ((timing+0.75)*speedOfLightInCmPerNs));
+    genBetaPrimeUpTwoSigma = std::min(1.,distanceAtThisEta / ((timing+3.0)*speedOfLightInCmPerNs));
+    if (((timing-1.5)*speedOfLightInCmPerNs) > 0.0) {
+      genBetaPrimeDown = distanceAtThisEta / ((timing-1.5)*speedOfLightInCmPerNs);
+      genBetaPrimeDownAtL1DT = distanceAtThisEtaAtL1DT / ((timing-1.5)*speedOfLightInCmPerNs);
+      genBetaPrimeDownAtL4DT = distanceAtThisEtaAtL4DT / ((timing-1.5)*speedOfLightInCmPerNs);
+      genBetaPrimeDownHalfSigma = distanceAtThisEta / ((timing-0.75)*speedOfLightInCmPerNs);
+      genBetaPrimeDownTwoSigma = distanceAtThisEta / ((timing-3.0)*speedOfLightInCmPerNs);
+    }
+  }
+  if (timingAtL1DT > 0) {
+    genBetaPrimeUpAtL1DT = std::min(1.,distanceAtThisEtaAtL1DT / ((timingAtL1DT+1.5)*speedOfLightInCmPerNs));
+    if (((timingAtL1DT-1.5)*speedOfLightInCmPerNs) > 0.0) {
+      genBetaPrimeDownAtL1DT = distanceAtThisEtaAtL1DT / ((timingAtL1DT-1.5)*speedOfLightInCmPerNs);
+    }
+  }
+  if (timingAtL4DT > 0) {
+    genBetaPrimeUpAtL4DT = std::min(1.,distanceAtThisEtaAtL4DT / ((timingAtL4DT+1.5)*speedOfLightInCmPerNs));
+    if (((timingAtL4DT-1.5)*speedOfLightInCmPerNs) > 0.0) {
+      genBetaPrimeDownAtL4DT = distanceAtThisEtaAtL4DT / ((timingAtL4DT-1.5)*speedOfLightInCmPerNs);
+    }
+  }
+    // // dr_min_hltMuon_hscpCand < 0.15 to make it event level? doesnt really work for the denominator
+  // trigObjPassedPres let's in any trigger decision + any eta since here we are studying the trigger
+  if (trigObjPassedPres && doPostPreSplots_) {
+    if (!HLT_Mu50) {
+      tuple->PostPreS_TriggerTimingReject->Fill(timing);
+      tuple->PostPreS_TriggerEtaReject->Fill(fabs(trigObjEta));
+      tuple->PostPreS_TriggerMuon50VsBeta->Fill(0., trigObjBeta);
+      tuple->PostPreS_TriggerMuon50VsPt->Fill(0., trigObjPt);
+      if (fabs(trigObjEta) < 0.3) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown->Fill(0., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL1DT->Fill(0., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL1DT->Fill(0., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL4DT->Fill(0., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL4DT->Fill(0., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 0.3 && fabs(trigObjEta) < 0.6) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown->Fill(0., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL1DT->Fill(0., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL1DT->Fill(0., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL4DT->Fill(0., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL4DT->Fill(0., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 0.6 && fabs(trigObjEta) < 0.9) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown->Fill(0., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL1DT->Fill(0., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL1DT->Fill(0., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL4DT->Fill(0., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL4DT->Fill(0., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 0.9 && fabs(trigObjEta) < 1.2) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDown->Fill(0., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL1DT->Fill(0., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL1DT->Fill(0., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL4DT->Fill(0., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL4DT->Fill(0., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 1.2 && fabs(trigObjEta) < 2.1) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDown->Fill(0., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL1DT->Fill(0., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL1DT->Fill(0., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL4DT->Fill(0., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL4DT->Fill(0., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 2.1 && fabs(trigObjEta) < 2.4) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDown->Fill(0., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL1DT->Fill(0., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL1DT->Fill(0., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL4DT->Fill(0., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL4DT->Fill(0., genBetaPrimeDownAtL4DT);
+      }
+      if (fabs(trigObjEta) < 1.0) {
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_Beta->Fill(0., trigObjBeta);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownHalfSigma->Fill(0., genBetaPrimeDownHalfSigma);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownOneSigma->Fill(0., genBetaPrimeDown);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownTwoSigma->Fill(0., genBetaPrimeDownTwoSigma);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpHalfSigma->Fill(0., genBetaPrimeUpHalfSigma);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpOneSigma->Fill(0., genBetaPrimeUp);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpTwoSigma->Fill(0., genBetaPrimeUpTwoSigma);
+      }
+    } else if (HLT_Mu50) {
+      tuple->PostPreS_TriggerTimingPass->Fill(timing);
+      tuple->PostPreS_TriggerEtaPass->Fill(fabs(trigObjEta));
+      tuple->PostPreS_TriggerMuon50VsBeta->Fill(1., trigObjBeta);
+      tuple->PostPreS_TriggerMuon50VsPt->Fill(1., trigObjPt);
+      if (fabs(trigObjEta) < 0.3) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown->Fill(1., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL1DT->Fill(1., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL1DT->Fill(1., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL4DT->Fill(1., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL4DT->Fill(1., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 0.3 && fabs(trigObjEta) < 0.6) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown->Fill(1., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL1DT->Fill(1., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL1DT->Fill(1., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL4DT->Fill(1., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL4DT->Fill(1., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 0.6 && fabs(trigObjEta) < 0.9) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown->Fill(1., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL1DT->Fill(1., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL1DT->Fill(1., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL4DT->Fill(1., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL4DT->Fill(1., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 0.9 && fabs(trigObjEta) < 1.2) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDown->Fill(1., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL1DT->Fill(1., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL1DT->Fill(1., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL4DT->Fill(1., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL4DT->Fill(1., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 1.2 && fabs(trigObjEta) < 2.1) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDown->Fill(1., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL1DT->Fill(1., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL1DT->Fill(1., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL4DT->Fill(1., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL4DT->Fill(1., genBetaPrimeDownAtL4DT);
+      } else  if (fabs(trigObjEta) >= 2.1 && fabs(trigObjEta) < 2.4) {
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDown->Fill(1., genBetaPrimeDown);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL1DT->Fill(1., genBetaPrimeUpAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL1DT->Fill(1., genBetaPrimeDownAtL1DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL4DT->Fill(1., genBetaPrimeUpAtL4DT);
+        tuple->PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL4DT->Fill(1., genBetaPrimeDownAtL4DT);
+      }
+      if (fabs(trigObjEta) < 1.0) {
+        tuple->PostS_SR2PASS_TriggerGenBeta->Fill(trigObjBeta);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_Beta->Fill(1., trigObjBeta);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownHalfSigma->Fill(1., genBetaPrimeDownHalfSigma);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownOneSigma->Fill(1., genBetaPrimeDown);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownTwoSigma->Fill(1., genBetaPrimeDownTwoSigma);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpHalfSigma->Fill(1., genBetaPrimeUpHalfSigma);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpOneSigma->Fill(1., genBetaPrimeUp);
+        tuple->PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpTwoSigma->Fill(1., genBetaPrimeUpTwoSigma);
+      }
+    } // end condition on passing the Mu50 trigger
+      // Repeat the above but with all muon triggers
+    if (!muTrig) {
+      tuple->PostPreS_TriggerMuonAllVsBeta->Fill(0., trigObjBeta);
+      tuple->PostPreS_TriggerMuonAllVsPt->Fill(0., trigObjPt);
+      if (fabs(trigObjEta)< 0.3) {
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaA->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 0.3 && fabs(trigObjEta) < 0.6) {
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaB->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaB_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaB_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) > 0.6 && fabs(trigObjEta) < 0.9) {
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaC->Fill(0., trigObjBeta);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaC_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaC_BetaDown->Fill(0., genBetaPrimeDown);
+      }
+      
+    } else if (muTrig) {
+      tuple->PostPreS_TriggerMuonAllVsBeta->Fill(1., trigObjBeta);
+      tuple->PostPreS_TriggerMuonAllVsPt->Fill(1., trigObjPt);
+      if (fabs(trigObjEta) < 0.3) {
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaA->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaA_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) > 0.3 && fabs(trigObjEta) < 0.6) {
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaB->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaB_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaB_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) > 0.6 && fabs(trigObjEta) < 1.0) {
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaC->Fill(1., trigObjBeta);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaC_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->PostPreS_TriggerMuonAllVsBeta_EtaC_BetaDown->Fill(1., genBetaPrimeDown);
+      }
+    }
+      // Now for all MET triggers
+    if (!HLT_PFMET120_PFMHT120_IDTight && !HLT_PFHT500_PFMET100_PFMHT100_IDTight && !HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 && !HLT_MET105_IsoTrk50) {
+      tuple->PostPreS_TriggerMETallVsBeta->Fill(0., trigObjBeta);
+      tuple->PostPreS_TriggerMETallVsMet->Fill(0., RecoPFMET);
+      tuple->PostPreS_TriggerMETallVsHT->Fill(0., pfJetHT);
+      tuple->PostPreS_TriggerMETallVsMetVsHT->Fill(0., RecoPFMET, pfJetHT);
+      tuple->PostPreS_TriggerMETallVsMetOverHt->Fill(0.,RecoPFMET/pfJetHT);
+    } else if (HLT_PFMET120_PFMHT120_IDTight || HLT_PFHT500_PFMET100_PFMHT100_IDTight || HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 || HLT_MET105_IsoTrk50) {
+      tuple->PostPreS_TriggerMETallVsBeta->Fill(1., trigObjBeta);
+      tuple->PostPreS_TriggerMETallVsMet->Fill(1., RecoPFMET);
+      tuple->PostPreS_TriggerMETallVsHT->Fill(1., pfJetHT);
+      tuple->PostPreS_TriggerMETallVsMetVsHT->Fill(1., RecoPFMET, pfJetHT);
+      tuple->PostPreS_TriggerMETallVsMetOverHt->Fill(1., RecoPFMET/pfJetHT);
+    }
+  } // end of passedCutsArrayForTriggerSyst loop
+    // dr_min_hltMuon_hscpCand < 0.15 to make it event level? doesnt really work for the denominator
+  if (doBefPreSplots_) {
+    if (!HLT_Mu50) {
+      tuple->BefPreS_TriggerTimingReject->Fill(timing);
+      tuple->BefPreS_TriggerEtaReject->Fill(fabs(trigObjEta));
+      tuple->BefPreS_TriggerMuon50VsBeta->Fill(0., trigObjBeta);
+      tuple->BefPreS_TriggerMuon50VsPt->Fill(0., trigObjPt);
+      if (fabs(trigObjEta) < 0.3) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaA->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaA_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaA_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 0.3 && fabs(trigObjEta) < 0.6) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaB->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaB_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaB_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 0.6 && fabs(trigObjEta) < 0.9) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaC->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 0.9 && fabs(trigObjEta) < 1.2) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaD->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaD_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaD_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 1.2 && fabs(trigObjEta) < 2.1) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaE->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaE_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaE_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 2.1 && fabs(trigObjEta) < 2.4) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaF->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaF_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaF_BetaDown->Fill(0., genBetaPrimeDown);
+      }
+    } else if (HLT_Mu50) {
+      tuple->BefPreS_TriggerTimingPass->Fill(timing);
+      tuple->BefPreS_TriggerEtaPass->Fill(fabs(trigObjEta));
+      tuple->BefPreS_TriggerMuon50VsBeta->Fill(1., trigObjBeta);
+      tuple->BefPreS_TriggerMuon50VsPt->Fill(1., trigObjPt);
+      if (fabs(trigObjEta) < 0.3) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaA->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaA_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaA_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 0.3 && fabs(trigObjEta) < 0.6) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaB->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaB_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaB_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 0.6 && fabs(trigObjEta) < 0.9) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaC->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaC_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 0.9 && fabs(trigObjEta) < 1.2) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaD->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaD_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaD_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 1.2 && fabs(trigObjEta) < 2.1) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaE->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaE_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaE_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) >= 2.1 && fabs(trigObjEta) < 2.4) {
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaF->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaF_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuon50VsBeta_EtaF_BetaDown->Fill(1., genBetaPrimeDown);
+      }
+    }
+      // Repeat the same with all muon trigs recom by POG
+    if (!muTrig) {
+      tuple->BefPreS_TriggerMuonAllVsBeta->Fill(0., trigObjBeta);
+      tuple->BefPreS_TriggerMuonAllVsPt->Fill(0., trigObjPt);
+      if (fabs(trigObjEta) < 0.3) {
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaA->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaA_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaA_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) > 0.3 && fabs(trigObjEta) < 0.6) {
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaB->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaB_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaB_BetaDown->Fill(0., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) > 0.6 && fabs(trigObjEta) < 1.0) {
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaC->Fill(0., trigObjBeta);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaC_BetaUp->Fill(0., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaC_BetaDown->Fill(0., genBetaPrimeDown);
+      }
+    } else if (muTrig) {
+      tuple->BefPreS_TriggerMuonAllVsBeta->Fill(1., trigObjBeta);
+      tuple->BefPreS_TriggerMuonAllVsPt->Fill(1., trigObjPt);
+      if (fabs(trigObjEta) < 0.3) {
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaA->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaA_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaA_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) > 0.3 && fabs(trigObjEta) < 0.6) {
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaB->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaB_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaB_BetaDown->Fill(1., genBetaPrimeDown);
+      } else  if (fabs(trigObjEta) > 0.6 && fabs(trigObjEta) < 1.0) {
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaC->Fill(1., trigObjBeta);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaC_BetaUp->Fill(1., genBetaPrimeUp);
+        tuple->BefPreS_TriggerMuonAllVsBeta_EtaC_BetaDown->Fill(1., genBetaPrimeDown);
+      }
+    }
+      // Now for all MET triggers
+    if (!HLT_PFMET120_PFMHT120_IDTight && !HLT_PFHT500_PFMET100_PFMHT100_IDTight && !HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 && !HLT_MET105_IsoTrk50) {
+      tuple->BefPreS_TriggerMETallVsBeta->Fill(0., trigObjBeta);
+      tuple->BefPreS_TriggerMETallVsMet->Fill(0., RecoPFMET);
+      tuple->BefPreS_TriggerMETallVsHT->Fill(0., pfJetHT);
+      tuple->BefPreS_TriggerMETallVsMetVsHT->Fill(0., RecoPFMET, pfJetHT);
+      tuple->BefPreS_TriggerMETallVsMetOverHt->Fill(0.,RecoPFMET/pfJetHT);
+    } else if (HLT_PFMET120_PFMHT120_IDTight || HLT_PFHT500_PFMET100_PFMHT100_IDTight || HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60 || HLT_MET105_IsoTrk50) {
+      tuple->BefPreS_TriggerMETallVsBeta->Fill(1., trigObjBeta);
+      tuple->BefPreS_TriggerMETallVsMet->Fill(1., RecoPFMET);
+      tuple->BefPreS_TriggerMETallVsHT->Fill(1., pfJetHT);
+      tuple->BefPreS_TriggerMETallVsMetVsHT->Fill(1., RecoPFMET, pfJetHT);
+      tuple->BefPreS_TriggerMETallVsMetOverHt->Fill(1., RecoPFMET/pfJetHT);
+    }
+  }
+  
+  
   // Event level information, after choosing the best candidate track
   if (trigInfo_ > 0 && doBefPreSplots_) tuple->BefPreS_NumCandidates->Fill(candidate_count, eventWeight_);
   if (trigInfo_ > 0) {
@@ -5046,12 +6139,17 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     if (bestCandidateMuon.isNonnull()) {
       tuple->PostS_HltMatchTrackLevel->Fill(2.0, eventWeight_);
       if (muon::isTightMuon(*bestCandidateMuon, highestSumPt2Vertex)) {
+        tuple->PostS_MuonTightVsBeta->Fill(1.,bestCandidateGenBeta);
         tuple->PostS_HltMatchTrackLevel->Fill(3.0, eventWeight_);
       }
+    } else {
+      tuple->PostS_MuonTightVsBeta->Fill(0.,bestCandidateGenBeta);
+      tuple->PostS_NotMuonsGenBeta->Fill(bestCandidateGenBeta);
     }
     if (anyCandidateDrMinHltMuon < 0.15) {
       tuple->PostS_HltMatchTrackLevel->Fill(4.0, eventWeight_);
     }
+    tuple->PostS_dRMinHLTMuon->Fill(dr_min_hltMuon_hscpCand_inEvent);
     if (bestCandidateDrMinHltMuon < 0.15) {
       tuple->PostS_HltMatchTrackLevel->Fill(5.0, eventWeight_);
     }
@@ -5089,6 +6187,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       if (PUA) tuple->PostS_SR2FAIL_Ias_PUA->Fill(bestCandidateIas, eventWeight_);
       else if (PUB) tuple->PostS_SR2FAIL_Ias_PUB->Fill(bestCandidateIas, eventWeight_);
       else if (PUC) tuple->PostS_SR2FAIL_Ias_PUC->Fill(bestCandidateIas, eventWeight_);
+      tuple->PostS_SR2FAIL_PtErrOverPtVsIas->Fill(bestCandidateTrack->ptError() / (bestCandidateTrack->pt()), bestCandidateIas,  eventWeight_);
+      tuple->PostS_SR2FAIL_TIsolVsIas->Fill(bestCandidateTIsol, bestCandidateIas,  eventWeight_);
       
       if (bestCandidateIas > 0.25) {
         tuple->PostS_SR2FAIL_PV->Fill(numGoodVerts, eventWeight_);
@@ -5106,6 +6206,11 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       else if (PUC) tuple->PostS_SR2PASS_Ias_PUC->Fill(bestCandidateIas, eventWeight_);
       
       if (bestCandidateIas > 0.25) {
+//        std::cout << "SR2 event in run " << currentRun_ << " LS " <<  iEvent.id().luminosityBlock() <<  " event " << iEvent.id().event() << std::endl;
+        tuple->PostS_SR2PASS_PtErrOverPtVsIas->Fill(bestCandidateTrack->ptError() / (bestCandidateTrack->pt()), bestCandidateIas,  eventWeight_);
+        tuple->PostS_SR2PASS_TIsolVsIas->Fill(bestCandidateTIsol, bestCandidateIas,  eventWeight_);
+        tuple->PostS_SR2PASS_Ls->Fill(iEvent.id().luminosityBlock());
+        tuple->PostS_SR2PASS_RunVsLs->Fill(currentRun_,iEvent.id().luminosityBlock());
         tuple->PostS_SR2PASS_PV->Fill(numGoodVerts, eventWeight_);
         tuple->PostS_SR2PASS_PtErrOverPt2->Fill(bestCandidateTrack->ptError() / (bestCandidateTrack->pt() * bestCandidateTrack->pt()), eventWeight_);
         if (bestCandidateGenIndex > 0) {
@@ -5116,26 +6221,55 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     }
     
     // Systematics plots for pT rescaling
-    if (rescaledPtUp > globalMinPt_ && doSystsPlots_) {
+    if (rescaledPtUp > globalMinPt_) {
       tuple->PostS_ProbQNoL1VsIas_Pt_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas,  eventWeight_);
       tuple->PostS_ProbQNoL1VsIasVsPt_Pt_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_);
       tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pt_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStrips, bestCandidateTrack->pt(),  eventWeight_);
       tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStripsLog, bestCandidateTrack->pt(),  eventWeight_);
     }
-    if (rescaledPtDown > globalMinPt_ && doSystsPlots_) {
+    if (rescaledPtDown > globalMinPt_) {
       tuple->PostS_ProbQNoL1VsIas_Pt_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas,  eventWeight_);
       tuple->PostS_ProbQNoL1VsIasVsPt_Pt_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_);
       tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pt_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStrips, bestCandidateTrack->pt(),  eventWeight_);
       tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pt_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStripsLog, bestCandidateTrack->pt(),  eventWeight_);
     }
-    
-    float theGiSystFactorUp = 1.02;
-    float theGiSystFactorDown = 0.98;
+    // Systematics plots for Gi rescaling
+    RNG3 = new TRandom3(long(time(NULL)));
+    float theGiSystFactorUp =  std::max((double)1, RNG3->Gaus(1,1.02));
+    float theGiSystFactorDown =  std::max((double)0, std::min((double)1, RNG3->Gaus(1,1.02)));
+    tuple->PostS_ProbQNoL1VsIas_Ias_up->Fill(1 - bestCandidateProbQNoL1, std::min(1.f,bestCandidateIas*theGiSystFactorUp),  eventWeight_);
+    tuple->PostS_ProbQNoL1VsIas_Ias_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas*theGiSystFactorDown,  eventWeight_);
+    
+    tuple->PostS_ProbQNoL1VsIasVsPt_Ias_up->Fill(1 - bestCandidateProbQNoL1, std::min(1.f,bestCandidateIas*theGiSystFactorUp), bestCandidateTrack->pt(),  eventWeight_);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Ias_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas*theGiSystFactorDown, bestCandidateTrack->pt(),  eventWeight_);
+    
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Ias_up->Fill(1 - bestCandidateProbQNoL1, std::min(1.f,bestCandidateFiStrips*theGiSystFactorUp), bestCandidateTrack->pt(),  eventWeight_);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Ias_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStrips*theGiSystFactorDown, bestCandidateTrack->pt(),  eventWeight_);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_up->Fill(1 - bestCandidateProbQNoL1, std::min(1.f,bestCandidateFiStripsLog*theGiSystFactorUp), bestCandidateTrack->pt(),  eventWeight_);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Ias_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStripsLog*theGiSystFactorDown, bestCandidateTrack->pt(),  eventWeight_);
+    
+    // Systematics plots for PU rescaling
+    tuple->PostS_ProbQNoL1VsIas_Pileup_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas,  eventWeight_ * PUSystFactor_[0]);
+    tuple->PostS_ProbQNoL1VsIas_Pileup_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas,  eventWeight_ * PUSystFactor_[1]);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Pileup_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas, bestCandidateTrack->pt(), eventWeight_ * PUSystFactor_[0]);
+    tuple->PostS_ProbQNoL1VsIasVsPt_Pileup_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas, bestCandidateTrack->pt(), eventWeight_ * PUSystFactor_[1]);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pileup_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStrips, bestCandidateTrack->pt(), eventWeight_ * PUSystFactor_[0]);
+    tuple->PostS_ProbQNoL1VsFiStripsVsPt_Pileup_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStrips, bestCandidateTrack->pt(), eventWeight_ * PUSystFactor_[1]);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStripsLog, bestCandidateTrack->pt(), eventWeight_ * PUSystFactor_[0]);
+    tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Pileup_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStripsLog, bestCandidateTrack->pt(), eventWeight_ * PUSystFactor_[1]);
+    // Systematics plots for Fi rescaling
     float theFiSystFactorUp = 1.005;
     float theFiSystFactorDown = 0.995;
-    float triggerSystFactorUp = triggerSystFactor(bestCandidateTrack->eta(),bestCandidateGenBeta,+1);
-    float triggerSystFactorDown = triggerSystFactor(bestCandidateTrack->eta(),bestCandidateGenBeta,-1);
+    float triggerSystFactorUp = triggerSystFactor(trigObjEta,trigObjBeta,+1);
+    float triggerSystFactorDown = triggerSystFactor(trigObjEta,trigObjBeta,-1);
+
+    tuple->PostS_GenBeta->Fill(bestCandidateGenBeta,  eventWeight_);
+    if (triggerObjGenIndex > -1) tuple->PostS_TriggerGenBeta->Fill(genColl[triggerObjGenIndex].p()/ genColl[triggerObjGenIndex].energy());
+    
     
+    float muonTriggerSFsNom = muonTriggerSFsForTrackEta(trigObjP4s[closestTrigObjIndex].Eta(), 0);
+    float muonRecoSFsNom = muonRecoSFsForTrackEta(trigObjP4s[closestTrigObjIndex].Eta(), 0);
+    float muonIdSFsNom = muonIdSFsForTrackEta(trigObjP4s[closestTrigObjIndex].Eta(), 0);
     float muonRecoSFsUp = muonRecoSFsForTrackEta(trigObjP4s[closestTrigObjIndex].Eta(), +1);
     float muonIdSFsUp = muonIdSFsForTrackEta(trigObjP4s[closestTrigObjIndex].Eta(), +1);
     float muonTriggerSFsUp = muonTriggerSFsForTrackEta(trigObjP4s[closestTrigObjIndex].Eta(), +1);
@@ -5143,13 +6277,35 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
     float muonIdSFsDown = muonIdSFsForTrackEta(trigObjP4s[closestTrigObjIndex].Eta(), -1);
     float muonTriggerSFsDown = muonTriggerSFsForTrackEta(trigObjP4s[closestTrigObjIndex].Eta(), -1);
     
+    
+
+    float ratioEntries=1.0;
+    int NPV = vertexColl.size();
+
+    if (puTreatment_){
+      for (int i = 0; i < NbPuBins_ ; i++){
+        if (NPV > PuBins_[i] && NPV <= PuBins_[i+1]) {
+          ratioEntries = (dEdxTemplatesPU[i]->GetEntries()*1.0)/NominalEntries_[i];
+        }
+      }
+    } else {
+        ratioEntries = (dEdxTemplates->GetEntries()*1.0)/std::accumulate(NominalEntries_.begin(),NominalEntries_.end(),0);
+    }
+
+    float scaledParamTwo = (GiSysParamTwo_*1.0)/sqrt(ratioEntries);
+    float deltaGi = bestCandidateIas*scaledParamTwo + GiSysParamOne_;
+
     if (doSystsPlots_) {
       // Systematics plots for Gi rescaling
+
       tuple->PostS_ProbQNoL1VsIas_Ias_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas*theGiSystFactorUp,  eventWeight_);
       tuple->PostS_ProbQNoL1VsIas_Ias_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas*theGiSystFactorDown,  eventWeight_);
       
       tuple->PostS_ProbQNoL1VsIasVsPt_Ias_up->Fill(1 - bestCandidateProbQNoL1, std::min(1.f,bestCandidateIas*theGiSystFactorUp), bestCandidateTrack->pt(),  eventWeight_);
+      tuple->PostS_ProbQNoL1VsIasVsPt_IasShift_up->Fill(1 - bestCandidateProbQNoL1,std::min(1.f,(bestCandidateIas+deltaGi)), bestCandidateTrack->pt(),  eventWeight_);
+
       tuple->PostS_ProbQNoL1VsIasVsPt_Ias_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas*theGiSystFactorDown, bestCandidateTrack->pt(),  eventWeight_);
+      tuple->PostS_ProbQNoL1VsIasVsPt_IasShift_down->Fill(1 - bestCandidateProbQNoL1, std::max(0.f,(bestCandidateIas-deltaGi)), bestCandidateTrack->pt(),  eventWeight_);
       
       tuple->PostS_ProbQNoL1VsFiStripsVsPt_Ias_up->Fill(1 - bestCandidateProbQNoL1, std::min(1.f,bestCandidateFiStrips*theGiSystFactorUp), bestCandidateTrack->pt(),  eventWeight_);
       tuple->PostS_ProbQNoL1VsFiStripsVsPt_Ias_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateFiStrips*theGiSystFactorDown, bestCandidateTrack->pt(),  eventWeight_);
@@ -5186,12 +6342,12 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_up->Fill(std::min(1.f,(1 - bestCandidateProbQNoL1)), bestCandidateFiStripsLog, bestCandidateTrack->pt(),  eventWeight_ * triggerSystFactorUp);
       tuple->PostS_ProbQNoL1VsFiStripsLogVsPt_Trigger_down->Fill((1 - bestCandidateProbQNoL1), bestCandidateFiStripsLog, bestCandidateTrack->pt(),  eventWeight_  * triggerSystFactorDown);
       
-      tuple->PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_up->Fill(std::min(1.f,(1 - bestCandidateProbQNoL1)), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_ * muonRecoSFsUp);
-      tuple->PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_down->Fill((1 - bestCandidateProbQNoL1), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_  * muonRecoSFsDown);
-      tuple->PostS_ProbQNoL1VsIasVsPt_MuonIDSF_up->Fill(std::min(1.f,(1 - bestCandidateProbQNoL1)), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_ * muonIdSFsUp);
-      tuple->PostS_ProbQNoL1VsIasVsPt_MuonIDSF_down->Fill((1 - bestCandidateProbQNoL1), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_  * muonIdSFsDown);
-      tuple->PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_up->Fill(std::min(1.f,(1 - bestCandidateProbQNoL1)), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_ * muonTriggerSFsUp);
-      tuple->PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_down->Fill((1 - bestCandidateProbQNoL1), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_  * muonTriggerSFsDown);
+      tuple->PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_up->Fill(std::min(1.f,(1 - bestCandidateProbQNoL1)), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_ * muonRecoSFsUp / muonRecoSFsNom);
+      tuple->PostS_ProbQNoL1VsIasVsPt_MuonRecoSF_down->Fill((1 - bestCandidateProbQNoL1), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_  * muonRecoSFsDown / muonRecoSFsNom);
+      tuple->PostS_ProbQNoL1VsIasVsPt_MuonIDSF_up->Fill(std::min(1.f,(1 - bestCandidateProbQNoL1)), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_ * muonIdSFsUp / muonIdSFsNom);
+      tuple->PostS_ProbQNoL1VsIasVsPt_MuonIDSF_down->Fill((1 - bestCandidateProbQNoL1), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_  * muonIdSFsDown / muonIdSFsNom);
+      tuple->PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_up->Fill(std::min(1.f,(1 - bestCandidateProbQNoL1)), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_ * muonTriggerSFsUp / muonTriggerSFsNom);
+      tuple->PostS_ProbQNoL1VsIasVsPt_MuonTriggerSF_down->Fill((1 - bestCandidateProbQNoL1), bestCandidateIas, bestCandidateTrack->pt(),  eventWeight_  * muonTriggerSFsDown / muonTriggerSFsNom);
     }
     
     // Repeat for several SRs with higher pT cut
@@ -5242,8 +6398,16 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         }
         
         // Systematics plots for Gi rescaling
+
+
+
+        
+        //
         tuple->PostS_SR2_ProbQNoL1VsIas_Ias_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas * theGiSystFactorUp, eventWeight_);
+        tuple->PostS_SR2_ProbQNoL1VsIas_IasShift_up->Fill(1 - bestCandidateProbQNoL1, std::min(1.f,(bestCandidateIas + deltaGi)), eventWeight_);
+
         tuple->PostS_SR2_ProbQNoL1VsIas_Ias_down->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas * theGiSystFactorDown, eventWeight_);
+        tuple->PostS_SR2_ProbQNoL1VsIas_IasShift_down->Fill(1 - bestCandidateProbQNoL1, std::max(0.f,(bestCandidateIas - deltaGi)), eventWeight_);
         
         // Systematics plots for PU rescaling
         tuple->PostS_SR2_ProbQNoL1VsIas_Pileup_up->Fill(1 - bestCandidateProbQNoL1, bestCandidateIas,  eventWeight_ * PUSystFactor_[0]);
@@ -5380,7 +6544,492 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         tuple->PostS_VR3_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
 
     }
+
+
+    //************************************************************************************
+
+    //************************ START FPIX STRATEGY ***************************************
+
+    //************************************************************************************
+
+
+    //VR1 FPIX Strategy pt 70 
+
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8] && bestCandidateTrack->pt() >= 70) {
+        tuple->PostS_VR1_pt70_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_VR1_pt70_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_VR1_pt70_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_VR1_pt70_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_VR1_pt70_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_VR1_pt70_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_VR1_pt70_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_VR1_pt70_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+
+        //K&C scenario 1
+        tuple->PostS_VR1_pt70_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_VR1_pt70_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_VR1_pt70_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_VR1_pt70_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_VR1_pt70_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_VR1_pt70_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_VR1_pt70_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_VR1_pt70_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+
+    //VR1 FPIX Strategy pt 100 
+
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8] && bestCandidateTrack->pt() >= 100) {
+        tuple->PostS_VR1_pt100_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_VR1_pt100_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_VR1_pt100_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_VR1_pt100_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_VR1_pt100_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_VR1_pt100_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_VR1_pt100_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_VR1_pt100_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+
+        //K&C scenario 1
+        tuple->PostS_VR1_pt100_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_VR1_pt100_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_VR1_pt100_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_VR1_pt100_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_VR1_pt100_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_VR1_pt100_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_VR1_pt100_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_VR1_pt100_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+   
+    //VR1 FPIX Strategy pt 200 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8] && bestCandidateTrack->pt() >= 200) {
+        tuple->PostS_VR1_pt200_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_VR1_pt200_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_VR1_pt200_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_VR1_pt200_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_VR1_pt200_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_VR1_pt200_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_VR1_pt200_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_VR1_pt200_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+
+        //K&C scenario 1
+        tuple->PostS_VR1_pt200_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_VR1_pt200_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_VR1_pt200_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_VR1_pt200_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_VR1_pt200_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_VR1_pt200_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_VR1_pt200_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_VR1_pt200_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //VR1 FPIX Strategy pt 300 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8] && bestCandidateTrack->pt() >= 300) {
+        tuple->PostS_VR1_pt300_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_VR1_pt300_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_VR1_pt300_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_VR1_pt300_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_VR1_pt300_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_VR1_pt300_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_VR1_pt300_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_VR1_pt300_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+
+        //K&C scenario 1
+        tuple->PostS_VR1_pt300_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_VR1_pt300_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_VR1_pt300_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_VR1_pt300_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_VR1_pt300_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_VR1_pt300_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_VR1_pt300_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_VR1_pt300_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+
+    //SR0 Fpix Strategy  pt 70 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 70) {
+        tuple->PostS_SR0_pt70_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR0_pt70_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR0_pt70_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR0_pt70_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR0_pt70_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR0_pt70_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR0_pt70_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR0_pt70_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR0_pt70_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR0_pt70_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR0_pt70_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR0_pt70_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+        //K&C scenario 2
+        tuple->PostS_SR0_pt70_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR0_pt70_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR0_pt70_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR0_pt70_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+
+    //SR0 Fpix Strategy  pt 100 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 100) {
+        tuple->PostS_SR0_pt100_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR0_pt100_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR0_pt100_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR0_pt100_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR0_pt100_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR0_pt100_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR0_pt100_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR0_pt100_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR0_pt100_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR0_pt100_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR0_pt100_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR0_pt100_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+        //K&C scenario 2
+        tuple->PostS_SR0_pt100_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR0_pt100_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR0_pt100_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR0_pt100_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //SR0 Fpix Strategy  pt 200 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 200) {
+        tuple->PostS_SR0_pt200_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR0_pt200_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR0_pt200_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR0_pt200_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR0_pt200_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR0_pt200_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR0_pt200_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR0_pt200_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR0_pt200_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR0_pt200_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR0_pt200_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR0_pt200_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_SR0_pt200_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR0_pt200_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR0_pt200_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR0_pt200_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //SR0 Fpix Strategy  pt 300 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 300) {
+        tuple->PostS_SR0_pt300_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR0_pt300_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR0_pt300_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR0_pt300_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR0_pt300_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR0_pt300_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR0_pt300_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR0_pt300_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR0_pt300_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR0_pt300_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR0_pt300_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR0_pt300_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_SR0_pt300_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR0_pt300_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR0_pt300_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR0_pt300_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+
+    //SR1 Fpix Strategy  pt 70 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 70) {
+        tuple->PostS_SR1_pt70_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR1_pt70_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR1_pt70_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR1_pt70_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR1_pt70_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR1_pt70_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR1_pt70_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR1_pt70_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR1_pt70_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR1_pt70_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR1_pt70_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR1_pt70_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+        //K&C scenario 2
+        tuple->PostS_SR1_pt70_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR1_pt70_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR1_pt70_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR1_pt70_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //SR1 Fpix Strategy  pt 100 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 100) {
+        tuple->PostS_SR1_pt100_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR1_pt100_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR1_pt100_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR1_pt100_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR1_pt100_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR1_pt100_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR1_pt100_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR1_pt100_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR1_pt100_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR1_pt100_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR1_pt100_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR1_pt100_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+        //K&C scenario 2
+        tuple->PostS_SR1_pt100_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR1_pt100_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR1_pt100_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR1_pt100_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //SR1 Fpix Strategy  pt 200 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 200) {
+        tuple->PostS_SR1_pt200_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR1_pt200_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR1_pt200_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR1_pt200_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR1_pt200_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR1_pt200_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR1_pt200_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR1_pt200_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR1_pt200_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR1_pt200_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR1_pt200_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR1_pt200_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_SR1_pt200_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR1_pt200_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR1_pt200_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR1_pt200_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //SR1 Fpix Strategy  pt 300 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 300) {
+        tuple->PostS_SR1_pt300_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR1_pt300_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR1_pt300_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR1_pt300_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR1_pt300_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR1_pt300_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR1_pt300_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR1_pt300_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR1_pt300_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR1_pt300_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR1_pt300_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR1_pt300_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_SR1_pt300_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR1_pt300_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR1_pt300_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR1_pt300_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+
+    //SR2 Fpix Strategy  pt 70 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 70) {
+        tuple->PostS_SR2_pt70_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR2_pt70_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR2_pt70_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR2_pt70_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR2_pt70_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR2_pt70_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR2_pt70_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR2_pt70_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR2_pt70_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR2_pt70_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR2_pt70_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR2_pt70_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+        //K&C scenario 2
+        tuple->PostS_SR2_pt70_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR2_pt70_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR2_pt70_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR2_pt70_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+
+    //SR2 Fpix Strategy  pt 100 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 100) {
+        tuple->PostS_SR2_pt100_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR2_pt100_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR2_pt100_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR2_pt100_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR2_pt100_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR2_pt100_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR2_pt100_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR2_pt100_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR2_pt100_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR2_pt100_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR2_pt100_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR2_pt100_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+        //K&C scenario 2
+        tuple->PostS_SR2_pt100_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR2_pt100_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR2_pt100_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR2_pt100_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //SR2 Fpix Strategy  pt 200 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 200) {
+        tuple->PostS_SR2_pt200_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR2_pt200_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR2_pt200_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR2_pt200_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR2_pt200_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR2_pt200_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR2_pt200_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR2_pt200_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR2_pt200_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR2_pt200_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR2_pt200_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR2_pt200_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_SR2_pt200_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR2_pt200_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR2_pt200_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR2_pt200_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //SR2 Fpix Strategy  pt 300 
+    if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11] && bestCandidateTrack->pt() >= 300) {
+        tuple->PostS_SR2_pt300_Fpix_Mass->Fill(bestCandidateMass, eventWeight_);
+        tuple->PostS_SR2_pt300_Fpix->Fill(1 - bestCandidateProbQNoL1, eventWeight_);
+
+        // PU systematics
+        tuple->PostS_SR2_pt300_Fpix_Mass_Pileup_up->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[0]);
+        tuple->PostS_SR2_pt300_Fpix_Mass_Pileup_down->Fill(bestCandidateMass, eventWeight_ * PUSystFactor_[1]);
+
+        // Trigger rescaling
+        tuple->PostS_SR2_pt300_Fpix_Mass_Trigger_up->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorUp);
+        tuple->PostS_SR2_pt300_Fpix_Mass_Trigger_down->Fill(bestCandidateMass, eventWeight_ * triggerSystFactorDown);
+
+        //FPIX recaling 0.5%
+        if ((bestCandidateProbQNoL1 * 1.005) < globalMaxTrackProbQCut_) tuple->PostS_SR2_pt300_Fpix_Mass_ProbQNoL1_up->Fill(bestCandidateMass,eventWeight_);
+        if ((bestCandidateProbQNoL1 * 0.995) < globalMaxTrackProbQCut_) tuple->PostS_SR2_pt300_Fpix_Mass_ProbQNoL1_down->Fill(bestCandidateMass,eventWeight_);
+        //K&C scenario 1
+        tuple->PostS_SR2_pt300_Fpix_Mass_K_up1->Fill(bestCandidateMass_Kup1, eventWeight_);
+        tuple->PostS_SR2_pt300_Fpix_Mass_K_down1->Fill(bestCandidateMass_Kdown1, eventWeight_);
+        tuple->PostS_SR2_pt300_Fpix_Mass_C_up1->Fill(bestCandidateMass_Cup1, eventWeight_);
+        tuple->PostS_SR2_pt300_Fpix_Mass_C_down1->Fill(bestCandidateMass_Cdown1, eventWeight_);
+
+        //K&C scenario 2
+        tuple->PostS_SR2_pt300_Fpix_Mass_K_up2->Fill(bestCandidateMass_Kup2, eventWeight_);
+        tuple->PostS_SR2_pt300_Fpix_Mass_K_down2->Fill(bestCandidateMass_Kdown2, eventWeight_);
+        tuple->PostS_SR2_pt300_Fpix_Mass_C_up2->Fill(bestCandidateMass_Cup2, eventWeight_);
+        tuple->PostS_SR2_pt300_Fpix_Mass_C_down2->Fill(bestCandidateMass_Cdown2, eventWeight_);
+    }
+
+    //************************************************************************************
+
+    //************************ END FPIX STRATEGY *****************************************
+
+    //************************************************************************************
     
+
     //SR1
     if (bestCandidateIas>Ias_quantiles[5] && bestCandidatePt > pT_cut) {
         // nominal
@@ -5489,6 +7138,72 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         if (rescaledDownIas > Ias_quantiles[7]) tuple->PostS_SR3_Mass_Ias_down->Fill(bestCandidateMass, eventWeight_);
     }
         
+    //PT rescaling for FPIX method 
+
+    //PT > 70
+    if (rescaledPtUp > globalMinPt_ && rescaledPtUp >= 70) {
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR0_pt70_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR1_pt70_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR2_pt70_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8]) tuple->PostS_VR1_pt70_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+
+    }
+
+    if (rescaledPtDown > globalMinPt_ && rescaledPtDown >= 70) {
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR0_pt70_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR1_pt70_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR2_pt70_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8]) tuple->PostS_VR1_pt70_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+    }
+
+    //PT > 100
+    if (rescaledPtUp > globalMinPt_ && rescaledPtUp >= 100) {
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR0_pt100_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR1_pt100_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR2_pt100_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8]) tuple->PostS_VR1_pt100_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+
+    }
+
+    if (rescaledPtDown > globalMinPt_ && rescaledPtDown >= 100) {
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR0_pt100_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR1_pt100_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR2_pt100_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8]) tuple->PostS_VR1_pt100_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+    }
+
+    //PT > 200
+    if (rescaledPtUp > globalMinPt_ && rescaledPtUp >= 200) {
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR0_pt200_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR1_pt200_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR2_pt200_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8]) tuple->PostS_VR1_pt200_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+
+    }
+
+    if (rescaledPtDown > globalMinPt_ && rescaledPtDown >= 200) {
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR0_pt200_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR1_pt200_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR2_pt200_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8]) tuple->PostS_VR1_pt200_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+    }
+   
+    //PT > 300
+    if (rescaledPtUp > globalMinPt_ && rescaledPtUp >= 300) {
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR0_pt300_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR1_pt300_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR2_pt300_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8]) tuple->PostS_VR1_pt300_Fpix_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+
+    }
+
+    if (rescaledPtDown > globalMinPt_ && rescaledPtDown >= 300) {
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[8] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR0_pt300_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[9] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR1_pt300_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[10] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[11]) tuple->PostS_SR2_pt300_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+        if ((1-bestCandidateProbQNoL1) > Fpix_quantiles[3] && (1-bestCandidateProbQNoL1) <= Fpix_quantiles[8]) tuple->PostS_VR1_pt300_Fpix_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
+    }
 
     // pT rescaling
     if (rescaledPtUp > globalMinPt_ && rescaledPtUp > pT_cut) {
@@ -5498,6 +7213,9 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
         if (bestCandidateIas > Ias_quantiles[5]) tuple->PostS_SR1_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
         if (bestCandidateIas > Ias_quantiles[6]) tuple->PostS_SR2_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
         if (bestCandidateIas > Ias_quantiles[7]) tuple->PostS_SR3_Mass_Pt_up->Fill(bestCandidateMass, eventWeight_);
+
+
+        
     }
     if (rescaledPtDown > globalMinPt_ && rescaledPtDown > pT_cut) {
         if (bestCandidateIas > Ias_quantiles[1] && bestCandidateIas < Ias_quantiles[5]) tuple->PostS_VR1_Mass_Pt_down->Fill(bestCandidateMass, eventWeight_);
@@ -5525,17 +7243,17 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
 
   // Calibration information
   // loop on the general tracks
-  bool apply_trigger_sel_for_calib = true;
-  if (typeMode_ != 3 && apply_trigger_sel_for_calib && trigInfo_ > 0) {
+  if (typeMode_ != 3) {
     for(unsigned int c=0;c<trackCollectionHandle->size();c++){
       reco::TrackRef generalTrack = reco::TrackRef( trackCollectionHandle.product(), c );
 
       // selection of the general tracks
-      bool passedTrackCutsArray[10];
+      bool passedTrackCutsArray[9];
       std::fill(std::begin(passedTrackCutsArray), std::end(passedTrackCutsArray),true);
 
       // Pass the trigger
-      passedTrackCutsArray[0]  = (trigInfo_ > 0) ? true : false;
+//      passedTrackCutsArray[0]  = (trigInfo_ > 0) ? true : false;
+      passedTrackCutsArray[0]  = ((trigInfo_ > 0) || HLT_isoMu27 || HLT_isoMu24) ? true : false;
       // Check if eta is inside the max eta cut for detector homogeneity
       passedTrackCutsArray[1]  = (fabs(generalTrack->eta()) < globalMaxEta_) ? true : false;
       // Select only high purity tracks to ensure good quality tracks
@@ -5586,6 +7304,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                     false, 0, false, false, true, pixelCPE_, tTopo, generalTrack->px(), generalTrack->py(), generalTrack->pz(), generalTrack->charge());
 
       reco::DeDxData* dedxIh_StripOnlyFromGeneralTrack = dedxIh_StripOnly_TmpFromGeneralTrack.numberOfMeasurements() > 0 ? &dedxIh_StripOnly_TmpFromGeneralTrack : nullptr;
+      // TAV: Shouldnt we exit the loop in dedxIh_StripOnlyFromGeneralTrack is a nullptr? Caroline?
 
       // F^pix at track level
       /*  NOT USED BUT KEPT FOR THE RECORD TO BE SYNCH WITH THE HSCP COMPUTATION
@@ -5689,7 +7408,9 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       float ih0_strip = (dedxIh_StripOnlyFromGeneralTrack) ?  dedxIh_StripOnlyFromGeneralTrack->dEdx() : 0.0;
     
       // nonL1PixHitsFromGeneralTrack now well computed above in the loop
-      unsigned int numDeDxHitsFromGeneralTrack = dedxIh_noL1_TmpFromGeneralTrack.numberOfMeasurements() ;
+//      unsigned int numDeDxHitsFromGeneralTrack = dedxIh_noL1_TmpFromGeneralTrack.numberOfMeasurements() ;
+      unsigned int numStripsHitsFromGeneralTrack = (dedxIh_StripOnlyFromGeneralTrack) ?  dedxIh_StripOnlyFromGeneralTrack->numberOfMeasurements() : 0.0;
+      unsigned int numDeDxHitsFromGeneralTrack = numStripsHitsFromGeneralTrack + nonL1PixHitsFromGeneralTrack;
 
       // Check the number of non-layer-1 pixel hits to ensure good stats on the hits
       passedTrackCutsArray[7]  = (typeMode_ != 3 && nonL1PixHitsFromGeneralTrack >= globalMinNOPH_) ? true : false;
@@ -5697,6 +7418,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
       passedTrackCutsArray[8]  = (numDeDxHitsFromGeneralTrack >= globalMinNOM_)  ? true : false;
       if (!passPreselection(passedTrackCutsArray, false)) continue;
 
+/*
       if (generalTrack->p() < 50) {
        if ( fabs(dzForCalib) < globalMaxDZ_ && fabs(dxyForCalib) < globalMaxDXY_) {
         tuple->K_and_C_Ih_noL1_VsP_noFcut1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
@@ -5706,43 +7428,58 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
        }
       }
 
-      // Cut away background events based on the probQ
+       Cut away background events based on the probQ
       passedTrackCutsArray[9] = (probQonTrackNoL1 < globalMaxTrackProbQCut_ && probQonTrackNoL1 > globalMinTrackProbQCut_) ? true : false;
       if (!passPreselection(passedTrackCutsArray, false)) continue;
+*/
 
       if (generalTrack->p() < 50) {
         tuple->K_and_C_Ih_noL1_VsP_loose1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
         tuple->K_and_C_Ih_noL1_VsP_loose2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+        tuple->K_and_C_Ih_strip_VsP_loose1->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
+        tuple->K_and_C_Ih_strip_VsP_loose2->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
         if (fabs(generalTrack->eta()) < 1) {
-             tuple->K_and_C_Ih_noL1_VsP_eta1_loose1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
-             tuple->K_and_C_Ih_noL1_VsP_eta1_loose2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+//             tuple->K_and_C_Ih_noL1_VsP_eta1_loose1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+//             tuple->K_and_C_Ih_noL1_VsP_eta1_loose2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+             tuple->K_and_C_Ih_strip_VsP_eta1_loose1->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
+             tuple->K_and_C_Ih_strip_VsP_eta1_loose2->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
         }
         else {
-             tuple->K_and_C_Ih_noL1_VsP_eta2_loose1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
-             tuple->K_and_C_Ih_noL1_VsP_eta2_loose2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+//             tuple->K_and_C_Ih_noL1_VsP_eta2_loose1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+//             tuple->K_and_C_Ih_noL1_VsP_eta2_loose2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+             tuple->K_and_C_Ih_strip_VsP_eta2_loose1->Fill(generalTrack->p(),ih0_strip , preScaleForDeDx*eventWeight_);
+             tuple->K_and_C_Ih_strip_VsP_eta2_loose2->Fill(generalTrack->p(),ih0_strip , preScaleForDeDx*eventWeight_);
         }
-        tuple->K_and_C_Ih_strip_VsP_loose1->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
-        tuple->K_and_C_Ih_strip_VsP_loose2->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
 
        if ( fabs(dzForCalib) < globalMaxDZ_ && fabs(dxyForCalib) < globalMaxDXY_) {
 
         tuple->K_and_C_Ih_noL1_VsP_1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
         tuple->K_and_C_Ih_noL1_VsP_2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+        tuple->K_and_C_Ih_strip_VsP_1->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
+        tuple->K_and_C_Ih_strip_VsP_2->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
         if (generalTrack->p()>3. && generalTrack->p()<5.) {
              tuple->K_and_C_Ih_noL1_1d->Fill(ih0_noL1, preScaleForDeDx*eventWeight_);
              tuple->K_and_C_Ih_strip_1d->Fill(ih0_strip, preScaleForDeDx*eventWeight_);
         }
         if (fabs(generalTrack->eta())<1) {
-             tuple->K_and_C_Ih_noL1_VsP_eta1_1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
-             tuple->K_and_C_Ih_noL1_VsP_eta1_2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+//             tuple->K_and_C_Ih_noL1_VsP_eta1_1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+//             tuple->K_and_C_Ih_noL1_VsP_eta1_2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+             tuple->K_and_C_Ih_strip_VsP_eta1_1->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
+             tuple->K_and_C_Ih_strip_VsP_eta1_2->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
         }
         else {
-             tuple->K_and_C_Ih_noL1_VsP_eta2_1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
-             tuple->K_and_C_Ih_noL1_VsP_eta2_2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+//             tuple->K_and_C_Ih_noL1_VsP_eta2_1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+//             tuple->K_and_C_Ih_noL1_VsP_eta2_2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+             tuple->K_and_C_Ih_strip_VsP_eta2_1->Fill(generalTrack->p(),ih0_strip , preScaleForDeDx*eventWeight_);
+             tuple->K_and_C_Ih_strip_VsP_eta2_2->Fill(generalTrack->p(),ih0_strip , preScaleForDeDx*eventWeight_);
         }
-        tuple->K_and_C_Ih_strip_VsP_1->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
-        tuple->K_and_C_Ih_strip_VsP_2->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
 
+        if (probQonTrackNoL1 < globalMaxTrackProbQCut_ && probQonTrackNoL1 > globalMinTrackProbQCut_) {
+          tuple->K_and_C_Ih_noL1_VsP_wFcut1->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+          tuple->K_and_C_Ih_noL1_VsP_wFcut2->Fill(generalTrack->p(),ih0_noL1, preScaleForDeDx*eventWeight_);
+          tuple->K_and_C_Ih_strip_VsP_wFcut1->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
+          tuple->K_and_C_Ih_strip_VsP_wFcut2->Fill(generalTrack->p(),ih0_strip, preScaleForDeDx*eventWeight_);
+        }
 
         int nsat_lowp = (dedxIh_noL1FromGeneralTrack) ?  dedxIh_noL1FromGeneralTrack->numberOfSaturatedMeasurements() : 0.0;
         int nsize_lowp = (dedxIh_noL1FromGeneralTrack) ?  dedxIh_noL1FromGeneralTrack->numberOfMeasurements() : 0.0;
@@ -5844,6 +7581,11 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
             bool spansTwoROCs = SiPixelRecHitQuality::thePacking.spansTwoROCs(reCPE);
             bool specInCPE = (isOnEdge || hasBadPixels || spansTwoROCs) ? true : false;
 
+   
+            bool HasCluSize1=false;
+            auto clustSizeX = pixelCluster->sizeX();
+            auto clustSizeY = pixelCluster->sizeY();
+            if (clustSizeX==1 && clustSizeY==1) HasCluSize1 = true;
 
             // BPIXL1 only for 2017 and 2018
             bool isBPIXL1=false;
@@ -5851,7 +7593,9 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
             if ((numLayers == 4) && ((detid.subdetId() == PixelSubdetector::PixelBarrel) && (tTopo->pxbLayer(detid) == 1))) isBPIXL1=true;
 
              // cleaning in the pixel
-            if ((!specInCPE) && (probQ < 0.8) && (!isBPIXL1)) {
+//            if ((!specInCPE) && (probQ < 0.8) && (!isBPIXL1)) {
+//            No cut on individual probQ
+            if ((!specInCPE)  && (!isBPIXL1) && !(HasCluSize1)) {
               if (fabs(generalTrack->eta()<0.4)) {
                 tuple->SF_HHit2DPix_loose->Fill(generalTrack->p(), charge_over_pathlength, preScaleForDeDx*eventWeight_);
                 if ( fabs(dzForCalib) < globalMaxDZ_ && fabs(dxyForCalib) < globalMaxDXY_) {
@@ -5905,7 +7649,35 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                                 triggerObjectPt,
                                 triggerObjectEta,
                                 triggerObjectPhi,
+                                HSCP_GenBeta,
+                                HSCP_dRclosestTrigAndCandidate,
+                                HSCP_trigObjBeta,
+                                trigObjBeta,
+                                trigObjEta,
+                                L1mu22,
+                                L1mu22or25,
+                                L1_22or25PT,
+                                L1_22or25Eta,
+                                L1_22or25Phi,
+                                L1_22or25Mass,     
+                                L1mu22or25Filter0,
+                                L1_22or25F0PT,
+                                L1_22or25F0Eta,
+                                L1_22or25F0Phi,
+                                L1_22or25F0Mass,
+                                L1mu22or25Filter10,
+                                L1_22or25F10PT,
+                                L1_22or25F10Eta,
+                                L1_22or25F10Phi,
+                                L1_22or25F10Mass,
+                                L1mu22or25_l3Filter0,
+                                L1lastmu,
+                                HLT_lastFilterPT,
+                                HLT_lastFilterEta,
+                                HLT_lastFilterPhi,
+                                HLT_lastFilterMass, 
                                 HLT_Mu50,
+                                trigObjP4s.size(), 
                                 HLT_PFMET120_PFMHT120_IDTight,
                                 HLT_PFHT500_PFMET100_PFMHT100_IDTight,
                                 HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60,
@@ -5985,6 +7757,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                                 muonPt,
                                 muonEta,
                                 muonPhi,
+                                muonBeta,
                                 muonCharge,
                                 muonIsLoose,
                                 muonIsMedium,
@@ -6033,6 +7806,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                                 HSCP_passCutPt55,
                                 HSCP_passPreselection,
                                 HSCP_passPreselectionSept8,
+                                HSCP_passPreselectionTrigSys,
                                 HSCP_passSelection,
                                 HSCP_isPFMuon,
                                 HSCP_PFMuonPt,
@@ -6060,6 +7834,9 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                                 HSCP_isMuon,
                                 HSCP_isPhoton,
                                 HSCP_isElectron,
+                                HSCP_gsfFbremElectron,
+                                HSCP_gsfMomentumElectron,
+                                HSCP_PFMomentumElectron,
                                 HSCP_isChHadron,
                                 HSCP_isNeutHadron,
                                 HSCP_isPfTrack,
@@ -6095,6 +7872,8 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                                 HSCP_iso_ECAL,
                                 HSCP_iso_HCAL,
                                 HSCP_track_genTrackMiniIsoSumPt,
+                                HSCP_track_genTrackAbsIsoSumPtFix,
+                                HSCP_track_genTrackIsoSumPt_dr03,
                                 HSCP_PFMiniIso_relative,
                                 HSCP_PFMiniIso_wMuon_relative,
                                 HSCP_track_PFIsolationR005_sumChargedHadronPt,
@@ -6143,8 +7922,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
                                 HSCP_tuneP_Phi,
                                 HSCP_tuneP_MuonBestTrackType,
                                 HSCP_ErrorHisto_bin,
-                                HSCP_type
-                              );
+                                HSCP_type);
 
   //save event dependent information thanks to the bookkeeping
   for (unsigned int CutIndex = 0; CutIndex < CutPt_.size(); CutIndex++) {
@@ -6189,6 +7967,7 @@ void Analyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
   }
 } // end of analyze()
 
+
 // ------------ method called once each job just after ending the event loop  ------------
 void Analyzer::endJob() {
   if (tapeRecallOnly_) return;
@@ -6197,6 +7976,18 @@ void Analyzer::endJob() {
   delete RNG2;
 //  delete RNG3;
   delete tuple;
+  delete tuple_SigmaPt1_iso1_IhCut1_PtCut1;
+  //delete tuple_SigmaPt2_iso1_IhCut1_PtCut1;
+  delete tuple_SigmaPt3_iso1_IhCut1_PtCut1;
+  //delete tuple_SigmaPt4_iso1_IhCut1_PtCut1;
+  delete tuple_SigmaPt5_iso1_IhCut1_PtCut1;
+  delete tuple_SigmaPt3_iso0_IhCut1_PtCut1;
+  delete tuple_SigmaPt3_iso2_IhCut1_PtCut1;
+  //delete tuple_SigmaPt3_iso2_IhCut2_PtCut1;
+  //delete tuple_SigmaPt3_iso2_IhCut3_PtCut1;
+  //delete tuple_SigmaPt3_iso2_IhCut1_PtCut2;
+  //delete tuple_SigmaPt3_iso2_IhCut1_PtCut3;
+  delete tuple_SigmaPt3_iso2_IhCut1_PtCut4;
   if (!isData) {
     delete mcWeight;
   }
@@ -6216,6 +8007,20 @@ void Analyzer::endJob() {
   delete[] MaxMass_SystPU;
   delete[] MaxMass_SystHUp;
   delete[] MaxMass_SystHDown;
+  /*
+  TFile outputFile("EffL1_HLT_vsBetaGamma.root", "RECREATE");
+  effl1Mu22PostS->Write();
+  effl1Mu22or25PostS->Write();
+  effl1LastMuPostS->Write();
+  effHltMu50PostS->Write();
+
+
+  effl1Mu22->Write();
+  effl1Mu22or25->Write();
+  effl1LastMu->Write();
+  effHltMu50->Write();
+  outputFile.Close();
+  */
 }
 
 // ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
@@ -6328,7 +8133,10 @@ void Analyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
     ->setComment("Input collection for particleFlow algorithm");
   desc.add("GenCollection", edm::InputTag("generator","","GEN"))
     ->setComment("A");
-  desc.addUntracked("TypeMode", 0)
+  desc.add("gtDigis", edm::InputTag("gtDigis","","RECO"))
+    ->setComment("A");
+
+  desc.addUntracked("TypeMode", 2)
     ->setComment("0:Tk only, 1:Tk+Muon, 2:Tk+TOF, 3:TOF onlypwd, 4:Q>1, 5:Q<1");
   desc.addUntracked("SampleType", 0)
     ->setComment("0:Data, 1:Background, 2:Signal, 3:Signal Systematics");
@@ -6356,17 +8164,17 @@ void Analyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
   desc.addUntracked("DeDxS_UpLim",1.0)->setComment("A");
   desc.addUntracked("DeDxM_UpLim",30.0)->setComment("A");
   desc.addUntracked("UseTemplateLayer",false)->setComment("A");
-  desc.addUntracked("ExitWhenGenMatchNotFound",false)
+  desc.addUntracked("ExitWhenGenMatchNotFound",true)
     ->setComment("For studies it could make sense to only look at tracks that have gen level matched equivalents, should be false for the main analysis");
   desc.addUntracked("DeDxSF_0",1.0)->setComment(", really controlled by the config for each era");
   desc.addUntracked("DeDxSF_1",1.035)->setComment("Scale factor to scale the pixel charge to match the strips scale, really controlled by the config for each era");
   desc.addUntracked("DeDxK",2.3)->setComment("K constant, really controlled by the config for each era");
   desc.addUntracked("DeDxC",3.17)->setComment("C constant, really controlled by the config for each era");
-  desc.addUntracked("SaveTree",0)->setComment("0: do not save tree, 6: everything is saved");
+  desc.addUntracked("SaveTree",6)->setComment("0: do not save tree, 6: everything is saved");
   desc.addUntracked<std::string>("DeDxTemplate","SUSYBSMAnalysis/HSCP/data/template_2017B.root")
     ->setComment("Norm charge vs path lenght vs module geometry templates for the strips detector, really controlled by the config for each era");
 
-
+  desc.addUntracked("plotsPreS_massSpectrumApproach",false)->setComment("false: provide plots at PreS step with the ionisation approach preselection; true: provide plots at PreS step with the mass spectrum approach preselection");
 
   desc.addUntracked<std::string>("TimeOffset","SUSYBSMAnalysis/HSCP/data/MuonTimeOffset.txt")
     ->setComment("MuonTimeOffset info"); // I'm not sure we need this
@@ -6377,9 +8185,11 @@ void Analyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
     ->setComment("Boolean for having the TrackToGenAssoc collection, only new sample have it");
   desc.addUntracked("CalcSystematics",false)->setComment("Boolean to decide whether we want to calculate the systematics");
 
+  desc.addUntracked("CalibrateTOF",true)->setComment("Boolean to decide whether we want to apply calibration on TOF");
+
   // Trigger choice
   // Choice of HLT_Mu50_v is to simplify analysis
-  desc.addUntracked("Trigger_Mu", std::vector<std::string>{"HLT_Mu50_v"})
+  desc.addUntracked("Trigger_Mu", std::vector<std::string>{"HLT_Mu50_v", "HLT_IsoMu24_v"})
 //  desc.addUntracked("Trigger_Mu", std::vector<std::string>{"HLT_Mu50_v","HLT_OldMu100_v","HLT_TkMu100_v"})
   ->setComment("Add the list of muon triggers");
 //  desc.addUntracked("Trigger_MET",  std::vector<std::string>{"HLT_PFMET120_PFMHT120_IDTight_v","HLT_PFHT500_PFMET100_PFMHT100_IDTight_v","HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v","HLT_MET105_IsoTrk50_v"})
@@ -6425,13 +8235,20 @@ void Analyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
   desc.addUntracked("GlobalMaxTOFErr",0.15)->setComment("Cut on error on muon TOF measurement");
   desc.addUntracked("GlobalMinTOF",1.0)->setComment("Cut on the min time-of-flight");
 
-  //GiStrips templates related parameters
+  // GiStrips templates related parameters
   desc.addUntracked("PileUpTreatment",true)->setComment("Boolean to decide whether we want to have pile up dependent templates or not");
-  desc.addUntracked("CreateGiTemplates",true)->setComment("Boolean to decide whether we create templates or not, true means we generate");
+  desc.addUntracked("CreateGiTemplates",false)->setComment("Boolean to decide whether we create templates or not, true means we generate");
   desc.addUntracked("CreateAndExitGitemplates",false)->setComment("Set to true if the only purpose is to create templates");
+  // TODO: This is not really needed, one could take PuBins_ and have its size-1 to be NbPuBins_
   desc.addUntracked("NbPileUpBins",5)->setComment("Number of pile up bins for GiStrips templates");
   desc.addUntracked("PileUpBins",  std::vector<int>{0,20,25,30,35,200})->setComment("Choice of Pile up bins");
 
+  desc.addUntracked("NominalEntries", std::vector<int>{57150,48348,46431,35876,46051})
+  ->setComment("List of #entries per PU bins, in the reference template used to obtain the parametrization of systematics uncertainty due to the statistics within the Gi templates, in a linear form Ax + B");
+
+  desc.addUntracked("GiSysParamOne",0.00103)->setComment("Parameter B from above linear fit");
+  desc.addUntracked("GiSysParamTwo",0.0775)->setComment("Parameter B from above linear fit");
+
  descriptions.add("HSCParticleAnalyzer",desc);
 }
 
@@ -6627,50 +8444,104 @@ float Analyzer::muonTriggerSFsForTrackEta(float eta, int syst) {
 //     Method for returning eta and beta dependent trigger syst factors
 //======================================================================
 float Analyzer::triggerSystFactor(float eta, float beta, int syst) {
-  float betaBins[17] = {0.06, 0.12, 0.17, 0.23, 0.28, 0.34, 0.39, 0.45, 0.5, 0.56, 0.61, 0.67, 0.72, 0.78, 0.83, 0.89, 1};
+  float betaBins[7] = {0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1};
   if (syst > 0) {
   // Up systematics
     if (fabs(eta) < 0.3) {
-      float scaleBins[17] = {0.0,0.98,1.04,0.98,1.02,0.98,1.01,0.97,1.11,1.05,1.0,0.98,0.99,0.96,1.0,1.05,0.94};
-      for (int i = 0; i < 17; i++) {
+      //EtaA
+      float scaleBins[7] = {1.0,2.3,1.4,1.1,1.0,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
         if (beta < betaBins[i]) {
           return scaleBins[i];
         }
       }
     } else if(fabs(eta) < 0.6) {
-      float scaleBins[17] = {0.0,0.99,1.0,0.99,1.0,1.0,1.01,1.01,1.04,1.06,1.07,0.98,0.97,0.99,1.0,0.96,1.01};
-      for (int i = 0; i < 17; i++) {
+      //EtaB
+      float scaleBins[7] = {1.0,2.3,2.2,1.2,1.0,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
+        if (beta < betaBins[i]) {
+          return scaleBins[i];
+        }
+      }
+    } else if(fabs(eta) < 0.9) {
+      //EtaC
+      float scaleBins[7] = {1.0,2.3,2.2,1.4,1.1,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
+        if (beta < betaBins[i]) {
+          return scaleBins[i];
+        }
+      }
+    } else if(fabs(eta) < 1.2) {
+      //EtaD
+      float scaleBins[7] = {1.0,2.2,2.2,2.1,1.2,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
+        if (beta < betaBins[i]) {
+          return scaleBins[i];
+        }
+      }
+    } else if(fabs(eta) < 2.1) {
+      //EtaE
+      float scaleBins[7] = {1.0,2.3,2.2,1.3,1.0,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
         if (beta < betaBins[i]) {
           return scaleBins[i];
         }
       }
     } else {
-      float scaleBins[17] = {0.0,0.99,0.9,1.01,1.04,1.01,1.02,0.99,0.97,1.13,1.08,1.1,0.96,0.95,0.98,0.98,0.98};
-      for (int i = 0; i < 17; i++) {
+      //EtaF
+      float scaleBins[7] = {1.0,2.3,2.2,1.1,1.0,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
         if (beta < betaBins[i]) {
           return scaleBins[i];
         }
       }
     }
   } else {
-  // Down systematics
+      // Down systematics
     if (fabs(eta) < 0.3) {
-      float scaleBins[17] = {0.0,0.49,0.98,0.97,0.93,1.01,1.02,0.97,0.96,0.73,0.78,0.86,0.93,0.95,0.97,1.06,};
-      for (int i = 0; i < 17; i++) {
+        //EtaA
+      float scaleBins[7] = {0.0,0.3,0.64,0.86,0.94,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
         if (beta < betaBins[i]) {
           return scaleBins[i];
         }
       }
     } else if(fabs(eta) < 0.6) {
-      float scaleBins[17] = {0.0,1.73,0.9,1.18,1.1,0.86,1.07,0.95,0.98,0.79,0.7,0.77,0.88,0.98,1.0,0.99,1.02};
-      for (int i = 0; i < 17; i++) {
+        //EtaB
+      float scaleBins[7] = {0.0,0.34,0.34,0.74,0.96,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
+        if (beta < betaBins[i]) {
+          return scaleBins[i];
+        }
+      }
+    } else if(fabs(eta) < 0.9) {
+        //EtaC
+      float scaleBins[7] = {0.0,0.4,0.4,0.59,0.85,0.96,1.0};
+      for (int i = 0; i < 7; i++) {
+        if (beta < betaBins[i]) {
+          return scaleBins[i];
+        }
+      }
+    } else if(fabs(eta) < 1.2) {
+        //EtaD
+      float scaleBins[7] = {0.0,0.37,0.37,0.37,0.7,0.95,1.0};
+      for (int i = 0; i < 7; i++) {
+        if (beta < betaBins[i]) {
+          return scaleBins[i];
+        }
+      }
+    } else if(fabs(eta) < 2.1) {
+        //EtaE
+      float scaleBins[7] = {0.0,0.37,0.38,0.72,0.95,0.98,0.98};
+      for (int i = 0; i < 7; i++) {
         if (beta < betaBins[i]) {
           return scaleBins[i];
         }
       }
     } else {
-      float scaleBins[17] = {0.0,0.0,0.95,1.1,0.81,1.11,1.14,0.95,0.99,0.95,0.79,0.7,0.73,0.86,0.96,1.0,0.99};
-      for (int i = 0; i < 17; i++) {
+        //EtaF
+      float scaleBins[7] = {0.0,0.45,0.45,0.8,0.99,1.0,1.0};
+      for (int i = 0; i < 7; i++) {
         if (beta < betaBins[i]) {
           return scaleBins[i];
         }
@@ -6679,6 +8550,113 @@ float Analyzer::triggerSystFactor(float eta, float beta, int syst) {
   }
   return 0;
 }
+//float Analyzer::triggerSystFactor(float eta, float beta, int syst) {
+//  float betaBins[7] = {0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1};
+//  if (syst > 0) {
+//      // Up systematics
+//    if (fabs(eta) < 0.3) {
+//        //EtaA
+//      float scaleBins[7] = {1.0,3.6,1.5,1.1,1.0,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else if(fabs(eta) < 0.6) {
+//        //EtaB
+//      float scaleBins[7] = {1.0,2.5,2.5,1.2,1.0,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else if(fabs(eta) < 0.9) {
+//        //EtaC
+//      float scaleBins[7] = {1.0,2.7,2.6,1.6,1.1,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else if(fabs(eta) < 1.2) {
+//        //EtaD
+//      float scaleBins[7] = {1.0,3.7,3.7,2.5,1.3,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else if(fabs(eta) < 2.1) {
+//        //EtaE
+//      float scaleBins[7] = {1.0,2.6,2.6,1.3,1.0,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else {
+//        //EtaF
+//      float scaleBins[7] = {1.0,2.6,2.6,1.1,1.0,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    }
+//  } else {
+//      // Down systematics
+//    if (fabs(eta) < 0.3) {
+//        //EtaA
+//      float scaleBins[7] = {0.0,0.19,0.56,0.83,0.93,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else if(fabs(eta) < 0.6) {
+//        //EtaB
+//      float scaleBins[7] = {0.0,0.25,0.26,0.67,0.93,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else if(fabs(eta) < 0.9) {
+//        //EtaC
+//      float scaleBins[7] = {0.0,0.34,0.34,0.51,0.80,0.96,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else if(fabs(eta) < 1.2) {
+//        //EtaD
+//      float scaleBins[7] = {0.0,0.0,0.27,0.27,0.63,0.93,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else if(fabs(eta) < 2.1) {
+//        //EtaE
+//      float scaleBins[7] = {0.0,0.34,0.34,0.67,0.94,0.98,0.98};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    } else {
+//        //EtaF
+//      float scaleBins[7] = {0.0,0.41,0.41,0.76,0.98,1.0,1.0};
+//      for (int i = 0; i < 7; i++) {
+//        if (beta < betaBins[i]) {
+//          return scaleBins[i];
+//        }
+//      }
+//    }
+//  }
+//  return 0;
+//}
 
 
 //=============================================================
diff --git a/Analyzer/plugins/Analyzer.h b/Analyzer/plugins/Analyzer.h
index e3e39b1..ae3d424 100644
--- a/Analyzer/plugins/Analyzer.h
+++ b/Analyzer/plugins/Analyzer.h
@@ -104,7 +104,14 @@
 #include "SimDataFormats/PileupSummaryInfo/interface/PileupSummaryInfo.h"
 
 #include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
+#include "CondFormats/L1TObjects/interface/L1GtTriggerMenu.h"
+#include "DataFormats/L1GlobalTrigger/interface/L1GlobalTriggerReadoutRecord.h"
+#include "L1Trigger/L1TGlobal/interface/L1TGlobalUtil.h"
+//#include "DataFormats/L1TGlobalTrigger/interface/GlobalAlgBlk.h"
+//#include "DataFormats/L1TGlobalTrigger/interface/L1TGlobalOutput.h"
 
+
+//
 // ~~~~~~~~~ user include files ~~~~~~~~~
 #define FWCORE
 
@@ -251,6 +258,8 @@ private:
   edm::EDGetTokenT<edm::Association<reco::GenParticleCollection>> trackToGenToken_;
   edm::EDGetTokenT<reco::PFCandidateCollection> pfCandToken_;
   edm::EDGetTokenT<GenEventInfoProduct> genEventToken_; // for reading generator weight
+  edm::EDGetTokenT<L1GlobalTriggerReadoutRecord> l1GtReadoutRecordToken_;
+
 
   edm::Handle<edm::ValueMap<bool> > electron_cutbasedID_decisions_veto;
   edm::Handle<edm::ValueMap<bool> > electron_cutbasedID_decisions_loose;
@@ -318,6 +327,8 @@ private:
   //Ias-quantiles update
   //Ias-quantiles { 40%, 50%, 60%, 70%, 80%, 90%, 99%, 99.9% }
   float Ias_quantiles[8]={ 0.014565036, 0.017987774, 0.022399569, 0.028518069, 0.038047370, 0.056746799, 0.13331622, 0.22018057 }; //data or signal -- IAS STRIP ONLY NO FSTRIP CUT
+  float Fpix_quantiles[12]={ 0., 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7,0.8,0.9,0.99,1.0 }; //data or signal -- F PIXEL ONLY
+ 
   //float Ias_quantiles[5]={ 0.037, 0.042, 0.048, 0.056, 0.066 }; //data or signal //WIP new quantiles determined with new preselection cuts
   //pT cut update 60-->70 GeV
   float pT_cut = 70;
@@ -359,6 +370,11 @@ private:
   bool puTreatment_, createGiTemplates_, createAndExitGitemplates_;
   int NbPuBins_;
   vector<int> PuBins_;
+ 
+  double GiSysParamOne_; 
+  double GiSysParamTwo_; 
+  vector<int> NominalEntries_;
+
   float GlobalMinNDOF = 8;            // cut on number of     DegreeOfFreedom used for muon TOF measurement
   float GlobalMinNDOFDT = 6;          // cut on number of DT  DegreeOfFreedom used for muon TOF measurement
   float GlobalMinNDOFCSC = 6;         // cut on number of CSC DegreeOfFreedom used for muon TOF measurement
@@ -371,6 +387,18 @@ private:
 
   //=============================================================
   Tuple* tuple;
+  Tuple* tuple_SigmaPt1_iso1_IhCut1_PtCut1;
+  Tuple* tuple_SigmaPt2_iso1_IhCut1_PtCut1;
+  Tuple* tuple_SigmaPt3_iso1_IhCut1_PtCut1;
+  Tuple* tuple_SigmaPt4_iso1_IhCut1_PtCut1;
+  Tuple* tuple_SigmaPt5_iso1_IhCut1_PtCut1;
+  Tuple* tuple_SigmaPt3_iso0_IhCut1_PtCut1;
+  Tuple* tuple_SigmaPt3_iso2_IhCut1_PtCut1;
+  Tuple* tuple_SigmaPt3_iso2_IhCut2_PtCut1;
+  Tuple* tuple_SigmaPt3_iso2_IhCut3_PtCut1;
+  Tuple* tuple_SigmaPt3_iso2_IhCut1_PtCut2;
+  Tuple* tuple_SigmaPt3_iso2_IhCut1_PtCut3;
+  Tuple* tuple_SigmaPt3_iso2_IhCut1_PtCut4;
   TupleMaker* tuple_maker;
   //=============================================================
 
@@ -394,6 +422,7 @@ private:
   unsigned int saveTree_;
 
   bool useClusterCleaning, isData, isBckg, isSignal;
+  bool plotsPreS_massSpectrumApproach_;
 
   unsigned int currentRun_ = 0;
 
@@ -409,7 +438,7 @@ private:
 
   TRandom3* RNG = nullptr;
   TRandom3* RNG2 = nullptr;
-  //TRandom3* RNG3 = nullptr;
+  TRandom3* RNG3 = nullptr;
   bool is2016;
   bool is2016G;
 
@@ -420,9 +449,30 @@ private:
   const std::string pixelCPE_;
   const int debug_;
   const bool hasMCMatch_,calcSyst_;
+  const bool calibrateTOF_;
   unsigned int trigInfo_;
 
   static constexpr const char* const MOD = "Analyzer";
-
+  int totMu22;
+  int totMu22or25;
+  int totLastMu;
+
+  int passMu22;
+  int passMu25;
+  int passLastMu;
+
+  int passMu22PostS;
+  int passMu25PostS;
+  int passLastMuPostS;
+
+  TEfficiency* effl1Mu22;
+  TEfficiency* effl1Mu22or25;
+  TEfficiency* effl1LastMu;
+  TEfficiency* effHltMu50;
+
+  TEfficiency* effl1Mu22PostS;
+  TEfficiency* effl1Mu22or25PostS;
+  TEfficiency* effl1LastMuPostS;
+  TEfficiency* effHltMu50PostS;
 };
 #endif
diff --git a/Analyzer/python/HSCParticleAnalyzer_cff.py b/Analyzer/python/HSCParticleAnalyzer_cff.py
deleted file mode 100644
index bf2603a..0000000
--- a/Analyzer/python/HSCParticleAnalyzer_cff.py
+++ /dev/null
@@ -1,34 +0,0 @@
-import FWCore.ParameterSet.Config as cms
-import os
-
-from SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi import HSCParticleAnalyzer as analyzer 
-PATH_TO_DATA = "{}/src/SUSYBSMAnalysis/HSCP/data".format(os.getenv('CMSSW_BASE'))
-
-''''
-analyzer_2016 = analyzer.clone(
-    DeDxSF_0        = cms.untracked.double(1.00000), #=1 if data
-    DeDxSF_1        = cms.untracked.double(1.0325), #2017 data
-    DeDxK           = cms.untracked.double(2.30),
-    DeDxC           = cms.untracked.double(3.17),
-)
-analyzer_2017 = analyzer.clone(
-    DeDxSF_0        = cms.untracked.double(1.00000), #=1 if data
-    DeDxSF_1        = cms.untracked.double(1.0325), #2017 data
-    DeDxK           = cms.untracked.double(2.30),
-    DeDxC           = cms.untracked.double(3.17),
-    DeDxTemplate    = cms.untracked.string("{}/template_2017B.root".format(PATH_TO_DATA))
-)
-analyzer_2018 = analyzer.Analyzer.HSCParticleAnalyzer_cfi.HSCParticleAnalyzer.clone(
-    DeDxSF_0        = cms.untracked.double(1.00000), #=1 if data
-    DeDxSF_1        = cms.untracked.double(1.0817), #2017 data
-    DeDxK           = cms.untracked.double(2.27),
-    DeDxC           = cms.untracked.double(3.16),
-    DeDxTemplate    = cms.untracked.string("{}/template_2017B.root".format(PATH_TO_DATA))
-)
-from Configuration.Eras.Era_Run2_2016_cff import Run2_2016
-from Configuration.Eras.Era_Run2_2017_cff import Run2_2017
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-Run2_2016.toReplaceWith(analyzer, analyzer_2016)
-Run2_2017.toReplaceWith(analyzer, analyzer_2017)
-Run2_2018.toReplaceWith(analyzer, analyzer_2018)
-'''
diff --git a/Analyzer/src/TrigToolsFuncs.cc b/Analyzer/src/TrigToolsFuncs.cc
index 4e21116..639a7ea 100644
--- a/Analyzer/src/TrigToolsFuncs.cc
+++ b/Analyzer/src/TrigToolsFuncs.cc
@@ -60,3 +60,19 @@ void trigtools::dumpTriggerEvent(const trigger::TriggerEvent& trigEvt)
   
 }
 
+
+bool trigtools::passedFilter(const trigger::TriggerEvent& trigEvt, const std::string& givenFilter)
+{
+  for(size_t filterNr=0;filterNr<trigEvt.sizeFilters();filterNr++){
+    const std::string filterName(trigEvt.filterTag(filterNr).label());  
+    const trigger::Keys& trigKeys = trigEvt.filterKeys(filterNr);//trigger::Keys is actually a vector<uint16_t> holding the position of trigger objects in the trigger collection passing the filter
+    if(filterName == givenFilter){
+      if(trigKeys.size()>0) return true;
+      else
+      {
+        return false;
+      }
+    } 
+  }
+  return false;
+}
diff --git a/Analyzer/test/CalibMacros/FitKandC.C b/Analyzer/test/CalibMacros/FitKandC.C
index a25c9e2..3276fb6 100644
--- a/Analyzer/test/CalibMacros/FitKandC.C
+++ b/Analyzer/test/CalibMacros/FitKandC.C
@@ -30,19 +30,19 @@
 
 using namespace std;
 
-void ExtractConstants(TH2D* input1, TH2D* input2, double* K, double* C, double* Kerr, double* Cerr, double MinRange = 1.0, double MaxRange = 1.6, double MassCenter = 1.875, double LeftMassMargin = 0.2, double RightMassMargin = 0.8, double yPionMax=4.2); // by default use protons
+void ExtractConstants(TH2F* input1, TH2F* input2, double* K, double* C, double* Kerr, double* Cerr, double MinRange = 1.0, double MaxRange = 1.6, double MassCenter = 1.875, double LeftMassMargin = 0.2, double RightMassMargin = 0.8, double yPionMax=4.2); // by default use protons
 double GetMass(double P, double I, double* K, double* C);
 void SaveCanvas(TCanvas* c, std::string path, std::string name, bool OnlyPPNG=false);
 TF1* GetMassLine(double M, double K, double C, bool left=false);
-void ExtracttheCConstants(TH2D* inputlong, double* C,  double* Cerr) ;
+void ExtracttheCConstants(TH2F* inputlong, double* C,  double* Cerr) ;
 void FitCalone(TString filename);
 void FitKandC_sig();
-void ExtractConstants_sig(TH2D* input, double* K, double* C, double* Kerr, double* Cerr, double MinRange = 1.0, double MaxRange = 1.6, double MassCenter = 1.875); // by default use protons
-void ExtractProj(TH2D* inputlong, TH2D* inputshort,double* K, double* C, 
+void ExtractConstants_sig(TH2F* input, double* K, double* C, double* Kerr, double* Cerr, double MinRange = 1.0, double MaxRange = 1.6, double MassCenter = 1.875); // by default use protons
+void ExtractProj(TH2F* inputlong, TH2F* inputshort,double* K, double* C, 
       double MinRange, double MaxRange, double MassCenter, double LeftMassMargin, double RightMassMargin, double yPionMax,
-      TH1D* FitResultpion,  TH1D* FitResult);
+      TH1F* FitResultpion,  TH1F* FitResult);
 void compaFits(TString filename1, TString filename2, double Kval, double Cval);
-void TestExtractConstants(TH2D* input1, TH2D* input2, double* K, double* C, double* N, double* Kerr, double* Cerr, double* Nerr, double MinRange = 1.0, double MaxRange = 1.6, double MassCenter = 1.875, double LeftMassMargin = 0.2, double RightMassMargin = 0.8, double yPionMax=4.2); // by default use protons
+void TestExtractConstants(TH2F* input1, TH2F* input2, double* K, double* C, double* N, double* Kerr, double* Cerr, double* Nerr, double MinRange = 1.0, double MaxRange = 1.6, double MassCenter = 1.875, double LeftMassMargin = 0.2, double RightMassMargin = 0.8, double yPionMax=4.2); // by default use protons
 TF1* TestGetMassLine(double M, double K, double C, double N, bool left=false);
 Double_t TestfitSpecial(Double_t *x, Double_t *par);
 Double_t TestfitSpecial2(Double_t *x, Double_t *par);
@@ -54,8 +54,8 @@ void FitKandC(TString filename){
    TFile* myfile;
    myfile = new TFile (filename);
 
-   TH2D* HdedxVsP_1fit;
-   TH2D* HdedxVsP_2fit;
+   TH2F* HdedxVsP_1fit;
+   TH2F* HdedxVsP_2fit;
    bool pixelOnly = false;
 //   myfile->cd();
 
@@ -63,19 +63,31 @@ void FitKandC(TString filename){
 // ---->>  THE HISTO (original name in ntuple : dEdX0noL1VsP_lowp)
 
 
+/*
    myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_1",HdedxVsP_1fit);
    myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_1",HdedxVsP_2fit);
-//
+*/
+/*
+   myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_noFcut1",HdedxVsP_1fit);
+   myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_noFcut1",HdedxVsP_2fit);
+*/
+
 /*
    myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_loose1",HdedxVsP_1fit);
    myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_loose1",HdedxVsP_2fit);
 */
 
   // Ih strip only
-  /*
+  
+/*
    myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_strip_VsP_1",HdedxVsP_1fit);
    myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_strip_VsP_1",HdedxVsP_2fit);
-  */
+*/
+
+   myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_strip_VsP_noFcut1",HdedxVsP_1fit);
+   myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_strip_VsP_noFcut1",HdedxVsP_2fit);
+
+ 
 
 //     if (!pixelOnly) ExtractConstants (HdedxVsP_2fit, HdedxVsP_1fit, &Ktmp, &Ctmp, &KerrTmp, &CerrTmp, 0.5, 1.5, 0.938, 0.2, 0.5, 4.2);
      if (!pixelOnly) ExtractConstants (HdedxVsP_2fit, HdedxVsP_1fit, &Ktmp, &Ctmp, &KerrTmp, &CerrTmp, 0.5, 1.2, 0.938, 0.2, 0.5, 4.2);
@@ -145,9 +157,9 @@ void FitKandC_sig(){
         myfile = new TFile ("testMass2400.root");
         cout << " opening testMass2400.root" << endl;
 
-   TH2D* HdedxVsP_2fit;
+   TH2F* HdedxVsP_2fit;
    myfile->cd();
-   HdedxVsP_2fit = (TH2D*)gROOT->FindObject("dEdXVsP");
+   HdedxVsP_2fit = (TH2F*)gROOT->FindObject("dEdXVsP");
    ExtractConstants_sig (HdedxVsP_2fit, &Ktmp, &Ctmp, &KerrTmp, &CerrTmp, 500., 3000., 2400);
 
    TCanvas* c2 = new TCanvas("c2", "c2", 800,600);
@@ -171,10 +183,9 @@ void FitCalone(TString filename){
    TFile* myfile;
    myfile = new TFile (filename);
 
-   TH2D* HdedxVsP_2fit;
-   myfile->cd();
-   HdedxVsP_2fit = (TH2D*)gROOT->FindObject("dEdX0noL1VsP_lowp2");
-   HdedxVsP_2fit->Rebin2D(2,1);
+   TH2F* HdedxVsP_2fit;
+   myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_1",HdedxVsP_2fit);
+//   HdedxVsP_2fit->Rebin2D(2,1);
 
    ExtracttheCConstants (HdedxVsP_2fit, &Ctmp, &CerrTmp);
 
@@ -193,41 +204,39 @@ void FitCalone(TString filename){
 }
 
 
-void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, double* Kerr, double* Cerr,
+void ExtractConstants(TH2F* inputlong, TH2F* inputshort,double* K, double* C, double* Kerr, double* Cerr,
       double MinRange, double MaxRange, double MassCenter, double LeftMassMargin, double RightMassMargin, double yPionMax)
 {
        char buffer[2048];
        bool hasConverged = false;
 
-//       for(unsigned int loop=0;loop<5 and !hasConverged; loop++){
-//       for(unsigned int loop=0;loop<8 and !hasConverged; loop++){
        for(unsigned int loop=0;loop<20 and !hasConverged; loop++){
-	      TH2D* inputnew = (TH2D*)inputshort->Clone("tempTH2D");
-	      TH2D* inputnewPion = (TH2D*)inputlong->Clone("tempTH2D2");
-//	      inputnew->Rebin2D(5,10);
+	      TH2F* inputnew = (TH2F*)inputshort->Clone("tempTH2F");
+	      TH2F* inputnewPion = (TH2F*)inputlong->Clone("tempTH2F2");
 	      for(int x=0;x<=inputnew->GetNbinsX()+1;x++){
 	      for(int y=0;y<=inputnew->GetNbinsY()+1;y++){
 		double Mass = GetMass(inputnew->GetXaxis()->GetBinCenter(x),inputnew->GetYaxis()->GetBinCenter(y), K, C);
 		if(isnan (float(Mass)) || Mass<MassCenter-(LeftMassMargin) || Mass>MassCenter+RightMassMargin){
 		  inputnew->SetBinContent(x,y,0);        
 		  inputnew->SetBinError(x,y,0);        
-		  //cout<<x<<"   "<<y<<endl;
 		}
+                if (inputnew->GetXaxis()->GetBinCenter(x)>5.) {
+		  inputnew->SetBinContent(x,y,0);        
+		  inputnew->SetBinError(x,y,0);        
+                }
 	      }}
 	      for(int x=0;x<=inputnewPion->GetNbinsX()+1;x++){
    	        for(int y=0;y<=inputnewPion->GetNbinsY()+1;y++){
-//                    if (inputnewPion->GetXaxis()->GetBinCenter(x)<10) inputnewPion->SetBinContent(x,y,0);
-                    if (inputnewPion->GetXaxis()->GetBinCenter(x)<2.5) {
+//                    if (inputnewPion->GetXaxis()->GetBinCenter(x)<2.5) {
+                    if (inputnewPion->GetXaxis()->GetBinCenter(x)<3. || inputnewPion->GetXaxis()->GetBinCenter(x)>5.) {
                           inputnewPion->SetBinContent(x,y,0);
                           inputnewPion->SetBinError(x,y,0);
                     }
-//                    if (inputnewPion->GetXaxis()->GetBinCenter(x)>10) inputnewPion->SetBinContent(x,y,0);
 	  	    if (inputnewPion->GetYaxis()->GetBinCenter(y)<2 || inputnewPion->GetYaxis()->GetBinCenter(y)>yPionMax) {
                           inputnewPion->SetBinContent(x,y,0);
                           inputnewPion->SetBinError(x,y,0);
                     }
 	      }}
-//	      inputnewPion->Rebin2D(10,10);
 
 	      
 
@@ -240,11 +249,6 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
 	      inputnew->SetAxisRange(0,15,"Y");
 	      inputnew->Draw("COLZ");
 
-	//      KaonLine->Draw("same");
-	//      ProtonLine->Draw("same");
-	//      DeuteronLine->Draw("same");
-	//      TritonLine->Draw("same");
-
 	      SaveCanvas(c1, "dirtest/", "dedxVsP");
 
 
@@ -258,7 +262,7 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
 	      SaveCanvas(c1, "dirtest/", "dedxVsP_pion");
 
 	      delete c1;
-               TH1D* FitResult = new TH1D("FitResult"       , "FitResult"      ,inputnew->GetXaxis()->GetNbins(),inputnew->GetXaxis()->GetXmin(),inputnew->GetXaxis()->GetXmax());
+               TH1F* FitResult = new TH1F("FitResult"       , "FitResult"      ,inputnew->GetXaxis()->GetNbins(),inputnew->GetXaxis()->GetXmin(),inputnew->GetXaxis()->GetXmax());
 	       FitResult->SetTitle("");
 	       FitResult->SetStats(kFALSE);  
 	       FitResult->GetXaxis()->SetTitle("P [GeV]");
@@ -266,7 +270,7 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
 	       FitResult->GetYaxis()->SetTitleOffset(1.20);
 	       FitResult->Reset();     
 
-	       TH1D* FitResultPion = new TH1D("FitResultPion", "FitResultPion" ,inputnewPion->GetXaxis()->GetNbins(),inputnewPion->GetXaxis()->GetXmin(),inputnewPion->GetXaxis()->GetXmax());
+	       TH1F* FitResultPion = new TH1F("FitResultPion", "FitResultPion" ,inputnewPion->GetXaxis()->GetNbins(),inputnewPion->GetXaxis()->GetXmin(),inputnewPion->GetXaxis()->GetXmax());
                FitResultPion->SetTitle("");
                FitResultPion->SetStats(kFALSE);
                FitResultPion->GetXaxis()->SetTitle("P [GeV]");
@@ -274,11 +278,13 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
                FitResultPion->GetYaxis()->SetTitleOffset(1.20);
                FitResultPion->Reset();
 
+
+
+
                for(int x=1;x<inputnewPion->GetNbinsX();x++){
-		  TH1D* ProjectionPion = (TH1D*)(inputnewPion->ProjectionY("proj",x,x))->Clone();
+		  TH1F* ProjectionPion = (TH1F*)(inputnewPion->ProjectionY("proj",x,x))->Clone();
                   if(ProjectionPion->Integral()<100)continue;
                   ProjectionPion->SetAxisRange(0.1,25,"X");
-//                  ProjectionPion->Sumw2();
                   ProjectionPion->Scale(1.0/ProjectionPion->Integral());
 
                   TF1* mygausPion = new TF1("mygausPion","gaus", 2., 15);
@@ -291,10 +297,9 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
 	       for(int x=1;x<inputnew->GetXaxis()->FindBin(1.5);x++){
 		  double P       = inputnew->GetXaxis()->GetBinCenter(x);
 	    
-		  TH1D* Projection = (TH1D*)(inputnew->ProjectionY("proj",x,x))->Clone();
+		  TH1F* Projection = (TH1F*)(inputnew->ProjectionY("proj",x,x))->Clone();
 		  if(Projection->Integral()<100)continue;
 		  Projection->SetAxisRange(0.1,25,"X");
-//		  Projection->Sumw2();
 		  Projection->Scale(1.0/Projection->Integral());
 
 		  TF1* mygaus = new TF1("mygaus","gaus", 2.5, 15);
@@ -306,32 +311,6 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
 		  mygaus->SetLineWidth(2);
 		  cout<<x<<"  "<<mygaus->GetParameter(1)<<endl;
 
-		  /*
-		  c1  = new TCanvas("canvas", "canvas", 600,600);
-		  Projection->Draw();
-		  Projection->SetTitle("");
-		  Projection->SetStats(kFALSE);
-		  Projection->GetXaxis()->SetTitle("dE/dx Estimator [MeV/cm]");
-		  Projection->GetYaxis()->SetTitle("#Entries");
-		  Projection->GetYaxis()->SetTitleOffset(1.30);
-		  Projection->SetAxisRange(1E-5,1.0,"Y");
-
-		  mygaus->Draw("same");
-
-		  TPaveText* stt = new TPaveText(0.55,0.82,0.79,0.92, "NDC");
-		  stt->SetFillColor(0);
-		  stt->SetTextAlign(31);
-		  sprintf(buffer,"Proton  #mu:%5.1fMeV/cm",mygaus->GetParameter(1));      stt->AddText(buffer);
-		  sprintf(buffer,"Proton  #sigma:%5.1fMeV/cm",mygaus->GetParameter(2));      stt->AddText(buffer);
-		  stt->Draw("same");
-
-		  //std::cout << "P = " << P << "  --> Proton dE/dx = " << mygaus->GetParameter(1) << endl;
-		  c1->SetLogy(true);
-		  sprintf(buffer,"%sProjectionFit_P%03i_%03i","fit/",(int)(100*FitResult->GetXaxis()->GetBinLowEdge(x)),(int)(100*FitResult->GetXaxis()->GetBinUpEdge(x)) );
-		  if(P>=MinRange && P<=MaxRange){SaveCanvas(c1,"dirtest/",buffer);}
-		  delete c1;
-                  delete stt;
-                  */
                   delete Projection;
                   delete mygaus;
 	       }
@@ -354,6 +333,50 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
 
 	       double prevConstants [] = {*K, *Kerr, *C, *Cerr};
 
+///
+//
+
+
+              cout << " ============== " << endl;
+              cout << " ============== " << endl;
+              cout << " ============== " << endl;
+              cout << " debug " << endl;
+              cout << " inputnewPion Entries " << inputnewPion->GetEntries() << "  integral " << inputnewPion->Integral() << endl;
+              TH1F* test_projX = (TH1F*)inputnewPion->ProjectionX("proj");
+              cout << " test_projX " << test_projX->GetEntries() << " mean " << test_projX->GetMean() << " RMS " << test_projX->GetRMS() << endl;
+
+	      TH1F* ProjectionPion = (TH1F*)inputnewPion->ProjectionY("proj");
+              cout << " ProjectionPion " << ProjectionPion->GetEntries()  ;
+              cout << " mean value " << ProjectionPion->GetMean() << " RMS " << ProjectionPion->GetRMS() << endl;
+              float xminval = ProjectionPion->GetMean() - 0.4;
+              float xmaxval = ProjectionPion->GetMean() + 0.4;
+              TF1* mygausPion = new TF1("mygausPion","gaus", xminval, xmaxval);
+              ProjectionPion->Fit("mygausPion","Q0 RME");
+	      cout<< " mygausPion  mean   " <<mygausPion->GetParameter(1) << "  "<<mygausPion->GetParError(1)<<endl;
+	      cout<< " mygausPion  sigma   " <<mygausPion->GetParameter(2)<<"  "<<mygausPion->GetParError(2)<<endl;
+
+	       *C    = mygausPion->GetParameter(1);
+	       *Cerr = mygausPion->GetParError(1);
+	       cout<< "FitResultPion : "<<*C<<"   " <<*Cerr<< " with sigma " << mygausPion->GetParameter(2) << endl;
+
+               gStyle->SetOptFit(1011);
+               ProjectionPion->Draw();
+               ProjectionPion->SetTitle("Fit C in range 3<p<5 GeV");
+               ProjectionPion->GetXaxis()->SetTitle("dE/dx Estimator [MeV/cm]");
+               mygausPion->Draw("same");
+	       sprintf(buffer,"%sFitPion","fit/");
+	       SaveCanvas(c1,"dirtest/",buffer);              
+
+
+
+
+
+//
+//
+//
+
+/*
+
 	       TF1* fitC =  new TF1("fitC","[0]", 1,25);
 	       fitC->SetParName(0,"C");
 	       fitC->SetParameter(0, 3.);
@@ -370,12 +393,17 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
 	       cout<< "FitResultPion : "<<*C<<"   " <<*Cerr<< endl;
                
                c1->SetLogz(1);
+               inputnewPion->SetAxisRange(2.8,5.2,"X");
+               inputnewPion->SetAxisRange(2.,4.5,"Y");
                inputnewPion->Draw("COLZ");
                FitResultPion->Draw("same");
                fitC->Draw("same");
 	       sprintf(buffer,"%sFitPion","fit/");
 	       SaveCanvas(c1,"dirtest/",buffer);              
 
+*/
+
+
 
 
                char fitfunc[2048];
@@ -436,14 +464,14 @@ void ExtractConstants(TH2D* inputlong, TH2D* inputshort,double* K, double* C, do
        }
 }
 
-void ExtracttheCConstants(TH2D* inputlong, double* C,  double* Cerr) 
+void ExtracttheCConstants(TH2F* inputlong, double* C,  double* Cerr) 
 {
        char buffer[2048];
 
-	      TH2D* inputnewPion = (TH2D*)inputlong->Clone("tempTH2D2");
+	      TH2F* inputnewPion = (TH2F*)inputlong->Clone("tempTH2F2");
 	      for(int x=0;x<=inputnewPion->GetNbinsX()+1;x++){
    	        for(int y=0;y<=inputnewPion->GetNbinsY()+1;y++){
-                    if (inputnewPion->GetXaxis()->GetBinCenter(x)<10) {
+                    if (inputnewPion->GetXaxis()->GetBinCenter(x)<3. || inputnewPion->GetXaxis()->GetBinCenter(x)>5.) {
                        inputnewPion->SetBinContent(x,y,0); 
                        inputnewPion->SetBinError(x,y,0); 
                     }
@@ -460,17 +488,19 @@ void ExtracttheCConstants(TH2D* inputlong, double* C,  double* Cerr)
 	      inputnewPion->SetStats(kFALSE);
 	      inputnewPion->GetXaxis()->SetTitle("track momentum (GeV)");
 	      inputnewPion->GetYaxis()->SetTitle("dE/dx (MeV/cm)");
-	      inputnewPion->SetAxisRange(0,25,"X");
-	      inputnewPion->SetAxisRange(0,15,"Y");
+	      inputnewPion->SetAxisRange(2.5,12.5,"X");
+	      inputnewPion->SetAxisRange(2,4.2,"Y");
               inputnewPion->Draw("COLZ");
+//              TProfile* pr1 = inputnewPion->ProfileX();
+//              pr1->Draw("same");
 
 	      SaveCanvas(c1, "dirtest/", "testCalone_region");
 
 
-	      TH1D* ProjectionPion = (TH1D*)inputnewPion->ProjectionY("proj");
+	      TH1F* ProjectionPion = (TH1F*)inputnewPion->ProjectionY("proj");
               cout << " mean value " << ProjectionPion->GetMean() << " RMS " << ProjectionPion->GetRMS() << endl;
-              float xminval = ProjectionPion->GetMean() - 0.5;
-              float xmaxval = ProjectionPion->GetMean() + 0.5;
+              float xminval = ProjectionPion->GetMean() - 0.4;
+              float xmaxval = ProjectionPion->GetMean() + 0.4;
 //              TF1* mygausPion = new TF1("mygausPion","gaus", 2., 5.);
               TF1* mygausPion = new TF1("mygausPion","gaus", xminval, xmaxval);
               ProjectionPion->Fit("mygausPion","Q0 RME");
@@ -488,14 +518,14 @@ void ExtracttheCConstants(TH2D* inputlong, double* C,  double* Cerr)
 
 }
 
-void ExtractConstants_sig(TH2D* input, double* K, double* C, double* Kerr, double* Cerr,
+void ExtractConstants_sig(TH2F* input, double* K, double* C, double* Kerr, double* Cerr,
       double MinRange, double MaxRange, double MassCenter)
 {
        char buffer[2048];
        bool hasConverged = false;
 
        for(unsigned int loop=0;loop<5 and !hasConverged; loop++){
-	      TH2D* inputnew = (TH2D*)input->Clone("tempTH2D");
+	      TH2F* inputnew = (TH2F*)input->Clone("tempTH2F");
 	      for(int x=1;x<=inputnew->GetNbinsX();x++){
 	       for(int y=1;y<=inputnew->GetNbinsY();y++){
                 if (inputnew->GetYaxis()->GetBinCenter(y)<5. && inputnew->GetXaxis()->GetBinCenter(x)<1000) {
@@ -519,7 +549,7 @@ void ExtractConstants_sig(TH2D* input, double* K, double* C, double* Kerr, doubl
 	      SaveCanvas(c1, "dirtest/", "Sig_dedxVsP");
 
 	      delete c1;
-               TH1D* FitResult = new TH1D("FitResult"       , "FitResult"      ,inputnew->GetXaxis()->GetNbins(),inputnew->GetXaxis()->GetXmin(),inputnew->GetXaxis()->GetXmax());
+               TH1F* FitResult = new TH1F("FitResult"       , "FitResult"      ,inputnew->GetXaxis()->GetNbins(),inputnew->GetXaxis()->GetXmin(),inputnew->GetXaxis()->GetXmax());
 	       FitResult->SetTitle("");
 	       FitResult->SetStats(kFALSE);  
 	       FitResult->GetXaxis()->SetTitle("P [GeV]");
@@ -530,7 +560,7 @@ void ExtractConstants_sig(TH2D* input, double* K, double* C, double* Kerr, doubl
 	       for(int x=inputnew->GetXaxis()->FindBin(MinRange);x<inputnew->GetXaxis()->FindBin(MaxRange);x++){
 		  double P       = inputnew->GetXaxis()->GetBinCenter(x);
 	    
-		  TH1D* Projection = (TH1D*)(inputnew->ProjectionY("proj",x,x))->Clone();
+		  TH1F* Projection = (TH1F*)(inputnew->ProjectionY("proj",x,x))->Clone();
 		  if(Projection->Integral()<100)continue;
 		  Projection->SetAxisRange(0.1,25,"X");
 		  Projection->Sumw2();
@@ -603,6 +633,7 @@ void ExtractConstants_sig(TH2D* input, double* K, double* C, double* Kerr, doubl
 	       myfit->SetLineColor(2);
 	       FitResult->Fit("myfit", "M R E I 0");
 	       myfit->SetRange(MinRange,MaxRange);
+	       c1->SetLogz(true);
                inputnew->Draw("COLZ");
                FitResult->Draw("same");
 	       myfit->Draw("same");
@@ -693,23 +724,23 @@ void compaFits(TString filename1, TString filename2, double Kval, double Cval){
    TFile* myfile2;
    myfile2 = new TFile (filename2);
 
-   TH2D* HdedxVsP_1fit1;
-   TH2D* HdedxVsP_2fit1;
-   TH2D* HdedxVsP_1fit2;
-   TH2D* HdedxVsP_2fit2;
-   TH1D* resuHdedxVsP_1fit1;
-   TH1D* resuHdedxVsP_2fit1 ;
-   TH1D* resuHdedxVsP_1fit2;
-   TH1D* resuHdedxVsP_2fit2 ;
+   TH2F* HdedxVsP_1fit1;
+   TH2F* HdedxVsP_2fit1;
+   TH2F* HdedxVsP_1fit2;
+   TH2F* HdedxVsP_2fit2;
+   TH1F* resuHdedxVsP_1fit1;
+   TH1F* resuHdedxVsP_2fit1 ;
+   TH1F* resuHdedxVsP_1fit2;
+   TH1F* resuHdedxVsP_2fit2 ;
 
 
    myfile1->cd();
 //    // Ih no drop, no L1
-   HdedxVsP_1fit1 = (TH2D*)gROOT->FindObject("dEdX0noL1VsP_lowp");
-   HdedxVsP_2fit1 = (TH2D*)gROOT->FindObject("dEdX0noL1VsP_lowp2");
+   HdedxVsP_1fit1 = (TH2F*)gROOT->FindObject("dEdX0noL1VsP_lowp");
+   HdedxVsP_2fit1 = (TH2F*)gROOT->FindObject("dEdX0noL1VsP_lowp2");
    HdedxVsP_2fit1->Rebin2D(2,1);
 
-   resuHdedxVsP_1fit1 = new TH1D("resuHdedxVsP_1fit1", "resuHdedxVsP_1fit1", HdedxVsP_1fit1->GetXaxis()->GetNbins(),HdedxVsP_1fit1->GetXaxis()->GetXmin(),HdedxVsP_1fit1->GetXaxis()->GetXmax());
+   resuHdedxVsP_1fit1 = new TH1F("resuHdedxVsP_1fit1", "resuHdedxVsP_1fit1", HdedxVsP_1fit1->GetXaxis()->GetNbins(),HdedxVsP_1fit1->GetXaxis()->GetXmin(),HdedxVsP_1fit1->GetXaxis()->GetXmax());
 	       resuHdedxVsP_1fit1->SetTitle("");
 	       resuHdedxVsP_1fit1->SetStats(kFALSE);  
 	       resuHdedxVsP_1fit1->GetXaxis()->SetTitle("P [GeV]");
@@ -717,7 +748,7 @@ void compaFits(TString filename1, TString filename2, double Kval, double Cval){
 	       resuHdedxVsP_1fit1->GetYaxis()->SetTitleOffset(1.20);
 	       resuHdedxVsP_1fit1->Reset();     
 
-  resuHdedxVsP_2fit1 = new TH1D("resuHdedxVsP_2fit1", "resuHdedxVsP_2fit1" ,HdedxVsP_2fit1->GetXaxis()->GetNbins(),HdedxVsP_2fit1->GetXaxis()->GetXmin(),HdedxVsP_2fit1->GetXaxis()->GetXmax());
+  resuHdedxVsP_2fit1 = new TH1F("resuHdedxVsP_2fit1", "resuHdedxVsP_2fit1" ,HdedxVsP_2fit1->GetXaxis()->GetNbins(),HdedxVsP_2fit1->GetXaxis()->GetXmin(),HdedxVsP_2fit1->GetXaxis()->GetXmax());
                resuHdedxVsP_2fit1->SetTitle("");
                resuHdedxVsP_2fit1->SetStats(kFALSE);
                resuHdedxVsP_2fit1->GetXaxis()->SetTitle("P [GeV]");
@@ -729,10 +760,10 @@ void compaFits(TString filename1, TString filename2, double Kval, double Cval){
    ExtractProj(HdedxVsP_2fit1, HdedxVsP_1fit1, &Kval, &Cval, 0.5, 1.5, 0.938, 0.2, 0.5, 4.2,resuHdedxVsP_2fit1,resuHdedxVsP_1fit1);
 
    myfile2->cd();
-   HdedxVsP_1fit2 = (TH2D*)gROOT->FindObject("dEdX0noL1VsP_lowp");
-   HdedxVsP_2fit2 = (TH2D*)gROOT->FindObject("dEdX0noL1VsP_lowp2");
+   HdedxVsP_1fit2 = (TH2F*)gROOT->FindObject("dEdX0noL1VsP_lowp");
+   HdedxVsP_2fit2 = (TH2F*)gROOT->FindObject("dEdX0noL1VsP_lowp2");
    HdedxVsP_2fit2->Rebin2D(2,1);
-   resuHdedxVsP_1fit2 = new TH1D("resuHdedxVsP_1fit2"       , "resuHdedxVsP_1fit2"      ,HdedxVsP_1fit2->GetXaxis()->GetNbins(),HdedxVsP_1fit2->GetXaxis()->GetXmin(),HdedxVsP_1fit2->GetXaxis()->GetXmax());
+   resuHdedxVsP_1fit2 = new TH1F("resuHdedxVsP_1fit2"       , "resuHdedxVsP_1fit2"      ,HdedxVsP_1fit2->GetXaxis()->GetNbins(),HdedxVsP_1fit2->GetXaxis()->GetXmin(),HdedxVsP_1fit2->GetXaxis()->GetXmax());
 	       resuHdedxVsP_1fit2->SetTitle("");
 	       resuHdedxVsP_1fit2->SetStats(kFALSE);  
 	       resuHdedxVsP_1fit2->GetXaxis()->SetTitle("P [GeV]");
@@ -740,7 +771,7 @@ void compaFits(TString filename1, TString filename2, double Kval, double Cval){
 	       resuHdedxVsP_1fit2->GetYaxis()->SetTitleOffset(1.20);
 	       resuHdedxVsP_1fit2->Reset();     
 
-   resuHdedxVsP_2fit2 = new TH1D("resuHdedxVsP_2fit2", "resuHdedxVsP_2fit2" ,HdedxVsP_2fit2->GetXaxis()->GetNbins(),HdedxVsP_2fit2->GetXaxis()->GetXmin(),HdedxVsP_2fit2->GetXaxis()->GetXmax());
+   resuHdedxVsP_2fit2 = new TH1F("resuHdedxVsP_2fit2", "resuHdedxVsP_2fit2" ,HdedxVsP_2fit2->GetXaxis()->GetNbins(),HdedxVsP_2fit2->GetXaxis()->GetXmin(),HdedxVsP_2fit2->GetXaxis()->GetXmax());
                resuHdedxVsP_2fit2->SetTitle("");
                resuHdedxVsP_2fit2->SetStats(kFALSE);
                resuHdedxVsP_2fit2->GetXaxis()->SetTitle("P [GeV]");
@@ -812,12 +843,12 @@ void compaFits(TString filename1, TString filename2, double Kval, double Cval){
 
 }
 
-void ExtractProj(TH2D* inputlong, TH2D* inputshort,double* K, double* C, 
+void ExtractProj(TH2F* inputlong, TH2F* inputshort,double* K, double* C, 
       double MinRange, double MaxRange, double MassCenter, double LeftMassMargin, double RightMassMargin, double yPionMax,
-      TH1D* FitResultPion,  TH1D* FitResult)
+      TH1F* FitResultPion,  TH1F* FitResult)
 {
-	      TH2D* inputnew = (TH2D*)inputshort->Clone("tempTH2D");
-	      TH2D* inputnewPion = (TH2D*)inputlong->Clone("tempTH2D2");
+	      TH2F* inputnew = (TH2F*)inputshort->Clone("tempTH2F");
+	      TH2F* inputnewPion = (TH2F*)inputlong->Clone("tempTH2F2");
 	      for(int x=0;x<=inputnew->GetNbinsX()+1;x++){
 	      for(int y=0;y<=inputnew->GetNbinsY()+1;y++){
 		double Mass = GetMass(inputnew->GetXaxis()->GetBinCenter(x),inputnew->GetYaxis()->GetBinCenter(y), K, C);
@@ -841,7 +872,7 @@ void ExtractProj(TH2D* inputlong, TH2D* inputshort,double* K, double* C,
 	      
 
                for(int x=1;x<inputnewPion->GetNbinsX();x++){
-		  TH1D* ProjectionPion = (TH1D*)(inputnewPion->ProjectionY("proj",x,x))->Clone();
+		  TH1F* ProjectionPion = (TH1F*)(inputnewPion->ProjectionY("proj",x,x))->Clone();
                   if(ProjectionPion->Integral()<100)continue;
                   ProjectionPion->SetAxisRange(0.1,25,"X");
 //                  ProjectionPion->Sumw2();
@@ -859,7 +890,7 @@ void ExtractProj(TH2D* inputlong, TH2D* inputshort,double* K, double* C,
 	       for(int x=1;x<inputnew->GetXaxis()->FindBin(1.5);x++){
 		  double P       = inputnew->GetXaxis()->GetBinCenter(x);
 	    
-		  TH1D* Projection = (TH1D*)(inputnew->ProjectionY("proj",x,x))->Clone();
+		  TH1F* Projection = (TH1F*)(inputnew->ProjectionY("proj",x,x))->Clone();
 		  if(Projection->Integral()<100)continue;
 		  Projection->SetAxisRange(0.1,25,"X");
 //		  Projection->Sumw2();
@@ -887,12 +918,12 @@ void TestFitKandC(TString filename){
    TFile* myfile;
    myfile = new TFile (filename);
 
-   TH2D* HdedxVsP_1fit;
-   TH2D* HdedxVsP_2fit;
+   TH2F* HdedxVsP_1fit;
+   TH2F* HdedxVsP_2fit;
    myfile->cd();
 //    // Ih no drop, no L1
-   HdedxVsP_1fit = (TH2D*)gROOT->FindObject("dEdX0noL1VsP_lowp");
-   HdedxVsP_2fit = (TH2D*)gROOT->FindObject("dEdX0noL1VsP_lowp2");
+   myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_strip_VsP_noFcut1",HdedxVsP_1fit);
+   myfile->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_strip_VsP_noFcut1",HdedxVsP_2fit);
    HdedxVsP_2fit->Rebin2D(2,1);
    TestExtractConstants (HdedxVsP_2fit, HdedxVsP_1fit, &Ktmp, &Ctmp, &Ntmp, &KerrTmp, &CerrTmp, &NerrTmp, 0.5, 20., 0.938, 0.2, 0.5, 4.2);
    
@@ -936,15 +967,15 @@ void TestFitKandC(TString filename){
     SaveCanvas(c3, "dirtest/", "TestdedxVsP_lines_logZ"); 
 
 }
-void TestExtractConstants(TH2D* inputlong, TH2D* inputshort, double* K, double* C, double* N, double* Kerr, double* Cerr, double* Nerr, double MinRange , double MaxRange , double MassCenter , double LeftMassMargin , double RightMassMargin , double yPionMax) {
+void TestExtractConstants(TH2F* inputlong, TH2F* inputshort, double* K, double* C, double* N, double* Kerr, double* Cerr, double* Nerr, double MinRange , double MaxRange , double MassCenter , double LeftMassMargin , double RightMassMargin , double yPionMax) {
        char buffer[2048];
        bool hasConverged = false;
 
        for(unsigned int loop=0;loop<8 and !hasConverged; loop++){
-              TH2D* Myinputnew = new TH2D("Myinputnew","Myinputnew", 250,0,25, 80, 2.,10.);
+              TH2F* Myinputnew = new TH2F("Myinputnew","Myinputnew", 250,0,25, 80, 2.,10.);
               Myinputnew->Sumw2();
-	      TH2D* inputnew = (TH2D*)inputshort->Clone("tempTH2D");
-	      TH2D* inputnewPion = (TH2D*)inputlong->Clone("tempTH2D2");
+	      TH2F* inputnew = (TH2F*)inputshort->Clone("tempTH2F");
+	      TH2F* inputnewPion = (TH2F*)inputlong->Clone("tempTH2F2");
 	      for(int x=0;x<=inputnew->GetNbinsX()+1;x++){
 	      for(int y=0;y<=inputnew->GetNbinsY()+1;y++){
 		double Mass = GetMass(inputnew->GetXaxis()->GetBinCenter(x),inputnew->GetYaxis()->GetBinCenter(y), K, C);
@@ -992,7 +1023,7 @@ void TestExtractConstants(TH2D* inputlong, TH2D* inputshort, double* K, double*
 	      SaveCanvas(c1, "dirtest/", "testMyinputnew");
 
 	      delete c1;
-               TH1D* FitResult = new TH1D("FitResult"       , "FitResult"      ,Myinputnew->GetXaxis()->GetNbins(),Myinputnew->GetXaxis()->GetXmin(),Myinputnew->GetXaxis()->GetXmax());
+               TH1F* FitResult = new TH1F("FitResult"       , "FitResult"      ,Myinputnew->GetXaxis()->GetNbins(),Myinputnew->GetXaxis()->GetXmin(),Myinputnew->GetXaxis()->GetXmax());
 	       FitResult->SetTitle("");
 	       FitResult->SetStats(kFALSE);  
 	       FitResult->GetXaxis()->SetTitle("P [GeV]");
@@ -1001,7 +1032,7 @@ void TestExtractConstants(TH2D* inputlong, TH2D* inputshort, double* K, double*
 	       FitResult->Reset();     
 
                for(int x=1;x<Myinputnew->GetNbinsX();x++){
-		  TH1D* ProjectionPion = (TH1D*)(Myinputnew->ProjectionY("proj",x,x))->Clone();
+		  TH1F* ProjectionPion = (TH1F*)(Myinputnew->ProjectionY("proj",x,x))->Clone();
                   if(ProjectionPion->Integral()<100)continue;
                   ProjectionPion->SetAxisRange(0.1,25,"X");
                   ProjectionPion->Scale(1.0/ProjectionPion->Integral());
@@ -1143,17 +1174,17 @@ void CaroBla(){
    TFile* myfilemc1 = new TFile ("crab_Analysis_2018_AllBackground_CodeV42p6_v1.root");
    TFile* myfilemc2 = new TFile ("crab_Analysis_2018_AllWJets_CodeV42p6_v1.root");
 
-   TH2D* HdedxVsP_1fit1;
-   TH2D* HdedxVsP_1fit2;
-   TH2D* HdedxVsP_1fit3;
-   TH2D* HdedxVsP_1fit4;
-   TH2D* HdedxVsP_1fit5;
-   TH2D* HdedxVsP_1fit6;
-   TH2D* HdedxVsP_1fit7;
-   TH2D* HdedxVsP_1fit8;
-   TH2D* HdedxVsP_1fit9;
-   TH2D* HdedxVsP_1fitmc1;
-   TH2D* HdedxVsP_1fitmc2;
+   TH2F* HdedxVsP_1fit1;
+   TH2F* HdedxVsP_1fit2;
+   TH2F* HdedxVsP_1fit3;
+   TH2F* HdedxVsP_1fit4;
+   TH2F* HdedxVsP_1fit5;
+   TH2F* HdedxVsP_1fit6;
+   TH2F* HdedxVsP_1fit7;
+   TH2F* HdedxVsP_1fit8;
+   TH2F* HdedxVsP_1fit9;
+   TH2F* HdedxVsP_1fitmc1;
+   TH2F* HdedxVsP_1fitmc2;
    myfile1->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_1",HdedxVsP_1fit1);
    myfile2->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_1",HdedxVsP_1fit2);
    myfile3->GetObject("HSCParticleAnalyzer/BaseName/K_and_C_Ih_noL1_VsP_1",HdedxVsP_1fit3);
diff --git a/Analyzer/test/Tamas/42p8_2018D.py b/Analyzer/test/Tamas/42p8_2018D.py
deleted file mode 100644
index cd987db..0000000
--- a/Analyzer/test/Tamas/42p8_2018D.py
+++ /dev/null
@@ -1,35 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_MET_Run2018D_CodeV42p8_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_master_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 4000
-config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2018D_v2.root','MuonTimeOffset.txt']
-config.JobType.pyCfgParams = ['GTAG=106X_dataRun2_v36', 'SAMPLE=isData', 'YEAR=2018', 'ERA=D']
-
-config.section_('Data')
-config.Data.inputDataset = '/MET/Run2018D-15Feb2022_UL2018-v1/AOD'
-config.Data.splitting = 'LumiBased'
-config.Data.unitsPerJob = 50
-config.Data.lumiMask = 'https://cms-service-dqmdc.web.cern.ch/CAF/certification/Collisions18/13TeV/Legacy_2018/Cert_314472-325175_13TeV_Legacy2018_Collisions18_JSON.txt'
-#MASZK2017config.Data.lumiMask = 'https://cms-service-dqmdc.web.cern.ch/CAF/certification/Collisions17/13TeV/Legacy_2017/Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt'
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.partialDataset = True
-config.Data.publication = False
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*', 'T3_US_FNALLPC','T2_HU_Budapest','T2_FR_*', 'T2_UK_London_IC']
-config.Site.storageSite = 'T2_HU_Budapest'
-#config.Site.storageSite = 'T3_US_FNALLPC'
-  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/4crab_MySignal_Template_wPorobQ.py b/Analyzer/test/Tamas/4crab_MySignal_Template_wPorobQ.py
deleted file mode 100644
index 07c11b9..0000000
--- a/Analyzer/test/Tamas/4crab_MySignal_Template_wPorobQ.py
+++ /dev/null
@@ -1,37 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.transferLogs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-#config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/4crab_MySignal_Template_woProbQ.py b/Analyzer/test/Tamas/4crab_MySignal_Template_woProbQ.py
deleted file mode 100644
index bd587d9..0000000
--- a/Analyzer/test/Tamas/4crab_MySignal_Template_woProbQ.py
+++ /dev/null
@@ -1,40 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-#config.General.requestName = 'Analysis_2018_MyHSCPgluino_NoRew_NoCust_M_1800_woProbQ_CodeV27p0_v1'
-config.General.requestName = 'Analysis_2018_MyHSCPgluino_NoRew_M_1800_woProbQ_CodeV27p5_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.transferLogs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDBS = 'phys03'
-#config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3-0bfbad649d32c05924b5bfd4b5874292/USER'
-config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_NoRew_v1-e88ed05559facf15902f2fe2f6141103/USER'
-#config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_NoRewGT_v1-a007e86beae864f0107e60af996b4558/USER'
-#config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3-0bfbad649d32c05924b5bfd4b5874292/USER'
-config.Data.splitting = 'LumiBased'
-#config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
diff --git a/Analyzer/test/Tamas/4crab_Signal_Template_woProbQ.py b/Analyzer/test/Tamas/4crab_Signal_Template_woProbQ.py
deleted file mode 100644
index d56cd3f..0000000
--- a/Analyzer/test/Tamas/4crab_Signal_Template_woProbQ.py
+++ /dev/null
@@ -1,37 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.transferLogs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
diff --git a/Analyzer/test/Tamas/4crab_Signal_Template_woProbQ_TAPERECALL.py b/Analyzer/test/Tamas/4crab_Signal_Template_woProbQ_TAPERECALL.py
deleted file mode 100644
index f8da503..0000000
--- a/Analyzer/test/Tamas/4crab_Signal_Template_woProbQ_TAPERECALL.py
+++ /dev/null
@@ -1,36 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.instance = 'preprod'
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/4crab_Template_Data_woProbQ.py b/Analyzer/test/Tamas/4crab_Template_Data_woProbQ.py
deleted file mode 100644
index fc3a5ae..0000000
--- a/Analyzer/test/Tamas/4crab_Template_Data_woProbQ.py
+++ /dev/null
@@ -1,32 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 4000
-config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2017PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-config.Data.splitting = 'LumiBased'
-config.Data.unitsPerJob = 50
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-config.Site.blacklist = ['T2_US_Nebraska']
-#config.Site.storageSite = 'T3_US_FNALLPC'
-  
diff --git a/Analyzer/test/Tamas/4crab_Template_Data_woProbQ_2018A.py b/Analyzer/test/Tamas/4crab_Template_Data_woProbQ_2018A.py
deleted file mode 100644
index 790384e..0000000
--- a/Analyzer/test/Tamas/4crab_Template_Data_woProbQ_2018A.py
+++ /dev/null
@@ -1,32 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-config.Data.splitting = 'LumiBased'
-config.Data.unitsPerJob = 50
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '315257-316380'
-#config.Data.lumiMask 
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/4crab_Template_Data_woProbQ_2018D.py b/Analyzer/test/Tamas/4crab_Template_Data_woProbQ_2018D.py
deleted file mode 100644
index 8dca88d..0000000
--- a/Analyzer/test/Tamas/4crab_Template_Data_woProbQ_2018D.py
+++ /dev/null
@@ -1,33 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-config.Data.splitting = 'LumiBased'
-config.Data.unitsPerJob = 50
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '320500-321436'
-#config.Data.lumiMask = ?
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-#config.Site.storageSite = 'T3_US_FNALLPC'
-  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/4crab_Template_TTbar_woProbQ.py b/Analyzer/test/Tamas/4crab_Template_TTbar_woProbQ.py
deleted file mode 100644
index 189a5a1..0000000
--- a/Analyzer/test/Tamas/4crab_Template_TTbar_woProbQ.py
+++ /dev/null
@@ -1,37 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 800
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.blacklist = ['T2_US_Nebraska']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
diff --git a/Analyzer/test/Tamas/4crab_Template_woProbQ.py b/Analyzer/test/Tamas/4crab_Template_woProbQ.py
deleted file mode 100644
index 0f8506a..0000000
--- a/Analyzer/test/Tamas/4crab_Template_woProbQ.py
+++ /dev/null
@@ -1,37 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_wProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.instance = 'preprod'
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['dEdxTemplate_harm2_SO_in_noC_CCC_MG_2017B.root','CMS_GeomTree.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/4crab_Template_woProbQ_Debug.py b/Analyzer/test/Tamas/4crab_Template_woProbQ_Debug.py
deleted file mode 100644
index e19cc65..0000000
--- a/Analyzer/test/Tamas/4crab_Template_woProbQ_Debug.py
+++ /dev/null
@@ -1,37 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.transferLogs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 4000
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 800
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
diff --git a/Analyzer/test/Tamas/4crab_Template_woProbQ_maxStat.py b/Analyzer/test/Tamas/4crab_Template_woProbQ_maxStat.py
deleted file mode 100644
index 62a063d..0000000
--- a/Analyzer/test/Tamas/4crab_Template_woProbQ_maxStat.py
+++ /dev/null
@@ -1,36 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 4000
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 2000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
diff --git a/Analyzer/test/Tamas/4crab_toSubmit_woProbQ.py b/Analyzer/test/Tamas/4crab_toSubmit_woProbQ.py
deleted file mode 100644
index cea98ae..0000000
--- a/Analyzer/test/Tamas/4crab_toSubmit_woProbQ.py
+++ /dev/null
@@ -1,36 +0,0 @@
-
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_WJetsToLNu_1J_woProbQ_CodeV29p3_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 4000
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = '/WJetsToLNu_1J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 2000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  
diff --git a/Analyzer/test/Tamas/Compare2DPlots_woProbQ.py b/Analyzer/test/Tamas/Compare2DPlots_woProbQ.py
deleted file mode 100644
index 5825c1c..0000000
--- a/Analyzer/test/Tamas/Compare2DPlots_woProbQ.py
+++ /dev/null
@@ -1,209 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-#BinNumber = sys.argv[2]
-#bin = int(BinNumber)
-bin = 3
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-SingleMuon = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-AllTTbar = ROOT.TFile.Open("crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root")
-AllWJets = ROOT.TFile.Open("crab_Analysis_2018_AllWJets_woProbQ_CodeV"+codeVersion+"_v1.root")
-AllQCD   = ROOT.TFile.Open("crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
-SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2400_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-  
-if os.path.exists(os.path.dirname("2DComparrison_CodeV"+codeVersion)):
-  os.system("mkdir 2DComparrison_woProbQ_CodeV"+codeVersion)
-
-dirs = []
-for i in range(0, AllTTbar.GetListOfKeys().GetEntries()):
-  dirname = AllTTbar.GetListOfKeys().At(i).GetName()
-  curr_dir = AllTTbar.GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = AllTTbar.GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = AllTTbar.Get(newname)
-#          print(keyname2)
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if not obj.InheritsFrom("TObject"): continue
-
-          if (obj.GetEntries() == 0 ) : continue
-          
-          if not (obj.ClassName() == "TH2F") : continue
-          
-          if ("CutFlow" in keyname2) : continue
-          if ("Gen" in keyname2) : continue
-          if not ("PostPre" in keyname2) : continue
-          
-          SingleMuonHisto = SingleMuon.Get(newname)
-          SingleMuonHisto.SetMarkerStyle(20)
-          SingleMuonHisto.SetMarkerColor(1)
-          SingleMuonHisto.SetLineColor(1)
-        
-          AllTTbarHisto = AllTTbar.Get(newname)
-          AllTTbarHisto.SetMarkerStyle(20)
-          AllTTbarHisto.SetMarkerColor(2)
-          AllTTbarHisto.SetLineColor(2)
-          
-          AllWJetsHisto = AllWJets.Get(newname)
-          AllWJetsHisto.SetMarkerStyle(20)
-          AllWJetsHisto.SetMarkerColor(3)
-          AllWJetsHisto.SetLineColor(3)
-          
-          AllQCDHisto = AllQCD.Get(newname)
-          AllQCDHisto.SetMarkerStyle(20)
-          AllQCDHisto.SetMarkerColor(4)
-          AllQCDHisto.SetLineColor(4)
-          
-          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
-          SelectedSignalSamples1Histo.SetMarkerStyle(20)
-          SelectedSignalSamples1Histo.SetMarkerColor(6)
-          SelectedSignalSamples1Histo.SetLineColor(6)
-          
-          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
-          SelectedSignalSamples2Histo.SetMarkerStyle(20)
-          SelectedSignalSamples2Histo.SetMarkerColor(7)
-          SelectedSignalSamples2Histo.SetLineColor(7)
-          
-          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-          legend.SetTextFont(42)
-          legend.SetTextSize(0.02)
-          legend.SetBorderSize(1);
-          legend.SetBorderSize(0);
-          legend.SetLineColor(1);
-          legend.SetLineStyle(1);
-          legend.SetLineWidth(1);
-          legend.SetFillColor(0);
-          legend.SetFillStyle(1001);
-          if (keyname2.find("Vs")==-1) :
-            axisXTitle = keyname2[keyname2.find("_")+1:]
-            axisYTitle = "Tracks/bin"
-          else :
-            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Vs")]
-            axisYTitle = keyname2[keyname2.find("Vs")+2:]
-          
-          legend.AddEntry(AllTTbarHisto,"TTBar","LP")
-          legend.AddEntry(AllWJetsHisto,"WJets","LP")
-          legend.AddEntry(AllQCDHisto,"mu-QCD p_{T}={50,inf}","LP")
-#          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018C","LP")
-          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
-          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPgluino M=2400 GeV", "LP")
-
-
-          
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex4 = ROOT.TLatex()
-          if ("PrePreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"Before pre-selection")
-          elif ("N1" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After N-1 selection")
-          elif ("PostPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After pre-selection")
-            
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.0285);
-          tex4.SetLineWidth(2);
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-#          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
-
-          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
-          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-
-          AllTTbarHisto.Draw("P")
-          AllTTbarHisto.SetStats(0)
-          AllTTbarHisto.SetTitle("")
-          AllTTbarHisto.GetXaxis().SetTitleSize(0.05)
-          AllTTbarHisto.GetXaxis().SetTitleOffset(1)
-          AllTTbarHisto.GetXaxis().SetTitle(axisXTitle)
-          AllTTbarHisto.GetYaxis().SetTitleSize(0.05)
-#          AllTTbarHisto.GetYaxis().SetTitleOffset(1)
-          AllTTbarHisto.GetYaxis().SetTitle(axisYTitle)
-          AllWJetsHisto.Draw("SAMEP")
-          AllQCDHisto.Draw("SAMEP")
-#          SingleMuonHisto.Draw("SAMEP")
-          SelectedSignalSamples1Histo.Draw("SAMEP")
-          SelectedSignalSamples2Histo.Draw("SAMEP")
-
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex4.Draw("SAME")
-          tex5.Draw("SAME")
-
-          cstackedSummedBackground.SaveAs("2DComparrison_CodeV"+codeVersion+"/"+keyname2+".png")
-          
-#---------------------------------------------------------------------------------------------
-#          # now let's do everything again but on a log Y scale
-#          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
-#          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
-#          cstackedSummedBackground.SetLogy()
-#
-#          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
-#            stackedSummedBackground.SetMinimum(0.0001)
-#          else:
-#            stackedSummedBackground.SetMinimum(0.000000000000000001)
-#
-#          if ("CutFlow" in keyname2 or "pfType" in keyname2):
-#            stackedNormSummedBackground.Draw("HISTO")
-#            stackedNormSummedBackground.SetTitle("")
-#            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
-#            stackedNormSummedBackground.GetXaxis().SetTitle("")
-#            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
-#            stackedNormSummedBackground.SetMaximum(12)
-#          else :
-#            stackedSummedBackground.Draw("HISTO")
-#            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
-#            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
-#            stackedSummedBackground.SetMaximum(max*1000)
-#          SingleMuonHisto.Draw("SAMEP")
-#          SelectedSignalSamples1Histo.Draw("SAME")
-#          SelectedSignalSamples2Histo.Draw("SAME")
-#          legend.Draw("SAME")
-#          tex2.Draw("SAME")
-#          tex3.Draw("SAME")
-#          tex4.Draw("SAME")
-#          tex5.Draw("SAME")
-#
-#          cstackedSummedBackground.SaveAs("2DComparrison_CodeV"+codeVersion+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/CompareQCD.py b/Analyzer/test/Tamas/CompareQCD.py
deleted file mode 100644
index 687246c..0000000
--- a/Analyzer/test/Tamas/CompareQCD.py
+++ /dev/null
@@ -1,253 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-QCDBinnedSamples = [
-#"crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_wProbQ_CodeV18p2_v1.root",
-#"crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_wProbQ_CodeV18p2_v1.root",
-#"crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_wProbQ_CodeV18p2_v1.root",
-"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
-]
-
-QCDFlat = ROOT.TFile.Open("crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_wProbQ_CodeV18p9_v1.root")
-
-intLumi = 50.0 #137.0
-
-SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2017_wProbQ_CodeV19p2_v1.root")
-
-MET = ROOT.TFile.Open("crab_Analysis_MET_Run2017_wProbQ_CodeV19p2_v1.root")
-
-crossSectionArray = [
-# 2797000.0, #+-8800.0, 2018_QCD_Pt-15To20_MuEnrichedPt5
-# 2518000.0, #+-7940.0, 2018_QCD_Pt-20To30_MuEnrichedPt5
-# 1361000.0, #+-4263.0, 2018_QCD_Pt-30To50_MuEnrichedPt5
- 377800.0, #+-1184.0, 2018_QCD_Pt-50To80_MuEnrichedPt5
- 88620.0, #+-275.1, 2018_QCD_Pt-80To120_MuEnrichedPt5
- 21070.0, #+-65.28, 2018_QCD_Pt-120To170_MuEnrichedPt5
- 7019.0, #+-21.61, 2018_QCD_Pt-170To300_MuEnrichedPt5
- 622.4, #+-1.891, 2018_QCD_Pt-300To470_MuEnrichedPt5
- 58.86, #+-0.1776, 2018_QCD_Pt-470To600_MuEnrichedPt5
- 18.22, #+-0.05471, 2018_QCD_Pt-600To800_MuEnrichedPt5
- 3.25, #+-0.0148, 2018_QCD_Pt-600To800_MuEnrichedPt5
- 1.613, #+-, 2018_QCD_Pt-1000_MuEnrichedPt5
-]
-
-fileInArray = []
-for sample in QCDBinnedSamples:
-  fileInArray.append(ROOT.TFile.Open(sample))
-  
-
-crossSectionFlat = 239000.0	# +-755.8
-nEventsPostTrigArrayFlat = QCDFlat.Get("analyzer/BaseName/TotalTE").Integral()
-
-
-dirs = []
-for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
-  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
-  curr_dir = fileInArray[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = fileInArray[0].Get(newname)
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if ("Total" in keyname2) :
-            continue
-          if obj.InheritsFrom("TObject"):
-              if not os.path.exists(os.path.dirname("CompareQCDv4/")): os.makedirs(os.path.dirname("CompareQCDv4/"))
-              if (obj.GetEntries() == 0 ) :
-                continue
-              if (obj.ClassName() == "TH1F"): # and "BS_" in keyname2):
-                legMass =  ROOT.TLegend(.55,.60,.80,.89,"","brNDC")
-                legMass.SetTextFont(42)
-                legMass.SetTextSize(0.02)
-                legMass.SetBorderSize(1);
-                legMass.SetBorderSize(0);
-                legMass.SetLineColor(1);
-                legMass.SetLineStyle(1);
-                legMass.SetLineWidth(1);
-                legMass.SetFillColor(0);
-                legMass.SetFillStyle(1001);
-                
-                stackPlots = ROOT.THStack("stackPlots","");
-                histoArray = []
-                nEventsPostTrigArray = []
-                for fileIn in fileInArray:
-                  histoArray.append(fileIn.Get(newname))
-                  nEvetsPostTrig = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
-                  nEventsPostTrigArray.append(nEvetsPostTrig)
-                for index in range(0, len(histoArray)):
-                  
-                  histoArray[index].Scale(intLumi*crossSectionArray[index]/nEventsPostTrigArray[index])
-#                  finalHisto.Add(histoArray[index],intLumi*crossSectionArray[index]/nEventsPostTrigArray[index])
-                  stackPlots.Add(histoArray[index])
-                  legMass.AddEntry(histoArray[index],QCDBinnedSamples[index][14:QCDBinnedSamples[index].find("MuEnrichedPt5_")-1],"LP")
-                  indexNew = -1
-                  if (index>-1):
-                    indexNew = index+2
-                  if (indexNew==10) :
-                    indexNew = 30
-                  elif (indexNew==11) :
-                    indexNew = 40
-                  elif (indexNew==12) :
-                    indexNew = 41
-                  elif (indexNew==13) :
-                    indexNew = 42
-                  elif (indexNew==14) :
-                    indexNew = 46
-                  histoArray[index].SetLineColor(indexNew)
-                  histoArray[index].SetFillColor(indexNew)
-
-                QCDFlatHisto = QCDFlat.Get(newname)
-                QCDFlatHisto.SetMarkerStyle(20)
-                SingleMuonHisto = SingleMuon.Get(newname)
-                SingleMuonHisto.SetMarkerStyle(20)
-                SingleMuonHisto.SetMarkerColor(4)
-                SingleMuonHisto.SetLineColor(4)
-                METHisto = MET.Get(newname)
-                METHisto.SetMarkerStyle(20)
-                METHisto.SetMarkerColor(5)
-                METHisto.SetLineColor(5)
-                
-                if (keyname2 == "BS_MPt") :
-                  stackPlots.Draw()
-                  stackPlots.GetXaxis().SetRangeUser(0,1000)
-                  QCDFlatHisto.GetXaxis().SetRangeUser(0,1000)
-                
-                stackPlotsTemp = stackPlots.Clone()
-                if (keyname2== "CutFlow") :
-                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedTT.GetXaxis().SetBinLabel(1,"Trigger")
-                histoSummedTT.GetXaxis().SetBinLabel(2,"Eta")
-                histoSummedTT.GetXaxis().SetBinLabel(3,"pT")
-                histoSummedTT.GetXaxis().SetBinLabel(4,"NumHits")
-                histoSummedTT.GetXaxis().SetBinLabel(5,"NumPixHits")
-                histoSummedTT.GetXaxis().SetBinLabel(6,"ValidFract")
-                histoSummedTT.GetXaxis().SetBinLabel(7,"NumDeDx")
-                histoSummedTT.GetXaxis().SetBinLabel(8,"ProbXY")
-                histoSummedTT.GetXaxis().SetBinLabel(9,"HighPurity")
-                histoSummedTT.GetXaxis().SetBinLabel(10,"Chi2oDOF")
-                histoSummedTT.GetXaxis().SetBinLabel(11,"EoP")
-                histoSummedTT.GetXaxis().SetBinLabel(12,"dz")
-                histoSummedTT.GetXaxis().SetBinLabel(13,"dxy")
-                histoSummedTT.GetXaxis().SetBinLabel(14,"pTerrOverpT")
-                histoSummedTT.GetXaxis().SetBinLabel(15,"TKIso")
-                histoSummedTT.GetXaxis().SetBinLabel(16,"MiniIso")
-                histoSummedTT.GetXaxis().SetBinLabel(17,"MassT")
-                histoSummedTT.GetXaxis().SetBinLabel(18,"Ih")
-                histoSummedTT.GetXaxis().SetBinLabel(19,"ProbQ")
-                histoSummedTT.GetXaxis().SetBinLabel(20,"MuStat")
-                histoSummedTT.GetXaxis().SetBinLabel(21,"PhiTOF")
-                histoSummedTT.GetXaxis().SetBinLabel(22,"EtaTOF")
-              elif (keyname2== "CutFlowProbQFirst") :
-                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedTT.GetXaxis().SetBinLabel(1,"Trigger")
-                histoSummedTT.GetXaxis().SetBinLabel(2,"Eta")
-                histoSummedTT.GetXaxis().SetBinLabel(3,"pT")
-                histoSummedTT.GetXaxis().SetBinLabel(4,"ProbQ")
-                histoSummedTT.GetXaxis().SetBinLabel(5,"NumHits")
-                histoSummedTT.GetXaxis().SetBinLabel(6,"NumPixHits")
-                histoSummedTT.GetXaxis().SetBinLabel(7,"ValidFract")
-                histoSummedTT.GetXaxis().SetBinLabel(8,"NumDeDx")
-                histoSummedTT.GetXaxis().SetBinLabel(9,"ProbXY")
-                histoSummedTT.GetXaxis().SetBinLabel(10,"HighPurity")
-                histoSummedTT.GetXaxis().SetBinLabel(11,"Chi2oDOF")
-                histoSummedTT.GetXaxis().SetBinLabel(12,"EoP")
-                histoSummedTT.GetXaxis().SetBinLabel(13,"dz")
-                histoSummedTT.GetXaxis().SetBinLabel(14,"dxy")
-                histoSummedTT.GetXaxis().SetBinLabel(15,"pTerrOverpT")
-                histoSummedTT.GetXaxis().SetBinLabel(16,"TKIso")
-                histoSummedTT.GetXaxis().SetBinLabel(17,"MiniIso")
-                histoSummedTT.GetXaxis().SetBinLabel(18,"MassT")
-                histoSummedTT.GetXaxis().SetBinLabel(19,"Ih")
-                histoSummedTT.GetXaxis().SetBinLabel(20,"MuStat")
-                histoSummedTT.GetXaxis().SetBinLabel(21,"PhiTOF")
-                histoSummedTT.GetXaxis().SetBinLabel(22,"EtaTOF")
-              elif (keyname2== "pfType") :
-                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedTT.GetXaxis().SetBinLabel(1,"AllTracks")
-                histoSummedTT.GetXaxis().SetBinLabel(2,"PFtracks")
-                histoSummedTT.GetXaxis().SetBinLabel(3,"isElectron")
-                histoSummedTT.GetXaxis().SetBinLabel(4,"isMuon")
-                histoSummedTT.GetXaxis().SetBinLabel(5,"isPhoton")
-                histoSummedTT.GetXaxis().SetBinLabel(6,"isChHadron")
-                histoSummedTT.GetXaxis().SetBinLabel(7,"isNeutHadron")
-                histoSummedTT.GetXaxis().SetBinLabel(8,"isUndefined")
-                histoSummedTT.GetXaxis().SetBinLabel(9,"else")
-                
-                QCDFlatHisto.Scale(intLumi*crossSectionFlat/nEventsPostTrigArrayFlat)
-                
-                legMass.AddEntry(QCDFlatHisto,"2018_QCD_Pt-20ToInf_MuPt15","LP")
-                legMass.AddEntry(SingleMuonHisto,"SingleMuon-EraC","LP")
-                legMass.AddEntry(METHisto,"MET-EraC","LP")
-                
-                tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-                #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-                tex2.SetNDC();
-                tex2.SetTextFont(61);
-                tex2.SetTextSize(0.0675);
-                tex2.SetLineWidth(2);
-
-                tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
-                #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-                #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-                tex3.SetNDC();
-                tex3.SetTextFont(52);
-                tex3.SetTextSize(0.0485);
-                tex3.SetLineWidth(2);
-
-                cstackPlotsString = 'cstackPlots'+str(j)
-                cstackPlots = ROOT.TCanvas(cstackPlotsString, cstackPlotsString, 800,800)
-                stackPlots.Draw("HIST")
-                QCDFlatHisto.Draw("SAME")
-                SingleMuonHisto.Draw("SAME")
-                METHisto.Draw("SAME")
-#                stackPlots.SetTitle("")
-                stackPlots.GetXaxis().SetTitleSize(0.05)
-                stackPlots.GetXaxis().SetTitleOffset(1)
-                stackPlots.GetYaxis().SetRangeUser(0,1)
-#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
-#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
-#                stackPlots.GetYaxis().SetTitleSize(0.05)
-#                stackPlots.GetYaxis().SetTitleOffset(1)
-
-                max1 = numpy.maximum(stackPlots.GetMaximum(),QCDFlatHisto.GetMaximum())
-                max2 = numpy.maximum(SingleMuonHisto.GetMaximum(),METHisto.GetMaximum())
-                max = numpy.maximum(max1,max2)
-                stackPlots.SetMaximum(max*1.5)
-                stackPlots.SetMinimum(0.001)
-                legMass.Draw("SAME")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-
-                cstackPlots.SaveAs("CompareQCDv4/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/CompareStackedBcg.py b/Analyzer/test/Tamas/CompareStackedBcg.py
deleted file mode 100644
index 64582e6..0000000
--- a/Analyzer/test/Tamas/CompareStackedBcg.py
+++ /dev/null
@@ -1,413 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog binNumber")
-(opt,args) = parser.parse_args()
-
-BinNumber = sys.argv[1]
-bin = int(BinNumber)
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BackgroundSamples = [
-#"crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-#"crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-#"crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_WJetsToLNu_0J_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_TTToHadronic_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_TTToSemiLeptonic_wProbQ_CodeV19p1_v1.root",
-"crab_Analysis_2018_TTTo2L2Nu_wProbQ_CodeV19p1_v1.root",
-]
-
-QCDFlat = ROOT.TFile.Open("crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_wProbQ_CodeV18p9_v1.root")
-SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2017_wProbQ_CodeV19p2_v1.root")
-MET = ROOT.TFile.Open("crab_Analysis_MET_Run2017_wProbQ_CodeV19p2_v1.root")
-
-intLumi = 10.0 # 137.0
-
-crossSectionArray = [
-# QCD_Pt-20_MuEnrichedPt15_TuneCP5_13TeV-pythia8, 239000.0 +-	755.8
-# 2797000.0, #+-8800.0, 2018_QCD_Pt-15To20_MuEnrichedPt5
-# 2518000.0, #+-7940.0, 2018_QCD_Pt-20To30_MuEnrichedPt5
-# 1361000.0, #+-4263.0, 2018_QCD_Pt-30To50_MuEnrichedPt5
- 377800.0, #+-1184.0, 2018_QCD_Pt-50To80_MuEnrichedPt5
- 88620.0, #+-275.1, 2018_QCD_Pt-80To120_MuEnrichedPt5
- 21070.0, #+-65.28, 2018_QCD_Pt-120To170_MuEnrichedPt5
- 7019.0, #+-21.61, 2018_QCD_Pt-170To300_MuEnrichedPt5
- 622.4, #+-1.891, 2018_QCD_Pt-300To470_MuEnrichedPt5
- 58.86, #+-0.1776, 2018_QCD_Pt-470To600_MuEnrichedPt5
- 18.22, #+-0.05471, 2018_QCD_Pt-600To800_MuEnrichedPt5
- 3.25, #+-0.0148, 2018_QCD_Pt-600To800_MuEnrichedPt5
- 1.613, #+-, 2018_QCD_Pt-1000_MuEnrichedPt5
- 53330.0, #+-	90.89, WJetsToLNu
- 687.1, # or 377.96, # or , TTtoHadronic
- 687.1, # or 65.34, TTtoSemiLeptonic
- 88.29, # or 687.1, TTto2L2N
-]
-
-crossSectionFlat = 239000.0	# +-755.8
-
-fileInArray = []
-for sample in BackgroundSamples:
-  fileInArray.append(ROOT.TFile.Open(sample))
-  
-
-nEventsPostTrigArrayFlat = QCDFlat.Get("analyzer/BaseName/TotalTE").Integral()
-
-
-dirs = []
-for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
-  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
-  curr_dir = fileInArray[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = fileInArray[0].Get(newname)
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if obj.InheritsFrom("TObject"):
-              if not os.path.exists(os.path.dirname("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/")): os.makedirs(os.path.dirname("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/"))
-              if (obj.GetEntries() == 0 ) :
-                continue
-              if ("Total" in keyname2) :
-                continue
-                
-              stackPlotsTemp = ROOT.THStack("stackPlotsTemp","")
-              stackPlots = ROOT.THStack("stackPlots","")
-              stackedSummedQCD = ROOT.THStack("stackedSummedQCD","")
-              stackedSummedTT = ROOT.THStack("stackedSummedTT","")
-              stackedSummedW = ROOT.THStack("stackedSummedW","")
-              histoSummedQCD = ROOT.TH1F() #"histoSummedQCD")
-              histoSummedTT = ROOT.TH1F() #"histoSummedTT")
-              histoSummedW = ROOT.TH1F() #"histoSummedW")
-              
-              legMass =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-              legMass.SetTextFont(42)
-              legMass.SetTextSize(0.02)
-              legMass.SetBorderSize(1);
-              legMass.SetBorderSize(0);
-              legMass.SetLineColor(1);
-              legMass.SetLineStyle(1);
-              legMass.SetLineWidth(1);
-              legMass.SetFillColor(0);
-              legMass.SetFillStyle(1001);
-              
-#              print("------------------------------------------------------------")
-              if (obj.ClassName() == "TH1F") : # and "BS_" in keyname2):
-                # array to contain a specific (keyname2) histogram for all samples
-                histoArray = []
-                nEventsPostTrigArray = []
-                for fileIn in fileInArray:
-                  histoArray.append(fileIn.Get(newname))
-                  nEvetsPostTrig = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
-                  nEventsPostTrigArray.append(nEvetsPostTrig)
-                for index in range(0, len(histoArray)):
-                  histoArray[index].Scale(intLumi*crossSectionArray[index]/nEventsPostTrigArray[index])
-                  if (index < 9) :
-                    stackedSummedQCD.Add(histoArray[index])
-                  elif (index>=9 and index<10) :
-                    stackedSummedW.Add(histoArray[index])
-                  elif (index>=10 and index<13) :
-                    stackedSummedTT.Add(histoArray[index])
-                    
-              elif ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "genrecopT" or "BS_" in keyname2)):
-                histo2DArray = []
-                nEventsPostTrig2DArray = []
-                for fileIn in fileInArray:
-                  if (fileIn.Get(newname).GetEntries() == 0 ) :
-                    continue
-                  fileIn.Get(newname).ProjectionY(newname,bin,bin,"e").Draw()
-                  histo2DArray.append(fileIn.Get(newname).ProjectionY(newname,bin,bin,"e"))
-                  nEvetsPostTrig2D = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
-                  nEventsPostTrig2DArray.append(nEvetsPostTrig2D)
-                for index in range(0, len(histo2DArray)):
-                  histo2DArray[index].Scale(intLumi*crossSectionArray[index]/nEventsPostTrig2DArray[index])
-                  if (index < 9) :
-                    stackedSummedQCD.Add(histo2DArray[index])
-                  elif (index>=9 and index<10) :
-                    stackedSummedW.Add(histo2DArray[index])
-                  elif (index>=10 and index<13) :
-                    stackedSummedTT.Add(histo2DArray[index])
-                
-                
-#              elif (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
-#                histo3DArray = []
-#                nEventsPostTrig3DArray = []
-#                for fileIn in fileInArray:
-#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
-#                      continue
-#                  fileIn.Get(newname).GetXaxis().SetRange(bin,bin)
-#                  fileIn.Get(newname).Project3DProfile("ZY").Draw()
-#                  histo3DArray.append(fileIn.Get(newname).Project3DProfile("ZY"))
-#                  nEvetsPostTrig3D = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
-#                  nEventsPostTrig3DArray.append(nEvetsPostTrig3D)
-#                for index in range(0, len(histo3DArray)):
-#                  histo3DArray[index].Scale(intLumi*crossSectionArray[index]/nEventsPostTrig3DArray[index])
-#                  if (index < 9) :
-#                    stackedSummedQCD.Add(histo3DArray[index])
-#                  elif (index>=9 and index<10) :
-#                    stackedSummedW.Add(histo3DArray[index])
-#                  elif (index>=10 and index<13) :
-#                    stackedSummedTT.Add(histo3DArray[index])
-              else :
-                continue
-
-#               convert stacks to (summed) histos
-              histoSummedQCD = stackedSummedQCD.GetStack().Last()
-              histoSummedTT = stackedSummedTT.GetStack().Last()
-              histoSummedW = stackedSummedW.GetStack().Last()
-              
-              stackPlotsTemp.Add(histoSummedTT)
-              histoSummedTT.SetMarkerStyle(20)
-              histoSummedTT.SetLineColor(3)
-              histoSummedTT.SetFillColor(3)
-              histoSummedTT.SetMarkerColor(3)
-              
-              stackPlotsTemp.Add(histoSummedW)
-              histoSummedW.SetMarkerStyle(20)
-              histoSummedW.SetLineColor(4)
-              histoSummedW.SetFillColor(4)
-              histoSummedW.SetMarkerColor(4)
-              
-              
-              stackPlotsTemp.Add(histoSummedQCD)
-              histoSummedQCD.SetMarkerStyle(20)
-              histoSummedQCD.SetLineColor(2)
-              histoSummedQCD.SetFillColor(2)
-              histoSummedQCD.SetMarkerColor(2)
-              
-              QCDFlatHisto = QCDFlat.Get(newname)
-              SingleMuonHisto = SingleMuon.Get(newname)
-              METHisto = MET.Get(newname)
-              
-              QCDFlatHisto.Draw()
-              SingleMuonHisto.Draw()
-              METHisto.Draw()
-              QCDFlatHisto.SetMarkerStyle(20)
-              QCDFlatHisto.SetMarkerColor(1)
-              QCDFlatHisto.SetLineColor(1)
-              
-              QCDFlatHisto.Scale(intLumi*crossSectionFlat/nEventsPostTrigArrayFlat)
-              
-              SingleMuonHisto.SetMarkerStyle(20)
-              SingleMuonHisto.SetMarkerColor(4)
-              SingleMuonHisto.SetLineColor(4)
-              
-              METHisto.SetMarkerStyle(20)
-              METHisto.SetMarkerColor(5)
-              METHisto.SetLineColor(5)
-              
-              
-              if (keyname2== "CutFlow") :
-                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
-                QCDFlatHisto.Scale(1/QCDFlatHisto.GetMaximum())
-                SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-                METHisto.Scale(1/METHisto.GetMaximum())
-                histoSummedTT.GetXaxis().SetBinLabel(1,"Trigger")
-                histoSummedTT.GetXaxis().SetBinLabel(2,"Eta")
-                histoSummedTT.GetXaxis().SetBinLabel(3,"pT")
-                histoSummedTT.GetXaxis().SetBinLabel(4,"NumHits")
-                histoSummedTT.GetXaxis().SetBinLabel(5,"NumPixHits")
-                histoSummedTT.GetXaxis().SetBinLabel(6,"ValidFract")
-                histoSummedTT.GetXaxis().SetBinLabel(7,"NumDeDx")
-                histoSummedTT.GetXaxis().SetBinLabel(8,"ProbXY")
-                histoSummedTT.GetXaxis().SetBinLabel(9,"HighPurity")
-                histoSummedTT.GetXaxis().SetBinLabel(10,"Chi2oDOF")
-                histoSummedTT.GetXaxis().SetBinLabel(11,"EoP")
-                histoSummedTT.GetXaxis().SetBinLabel(12,"dz")
-                histoSummedTT.GetXaxis().SetBinLabel(13,"dxy")
-                histoSummedTT.GetXaxis().SetBinLabel(14,"pTerrOverpT")
-                histoSummedTT.GetXaxis().SetBinLabel(15,"TKIso")
-                histoSummedTT.GetXaxis().SetBinLabel(16,"MiniIso")
-                histoSummedTT.GetXaxis().SetBinLabel(17,"MassT")
-                histoSummedTT.GetXaxis().SetBinLabel(18,"Ih")
-                histoSummedTT.GetXaxis().SetBinLabel(19,"ProbQ")
-                histoSummedTT.GetXaxis().SetBinLabel(20,"MuStat")
-                histoSummedTT.GetXaxis().SetBinLabel(21,"PhiTOF")
-                histoSummedTT.GetXaxis().SetBinLabel(22,"EtaTOF")
-              elif (keyname2== "CutFlowProbQFirst") :
-                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
-                QCDFlatHisto.Scale(1/QCDFlatHisto.GetMaximum())
-                SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-                METHisto.Scale(1/METHisto.GetMaximum())
-                histoSummedTT.GetXaxis().SetBinLabel(1,"Trigger")
-                histoSummedTT.GetXaxis().SetBinLabel(2,"Eta")
-                histoSummedTT.GetXaxis().SetBinLabel(3,"pT")
-                histoSummedTT.GetXaxis().SetBinLabel(4,"ProbQ")
-                histoSummedTT.GetXaxis().SetBinLabel(5,"NumHits")
-                histoSummedTT.GetXaxis().SetBinLabel(6,"NumPixHits")
-                histoSummedTT.GetXaxis().SetBinLabel(7,"ValidFract")
-                histoSummedTT.GetXaxis().SetBinLabel(8,"NumDeDx")
-                histoSummedTT.GetXaxis().SetBinLabel(9,"ProbXY")
-                histoSummedTT.GetXaxis().SetBinLabel(10,"HighPurity")
-                histoSummedTT.GetXaxis().SetBinLabel(11,"Chi2oDOF")
-                histoSummedTT.GetXaxis().SetBinLabel(12,"EoP")
-                histoSummedTT.GetXaxis().SetBinLabel(13,"dz")
-                histoSummedTT.GetXaxis().SetBinLabel(14,"dxy")
-                histoSummedTT.GetXaxis().SetBinLabel(15,"pTerrOverpT")
-                histoSummedTT.GetXaxis().SetBinLabel(16,"TKIso")
-                histoSummedTT.GetXaxis().SetBinLabel(17,"MiniIso")
-                histoSummedTT.GetXaxis().SetBinLabel(18,"MassT")
-                histoSummedTT.GetXaxis().SetBinLabel(19,"Ih")
-                histoSummedTT.GetXaxis().SetBinLabel(20,"MuStat")
-                histoSummedTT.GetXaxis().SetBinLabel(21,"PhiTOF")
-                histoSummedTT.GetXaxis().SetBinLabel(22,"EtaTOF")
-              elif (keyname2== "pfType") :
-                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
-                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
-                QCDFlatHisto.Scale(1/QCDFlatHisto.GetMaximum())
-                SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-                METHisto.Scale(1/METHisto.GetMaximum())
-                histoSummedTT.GetXaxis().SetBinLabel(1,"AllTracks")
-                histoSummedTT.GetXaxis().SetBinLabel(2,"PFtracks")
-                histoSummedTT.GetXaxis().SetBinLabel(3,"isElectron")
-                histoSummedTT.GetXaxis().SetBinLabel(4,"isMuon")
-                histoSummedTT.GetXaxis().SetBinLabel(5,"isPhoton")
-                histoSummedTT.GetXaxis().SetBinLabel(6,"isChHadron")
-                histoSummedTT.GetXaxis().SetBinLabel(7,"isNeutHadron")
-                histoSummedTT.GetXaxis().SetBinLabel(8,"isUndefined")
-                histoSummedTT.GetXaxis().SetBinLabel(9,"else")
-              else :
-                histoSummedTT.GetYaxis().SetTitle("Tracks/bin")
-                histoSummedTT.GetXaxis().SetTitle(keyname2)
-                
-              stackPlots.Add(histoSummedTT)
-              stackPlots.Add(histoSummedW)
-              stackPlots.Add(histoSummedQCD)
-            
-              legMass.AddEntry(histoSummedQCD,"#mu-enriched QCD (full pt)","LP")
-              legMass.AddEntry(histoSummedW,"W process","LP")
-              legMass.AddEntry(histoSummedTT,"ttbar process","LP")
-              legMass.AddEntry(QCDFlatHisto,"2018_QCD_Pt-20ToInf_MuPt15","LP")
-              legMass.AddEntry(SingleMuonHisto,"SingleMuon-EraC","LP")
-              legMass.AddEntry(METHisto,"MET-EraC","LP")
-              
-              tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-              #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-              tex2.SetNDC();
-              tex2.SetTextFont(61);
-              tex2.SetTextSize(0.0675);
-              tex2.SetLineWidth(2);
-
-              tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
-              #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-              #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-              tex3.SetNDC();
-              tex3.SetTextFont(52);
-              tex3.SetTextSize(0.0485);
-              tex3.SetLineWidth(2);
-
-              cstackPlotsString = 'cstackPlots'+str(j)
-              cstackPlots = ROOT.TCanvas(cstackPlotsString, cstackPlotsString, 800,800)
-              
-              stackPlots.Draw("HISTO")
-              QCDFlatHisto.Draw("SAME")
-              SingleMuonHisto.Draw("SAME")
-              METHisto.Draw("SAME")
-#                stackPlots.SetTitle("")
-              stackPlots.GetXaxis().SetTitleSize(0.05)
-              stackPlots.GetXaxis().SetTitleOffset(1)
-              if ("Mass" in keyname2) :
-                stackPlots.GetXaxis().SetRangeUser(0,1800)
-#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
-#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
-#                stackPlots.GetYaxis().SetTitleSize(0.05)
-#                stackPlots.GetYaxis().SetTitleOffset(1)
-
-              max1 = numpy.maximum(stackPlots.GetMaximum(),QCDFlatHisto.GetMaximum())
-              max2 = numpy.maximum(SingleMuonHisto.GetMaximum(),METHisto.GetMaximum())
-              max = numpy.maximum(max1,max2)
-              stackPlots.SetMaximum(max*1.4)
-              stackPlots.SetMinimum(0.0)
-              legMass.Draw("SAME")
-              tex2.Draw("SAME")
-              tex3.Draw("SAME")
-              
-#              QCDFlatHisto = QCDFlat.Get(newname)
-#              QCDFlatHisto.SetMarkerStyle(20)
-#              SingleMuonHisto = SingleMuon.Get(newname)
-#              SingleMuonHisto.SetMarkerStyle(20)
-#              SingleMuonHisto.SetMarkerColor(4)
-#              SingleMuonHisto.SetLineColor(4)
-#              METHisto = MET.Get(newname)
-#              METHisto.SetMarkerStyle(20)
-#              METHisto.SetMarkerColor(5)
-#              METHisto.SetLineColor(5)
-
-              cstackPlots.SaveAs("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/"+keyname2+".png")
-              
-              if ("Mass" in keyname2) :
-                cstackPlotsZoomedString = 'cstackPlotsZoomed'+str(j)
-                cstackPlotsZoomed = ROOT.TCanvas(cstackPlotsZoomedString, cstackPlotsZoomedString, 800,800)
-                stackPlotsZoomed = stackPlots.Clone()
-                stackPlotsZoomed.GetXaxis().SetRangeUser(500,1800)
-                stackPlotsZoomed.GetYaxis().SetRangeUser(0,0.0000000000000025)
-                stackPlotsZoomed.SetMaximum(0.0000000000000025)
-#                stackPlots.SetMinimum(0.0)
-                stackPlotsZoomed.Draw("HISTO")
-                QCDFlatHisto.Draw("SAME")
-                SingleMuonHisto.Draw("SAME")
-                METHisto.Draw("SAME")
-                legMass.Draw("SAME")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                cstackPlotsZoomed.SaveAs("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/"+keyname2+"_zoomed.png")
-                
-              
-              cstackPlotsLogString = 'cstackPlotsLog'+str(j)
-              cstackPlots = ROOT.TCanvas(cstackPlotsLogString, cstackPlotsLogString, 800,800)
-              cstackPlots.SetLogy()
-              stackPlots.Draw()
-
-#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
-#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
-#                stackPlots.GetYaxis().SetTitleSize(0.05)
-#                stackPlots.GetYaxis().SetTitleOffset(1)
-
-              max = numpy.maximum(stackPlots.GetMaximum(),stackPlots.GetMaximum())
-              stackPlots.SetMaximum(max*100000)
-              if ("BS" in keyname2 or "PostPreS" in keyname2) :
-                stackPlots.SetMinimum(0.0001)
-              else:
-                stackPlots.SetMinimum(0.000000000000000001)
-                
-              stackPlots.Draw("HISTO")
-              QCDFlatHisto.Draw("SAME")
-              SingleMuonHisto.Draw("SAME")
-              METHisto.Draw("SAME")
-#                stackPlots.SetTitle("")
-              stackPlots.GetXaxis().SetTitleSize(0.05)
-              stackPlots.GetXaxis().SetTitleOffset(1)
-              stackPlots.GetYaxis().SetRangeUser(0,1)
-              
-              legMass.Draw("SAME")
-              tex2.Draw("SAME")
-              tex3.Draw("SAME")
-
-              cstackPlots.SaveAs("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/CompareStackedBcg_wProbQ.py b/Analyzer/test/Tamas/CompareStackedBcg_wProbQ.py
deleted file mode 100644
index cb4affe..0000000
--- a/Analyzer/test/Tamas/CompareStackedBcg_wProbQ.py
+++ /dev/null
@@ -1,327 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-#BinNumber = sys.argv[2]
-#bin = int(BinNumber)
-bin = 3
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BackgroundSamples = [
-"crab_Analysis_2018_AllQCD_wProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_AllWJets_wProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_AllTTbar_wProbQ_CodeV"+codeVersion+"_v1.root",
-]
-
-SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_wProbQ_CodeV"+codeVersion+"_v1.root")
-
-SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_wProbQ_CodeV"+codeVersion+"_v1.root")
-SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2400_wProbQ_CodeV"+codeVersion+"_v1.root")
-
-bckArray = []
-for sample in BackgroundSamples:
-  bckArray.append(ROOT.TFile.Open(sample))
-  
-if not os.path.exists(os.path.dirname("StackedComparrison_wProbQ_CodeV"+codeVersion)) :
-  os.system("mkdir StackedComparrison_wProbQ_CodeV"+codeVersion)
-
-dirs = []
-for i in range(0, bckArray[0].GetListOfKeys().GetEntries()):
-  dirname = bckArray[0].GetListOfKeys().At(i).GetName()
-  curr_dir = bckArray[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = bckArray[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = bckArray[0].Get(newname)
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if not obj.InheritsFrom("TObject"): continue
-
-          if (obj.GetEntries() == 0 ) : continue
-          stackedSummedBackground = ROOT.THStack("stackedSummedBackground","")
-          stackedNormSummedBackground = ROOT.THStack("stackedNormSummedBackground","")
-          
-          SingleMuonHisto = SingleMuon.Get(newname)
-          SingleMuonHisto.SetMarkerStyle(20)
-          SingleMuonHisto.SetMarkerColor(1)
-          SingleMuonHisto.SetLineColor(1)
-          
-          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
-          SelectedSignalSamples1Histo.SetMarkerColor(6)
-          SelectedSignalSamples1Histo.SetLineColor(6)
-          
-          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
-          SelectedSignalSamples2Histo.SetMarkerColor(7)
-          SelectedSignalSamples2Histo.SetLineColor(7)
-          
-          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-          legend.SetTextFont(42)
-          legend.SetTextSize(0.02)
-          legend.SetBorderSize(1);
-          legend.SetBorderSize(0);
-          legend.SetLineColor(1);
-          legend.SetLineStyle(1);
-          legend.SetLineWidth(1);
-          legend.SetFillColor(0);
-          legend.SetFillStyle(1001);
-          if (keyname2.find("Per")==-1) :
-            axisXTitle = keyname2[keyname2.find("_")+1:]
-            axisYTitle = "Tracks/bin"
-          else :
-            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Per")]
-            axisYTitle = keyname2[keyname2.find("Per")+3:]
-          
-#              print("------------------------------------------------------------")
-          if (obj.ClassName() == "TH1F") : # and "BS_" in keyname2):
-
-            # array to contain a specific (keyname2) histogram for all samples
-            histoArray = []
-            nEventsPostTrigArray = []
-            for index,fileIn in enumerate(bckArray):
-              histo = fileIn.Get(newname)
-              histoArray.append(histo)
-              stackedSummedBackground.Add(histo)
-              histo.SetLineColor(index+2)
-              histo.SetFillColor(index+2)
-              histo.SetMarkerColor(index+2)
-              if ((index==0)) :
-                legend.AddEntry(histo,"QCD p_{T}={50,inf}","LP")
-              elif ((index==1)) :
-                legend.AddEntry(histo,"WJets","LP")
-              elif ((index==2)) :
-                legend.AddEntry(histo,"TTBar","LP")
-#              elif ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "genrecopT" or "BS_" in keyname2)):
-#                histo2DArray = []
-#                nEventsPostTrig2DArray = []
-#                for fileIn in bckArray:
-#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
-#                    continue
-#                  fileIn.Get(newname).ProjectionY(newname,bin,bin,"e").Draw()
-#                for index in range(0, len(histo2DArray)):
-#                  if (index < 9) :
-#                    stackedSummedQCD.Add(histo2DArray[index])
-#                  elif (index>=9 and index<10) :
-#                    stackedSummedW.Add(histo2DArray[index])
-#                  elif (index>=10 and index<13) :
-#                    stackedSummedTT.Add(histo2DArray[index])
-            
-#              elif (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
-#                histo3DArray = []
-#                nEventsPostTrig3DArray = []
-#                for fileIn in bckArray:
-#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
-#                      continue
-#                  fileIn.Get(newname).GetXaxis().SetRange(bin,bin)
-#                  fileIn.Get(newname).Project3DProfile("ZY").Draw()
-#                  histo3DArray.append(fileIn.Get(newname).Project3DProfile("ZY"))
-#                  nEvetsPostTrig3D = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
-#                  nEventsPostTrig3DArray.append(nEvetsPostTrig3D)
-#                for index in range(0, len(histo3DArray)):
-          else :
-            continue
-          #          convert stacks to (summed) histos
-          stackedSummedBackground.Draw()
-          stackedSummedBackgroundTmp = stackedSummedBackground.GetStack().Last()
-          for index,fileIn in enumerate(bckArray):
-            normHisto = fileIn.Get(newname)
-            max = stackedSummedBackgroundTmp.GetMaximum()
-            if (max==0) : continue
-            normHisto.Scale(1/max)
-            stackedNormSummedBackground.Add(normHisto)
-
-          stackedNormSummedBackground.Draw()
-
-          if (keyname2== "CutFlow") :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"Trigger")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"Eta")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"pT")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"NumPixHits")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"ValidFract")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"NumDeDx")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"ProbXY")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"HighPurity")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"Chi2oDOF")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(10,"EoP")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(11,"dz")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(12,"dxy")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(13,"pTerrOverpT")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(14,"N/A")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(15,"MiniIso")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(16,"PF ID")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(17,"Ih")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(18,"ProbQ")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(19,"MuStat")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(20,"PhiTOF")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(21,"EtaTOF")
-          elif (keyname2== "CutFlowProbQFirst") :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"Trigger")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"Eta")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"pT")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"ProbQ")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"NumPixHits")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"ValidFract")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"NumDeDx")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"ProbXY")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"HighPurity")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(10,"Chi2oDOF")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(11,"EoP")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(12,"dz")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(13,"dxy")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(14,"pTerrOverpT")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(15,"N/A")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(16,"MiniIso")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(17,"PF ID")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(18,"Ih")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(19,"MuStat")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(20,"PhiTOF")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(21,"EtaTOF")
-          elif ("pfType" in keyname2) :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"AllTracks")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"PFtracks")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"isElectron")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"isMuon")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"isPhoton")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"isChHadron")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"isNeutHadron")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"isUndefined")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"else")
-#          else :
-#
-#
-#
-          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018C","LP")
-          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
-          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPgluino M=2400 GeV", "LP")
-#          legend.AddEntry(METHisto,"MET-EraC","LP")
-          
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex4 = ROOT.TLatex()
-
-          if ("PrePreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"Before pre-selection")
-          elif ("N1" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After N-1 selection")
-          elif ("PostPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After pre-selection")
-            
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.0285);
-          tex4.SetLineWidth(2);
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
-
-          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
-          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-          if ("CutFlow" in keyname2 or "pfType" in keyname2):
-            stackedNormSummedBackground.Draw("HISTO")
-            stackedNormSummedBackground.SetTitle("")
-            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedNormSummedBackground.GetXaxis().SetTitle("")
-            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
-            stackedNormSummedBackground.SetMaximum(1.3)
-          else :
-            stackedSummedBackground.Draw("HISTO")
-            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
-            stackedSummedBackground.GetXaxis().SetTitle(axisXTitle)
-            stackedSummedBackground.GetYaxis().SetTitle(axisYTitle)
-            stackedSummedBackground.SetMaximum(max*1.4)
-            stackedSummedBackground.SetMinimum(0.0)
-          SingleMuonHisto.Draw("SAMEP")
-          SelectedSignalSamples1Histo.Draw("SAME")
-          SelectedSignalSamples2Histo.Draw("SAME")
-          if ("Mass" in keyname2) :
-            stackedSummedBackground.GetXaxis().SetRangeUser(0,1800)
-#                stackedSummedBackground.GetXaxis().SetTitle("Mass [GeV]")
-#                stackedSummedBackground.GetYaxis().SetTitle("Tracks/bin")
-#                stackedSummedBackground.GetYaxis().SetTitleSize(0.05)
-#                stackedSummedBackground.GetYaxis().SetTitleOffset(1)
-
- 
-          
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex4.Draw("SAME")
-          tex5.Draw("SAME")
-
-          cstackedSummedBackground.SaveAs("StackedComparrison_wProbQ_CodeV"+codeVersion+"/"+keyname2+".png")
-          
-#---------------------------------------------------------------------------------------------
-          # now let's do everything again but on a log Y scale
-          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
-          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
-          cstackedSummedBackground.SetLogy()
-          
-          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
-            stackedSummedBackground.SetMinimum(0.0001)
-          else:
-            stackedSummedBackground.SetMinimum(0.000000000000000001)
-            
-          if ("CutFlow" in keyname2 or "pfType" in keyname2):
-            stackedNormSummedBackground.Draw("HISTO")
-            stackedNormSummedBackground.SetTitle("")
-            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedNormSummedBackground.GetXaxis().SetTitle("")
-            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
-            stackedNormSummedBackground.SetMaximum(12)
-          else :
-            stackedSummedBackground.Draw("HISTO")
-            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
-            stackedSummedBackground.SetMaximum(max*1000)
-          SingleMuonHisto.Draw("SAMEP")
-          SelectedSignalSamples1Histo.Draw("SAME")
-          SelectedSignalSamples2Histo.Draw("SAME")
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex4.Draw("SAME")
-          tex5.Draw("SAME")
-
-          cstackedSummedBackground.SaveAs("StackedComparrison_wProbQ_CodeV"+codeVersion+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/CompareStackedBcg_woProbQ.py b/Analyzer/test/Tamas/CompareStackedBcg_woProbQ.py
deleted file mode 100644
index c36c807..0000000
--- a/Analyzer/test/Tamas/CompareStackedBcg_woProbQ.py
+++ /dev/null
@@ -1,329 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-#BinNumber = sys.argv[2]
-#bin = int(BinNumber)
-bin = 3
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BackgroundSamples = [
-"crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_AllWJets_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root",
-]
-
-SingleMuon = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018C_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
-SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2400_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-bckArray = []
-for sample in BackgroundSamples:
-  bckArray.append(ROOT.TFile.Open(sample))
-
-name = "StackedComparrison_CodeV"+codeVersion +"/A.png"
-print(os.path.dirname(name))
-if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-
-dirs = []
-for i in range(0, bckArray[0].GetListOfKeys().GetEntries()):
-  dirname = bckArray[0].GetListOfKeys().At(i).GetName()
-  curr_dir = bckArray[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = bckArray[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = bckArray[0].Get(newname)
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if not obj.InheritsFrom("TObject"): continue
-
-          if (obj.GetEntries() == 0 ) : continue
-          stackedSummedBackground = ROOT.THStack("stackedSummedBackground","")
-          stackedNormSummedBackground = ROOT.THStack("stackedNormSummedBackground","")
-          
-          SingleMuonHisto = SingleMuon.Get(newname)
-          SingleMuonHisto.SetMarkerStyle(20)
-          SingleMuonHisto.SetMarkerColor(1)
-          SingleMuonHisto.SetLineColor(1)
-          
-          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
-          SelectedSignalSamples1Histo.SetMarkerColor(6)
-          SelectedSignalSamples1Histo.SetLineColor(6)
-          
-          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
-          SelectedSignalSamples2Histo.SetMarkerColor(7)
-          SelectedSignalSamples2Histo.SetLineColor(7)
-          
-          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-          legend.SetTextFont(42)
-          legend.SetTextSize(0.02)
-          legend.SetBorderSize(1);
-          legend.SetBorderSize(0);
-          legend.SetLineColor(1);
-          legend.SetLineStyle(1);
-          legend.SetLineWidth(1);
-          legend.SetFillColor(0);
-          legend.SetFillStyle(1001);
-          if (keyname2.find("Per")==-1) :
-            axisXTitle = keyname2[keyname2.find("_")+1:]
-            axisYTitle = "Tracks/bin"
-          else :
-            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Per")]
-            axisYTitle = keyname2[keyname2.find("Per")+3:]
-          
-#              print("------------------------------------------------------------")
-          if (obj.ClassName() == "TH1F") :
-
-            # array to contain a specific (keyname2) histogram for all samples
-            histoArray = []
-            nEventsPostTrigArray = []
-            for index,fileIn in enumerate(bckArray):
-              histo = fileIn.Get(newname)
-              histoArray.append(histo)
-              stackedSummedBackground.Add(histo)
-              histo.SetLineColor(index+2)
-              histo.SetFillColor(index+2)
-              histo.SetMarkerColor(index+2)
-              if ((index==2)) :
-                legend.AddEntry(histo,"mu-QCD p_{T}={50,inf}","LP")
-              elif ((index==1)) :
-                legend.AddEntry(histo,"WJets","LP")
-              elif ((index==0)) :
-                legend.AddEntry(histo,"TTBar","LP")
-#              elif ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "genrecopT" or "BS_" in keyname2)):
-#                histo2DArray = []
-#                nEventsPostTrig2DArray = []
-#                for fileIn in bckArray:
-#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
-#                    continue
-#                  fileIn.Get(newname).ProjectionY(newname,bin,bin,"e").Draw()
-#                for index in range(0, len(histo2DArray)):
-#                  if (index < 9) :
-#                    stackedSummedQCD.Add(histo2DArray[index])
-#                  elif (index>=9 and index<10) :
-#                    stackedSummedW.Add(histo2DArray[index])
-#                  elif (index>=10 and index<13) :
-#                    stackedSummedTT.Add(histo2DArray[index])
-            
-#              elif (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
-#                histo3DArray = []
-#                nEventsPostTrig3DArray = []
-#                for fileIn in bckArray:
-#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
-#                      continue
-#                  fileIn.Get(newname).GetXaxis().SetRange(bin,bin)
-#                  fileIn.Get(newname).Project3DProfile("ZY").Draw()
-#                  histo3DArray.append(fileIn.Get(newname).Project3DProfile("ZY"))
-#                  nEvetsPostTrig3D = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
-#                  nEventsPostTrig3DArray.append(nEvetsPostTrig3D)
-#                for index in range(0, len(histo3DArray)):
-          else :
-            continue
-          #          convert stacks to (summed) histos
-          stackedSummedBackground.Draw()
-          stackedSummedBackgroundTmp = stackedSummedBackground.GetStack().Last()
-          for index,fileIn in enumerate(bckArray):
-            normHisto = fileIn.Get(newname)
-            max = stackedSummedBackgroundTmp.GetMaximum()
-            if (max==0) : continue
-            normHisto.Scale(1/max)
-            stackedNormSummedBackground.Add(normHisto)
-
-          stackedNormSummedBackground.Draw()
-
-          if (keyname2== "CutFlow") :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"Trigger")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"Eta")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"pT")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"NumPixHits")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"ValidFract")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"NumDeDx")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"HighPurity")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"Chi2oDOF")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"EoP")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(10,"dz")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(11,"dxy")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(12,"pTerrOverpT")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(13,"N/A")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(14,"MiniIso")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(15,"PF ID")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(16,"Ih")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(17,"ProbXY")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(18,"ProbQ")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(19,"MuStat")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(20,"PhiTOF")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(21,"EtaTOF")
-          elif (keyname2== "CutFlowReverse") :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"Trigger")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"Eta")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"pT")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"NumPixHits")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"ValidFract")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"NumDeDx")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"HighPurity")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"Chi2oDOF")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"EoP")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(10,"dz")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(11,"dxy")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(12,"pTerrOverpT")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(13,"N/A")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(14,"MiniIso")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(15,"PF ID")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(16,"Ih")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(17,"ProbXY")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(18,"ProbQ")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(19,"MuStat")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(20,"PhiTOF")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(21,"EtaTOF")
-          elif ("pfType" in keyname2) :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"AllTracks")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"PFtracks")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"isElectron")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"isMuon")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"isPhoton")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"isChHadron")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"isNeutHadron")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"isUndefined")
-            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"else")
-#          else :
-#
-#
-#
-          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018D","LP")
-          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
-          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPgluino M=2400 GeV", "LP")
-#          legend.AddEntry(METHisto,"MET-EraC","LP")
-          
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex4 = ROOT.TLatex()
-
-          if ("PrePreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"Before pre-selection")
-          elif ("N1" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After N-1 selection")
-          elif ("PostPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After pre-selection")
-            
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.0285);
-          tex4.SetLineWidth(2);
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
-
-          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
-          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-          if ("CutFlow" in keyname2 or "pfType" in keyname2):
-            stackedNormSummedBackground.Draw("HISTO")
-            stackedNormSummedBackground.SetTitle("")
-            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedNormSummedBackground.GetXaxis().SetTitle("")
-            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
-            stackedNormSummedBackground.SetMaximum(1.3)
-          else :
-            stackedSummedBackground.Draw("HISTO")
-            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
-            stackedSummedBackground.GetXaxis().SetTitle(axisXTitle)
-            stackedSummedBackground.GetYaxis().SetTitle(axisYTitle)
-            stackedSummedBackground.SetMaximum(max*1.4)
-            stackedSummedBackground.SetMinimum(0.0)
-          SingleMuonHisto.Draw("SAMEP")
-          SelectedSignalSamples1Histo.Draw("SAME")
-          SelectedSignalSamples2Histo.Draw("SAME")
-          if ("Mass" in keyname2) :
-            stackedSummedBackground.GetXaxis().SetRangeUser(0,1800)
-#                stackedSummedBackground.GetXaxis().SetTitle("Mass [GeV]")
-#                stackedSummedBackground.GetYaxis().SetTitle("Tracks/bin")
-#                stackedSummedBackground.GetYaxis().SetTitleSize(0.05)
-#                stackedSummedBackground.GetYaxis().SetTitleOffset(1)
-
- 
-          
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex4.Draw("SAME")
-          tex5.Draw("SAME")
-
-          cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"/"+keyname2+".png")
-          
-#---------------------------------------------------------------------------------------------
-          # now let's do everything again but on a log Y scale
-          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
-          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
-          cstackedSummedBackground.SetLogy()
-          
-          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
-            stackedSummedBackground.SetMinimum(0.0001)
-          else:
-            stackedSummedBackground.SetMinimum(0.000000000000000001)
-            
-          if ("CutFlow" in keyname2 or "pfType" in keyname2):
-            stackedNormSummedBackground.Draw("HISTO")
-            stackedNormSummedBackground.SetTitle("")
-            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedNormSummedBackground.GetXaxis().SetTitle("")
-            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
-            stackedNormSummedBackground.SetMaximum(100)
-            stackedNormSummedBackground.SetMinimum(0.00001)
-          else :
-            stackedSummedBackground.Draw("HISTO")
-            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
-            stackedSummedBackground.SetMaximum(max*1000)
-          SingleMuonHisto.Draw("SAMEP")
-          SelectedSignalSamples1Histo.Draw("SAME")
-          SelectedSignalSamples2Histo.Draw("SAME")
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex4.Draw("SAME")
-          tex5.Draw("SAME")
-
-          cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/CompareWithArguementList.py b/Analyzer/test/Tamas/CompareWithArguementList.py
deleted file mode 100644
index aaa152f..0000000
--- a/Analyzer/test/Tamas/CompareWithArguementList.py
+++ /dev/null
@@ -1,326 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python3 %prog sample.txt")
-(opt,args) = parser.parse_args()
-
-sampleInFile = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-SamplesArray = []
-
-bin = 3
-
-codeVersion = sampleInFile[sampleInFile.find("Code")+4:sampleInFile.find("Code")+8]
-
-with open(sampleInFile, "r") as a_file:
-  for line in a_file:
-    stripped_line = line.strip()
-    SamplesArray.append(stripped_line)
-
-fileInArray = []
-for sample in SamplesArray:
-  fileInArray.append(ROOT.TFile.Open(sample))
-  
-dirs = []
-
-for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
-  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
-  curr_dir = fileInArray[0].GetDirectory(dirname)
-
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = fileInArray[0].Get(newname)
-          obj.SetMarkerStyle(20)
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if ("Total" in keyname2 or "IntLumi" in keyname2 or "XSection" in keyname2) :
-            continue
-          if obj.InheritsFrom("TObject"):
-              if not os.path.exists(os.path.dirname("Compare"+sampleInFile[:-4]+"/a.png")):
-                print("Create dir")
-                os.makedirs(os.path.dirname("Compare"+sampleInFile[:-4]+"/"))
-#              print(keyname2)
-              if (obj.GetEntries() == 0 ) :
-                continue
-              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
-                # this maybe should go from bin to bin+1 ?
-                obj.SetMarkerStyle(20)
-                if ("" in keyname2):
-                  obj.GetXaxis().SetRange(bin,bin)
-                  obj.Project3D("ZY").Draw("COLZ")
-                else :
-                  obj.GetXaxis().SetRange(bin,bin)
-                  obj.Project3D("ZY").Draw("COLZ")
-              if (obj.ClassName() == "TH1F" or obj.ClassName() == "TProfile"): # and "BS_" in keyname2):
-                canvasString = 'canvas'+str(j)
-                canvas = ROOT.TCanvas(canvasString, canvasString, 800,800)
-                legend =  ROOT.TLegend(.55,.60,.80,.89,"","brNDC")
-                legend.SetTextFont(42)
-                legend.SetTextSize(0.017)
-                legend.SetBorderSize(1);
-                legend.SetBorderSize(0);
-                legend.SetLineColor(1);
-                legend.SetLineStyle(1);
-                legend.SetLineWidth(1);
-                legend.SetFillColor(0);
-                legend.SetFillStyle(1001);
-                
-                histoArray = []
-                for fileIn in fileInArray:
-                  histoArray.append(fileIn.Get(newname))
-                for index in range(0, len(histoArray)):
-                  histoArray[index].SetStats(0)
-                  histoArray[index].SetMarkerStyle(20)
-                  
-                  legend.AddEntry(histoArray[index],SamplesArray[index][19:SamplesArray[index].find("Code")+9],"LP")
-                  indexNew = -1
-                  if (index>-1):
-                    indexNew = index+2
-                  if (indexNew==10) :
-                    indexNew = 40
-                  elif (indexNew==11) :
-                    indexNew = 46
-                  elif (indexNew==12) :
-                    indexNew = 41
-                  elif (indexNew==13) :
-                    indexNew = 30
-                  elif (indexNew==14) :
-                    indexNew = 42
-                  histoArray[index].SetLineColor(indexNew)
-                  histoArray[index].SetMarkerColor(indexNew)
-#                  histoArray[index].SetFillColor(indexNew)
-                  histoArray[index].SetTitle("")
-                  max = 0.0
-#                  print(keyname2)
-                  for index2 in range(0, len(histoArray)):
-                    max = numpy.maximum(max,histoArray[index2].GetMaximum())
-                  histoArray[index].GetYaxis().SetTitle("Tracks/bin")
-                  histoArray[index].GetXaxis().SetTitle(keyname2)
-                  if (keyname2 == "pfType") :
-                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
-                    histoArray[index].GetXaxis().SetBinLabel(1,"AllTracks")
-                    histoArray[index].GetXaxis().SetBinLabel(2,"PFtracks")
-                    histoArray[index].GetXaxis().SetBinLabel(3,"isElectron")
-                    histoArray[index].GetXaxis().SetBinLabel(4,"isMuon")
-                    histoArray[index].GetXaxis().SetBinLabel(5,"isPhoton")
-                    histoArray[index].GetXaxis().SetBinLabel(6,"isChHadron")
-                    histoArray[index].GetXaxis().SetBinLabel(7,"isNeutHadron")
-                    histoArray[index].GetXaxis().SetBinLabel(8,"isUndefined")
-                    histoArray[index].GetXaxis().SetBinLabel(9,"else")
-                    histoArray[index].GetXaxis().SetTitle("")
-                    histoArray[index].GetYaxis().SetTitle("")
-                    histoArray[index].SetMaximum(1.4)
-                  elif (keyname2== "CutFlow") :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
-                    histoArray[index].GetXaxis().SetBinLabel(1,"Trigger")
-                    histoArray[index].GetXaxis().SetBinLabel(2,"Eta")
-                    histoArray[index].GetXaxis().SetBinLabel(3,"pT")
-                    histoArray[index].GetXaxis().SetBinLabel(4,"NumPixHits")
-                    histoArray[index].GetXaxis().SetBinLabel(5,"ValidFract")
-                    histoArray[index].GetXaxis().SetBinLabel(6,"NumDeDx")
-                    histoArray[index].GetXaxis().SetBinLabel(7,"HighPurity")
-                    histoArray[index].GetXaxis().SetBinLabel(8,"Chi2oDOF")
-                    histoArray[index].GetXaxis().SetBinLabel(9,"EoP")
-                    histoArray[index].GetXaxis().SetBinLabel(10,"dz")
-                    histoArray[index].GetXaxis().SetBinLabel(11,"dxy")
-                    histoArray[index].GetXaxis().SetBinLabel(12,"")
-                    histoArray[index].GetXaxis().SetBinLabel(13,"dRminPfJet")
-                    histoArray[index].GetXaxis().SetBinLabel(14,"MiniIso")
-                    histoArray[index].GetXaxis().SetBinLabel(15,"PFid")
-                    histoArray[index].GetXaxis().SetBinLabel(16,"Ih")
-                    histoArray[index].GetXaxis().SetBinLabel(17,"ProbXY")
-                    histoArray[index].GetXaxis().SetBinLabel(18,"") #ProbQ
-                    histoArray[index].GetXaxis().SetBinLabel(19,"") #MuStat
-                    histoArray[index].GetXaxis().SetBinLabel(20,"") #PhiTOF
-                    histoArray[index].GetXaxis().SetBinLabel(21,"") #EtaTOF
-                    histoArray[index].GetXaxis().SetTitle("")
-                    histoArray[index].GetYaxis().SetTitle("")
-                    histoArray[index].SetMaximum(1.4)
-                  elif (keyname2== "CutFlowReverse") :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
-                    histoArray[index].GetXaxis().SetBinLabel(1,"Trigger")
-                    histoArray[index].GetXaxis().SetBinLabel(2,"Eta")
-                    histoArray[index].GetXaxis().SetBinLabel(3,"pT")
-                    histoArray[index].GetXaxis().SetBinLabel(4,"NumPixHits")
-                    histoArray[index].GetXaxis().SetBinLabel(5,"ValidFract")
-                    histoArray[index].GetXaxis().SetBinLabel(6,"NumDeDx")
-                    histoArray[index].GetXaxis().SetBinLabel(7,"HighPurity")
-                    histoArray[index].GetXaxis().SetBinLabel(8,"Chi2oDOF")
-                    histoArray[index].GetXaxis().SetBinLabel(9,"EoP")
-                    histoArray[index].GetXaxis().SetBinLabel(10,"dz")
-                    histoArray[index].GetXaxis().SetBinLabel(11,"dxy")
-                    histoArray[index].GetXaxis().SetBinLabel(12,"") #pTerrOverpT
-                    histoArray[index].GetXaxis().SetBinLabel(13,"dRminPfJet")
-                    histoArray[index].GetXaxis().SetBinLabel(14,"MiniIso")
-                    histoArray[index].GetXaxis().SetBinLabel(15,"PFid")
-                    histoArray[index].GetXaxis().SetBinLabel(16,"Ih")
-                    histoArray[index].GetXaxis().SetBinLabel(17,"ProbXY")
-                    histoArray[index].GetXaxis().SetBinLabel(18,"") #ProbQ
-                    histoArray[index].GetXaxis().SetBinLabel(19,"") #MuStat
-                    histoArray[index].GetXaxis().SetBinLabel(20,"") #PhiTOF
-                    histoArray[index].GetXaxis().SetBinLabel(21,"") #EtaTOF
-                    histoArray[index].GetXaxis().SetTitle("")
-                    histoArray[index].GetYaxis().SetTitle("")
-                    histoArray[index].SetMaximum(1.4)
-                  elif (keyname2 == "ErrorHisto") :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
-                    histoArray[index].GetXaxis().SetBinLabel(1,"All tracks")
-                    histoArray[index].GetXaxis().SetBinLabel(2,"No track/glob muon")
-                    histoArray[index].GetXaxis().SetBinLabel(3,"Track is null")
-                    histoArray[index].GetXaxis().SetBinLabel(4,"No PV")
-                    histoArray[index].GetXaxis().SetBinLabel(5,"No gen match")
-                    histoArray[index].GetXaxis().SetBinLabel(6,"Gen match too far")
-                    histoArray[index].GetXaxis().SetBinLabel(7,"No dEdx")
-                    histoArray[index].GetXaxis().SetBinLabel(8,"Cosmic track")
-                    histoArray[index].GetXaxis().SetTitle("")
-                    histoArray[index].GetYaxis().SetTitle("")
-                    histoArray[index].SetMaximum(1.4)
-                  elif ("pfType" in keyname2) :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    histoArray[index].GetXaxis().SetBinLabel(1,"AllTracks")
-                    histoArray[index].GetXaxis().SetBinLabel(2,"PFtracks")
-                    histoArray[index].GetXaxis().SetBinLabel(3,"isElectron")
-                    histoArray[index].GetXaxis().SetBinLabel(4,"isMuon")
-                    histoArray[index].GetXaxis().SetBinLabel(5,"isPhoton")
-                    histoArray[index].GetXaxis().SetBinLabel(6,"isChHadron")
-                    histoArray[index].GetXaxis().SetBinLabel(7,"isNeutHadron")
-                    histoArray[index].GetXaxis().SetBinLabel(8,"isUndefined")
-                    histoArray[index].GetXaxis().SetBinLabel(9,"else")
-                    histoArray[index].Draw("COLZ L")
-                  elif (keyname2== "CutFlowEta" or keyname2 == "CutFlowPfType") :
-                    histoArray[index].SetStats(0)
-                    histoArray[index].GetXaxis().SetBinLabel(1,"Trigger")
-                    histoArray[index].GetXaxis().SetBinLabel(2,"Eta")
-                    histoArray[index].GetXaxis().SetBinLabel(3,"pT")
-                    histoArray[index].GetXaxis().SetBinLabel(4,"NumPixHits")
-                    histoArray[index].GetXaxis().SetBinLabel(5,"ValidFract")
-                    histoArray[index].GetXaxis().SetBinLabel(6,"NumDeDx")
-                    histoArray[index].GetXaxis().SetBinLabel(7,"HighPurity")
-                    histoArray[index].GetXaxis().SetBinLabel(8,"Chi2oDOF")
-                    histoArray[index].GetXaxis().SetBinLabel(9,"EoP")
-                    histoArray[index].GetXaxis().SetBinLabel(10,"dz")
-                    histoArray[index].GetXaxis().SetBinLabel(11,"dxy")
-                    histoArray[index].GetXaxis().SetBinLabel(12,"") #pTerrOverpT
-                    histoArray[index].GetXaxis().SetBinLabel(13,"dRminPfJet")
-                    histoArray[index].GetXaxis().SetBinLabel(14,"MiniIso")
-                    histoArray[index].GetXaxis().SetBinLabel(15,"PFid")
-                    histoArray[index].GetXaxis().SetBinLabel(16,"Ih")
-                    histoArray[index].GetXaxis().SetBinLabel(17,"ProbXY")
-                    histoArray[index].GetXaxis().SetBinLabel(18,"") #ProbQ
-                    histoArray[index].GetXaxis().SetBinLabel(19,"") #MuStat
-                    histoArray[index].GetXaxis().SetBinLabel(20,"") #PhiTOF
-                    histoArray[index].GetXaxis().SetBinLabel(21,"") #EtaTOF
-                    histoArray[index].Draw("COLZ")
-                  elif ("IsPer" in keyname2) :
-                    histoArray[index].SetStats(0)
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].ProjectionY(newname,histoArray[index].GetXaxis().FindBin(0.7),-1,"e").Draw("COLZ")
-                  elif ("EIsolPer" in keyname2) :
-                    histoArray[index].SetStats(0)
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].ProjectionY(newname,histoArray[index].GetXaxis().FindBin(0.85),-1,"e").Draw("COLZ")
-                  else :
-                    histoArray[index].SetMaximum(max*1.5)
-                  histoArray[index].Draw("SAME")
-                
-                tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-                #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-                tex2.SetNDC();
-                tex2.SetTextFont(61);
-                tex2.SetTextSize(0.0675);
-                tex2.SetLineWidth(2);
-
-                tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
-                #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-                #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-                tex3.SetNDC();
-                tex3.SetTextFont(52);
-                tex3.SetTextSize(0.0485);
-                tex3.SetLineWidth(2);
-                
-                tex4 = ROOT.TLatex()
-                if ("PrePreS" in keyname2) :
-                  tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
-                elif ("N1" in keyname2) :
-                  tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
-                elif ("PostPreS" in keyname2) :
-                  tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
-                tex4.SetNDC();
-                tex4.SetTextFont(52);
-                tex4.SetTextSize(0.045);
-                tex4.SetLineWidth(2);
-
-
-#                stackPlots.Draw("HIST")
-#                QCDFlatHisto.Draw("SAME")
-#                stackPlots.SetTitle("")
-#                stackPlots.GetXaxis().SetTitleSize(0.05)
-#                stackPlots.GetXaxis().SetTitleOffset(1)
-#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
-#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
-#                stackPlots.GetYaxis().SetTitleSize(0.05)
-#                stackPlots.GetYaxis().SetTitleOffset(1)
-
-#                stackPlots.SetMaximum(max*1.1)
-#                stackPlots.SetMinimum(0.001)
-                legend.Draw("SAME")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-
-                canvas.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+".png")
-
-                cstackPlotsLogString = 'cstackPlotsLog'+str(j)
-                cstackPlots = ROOT.TCanvas(cstackPlotsLogString, cstackPlotsLogString, 800,800)
-                cstackPlots.SetLogy()
-                for index in range(0, len(histoArray)):
-                  histoArray[index].Draw("SAME")
-                  if ("CutFlow" in keyname2 or "pfType"  in keyname2 ) :
-                     histoArray[index].SetMaximum(100)
-                     histoArray[index].SetMinimum(0.0001)
-                  else :
-                    histoArray[index].SetMaximum(max*10000)
-                    histoArray[index].SetMinimum(0.000001)
-                legend.Draw("SAME")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-
-                cstackPlots.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_log.png")
-              
diff --git a/Analyzer/test/Tamas/CreateEffsSept.py b/Analyzer/test/Tamas/CreateEffsSept.py
deleted file mode 100644
index 41a8ab0..0000000
--- a/Analyzer/test/Tamas/CreateEffsSept.py
+++ /dev/null
@@ -1,564 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-ROOT.gStyle.SetPaintTextFormat("4.2f");
-
-InputListSamples = [
-"BackgroundSamplesCode"+codeVersion+".txt",
-#"HSCPgluinoOnlyNeutralSamples_Code"+codeVersion+".txt",
-"HSCPgluinoSamples_Code"+codeVersion+".txt",
-#"HSCPgmsbStauSamples_Code"+codeVersion+".txt",
-#"HSCPpairStauSamples_Code"+codeVersion+".txt",
-#"HSCPstopOnlyNeutralSamples_Code"+codeVersion+".txt",
-#"HSCPstopSamples_Code"+codeVersion+".txt",
-#"HSCPtauPrime1Samples_Code"+codeVersion+".txt",
-#"HSCPtauPrime2Samples_Code"+codeVersion+".txt",
-]
-
-SingleMuonSample = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018C_woProbQ_CodeV"+codeVersion+"_v1.root")
-AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_woProbQ_CodeV"+codeVersion+"_v1.root")
-Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-cutValues = {
-'BefPreS_Eta' : 1.0,
-'N1_Eta' : 1.0,
-'BefPreS_Pt' : 55.,
-'N1_Pt' : 55.,
-'BefPreS_Dxy' : 0.02,
-'N1_Dxy' : 0.02,
-'BefPreS_Dz' : 0.02,
-'N1_Dz' : 0.02,
-'BefPreS_Chi2oNdof' : 5.,
-'N1_Chi2oNdof' : 5.,
-'BefPreS_TNOM' : 10.,
-'N1_TNOM' : 10.,
-'BefPreS_TNOPH' : 2.,
-'N1_TNOPH' : 2.,
-'BefPreS_TNOHFraction' : .9,
-'N1_TNOHFraction' : .9,
-'N1_EoP' : 0.3,
-'BefPreS_EoP' : 0.3,
-'BefPreS_TIsol' : 15,
-'N1_TIsol' : 15,
-'BefPreS_Ih' : 3.47,
-'N1_Ih' : 3.47,
-'BefPreS_ProbXY' : 0.001,
-'N1_ProbXY' : 0.001,
-'BefPreS_MiniRelIsoAll' : 0.02,
-'N1_MiniRelIsoAll' : 0.02,
-}
-
-
-sigma = 3
-
-for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
-  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
-  curr_dir = SingleMuonSample.GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  N1eff = 0
-  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
-  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
-  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-#          if not ("N1_Eta" in keyname2) : continue
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
-          histo = SingleMuonSample.Get(newname)
-          histoAllBcg = AllBcgSample.Get(newname)
-          histoSignal = Rhadron1800GeV.Get(newname)
-          histoDenomAllBcgFixedN1 = AllBcgSample.Get(dirname + "/" + keyname + "/N1_Eta")
-          histoDenomAllBcgFixedBefPreS = AllBcgSample.Get(dirname + "/" + keyname + "/BefPreS_Eta")
-
-          if not (cutValues.get(keyname2)) : continue
-          Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
-          NumAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(cutValues[keyname2]))
-          NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(cutValues[keyname2]))
-          Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()))
-          DenomAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(histoAllBcg.GetXaxis().GetXmax()))
-          DenomAllBcgFixedBefPreS = histoDenomAllBcgFixedBefPreS.Integral(histoDenomAllBcgFixedBefPreS.GetXaxis().FindBin(0),histoDenomAllBcgFixedBefPreS.GetXaxis().FindBin(histoDenomAllBcgFixedBefPreS.GetXaxis().GetXmax()))
-          DenomAllBcgFixedN1 = histoDenomAllBcgFixedN1.Integral(histoDenomAllBcgFixedN1.GetXaxis().FindBin(0),histoDenomAllBcgFixedN1.GetXaxis().FindBin(histoDenomAllBcgFixedN1.GetXaxis().GetXmax()))
-          
-#          print(keyname2 + ": " + str(DenomAllBcgFixedN1))
-          DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()))
-          if (Denom>0) :  Eff = Num / Denom
-          else : Eff = 0
-          if (DenomAllBcg>0) : EffAllBcg = NumAllBcg / DenomAllBcg
-          else : EffAllBcg = 0
-          if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
-          else : EffSignal = 0
-         
-          if ("BefPreS_Eta" in keyname2) :
-            BefPreSeffForEta = Eff
-            BefPreSeffForEtaBcg = EffAllBcg
-            BefPreSeffForEtaSignal = EffSignal
-            BefPreSeffForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Pt" in keyname2) :
-            BefPreSeffForpT = 1-Eff
-            BefPreSeffForpTBcg = 1-EffAllBcg
-            BefPreSeffForpTSignal = 1-EffSignal
-            BefPreSeffForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_TNOPH" in keyname2) :
-            BefPreSeffForNumPixHits = 1-Eff
-            BefPreSeffForNumPixHitsBcg = 1-EffAllBcg
-            BefPreSeffForNumPixHitsSignal = 1-EffSignal
-            BefPreSeffForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_TNOHFraction" in keyname2) :
-            BefPreSeffForValidFract = 1-Eff
-            BefPreSeffForValidFractBcg = 1-EffAllBcg
-            BefPreSeffForValidFractSignal = 1-EffSignal
-            BefPreSeffForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_TNOM" in keyname2) :
-            BefPreSeffForNumDeDx = 1-Eff
-            BefPreSeffForNumDeDxBcg = 1-EffAllBcg
-            BefPreSeffForNumDeDxSignal = 1-EffSignal
-            BefPreSeffForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Chi2oNdof" in keyname2) :
-            BefPreSeffForChi2oDOF = Eff
-            BefPreSeffForChi2oDOFBcg = EffAllBcg
-            BefPreSeffForChi2oDOFSignal = EffSignal
-            BefPreSeffForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_EoP" in keyname2) :
-            BefPreSeffForEoP = Eff
-            BefPreSeffForEoPBcg = EffAllBcg
-            BefPreSeffForEoPSignal = EffSignal
-            BefPreSeffForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Dz" in keyname2) :
-            BefPreSeffFordz = Eff
-            BefPreSeffFordzBcg = EffAllBcg
-            BefPreSeffFordzSignal = EffSignal
-            BefPreSeffFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Dxy" in keyname2) :
-            BefPreSeffFordxy = Eff
-            BefPreSeffFordxyBcg = EffAllBcg
-            BefPreSeffFordxySignal = EffSignal
-            BefPreSeffFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_MiniRelIsoAll" in keyname2) :
-            BefPreSeffForMiniIso = Eff
-            BefPreSeffForMiniIsoBcg = EffAllBcg
-            BefPreSeffForMiniIsoSignal = EffSignal
-            BefPreSeffForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Ih" in keyname2) :
-            BefPreSeffForIh = 1-Eff
-            BefPreSeffForIhBcg = 1-EffAllBcg
-            BefPreSeffForIhSignal = 1-EffSignal
-            BefPreSeffForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_ProbXY" in keyname2) :
-            BefPreSeffForProbXY = 1-Eff
-            BefPreSeffForProbXYBcg = 1-EffAllBcg
-            BefPreSeffForProbXYSignal = 1-EffSignal
-            BefPreSeffForProbXYPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          
-          
-          if ("N1_Eta" in keyname2) :
-            N1effForEta = Eff
-            N1effForEtaBcg = EffAllBcg
-            N1effForEtaSignal = EffSignal
-            N1effForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Pt" in keyname2) :
-            N1effForpT = 1-Eff
-            N1effForpTBcg = 1-EffAllBcg
-            N1effForpTSignal = 1-EffSignal
-            N1effForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_TNOPH" in keyname2) :
-            N1effForNumPixHits = 1-Eff
-            N1effForNumPixHitsBcg = 1-EffAllBcg
-            N1effForNumPixHitsSignal = 1-EffSignal
-            N1effForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_TNOHFraction" in keyname2) :
-            N1effForValidFract = 1-Eff
-            N1effForValidFractBcg = 1-EffAllBcg
-            N1effForValidFractSignal = 1-EffSignal
-            N1effForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_TNOM" in keyname2) :
-            N1effForNumDeDx = 1-Eff
-            N1effForNumDeDxBcg = 1-EffAllBcg
-            N1effForNumDeDxSignal = 1-EffSignal
-            N1effForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Chi2oNdof" in keyname2) :
-            N1effForChi2oDOF = Eff
-            N1effForChi2oDOFBcg = EffAllBcg
-            N1effForChi2oDOFSignal = EffSignal
-            N1effForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_EoP" in keyname2) :
-            N1effForEoP = Eff
-            N1effForEoPBcg = EffAllBcg
-            N1effForEoPSignal = EffSignal
-            N1effForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Dz" in keyname2) :
-            N1effFordz = Eff
-            N1effFordzBcg = EffAllBcg
-            N1effFordzSignal = EffSignal
-            N1effFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Dxy" in keyname2) :
-            N1effFordxy = Eff
-            N1effFordxyBcg = EffAllBcg
-            N1effFordxySignal = EffSignal
-            N1effFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_MiniRelIsoAll" in keyname2) :
-            N1effForMiniIso = Eff
-            N1effForMiniIsoBcg = EffAllBcg
-            N1effForMiniIsoSignal = EffSignal
-            N1effForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Ih" in keyname2) :
-            N1effForIh = 1-Eff
-            N1effForIhBcg = 1-EffAllBcg
-            N1effForIhSignal = 1-EffSignal
-            N1effForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_ProbXY" in keyname2) :
-            N1effForProbXY = 1-Eff
-            N1effForProbXYBcg = 1-EffAllBcg
-            N1effForProbXYSignal = 1-EffSignal
-            N1effForProbXYPunzi= (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          
-      tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-      tex2.SetNDC();
-      tex2.SetTextFont(61);
-      tex2.SetTextSize(0.0675);
-      tex2.SetLineWidth(2);
-
-      tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-      tex3.SetNDC();
-      tex3.SetTextFont(52);
-      tex3.SetTextSize(0.0485);
-      tex3.SetLineWidth(2);
-      
-      tex4 = ROOT.TLatex()
-
-      tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-      tex5.SetNDC();
-      tex5.SetTextFont(52);
-      tex5.SetTextSize(0.0185);
-      tex5.SetLineWidth(2);
-      
-      cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForData",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,BefPreSeffForEta)
-      EffForData.SetBinContent(2,BefPreSeffForpT)
-      EffForData.SetBinContent(3,BefPreSeffForNumPixHits)
-      EffForData.SetBinContent(4,BefPreSeffForValidFract)
-      EffForData.SetBinContent(5,BefPreSeffForNumDeDx)
-      EffForData.SetBinContent(6,BefPreSeffForChi2oDOF)
-      EffForData.SetBinContent(7,BefPreSeffForEoP)
-      EffForData.SetBinContent(8,BefPreSeffFordz)
-      EffForData.SetBinContent(9,BefPreSeffFordxy)
-      EffForData.SetBinContent(10,BefPreSeffForMiniIso)
-      EffForData.SetBinContent(11,BefPreSeffForIh)
-      EffForData.SetBinContent(12,BefPreSeffForProbXY)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-#      EffForData.SetMarkerStyle(20)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"Eta < 1.0")
-      EffForData.GetXaxis().SetBinLabel(2,"pT > 55")
-      EffForData.GetXaxis().SetBinLabel(3,"NumPixHits > 2")
-      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.9")
-      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 10")
-      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
-      EffForData.GetXaxis().SetBinLabel(7,"EoP < 0.3")
-      EffForData.GetXaxis().SetBinLabel(8,"dz < 0.02")
-      EffForData.GetXaxis().SetBinLabel(9,"dxy < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
-      EffForData.GetXaxis().SetBinLabel(12,"ProbXY > 0.001")
-      EffForData.GetXaxis().SetTitle("")
-      
-      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
-      legend.SetTextFont(42)
-      legend.SetTextSize(0.02)
-      legend.SetBorderSize(1);
-      legend.SetBorderSize(0);
-      legend.SetLineColor(1);
-      legend.SetLineStyle(1);
-      legend.SetLineWidth(1);
-      legend.SetFillColor(0);
-      legend.SetFillStyle(1001);
-      legend.AddEntry(EffForData,"DATA (2018C)","LP")
-      
-
-      EffForBcg = ROOT.TH1F("EffForBcg",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
-      EffForBcg.Draw("SAMEHISTOTEXT00")
-      EffForBcg.SetLineColor(3)
-      EffForBcg.SetMarkerColor(3)
-      EffForBcg.SetBinContent(1,BefPreSeffForEtaBcg)
-      EffForBcg.SetBinContent(2,BefPreSeffForpTBcg)
-      EffForBcg.SetBinContent(3,BefPreSeffForNumPixHitsBcg)
-      EffForBcg.SetBinContent(4,BefPreSeffForValidFractBcg)
-      EffForBcg.SetBinContent(5,BefPreSeffForNumDeDxBcg)
-      EffForBcg.SetBinContent(6,BefPreSeffForChi2oDOFBcg)
-      EffForBcg.SetBinContent(7,BefPreSeffForEoPBcg)
-      EffForBcg.SetBinContent(8,BefPreSeffFordzBcg)
-      EffForBcg.SetBinContent(9,BefPreSeffFordxyBcg)
-      EffForBcg.SetBinContent(10,BefPreSeffForMiniIsoBcg)
-      EffForBcg.SetBinContent(11,BefPreSeffForIhBcg)
-      EffForBcg.SetBinContent(12,BefPreSeffForProbXY)
-      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
-      
-      EffForSignal = ROOT.TH1F("EffForSignal",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
-      EffForSignal.Draw("SAMEHISTOTEXT00")
-      EffForSignal.SetLineColor(6)
-      EffForSignal.SetMarkerColor(6)
-      EffForSignal.SetBinContent(1,BefPreSeffForEtaSignal)
-      EffForSignal.SetBinContent(2,BefPreSeffForpTSignal)
-      EffForSignal.SetBinContent(3,BefPreSeffForNumPixHitsSignal)
-      EffForSignal.SetBinContent(4,BefPreSeffForValidFractSignal)
-      EffForSignal.SetBinContent(5,BefPreSeffForNumDeDxSignal)
-      EffForSignal.SetBinContent(6,BefPreSeffForChi2oDOFSignal)
-      EffForSignal.SetBinContent(7,BefPreSeffForEoPSignal)
-      EffForSignal.SetBinContent(8,BefPreSeffFordzSignal)
-      EffForSignal.SetBinContent(9,BefPreSeffFordxySignal)
-      EffForSignal.SetBinContent(10,BefPreSeffForMiniIsoSignal)
-      EffForSignal.SetBinContent(11,BefPreSeffForIhSignal)
-      EffForSignal.SetBinContent(12,BefPreSeffForProbXY)
-      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
-      
-      tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-#      tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
-      
-      legend.Draw("SAME")
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/"+"EffsInCutflowBefPreS.png")
-      
-      cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForData",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForEta)
-      EffForData.SetBinContent(2,N1effForpT)
-      EffForData.SetBinContent(3,N1effForNumPixHits)
-      EffForData.SetBinContent(4,N1effForValidFract)
-      EffForData.SetBinContent(5,N1effForNumDeDx)
-      EffForData.SetBinContent(6,N1effForChi2oDOF)
-      EffForData.SetBinContent(7,N1effForEoP)
-      EffForData.SetBinContent(8,N1effFordz)
-      EffForData.SetBinContent(9,N1effFordxy)
-      EffForData.SetBinContent(10,N1effForMiniIso)
-      EffForData.SetBinContent(11,N1effForIh)
-      EffForData.SetBinContent(12,N1effForProbXY)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-#      EffForData.SetMarkerStyle(20)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"Eta < 1.0")
-      EffForData.GetXaxis().SetBinLabel(2,"pT > 55")
-      EffForData.GetXaxis().SetBinLabel(3,"NumPixHits > 2")
-      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.9")
-      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 10")
-      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
-      EffForData.GetXaxis().SetBinLabel(7,"EoP < 0.3")
-      EffForData.GetXaxis().SetBinLabel(8,"dz < 0.02")
-      EffForData.GetXaxis().SetBinLabel(9,"dxy < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
-      EffForData.GetXaxis().SetBinLabel(12,"ProbXY > 0.001")
-      EffForData.GetXaxis().SetTitle("")
-      
-      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
-      legend.SetTextFont(42)
-      legend.SetTextSize(0.02)
-      legend.SetBorderSize(1);
-      legend.SetBorderSize(0);
-      legend.SetLineColor(1);
-      legend.SetLineStyle(1);
-      legend.SetLineWidth(1);
-      legend.SetFillColor(0);
-      legend.SetFillStyle(1001);
-      legend.AddEntry(EffForData,"DATA (2018C)","LP")
-      
-
-      EffForBcg = ROOT.TH1F("EffForBcg",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
-      EffForBcg.Draw("SAMEHISTOTEXT00")
-      EffForBcg.SetLineColor(3)
-      EffForBcg.SetMarkerColor(3)
-      EffForBcg.SetBinContent(1,N1effForEtaBcg)
-      EffForBcg.SetBinContent(2,N1effForpTBcg)
-      EffForBcg.SetBinContent(3,N1effForNumPixHitsBcg)
-      EffForBcg.SetBinContent(4,N1effForValidFractBcg)
-      EffForBcg.SetBinContent(5,N1effForNumDeDxBcg)
-      EffForBcg.SetBinContent(6,N1effForChi2oDOFBcg)
-      EffForBcg.SetBinContent(7,N1effForEoPBcg)
-      EffForBcg.SetBinContent(8,N1effFordzBcg)
-      EffForBcg.SetBinContent(9,N1effFordxyBcg)
-      EffForBcg.SetBinContent(10,N1effForMiniIsoBcg)
-      EffForBcg.SetBinContent(11,N1effForIhBcg)
-      EffForBcg.SetBinContent(12,N1effForProbXY)
-      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
-      
-      EffForSignal = ROOT.TH1F("EffForSignal",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
-      EffForSignal.Draw("SAMEHISTOTEXT00")
-      EffForSignal.SetLineColor(6)
-      EffForSignal.SetMarkerColor(6)
-      EffForSignal.SetBinContent(1,N1effForEtaSignal)
-      EffForSignal.SetBinContent(2,N1effForpTSignal)
-      EffForSignal.SetBinContent(3,N1effForNumPixHitsSignal)
-      EffForSignal.SetBinContent(4,N1effForValidFractSignal)
-      EffForSignal.SetBinContent(5,N1effForNumDeDxSignal)
-      EffForSignal.SetBinContent(6,N1effForChi2oDOFSignal)
-      EffForSignal.SetBinContent(7,N1effForEoPSignal)
-      EffForSignal.SetBinContent(8,N1effFordzSignal)
-      EffForSignal.SetBinContent(9,N1effFordxySignal)
-      EffForSignal.SetBinContent(10,N1effForMiniIsoSignal)
-      EffForSignal.SetBinContent(11,N1effForIhSignal)
-      EffForSignal.SetBinContent(12,N1effForProbXY)
-      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      legend.Draw("SAME")
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/"+"EffsInCutflowN1.png")
-      
-####################################################################################################################
-      # Punzi for BefPreS
-
-      ROOT.gStyle.SetPaintTextFormat(".2g");
-      cstackedSummedBackgroundStringBefPreSPunzi = "cstackedSummedBackgroundStringBefPreSPunzi"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringBefPreSPunzi, cstackedSummedBackgroundStringBefPreSPunzi, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForData",";;Punzi-significance",11,0.,11.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,BefPreSeffForEtaPunzi)
-      EffForData.SetBinContent(2,BefPreSeffForpTPunzi)
-      EffForData.SetBinContent(3,BefPreSeffForNumPixHitsPunzi)
-      EffForData.SetBinContent(4,BefPreSeffForValidFractPunzi)
-      EffForData.SetBinContent(5,BefPreSeffForNumDeDxPunzi)
-      EffForData.SetBinContent(6,BefPreSeffForChi2oDOFPunzi)
-      EffForData.SetBinContent(7,BefPreSeffForEoPPunzi)
-      EffForData.SetBinContent(8,BefPreSeffFordzPunzi)
-      EffForData.SetBinContent(9,BefPreSeffFordxyPunzi)
-      EffForData.SetBinContent(10,BefPreSeffForMiniIsoPunzi)
-      EffForData.SetBinContent(11,BefPreSeffForIhPunzi)
-#      EffForData.SetBinContent(12,BefPreSeffForProbXYPunzi)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-#      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"Eta < 1.0")
-      EffForData.GetXaxis().SetBinLabel(2,"pT > 55")
-      EffForData.GetXaxis().SetBinLabel(3,"NumPixHits > 2")
-      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.9")
-      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 10")
-      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
-      EffForData.GetXaxis().SetBinLabel(7,"EoP < 0.3")
-      EffForData.GetXaxis().SetBinLabel(8,"dz < 0.02")
-      EffForData.GetXaxis().SetBinLabel(9,"dxy < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
-#      EffForData.GetXaxis().SetBinLabel(12,"ProbXY > 0.001")
-      EffForData.GetXaxis().SetTitle("")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"Before pre-selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/"+"EffsInCutflowBefPreSPunzi.png")
-      
-####################################################################################################################
-      # Punzi for N-1
-      
-      ROOT.gStyle.SetPaintTextFormat(".4f");
-      cstackedSummedBackgroundStringN1Punzi = "cstackedSummedBackgroundStringN1Punzi"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1Punzi, cstackedSummedBackgroundStringN1Punzi, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForData",";;Punzi-significance",11,0.,11.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForEtaPunzi)
-      EffForData.SetBinContent(2,N1effForpTPunzi)
-      EffForData.SetBinContent(3,N1effForNumPixHitsPunzi)
-      EffForData.SetBinContent(4,N1effForValidFractPunzi)
-      EffForData.SetBinContent(5,N1effForNumDeDxPunzi)
-      EffForData.SetBinContent(6,N1effForChi2oDOFPunzi)
-      EffForData.SetBinContent(7,N1effForEoPPunzi)
-      EffForData.SetBinContent(8,N1effFordzPunzi)
-      EffForData.SetBinContent(9,N1effFordxyPunzi)
-      EffForData.SetBinContent(10,N1effForMiniIsoPunzi)
-      EffForData.SetBinContent(11,N1effForIhPunzi)
-#      EffForData.SetBinContent(12,N1effForProbXYPunzi)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-#      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"Eta < 1.0")
-      EffForData.GetXaxis().SetBinLabel(2,"pT > 55")
-      EffForData.GetXaxis().SetBinLabel(3,"NumPixHits > 2")
-      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.9")
-      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 10")
-      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
-      EffForData.GetXaxis().SetBinLabel(7,"EoP < 0.3")
-      EffForData.GetXaxis().SetBinLabel(8,"dz < 0.02")
-      EffForData.GetXaxis().SetBinLabel(9,"dxy < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
-#      EffForData.GetXaxis().SetBinLabel(12,"ProbXY > 0.001")
-      EffForData.GetXaxis().SetTitle("")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/"+"EffsInCutflowN1Punzi.png")
-
diff --git a/Analyzer/test/Tamas/CreateROCPlots.py b/Analyzer/test/Tamas/CreateROCPlots.py
deleted file mode 100644
index b13b290..0000000
--- a/Analyzer/test/Tamas/CreateROCPlots.py
+++ /dev/null
@@ -1,158 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-InputListSamples = [
-"BackgroundSamplesCode"+codeVersion+".txt",
-"HSCPgluinoOnlyNeutralSamples_Code"+codeVersion+".txt",
-"HSCPgluinoSamples_Code"+codeVersion+".txt",
-"HSCPgmsbStauSamples_Code"+codeVersion+".txt",
-"HSCPpairStauSamples_Code"+codeVersion+".txt",
-"HSCPstopOnlyNeutralSamples_Code"+codeVersion+".txt",
-"HSCPstopSamples_Code"+codeVersion+".txt",
-"HSCPtauPrime1Samples_Code"+codeVersion+".txt",
-"HSCPtauPrime2Samples_Code"+codeVersion+".txt",
-]
-
-OpenedSamples = []
-for list in InputListSamples:
-  MassPointSamples = []
-  with open(list, "r") as a_file:
-    for line in a_file:
-      stripped_line = line.strip()
-      MassPointSamples.append(ROOT.TFile.Open(stripped_line))
-    OpenedSamples.append(MassPointSamples)
-
-if os.path.exists(os.path.dirname("ROC_CodeV"+codeVersion)):
-  os.makedirs("ROC_CodeV"+codeVersion)
-  
-cutValues = {
-'N1_Eta' : 2.1,
-'N1_Pt' : 55.,
-'N1_Dxy' : 0.02,
-'N1_Dz' : 0.05,
-'N1_Chi2oNdof' : 5.,
-'N1_Qual' : 2.,
-'N1_TNOH' : 10.,
-'N1_TNOM' : 6.,
-'N1_Qual' : 2.,
-'N1_TNOPH' : 2.,
-'N1_TNOHFraction' : .8,
-'N1_EoP' : .3,
-'N1_SumpTOverpT' : 1000.,
-'N1_Ih' : 3.2,
-'N1_ProbQ' : 0.1,
-'N1_Stations' : 9.,
-'N1_PtErrOverPt' : .25,
-'N1_SegSep' : 25,
-'N1_ProbXY' : 1.0,
-'N1_MiniRelIsoAll' : 0.1,
-
-
-}
-
-
-for i in range(0, MassPointSamples[0].GetListOfKeys().GetEntries()):
-  dirname = MassPointSamples[0].GetListOfKeys().At(i).GetName()
-  curr_dir = MassPointSamples[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = MassPointSamples[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-#          if not ("N1_Eta" in keyname2) : continue
-          if not ("N1" in keyname2) : continue
-          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
-          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(j)
-          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          
-          
-          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-          legend.SetTextFont(42)
-          legend.SetTextSize(0.02)
-          legend.SetBorderSize(1);
-          legend.SetBorderSize(0);
-          legend.SetLineColor(1);
-          legend.SetLineStyle(1);
-          legend.SetLineWidth(1);
-          legend.SetFillColor(0);
-          legend.SetFillStyle(1001);
-        
-          # array to contain a specific (keyname2) histogram for all samples
-          histoArray = []
-          maxNumBins = 0.0
-          for i in range(0,len(OpenedSamples)) :
-            maxNumBins = numpy.maximum(maxNumBins,len(OpenedSamples[i]))
- 
-          for indexOnSamples in range(0,len(OpenedSamples)) :
-            singleROCcurveString = 'singleROCcurve'+str(indexOnSamples)+str(j)
-            axisXTitle = keyname2[keyname2.find("N1_")+3:]
-            singleROCcurve = ROOT.TH1F(singleROCcurveString,";Mass;Efficiency for "+axisXTitle,int(maxNumBins),0.,maxNumBins)
-            singleROCcurve.SetStats(0)
-            singleROCcurve.SetMarkerColor(indexOnSamples+1)
-            singleROCcurve.SetMarkerStyle(20)
-            singleROCcurve.SetLineColor(indexOnSamples+1)
-            singleROCcurve.SetMaximum(1.5)
-            
-            for indexOnBins in range(0,len(OpenedSamples[indexOnSamples])) :
-              givenSampleWmassPoint = OpenedSamples[indexOnSamples][indexOnBins]
-              givenSampleWmassPointStr = str(givenSampleWmassPoint)
-              stringIndexWhere2018 = givenSampleWmassPointStr.find("2018_")+5
-              stringIndexWhereM = givenSampleWmassPointStr.find("_M")
-              stringIndexWhereW = givenSampleWmassPointStr.find("_w")
-              if (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW].find("_M")>0) :
-                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereM])
-              else:
-                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW])
-              histo = givenSampleWmassPoint.Get(newname)
-              
-              Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
-              Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()))
-              if (Denom>0) :
-                Eff = Num / Denom
-              else : Eff = 0
-#              print("For j-th: "+str(indexOnBins)+" Eff: "+str(Eff))
-              singleROCcurve.SetBinContent(indexOnBins,Eff)
-            histoArray.append(singleROCcurve)
-            legend.AddEntry(singleROCcurve,sampleName,"LP")
-     
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-          for finalHisto in histoArray :
-            finalHisto.Draw("SAMEPL")
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex5.Draw("SAME")
-
-          canvas.SaveAs("ROC_CodeV"+codeVersion+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/CreateSoB.py b/Analyzer/test/Tamas/CreateSoB.py
deleted file mode 100644
index 20ec692..0000000
--- a/Analyzer/test/Tamas/CreateSoB.py
+++ /dev/null
@@ -1,151 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python3 %prog sample.txt")
-(opt,args) = parser.parse_args()
-
-sampleInFile = sys.argv[1]
-
-backFile = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_woProbQ_CodeV23p8_v1.root")
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-SamplesArray = []
-
-with open(sampleInFile, "r") as a_file:
-  for line in a_file:
-    stripped_line = line.strip()
-    SamplesArray.append(stripped_line)
-
-fileInArray = []
-for sample in SamplesArray:
-  fileInArray.append(ROOT.TFile.Open(sample))
-  
-dirs = []
-# loop on the outer directory
-for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
-  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
-  curr_dir = fileInArray[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  # loop on the second level
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      # loop on the third level, this is very the rel plots are
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = fileInArray[0].Get(newname)
-          if not obj.InheritsFrom("TObject"):
-            continue
-          if (obj.GetEntries() == 0 ) :
-            continue
-          if not ("N1" in keyname2):
-            continue
-          if ("N1_Stations" in keyname2) or ("N1_Qual" in keyname2) or ("pfType" in keyname2):
-            continue
-          if not os.path.exists(os.path.dirname("CompareSoB"+sampleInFile[:-4]+"/")): os.makedirs(os.path.dirname("CompareSoB"+sampleInFile[:-4]+"/"))
-          
-          if (obj.ClassName() == "TH1F" or obj.ClassName() == "TProfile"): # and "BS_" in keyname2):
-            canvasString = 'canvas'+str(j)
-            canvas = ROOT.TCanvas(canvasString, canvasString, 800,800)
-            legend =  ROOT.TLegend(.45,.60,.80,.89,"","brNDC")
-            legend.SetTextFont(42)
-            legend.SetTextSize(0.017)
-            legend.SetBorderSize(1);
-            legend.SetBorderSize(0);
-            legend.SetLineColor(1);
-            legend.SetLineStyle(1);
-            legend.SetLineWidth(1);
-            legend.SetFillColor(0);
-            legend.SetFillStyle(1001);
-            
-            backObj = backFile.Get(newname)
-            histoArray = []
-            SignalOverNoise = []
-            for fileIn in fileInArray:
-              histoArray.append(fileIn.Get(newname))
-              SignalOverNoise.append(fileIn.Get(newname))
-            for index in range(0, len(histoArray)):
-              histoArray[index].GetNbinsX()
-              SoBstring = 'SoB'+str(index)
-              numBins = histoArray[index].GetNbinsX()
-              maxXaxis = histoArray[index].GetXaxis().GetXmax()
-              minXaxis = histoArray[index].GetXaxis().GetXmin()
-
-              stepSize = (maxXaxis-minXaxis)/numBins
-              SignalOverNoise[index] = ROOT.TH1F(SoBstring,SoBstring,numBins,minXaxis,maxXaxis)
-              SignalOverNoise[index].SetStats(0)
-              SignalOverNoise[index].SetMarkerStyle(20)
-              
-              legend.AddEntry(SignalOverNoise[index],SamplesArray[index][19:SamplesArray[index].find("Code")+9],"LP")
-              indexNew = -1
-              if (index>-1):
-                indexNew = index+2
-              if (indexNew==10) :
-                indexNew = 40
-              elif (indexNew==11) :
-                indexNew = 46
-              elif (indexNew==12) :
-                indexNew = 41
-              elif (indexNew==13) :
-                indexNew = 30
-              elif (indexNew==14) :
-                indexNew = 42
-              SignalOverNoise[index].SetLineColor(indexNew)
-              SignalOverNoise[index].SetMarkerColor(indexNew)
-              SignalOverNoise[index].SetTitle("")
-              SignalOverNoise[index].GetYaxis().SetTitle("Normalized S/#sqrt{S+B}")
-              axisTitle = keyname2[3:]
-              SignalOverNoise[index].GetXaxis().SetTitle(axisTitle)
-              for x in numpy.arange(0,maxXaxis,stepSize):
-                Signal = histoArray[index].Integral(histoArray[index].GetXaxis().FindBin(0),histoArray[index].GetXaxis().FindBin(x))
-                Background = backObj.Integral(backObj.GetXaxis().FindBin(0),backObj.GetXaxis().FindBin(x))
-                
-
-#                else :
-#                  Signal = numpy.absolute(histoArray[index].Integral(histoArray[index].GetXaxis().FindBin(minXaxis),histoArray[index].GetXaxis().FindBin(x)))
-#                  Background = numpy.absolutebackObj.Integral(backObj.GetXaxis().FindBin(minXaxis),backObj.GetXaxis().FindBin(x)))
-                if ((Signal+Background)!=0) :
-                  SoB = Signal/numpy.sqrt(Signal+Background)
-                else :
-                  SoB = 0
-                if ("Dxy" in keyname2) :
-                  print("For ",x," the S = ",Signal," and B = ",Background, " and the S/sqrt(S+B)",Signal/numpy.sqrt(Signal+Background))
-                
-                SignalOverNoise[index].SetBinContent(histoArray[index].GetXaxis().FindBin(x),SoB)
-              SignalOverNoise[index].Scale(1/SignalOverNoise[index].GetMaximum())
-              SignalOverNoise[index].GetYaxis().SetRangeUser(0.,2)
-              SignalOverNoise[index].Draw("SAME L")
-                
-#
-#                  histoArray[index].SetMaximum(1.4)
-            
-            tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-            #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-            tex2.SetNDC();
-            tex2.SetTextFont(61);
-            tex2.SetTextSize(0.0675);
-            tex2.SetLineWidth(2);
-
-            tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
-            #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-            #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-            tex3.SetNDC();
-            tex3.SetTextFont(52);
-            tex3.SetTextSize(0.0485);
-            tex3.SetLineWidth(2);
-            
-            legend.Draw("SAME")
-            tex2.Draw("SAME")
-            tex3.Draw("SAME")
-
-            canvas.SaveAs("CompareSoB"+sampleInFile[:-4]+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2017_mc_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2017_mc_cfg.py
index e170fda..40d3533 100644
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2017_mc_cfg.py
+++ b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2017_mc_cfg.py
@@ -217,84 +217,84 @@ if options.SAMPLE == 'isData':
         SF0 = 1.0
         SF1 = 1.0325
         if options.ERA == 'A':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2016C_v4.root'
+            IasTemplate = 'template_2016C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2016D_v4.root'
+            IasTemplate = 'template_2016D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2016E_v4.root'
+            IasTemplate = 'template_2016E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2016F_v4.root'
+            IasTemplate = 'template_2016F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2016G_v4.root'
+            IasTemplate = 'template_2016G_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2016H_v4.root'
+            IasTemplate = 'template_2016H_v5.root'
     if options.YEAR == '2017':
-        K = 2.3
-        C = 3.17
+        K = 2.54
+        C = 3.14
         SF0 = 1.0
         SF1 = 0.990
         if options.ERA == 'A':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2017C_v4.root'
+            IasTemplate = 'template_2017C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2017D_v4.root'
+            IasTemplate = 'template_2017D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2017E_v4.root'
+            IasTemplate = 'template_2017E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
     if options.YEAR == '2018':
-        K = 2.27
-        C = 3.16
+        K = 2.55
+        C = 3.14
         SF0 = 1.0
         SF1 = 1.035
         if options.ERA == 'A':
-            IasTemplate = 'template_2018A_v4.root'
+            IasTemplate = 'template_2018A_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2018B_v4.root'
+            IasTemplate = 'template_2018B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2018C_v4.root'
+            IasTemplate = 'template_2018C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2018D_v4.root'
+            IasTemplate = 'template_2018D_v5.root'
 else:
     if options.SAMPLE == 'isBckg':
         SampleType = 1
         if options.YEAR == '2017':
-            K = 2.26
-            C = 3.22
+            K = 2.48
+            C = 3.19
             SF0 = 1.009
             SF1 = 1.044
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
-            K = 2.27
-            C = 3.22
+            K = 2.49
+            C = 3.18
             SF0 = 1.006
             SF1 = 1.097
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
     else:
         SampleType = 2
         if options.YEAR == '2017':
-            K = 2.26
-            C = 3.22
+            K = 2.48
+            C = 3.19
             SF0 = 1.009
             SF1 = 1.044
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
-            K = 2.27
-            C = 3.22
+            K = 2.49
+            C = 3.18
             SF0 = 1.006
             SF1 = 1.097
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
 
 
 # run the EDAnalyzer
@@ -302,7 +302,7 @@ else:
 process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi")
 process.HSCParticleAnalyzer.TypeMode = 0 # 0: Tracker only
 process.HSCParticleAnalyzer.SampleType = SampleType 
-process.HSCParticleAnalyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.HSCParticleAnalyzer.SaveTree = 6 #6 is all saved, 0 is none
 process.HSCParticleAnalyzer.DeDxTemplate=IasTemplate
 process.HSCParticleAnalyzer.TimeOffset="MuonTimeOffset.txt"
 process.HSCParticleAnalyzer.Period = options.YEAR
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py
deleted file mode 100644
index 6431fca..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py
+++ /dev/null
@@ -1,261 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
-#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isSignal',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/80000/EC0E5916-F488-B145-90D6-FD10CE393C3F.root"),
-#   fileNames = cms.untracked.vstring("file:88E0D231-6364-DE49-8279-A7576B7FFAAD.root"),
-   fileNames = cms.untracked.vstring("/store/user/tvami/HSCP/HSCPgluino_M_1800/crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3/220712_195931/0000/HSCP_Gluino_Mass1800_RECO_1.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0 # 0: Tracker only
-process.analyzer.SampleType = SampleType 
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.Period = "2018"
-process.analyzer.DebugLevel = 6 
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-process.analyzer.TriggerResults = cms.InputTag('TriggerResults','','RECO')
-process.analyzer.DoTriggering = False
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-###process.analyzer.OutputFile = 'Data_2017_UL'
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_cfg.py
index f892e53..e786da6 100644
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_cfg.py
+++ b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_cfg.py
@@ -193,85 +193,84 @@ if options.SAMPLE == 'isData':
         SF0 = 1.0
         SF1 = 1.0325
         if options.ERA == 'A':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2016C_v4.root'
+            IasTemplate = 'template_2016C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2016D_v4.root'
+            IasTemplate = 'template_2016D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2016E_v4.root'
+            IasTemplate = 'template_2016E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2016F_v4.root'
+            IasTemplate = 'template_2016F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2016G_v4.root'
+            IasTemplate = 'template_2016G_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2016H_v4.root'
+            IasTemplate = 'template_2016H_v5.root'
     if options.YEAR == '2017':
-        K = 2.3
-        C = 3.17
+        K = 2.54
+        C = 3.14
         SF0 = 1.0
         SF1 = 0.990
         if options.ERA == 'A':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2017C_v4.root'
+            IasTemplate = 'template_2017C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2017D_v4.root'
+            IasTemplate = 'template_2017D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2017E_v4.root'
+            IasTemplate = 'template_2017E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
     if options.YEAR == '2018':
-        K = 2.27
-        C = 3.16
+        K = 2.55
+        C = 3.14
         SF0 = 1.0
         SF1 = 1.035
         if options.ERA == 'A':
-            IasTemplate = 'template_2018A_v4.root'
+            IasTemplate = 'template_2018A_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2018B_v4.root'
+            IasTemplate = 'template_2018B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2018C_v4.root'
+            IasTemplate = 'template_2018C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2018D_v4.root'
+            IasTemplate = 'template_2018D_v5.root'
 else:
     if options.SAMPLE == 'isBckg':
         SampleType = 1
         if options.YEAR == '2017':
-            K = 2.26
-            C = 3.22
+            K = 2.48
+            C = 3.19
             SF0 = 1.009
             SF1 = 1.044
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
-            K = 2.27
-            C = 3.22
+            K = 2.49
+            C = 3.18
             SF0 = 1.006
             SF1 = 1.097
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
     else:
         SampleType = 2
         if options.YEAR == '2017':
-            K = 2.26
-            C = 3.22
+            K = 2.48
+            C = 3.19
             SF0 = 1.009
             SF1 = 1.044
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
-            K = 2.27
-            C = 3.22
+            K = 2.49
+            C = 3.18
             SF0 = 1.006
             SF1 = 1.097
-            IasTemplate = 'template_2018MC_v4.root'
-
+            IasTemplate = 'template_2018MC_v5.root'
 
 
 # run the EDAnalyzer
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_cfg_testing.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_cfg_testing.py
index 55d355e..0766d47 100644
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_cfg_testing.py
+++ b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_cfg_testing.py
@@ -90,6 +90,7 @@ process.source = cms.Source("PoolSource",
 #process.source.eventsToProcess = cms.untracked.VEventRange('1:19:18186')
 #process.source.eventsToProcess = cms.untracked.VEventRange('1:19:18282')
 #process.source.eventsToProcess = cms.untracked.VEventRange('1:19:18120')
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:19:18185') #18339
 
 from Configuration.AlCa.GlobalTag import GlobalTag
 process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
@@ -201,34 +202,34 @@ if options.SAMPLE == 'isData':
         SF0 = 1.0
         SF1 = 1.0325
         if options.ERA == 'A':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2017C_v4.root'
+            IasTemplate = 'template_2017C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2017D_v4.root'
+            IasTemplate = 'template_2017D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2017E_v4.root'
+            IasTemplate = 'template_2017E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
     if options.YEAR == '2018':
         K = 2.27
         C = 3.16
         SF0 = 1.0
         SF1 = 1.0817
         if options.ERA == 'A':
-            IasTemplate = 'template_2018A_v4.root'
+            IasTemplate = 'template_2018A_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2018B_v4.root'
+            IasTemplate = 'template_2018B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2018C_v4.root'
+            IasTemplate = 'template_2018C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2018D_v4.root'
+            IasTemplate = 'template_2018D_v5.root'
 else:
     if options.SAMPLE == 'isBckg':
         SampleType = 1
@@ -237,13 +238,13 @@ else:
             C = 3.22
             SF0 = 1.0079
             SF1 = 1.0875
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
             K = 2.27
             C = 3.22
             SF0 = 1.0047
             SF1 = 1.1429
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
     else:
         SampleType = 2
         if options.YEAR == '2017':
@@ -251,13 +252,13 @@ else:
             C = 3.22
             SF0 = 1.0079
             SF1 = 1.0875
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
             K = 2.27
             C = 3.22
             SF0 = 1.0047
             SF1 = 1.1429
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
 
 process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi")
 process.HSCParticleAnalyzer.TypeMode = 0 # 0: Tracker only
@@ -266,7 +267,7 @@ process.HSCParticleAnalyzer.SaveTree = 0 #6 is all saved, 0 is none
 process.HSCParticleAnalyzer.DeDxTemplate=IasTemplate
 process.HSCParticleAnalyzer.TimeOffset="MuonTimeOffset.txt"
 process.HSCParticleAnalyzer.Period = options.YEAR
-process.HSCParticleAnalyzer.DebugLevel = 0
+process.HSCParticleAnalyzer.DebugLevel = 0 
 process.HSCParticleAnalyzer.DeDxK = K
 process.HSCParticleAnalyzer.DeDxC = C
 process.HSCParticleAnalyzer.DeDxSF_0 = SF0
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_Debug_NoProbXY_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_Debug_NoProbXY_cfg.py
deleted file mode 100644
index 1551329..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_Debug_NoProbXY_cfg.py
+++ /dev/null
@@ -1,259 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isSignal',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/80000/EC0E5916-F488-B145-90D6-FD10CE393C3F.root"),
-   fileNames = cms.untracked.vstring("file:88E0D231-6364-DE49-8279-A7576B7FFAAD.root"),
-#   fileNames = cms.untracked.vstring("file:HSCP_Gluino_Mass1800_AOD_1.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi")
-process.HSCParticleAnalyzer.TypeMode = 0 # 0: Tracker only
-process.HSCParticleAnalyzer.SampleType = SampleType 
-process.HSCParticleAnalyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.HSCParticleAnalyzer.SaveGenTree = 0
-process.HSCParticleAnalyzer.DeDxTemplate=IasTemplate
-process.HSCParticleAnalyzer.TimeOffset="MuonTimeOffset.txt"
-process.HSCParticleAnalyzer.Period = "2018"
-process.HSCParticleAnalyzer.DebugLevel = 0
-#process.HSCParticleAnalyzer.DebugLevel = 100
-process.HSCParticleAnalyzer.DeDxK = K
-process.HSCParticleAnalyzer.DeDxC = C
-process.HSCParticleAnalyzer.DeDxSF_0 = SF0
-process.HSCParticleAnalyzer.DeDxSF_1 = SF1
-process.HSCParticleAnalyzer.GlobalMinIh = C
-process.HSCParticleAnalyzer.GlobalMinTrackProbXYCut = -1 
-process.HSCParticleAnalyzer.GlobalMaxTrackProbXYCut = 0.000001
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-
-process.analysis = cms.Path(process.HSCParticleAnalyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.HSCParticleAnalyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py
deleted file mode 100644
index a5437e5..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py
+++ /dev/null
@@ -1,261 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isSignal',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-#   fileNames = cms.untracked.vstring("file:88E0D231-6364-DE49-8279-A7576B7FFAAD.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2560000/F6D6EB63-9383-3545-8322-893B2C166861.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPpairStau_M-871_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/80000/BFEFC38B-8C17-FC4B-A410-4035CECB211E.root"),
-   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2540000/9AFD6D90-8D7F-2D45-B024-B5D728C824CE.root"),
-
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0 # 0: Tracker only
-process.analyzer.SampleType = SampleType 
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.Period = "2018"
-process.analyzer.DebugLevel = 6 
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-###process.analyzer.OutputFile = 'Data_2017_UL'
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg_debug.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg_debug.py
deleted file mode 100644
index b3129ee..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg_debug.py
+++ /dev/null
@@ -1,263 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isSignal',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-#   fileNames = cms.untracked.vstring("file:88E0D231-6364-DE49-8279-A7576B7FFAAD.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2560000/F6D6EB63-9383-3545-8322-893B2C166861.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPpairStau_M-871_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/80000/BFEFC38B-8C17-FC4B-A410-4035CECB211E.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2540000/9AFD6D90-8D7F-2D45-B024-B5D728C824CE.root"),
-   fileNames = cms.untracked.vstring("file:9AFD6D90-8D7F-2D45-B024-B5D728C824CE.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:19:18081')
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0 # 0: Tracker only
-process.analyzer.SampleType = SampleType 
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.Period = "2018"
-process.analyzer.DebugLevel = 6 
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-###process.analyzer.OutputFile = 'Data_2017_UL'
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_cfg.py
index 2533096..1676bac 100644
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_cfg.py
+++ b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_cfg.py
@@ -103,6 +103,7 @@ if(not options.isSkimmedSample):
           "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
           "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
           "HLT_MET105_IsoTrk50_v*",
+          "HLT_isoMu*",
       ]
    else:
       #do not apply trigger filter on signal
@@ -217,84 +218,84 @@ if options.SAMPLE == 'isData':
         SF0 = 1.0
         SF1 = 1.0325
         if options.ERA == 'A':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2016C_v4.root'
+            IasTemplate = 'template_2016C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2016D_v4.root'
+            IasTemplate = 'template_2016D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2016E_v4.root'
+            IasTemplate = 'template_2016E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2016F_v4.root'
+            IasTemplate = 'template_2016F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2016G_v4.root'
+            IasTemplate = 'template_2016G_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2016H_v4.root'
+            IasTemplate = 'template_2016H_v5.root'
     if options.YEAR == '2017':
-        K = 2.3
-        C = 3.17
+        K = 2.54
+        C = 3.14
         SF0 = 1.0
         SF1 = 0.990
         if options.ERA == 'A':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2017C_v4.root'
+            IasTemplate = 'template_2017C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2017D_v4.root'
+            IasTemplate = 'template_2017D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2017E_v4.root'
+            IasTemplate = 'template_2017E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
     if options.YEAR == '2018':
-        K = 2.27
-        C = 3.16
+        K = 2.55
+        C = 3.14
         SF0 = 1.0
         SF1 = 1.035
         if options.ERA == 'A':
-            IasTemplate = 'template_2018A_v4.root'
+            IasTemplate = 'template_2018A_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2018B_v4.root'
+            IasTemplate = 'template_2018B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2018C_v4.root'
+            IasTemplate = 'template_2018C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2018D_v4.root'
+            IasTemplate = 'template_2018D_v5.root'
 else:
     if options.SAMPLE == 'isBckg':
         SampleType = 1
         if options.YEAR == '2017':
-            K = 2.26
-            C = 3.22
+            K = 2.48
+            C = 3.19
             SF0 = 1.009
             SF1 = 1.044
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
-            K = 2.27
-            C = 3.22
+            K = 2.49
+            C = 3.18
             SF0 = 1.006
             SF1 = 1.097
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
     else:
         SampleType = 2
         if options.YEAR == '2017':
-            K = 2.26
-            C = 3.22
+            K = 2.48
+            C = 3.19
             SF0 = 1.009
             SF1 = 1.044
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
-            K = 2.27
-            C = 3.22
+            K = 2.49
+            C = 3.18
             SF0 = 1.006
             SF1 = 1.097
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
 
 
 process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi")
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py
deleted file mode 100644
index 05eb9f2..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py
+++ /dev/null
@@ -1,283 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isBckg',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(False),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/230000/064A8795-8468-3849-B543-BDD6287EE510.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/280005/D8AB7663-12E6-6247-BF03-0F24B7D7D4C6.root "),
-   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/WJetsToLNu_2J_TuneCP5_13TeV-amcatnloFXFX-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v1/50001/B76388EE-EB30-FB49-87F4-B9677880B21F.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-########################################################################
-#Run the Skim sequence if necessary
-if(not options.isSkimmedSample):
-   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
-
-   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
-   process.HSCPTrigger = process.hltHighLevel.clone()
-   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
-   process.HSCPTrigger.andOr = cms.bool( True ) #OR
-   process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
-      process.HSCPTrigger.HLTPaths = [ #check triggers
-          "HLT_PFMET120_PFMHT120_IDTight_v*",
-          "HLT_Mu50_v*",
-          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
-          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
-          "HLT_MET105_IsoTrk50_v*",
-      ]
-   else:
-      #do not apply trigger filter on signal
-      process.HSCPTrigger.HLTPaths = ["*"]  
-   
-   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
-
-########################################################################
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-#        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0 # 0: Tracker only
-process.analyzer.SampleType = SampleType 
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.Period = "2018"
-process.analyzer.DebugLevel = 7
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py
deleted file mode 100644
index d174cb1..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py
+++ /dev/null
@@ -1,283 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isBckg',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/230000/064A8795-8468-3849-B543-BDD6287EE510.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/280005/D8AB7663-12E6-6247-BF03-0F24B7D7D4C6.root "),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-########################################################################
-#Run the Skim sequence if necessary
-if(not options.isSkimmedSample):
-   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
-
-   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
-   process.HSCPTrigger = process.hltHighLevel.clone()
-   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
-   process.HSCPTrigger.andOr = cms.bool( True ) #OR
-   process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
-      process.HSCPTrigger.HLTPaths = [ #check triggers
-          "HLT_PFMET120_PFMHT120_IDTight_v*",
-          "HLT_Mu50_v*",
-          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
-          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
-          "HLT_MET105_IsoTrk50_v*",
-      ]
-   else:
-      #do not apply trigger filter on signal
-      process.HSCPTrigger.HLTPaths = ["*"]  
-   
-   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
-
-########################################################################
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-#        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0 # 0: Tracker only
-process.analyzer.SampleType = SampleType 
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.Period = "2018"
-process.analyzer.DebugLevel = 0 
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent.py
deleted file mode 100644
index f77438b..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent.py
+++ /dev/null
@@ -1,290 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isBckg',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-options.register('LUMITOPROCESS', '',
-#options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(False),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2430000/E09ACB33-2178-7346-9B8F-1B2E37A01299.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/250000/0D04C22E-0391-534F-84D1-673F519CDE00.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/40004/3EA4FB46-684A-A344-B8FD-C49E604413CA.root"),
-#   fileNames = cms.untracked.vstring("file:3EA4FB46-684A-A344-B8FD-C49E604413CA.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/00002/8A680DB7-DC98-1B4C-9BE8-0BF6B95B25F5.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/240008/50D6866F-AF83-1545-BA76-D696B7B7BF6E.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/40003/12DD9D3F-118A-D044-B4A1-4EF7372EA686.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/40003/07C11DC9-2A14-6741-8F59-40E6EF7E8906.root"),
-   fileNames = cms.untracked.vstring("file:07C11DC9-2A14-6741-8F59-40E6EF7E8906.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:20417:299250484')
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:20417:299250484')
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:37737:411896098')
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:115188:115187134')
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:183264:183263902')
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:25539:278749947')
-process.source.eventsToProcess = cms.untracked.VEventRange('1:22416:244663529')
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-########################################################################
-#Run the Skim sequence if necessary
-if(not options.isSkimmedSample):
-   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
-
-   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
-   process.HSCPTrigger = process.hltHighLevel.clone()
-   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
-   process.HSCPTrigger.andOr = cms.bool( True ) #OR
-   process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
-      process.HSCPTrigger.HLTPaths = [ #check triggers
-          "HLT_PFMET120_PFMHT120_IDTight_v*",
-          "HLT_Mu50_v*",
-          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
-          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
-          "HLT_MET105_IsoTrk50_v*",
-      ]
-   else:
-      #do not apply trigger filter on signal
-      process.HSCPTrigger.HLTPaths = ["*"]  
-   
-   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
-
-########################################################################
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-#        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0 # 0: Tracker only
-process.analyzer.SampleType = SampleType 
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.Period = "2018"
-process.analyzer.DebugLevel = 100 
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath) #, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent_Ntuple.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent_Ntuple.py
deleted file mode 100644
index b1b187c..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent_Ntuple.py
+++ /dev/null
@@ -1,280 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isBckg',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-options.register('LUMITOPROCESS', '',
-#options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(False),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2430000/E09ACB33-2178-7346-9B8F-1B2E37A01299.root"),
-#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/250000/0D04C22E-0391-534F-84D1-673F519CDE00.root"),
-   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/40004/3EA4FB46-684A-A344-B8FD-C49E604413CA.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:20417:299250484')
-#process.source.eventsToProcess = cms.untracked.VEventRange('1:20417:299250484')
-process.source.eventsToProcess = cms.untracked.VEventRange('1:37737:411896098')
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-########################################################################
-#Run the Skim sequence if necessary
-if(not options.isSkimmedSample):
-   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
-
-   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
-   process.HSCPTrigger = process.hltHighLevel.clone()
-   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
-   process.HSCPTrigger.andOr = cms.bool( True ) #OR
-   process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
-      process.HSCPTrigger.HLTPaths = [ #check triggers
-          "HLT_PFMET120_PFMHT120_IDTight_v*",
-          "HLT_Mu50_v*",
-          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
-          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
-          "HLT_MET105_IsoTrk50_v*",
-      ]
-   else:
-      #do not apply trigger filter on signal
-      process.HSCPTrigger.HLTPaths = ["*"]  
-   
-   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
-
-########################################################################
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-#        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0 # 0: Tracker only
-process.analyzer.SampleType = SampleType 
-process.analyzer.SaveTree = 6 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.Period = "2018"
-process.analyzer.DebugLevel = 100 
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-process.analyzer.DoTriggering = False
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath) #, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_wMCmatch_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_wMCmatch_cfg.py
deleted file mode 100644
index aa19bdd..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_2018_mc_woProbQ_wMCmatch_cfg.py
+++ /dev/null
@@ -1,286 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-# -1 means all events
-options.maxEvents = -1
-
-options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isBckg',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-process = cms.Process("HSCPAnalysis")
-#process = cms.Process("HSCPAnalysis",Run2_2018)
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-## print configuration:
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-   #fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/230000/064A8795-8468-3849-B543-BDD6287EE510.root"),
-   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/280005/D8AB7663-12E6-6247-BF03-0F24B7D7D4C6.root "),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path() 
-
-########################################################################
-#Run the Skim sequence if necessary
-if(not options.isSkimmedSample):
-   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
-
-   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
-   process.HSCPTrigger = process.hltHighLevel.clone()
-   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
-   process.HSCPTrigger.andOr = cms.bool( True ) #OR
-   process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
-      process.HSCPTrigger.HLTPaths = [ #check triggers
-          "HLT_PFMET120_PFMHT120_IDTight_v*",
-          "HLT_Mu50_v*",
-          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
-          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
-          "HLT_MET105_IsoTrk50_v*",
-      ]
-   else:
-      #do not apply trigger filter on signal
-      process.HSCPTrigger.HLTPaths = ["*"]  
-   
-   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
-
-########################################################################
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-#        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",  
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*", 
-         "keep recoPFMETs_pfMet__*",     
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",  
-         "keep *_cscSegments__*",  
-         "keep *_scalersRawToDigi_*_*", 
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-
-########################################################################
-
-# run the EDAnalyzer
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root" 
-   
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-    
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0 # 0: Tracker only
-process.analyzer.SampleType = SampleType 
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.Geometry="CMS_GeomTree.root"
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.TrackProbQCut = 1.0
-process.analyzer.Period = "2018"
-process.analyzer.DebugLevel = 3
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-process.analyzer.HasMCMatch = True
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-###process.analyzer.OutputFile = 'Data_2017_UL'
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_cfg_testing.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_cfg_testing.py
index a061a28..68e688e 100644
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_cfg_testing.py
+++ b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_cfg_testing.py
@@ -68,11 +68,15 @@ process.MessageLogger.cerr.FwkReport.reportEvery = 1000
 process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
 process.source = cms.Source("PoolSource",
    #fileNames = cms.untracked.vstring("/store/data/Run2017C/SingleMuon/AOD/09Aug2019_UL2017-v1/270002/64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
-   #fileNames = cms.untracked.vstring("/store/data/Run2016C/SingleMuon/AOD/21Feb2020_UL2016_HIPM-v1/20001/A5AF471E-0879-FE4A-B7DD-54ACF11FD49E.root"),
-   fileNames = cms.untracked.vstring("file:64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
+   #fileNames = cms.untracked.vstring("/store/data/Run2016C/SingleMuon/AOD/21Feb2020_UL2016_HIPM-v1/20001/A5AF471E-0879-FE4A-B7DD-54ACF11FD49E.root"),#
+   #fileNames = cms.untracked.vstring("file:64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
+   fileNames = cms.untracked.vstring("file:007C5664-DA30-2C44-AF05-BF031A742E0C.root"),
+   #fileNames = cms.untracked.vstring("/store/data/Run2018A/SingleMuon/AOD/15Feb2022_UL2018-v1/2430000/007C5664-DA30-2C44-AF05-BF031A742E0C.root"),
    inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
 )
 
+#process.source.eventsToProcess = cms.untracked.VEventRange('316380:689:541773664')
+
 from Configuration.AlCa.GlobalTag import GlobalTag
 process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
 
@@ -185,11 +189,6 @@ process.Out = cms.OutputModule("PoolOutputModule",
     ),
 )
 
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
 if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
    process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
    process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
@@ -204,34 +203,34 @@ if options.SAMPLE == 'isData':
         SF0 = 1.0
         SF1 = 1.0325
         if options.ERA == 'A':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2017C_v4.root'
+            IasTemplate = 'template_2017C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2017D_v4.root'
+            IasTemplate = 'template_2017D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2017E_v4.root'
+            IasTemplate = 'template_2017E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
     if options.YEAR == '2018':
         K = 2.27
         C = 3.16
         SF0 = 1.0
         SF1 = 1.0817
         if options.ERA == 'A':
-            IasTemplate = 'template_2018A_v4.root'
+            IasTemplate = 'template_2018A_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2018B_v4.root'
+            IasTemplate = 'template_2018B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2018C_v4.root'
+            IasTemplate = 'template_2018C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2018D_v4.root'
+            IasTemplate = 'template_2018D_v5.root'
 else:
     if options.SAMPLE == 'isBckg':
         SampleType = 1
@@ -240,13 +239,13 @@ else:
             C = 3.22
             SF0 = 1.0079
             SF1 = 1.0875
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
             K = 2.27
             C = 3.22
             SF0 = 1.0047
             SF1 = 1.1429
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
     else:
         SampleType = 2
         if options.YEAR == '2017':
@@ -254,13 +253,13 @@ else:
             C = 3.22
             SF0 = 1.0079
             SF1 = 1.0875
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
             K = 2.27
             C = 3.22
             SF0 = 1.0047
             SF1 = 1.1429
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
 
 process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi")
 process.HSCParticleAnalyzer.SampleType = SampleType
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_wProbQ_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_wProbQ_cfg.py
deleted file mode 100644
index 54638cf..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_wProbQ_cfg.py
+++ /dev/null
@@ -1,278 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-options.maxEvents = -1 # -1 means all events
-
-# was 106X_dataRun2_v20
-options.register('GTAG', '106X_dataRun2_v36',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isData',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2017',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-
-process = cms.Process("HSCPAnalysis")
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-   fileNames = cms.untracked.vstring("/store/data/Run2017C/SingleMuon/AOD/09Aug2019_UL2017-v1/270002/64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-#The duplicateCheckMode works only if we submit with Condor - not with Crab - checks process history, run number, lumi number
-process.source.duplicateCheckMode = cms.untracked.string("checkAllFilesOpened")
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path()
-
-########################################################################
-#Run the Skim sequence if necessary
-if(not options.isSkimmedSample):
-   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
-
-   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
-   process.HSCPTrigger = process.hltHighLevel.clone()
-   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
-   process.HSCPTrigger.andOr = cms.bool( True ) #OR
-   process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
-      process.HSCPTrigger.HLTPaths = [ #check triggers
-          "HLT_PFMET120_PFMHT120_IDTight_v*",
-          "HLT_Mu50_v*",
-          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
-          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
-          "HLT_MET105_IsoTrk50_v*",
-      ]
-   else:
-      #do not apply trigger filter on signal
-      process.HSCPTrigger.HLTPaths = ["*"]
-
-   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger
-
-########################################################################
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff")
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*",
-         "keep recoPFMETs_pfMet__*",
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",
-         "keep *_cscSegments__*",
-         "keep *_scalersRawToDigi_*_*",
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root"
-
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-
-   if options.YEAR=='2017' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-
-   if options.YEAR=='2017' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0
-process.analyzer.SampleType = SampleType
-process.analyzer.SaveTree = 6 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-#process.analyzer.TrackProbQCut = 0.1
-process.analyzer.DebugLevel = 7
-process.analyzer.Period = "2017"
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-###process.analyzer.OutputFile = 'Data_2017_UL'
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_woProbQ_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_woProbQ_cfg.py
deleted file mode 100644
index 89324ef..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_woProbQ_cfg.py
+++ /dev/null
@@ -1,277 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-options.maxEvents = -1 # -1 means all events
-
-# was 106X_dataRun2_v20
-#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
-options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isData',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-
-process = cms.Process("HSCPAnalysis")
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-   fileNames = cms.untracked.vstring("/store/data/Run2017C/SingleMuon/AOD/09Aug2019_UL2017-v1/270002/64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-#The duplicateCheckMode works only if we submit with Condor - not with Crab - checks process history, run number, lumi number
-process.source.duplicateCheckMode = cms.untracked.string("checkAllFilesOpened")
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path()
-
-########################################################################
-#Run the Skim sequence if necessary
-if(not options.isSkimmedSample):
-   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
-
-   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
-   process.HSCPTrigger = process.hltHighLevel.clone()
-   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
-   process.HSCPTrigger.andOr = cms.bool( True ) #OR
-   process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
-      process.HSCPTrigger.HLTPaths = [ #check triggers
-          "HLT_PFMET120_PFMHT120_IDTight_v*",
-          "HLT_Mu50_v*",
-          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
-          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
-          "HLT_MET105_IsoTrk50_v*",
-      ]
-   else:
-      #do not apply trigger filter on signal
-      process.HSCPTrigger.HLTPaths = ["*"]
-
-   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger
-
-########################################################################
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff")
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*",
-         "keep recoPFMETs_pfMet__*",
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",
-         "keep *_cscSegments__*",
-         "keep *_scalersRawToDigi_*_*",
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root"
-
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0
-process.analyzer.SampleType = SampleType
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.DebugLevel = 7
-process.analyzer.Period = "2018"
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_woProbQ_cfg_debug.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_woProbQ_cfg_debug.py
deleted file mode 100644
index e9f9af7..0000000
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_data_woProbQ_cfg_debug.py
+++ /dev/null
@@ -1,276 +0,0 @@
-import sys, os
-import FWCore.ParameterSet.Config as cms
-from FWCore.ParameterSet.VarParsing import VarParsing
-
-options = VarParsing('analysis')
-
-# defaults
-options.outputFile = 'Histos.root'
-options.maxEvents = -1 # -1 means all events
-
-# was 106X_dataRun2_v20
-options.register('GTAG', '106X_dataRun2_v36',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Global Tag"
-)
-options.register('SAMPLE', 'isData',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Sample Type. Use: isSignal or isBckg or isData"
-)
-options.register('YEAR', '2018',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Year. Use: 2017 or 2018"
-)
-options.register('isSkimmedSample', False,
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.bool,
-    "is sample Skimmed? True or False"
-)
-#options.register('LUMITOPROCESS', '',
-options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
-    VarParsing.multiplicity.singleton,
-    VarParsing.varType.string,
-    "Lumi to process"
-)
-options.parseArguments()
-
-
-process = cms.Process("HSCPAnalysis")
-
-#diventano var parsing
-#The following parameters need to be provided
-#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
-#isSignal = True
-#isBckg = False
-#isData = False
-#isSkimmedSample = False
-#GTAG = 'START72_V1::All'
-
-print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
-print('Global Tag    : {}'.format(options.GTAG))
-if options.SAMPLE=='isData':
-   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
-print('Sample Type   : {}'.format(options.SAMPLE))
-print('is skimmed    : {}'.format(options.isSkimmedSample))
-print('Output File   : {}'.format(options.outputFile))
-print('Input Files   : {}\n'.format(options.inputFiles))
-
-process.load("FWCore.MessageService.MessageLogger_cfi")
-process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
-process.load('Configuration.StandardSequences.MagneticField_cff')
-process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
-process.load("Configuration.StandardSequences.Reconstruction_cff")
-process.load('Configuration.StandardSequences.Services_cff')
-
-process.options   = cms.untracked.PSet(
-      wantSummary = cms.untracked.bool(True),
-)
-process.MessageLogger.cerr.FwkReport.reportEvery = 1000
-
-process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
-process.source = cms.Source("PoolSource",
-   fileNames = cms.untracked.vstring("/store/data/Run2017C/SingleMuon/AOD/09Aug2019_UL2017-v1/270002/64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
-   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
-)
-
-#The duplicateCheckMode works only if we submit with Condor - not with Crab - checks process history, run number, lumi number
-process.source.duplicateCheckMode = cms.untracked.string("checkAllFilesOpened")
-
-from Configuration.AlCa.GlobalTag import GlobalTag
-process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
-
-process.HSCPTuplePath = cms.Path()
-
-########################################################################
-#Run the Skim sequence if necessary
-if(not options.isSkimmedSample):
-   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
-
-   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
-   process.HSCPTrigger = process.hltHighLevel.clone()
-   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
-   process.HSCPTrigger.andOr = cms.bool( True ) #OR
-   process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
-      process.HSCPTrigger.HLTPaths = [ #check triggers
-          "HLT_PFMET120_PFMHT120_IDTight_v*",
-          "HLT_Mu50_v*",
-          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
-          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
-          "HLT_MET105_IsoTrk50_v*",
-      ]
-   else:
-      #do not apply trigger filter on signal
-      process.HSCPTrigger.HLTPaths = ["*"]
-
-   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger
-
-########################################################################
-
-#Run the HSCP EDM-tuple Sequence on skimmed sample
-process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
-process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff")
-process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
-
-########################################################################  
-# Only for MC samples, save skimmed genParticles
-
-if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
-   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
-   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
-        filter = cms.bool(False),
-        src = cms.InputTag("genParticles"),
-        cut = cms.string('pt > 5.0'),
-        stableOnly = cms.bool(True)
-   )
-
-   process.HSCPTuplePath += process.genParticlesSkimmed
-
-########################################################################
-
-#make the pool output
-process.Out = cms.OutputModule("PoolOutputModule",
-     outputCommands = cms.untracked.vstring(
-         "drop *",
-         "keep EventAux_*_*_*",
-         "keep LumiSummary_*_*_*",
-         "keep edmMergeableCounter_*_*_*",
-         "keep GenRunInfoProduct_*_*_*",
-         "keep GenEventInfoProduct_generator_*_*",
-         "keep *_genParticlesSkimmed_*_*",
-         "keep *_genParticlePlusGeant_*_*",
-         "keep *_offlinePrimaryVertices_*_*",
-         "keep recoTracks_generalTracks_*_*",
-         "keep recoTracks_standAloneMuons_*_*",
-         "keep recoTrackExtras_standAloneMuons_*_*",
-         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
-         "keep recoTracks_globalMuons_*_*",
-         "keep recoTrackExtras_globalMuons_*_*",
-         "keep recoMuons_muons_*_*",
-         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
-         "keep edmTriggerResults_TriggerResults_*_*",
-         "keep *_ak4PFJetsCHS__*",
-         "keep recoPFMETs_pfMet__*",
-         "keep *_HSCParticleProducer_*_*",
-         "keep *_HSCPIsolation*_*_*",
-         "keep *_dedxHitInfo*_*_*",
-         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
-         "keep *_offlineBeamSpot_*_*",
-         "keep *_MuonSegmentProducer_*_*",
-         "keep *_g4SimHits_StoppedParticles*_*",
-         "keep PileupSummaryInfos_addPileupInfo_*_*",
-         "keep *_dt4DSegments__*",
-         "keep *_cscSegments__*",
-         "keep *_scalersRawToDigi_*_*",
-         "keep *_caloMet_*_*",
-    ),
-    fileName = cms.untracked.string(options.outputFile),
-    SelectEvents = cms.untracked.PSet(
-       SelectEvents = cms.vstring('*')
-    ),
-)
-
-if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
-   import FWCore.PythonUtilities.LumiList as LumiList
-   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
-   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
-
-if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
-   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
-   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
-else:
-   process.Out.SelectEvents = cms.untracked.PSet()
-
-if options.SAMPLE=='isData' :
-   SampleType = 0
-   if options.YEAR=='2017' :
-       K = 2.30
-       C = 3.17
-       SF0 = 1.0
-       SF1 = 1.0325
-       IasTemplate = "template_2017C.root"
-
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.16
-       SF0 = 1.0
-       SF1 = 1.0817
-       IasTemplate = "template_2017C.root" #FIXME template 2018?
-    #HSCP_minPt = 55
-
-elif options.SAMPLE=='isBckg':
-   SampleType = 1
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-else :
-   SampleType = 2
-   if options.YEAR=='2017' :
-       K = 2.26
-       C = 3.22
-       SF0 = 1.0079
-       SF1 = 1.0875
-       IasTemplate = "templateMC.root"
-
-   if options.YEAR=='2018' :
-       K = 2.27
-       C = 3.22
-       SF0 = 1.0047
-       SF1 = 1.1429
-       IasTemplate = "templateMC.root"
-
-process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
-### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
-#process.analyzer.SampleTxtFile=options.sampleTxtFile
-process.analyzer.TypeMode = 0
-process.analyzer.SampleType = SampleType
-process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
-process.analyzer.SaveGenTree = 0
-process.analyzer.DeDxTemplate=IasTemplate
-process.analyzer.TimeOffset="MuonTimeOffset.txt"
-process.analyzer.DebugLevel = 10 
-process.analyzer.Period = "2018"
-process.analyzer.DeDxK = K
-process.analyzer.DeDxC = C
-process.analyzer.DeDxSF_0 = SF0
-process.analyzer.DeDxSF_1 = SF1
-process.analyzer.GlobalMinIh = C
-
-process.TFileService = cms.Service("TFileService",
-                                       fileName = cms.string(options.outputFile)
-                                   )
-
-process.analysis = cms.Path(process.analyzer)
-
-process.load('Configuration.StandardSequences.EndOfProcess_cff')
-process.endjob_step = cms.EndPath(process.endOfProcess)
-
-process.HSCPTuplePath += process.analyzer
-
-########################################################################
-
-process.tsk = cms.Task()
-for mod in process.producers_().itervalues():
-    process.tsk.add(mod)
-for mod in process.filters_().itervalues():
-    process.tsk.add(mod)
-
-#schedule the sequence
-process.endPath1 = cms.EndPath(process.Out)
-process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
-
-
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_master_cfg.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_master_cfg.py
index 68f78e5..fc4bce4 100644
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_master_cfg.py
+++ b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_master_cfg.py
@@ -89,14 +89,23 @@ if(not options.isSkimmedSample):
    process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
    process.HSCPTrigger.andOr = cms.bool( True ) #OR
    process.HSCPTrigger.throw = cms.bool( False )
-   if(options.SAMPLE=='isData'):
+   if(options.SAMPLE=='isData' and options.YEAR==2017):
       process.HSCPTrigger.HLTPaths = [ #check triggers
           "HLT_PFMET120_PFMHT120_IDTight_v*",
           "HLT_Mu50_v*",
           "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
           "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
           "HLT_MET105_IsoTrk50_v*",
-          "HLT_isoMu*",
+          "HLT_IsoMu27_v*"
+      ]
+   elif(options.SAMPLE=='isData' and options.YEAR==2018):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+          "HLT_IsoMu24_v*",
       ]
    else:
       #do not apply trigger filter on signal
@@ -206,84 +215,84 @@ if options.SAMPLE == 'isData':
         SF0 = 1.0
         SF1 = 1.0325
         if options.ERA == 'A':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2016C_v4.root'
+            IasTemplate = 'template_2016C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2016D_v4.root'
+            IasTemplate = 'template_2016D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2016E_v4.root'
+            IasTemplate = 'template_2016E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2016F_v4.root'
+            IasTemplate = 'template_2016F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2016G_v4.root'
+            IasTemplate = 'template_2016G_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2016H_v4.root'
+            IasTemplate = 'template_2016H_v5.root'
     if options.YEAR == '2017':
-        K = 2.3
-        C = 3.17
+        K = 2.54
+        C = 3.14
         SF0 = 1.0
         SF1 = 0.990
         if options.ERA == 'A':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2017C_v4.root'
+            IasTemplate = 'template_2017C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2017D_v4.root'
+            IasTemplate = 'template_2017D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2017E_v4.root'
+            IasTemplate = 'template_2017E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
     if options.YEAR == '2018':
-        K = 2.27
-        C = 3.16
+        K = 2.55
+        C = 3.14
         SF0 = 1.0
         SF1 = 1.035
         if options.ERA == 'A':
-            IasTemplate = 'template_2018A_v4.root'
+            IasTemplate = 'template_2018A_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2018B_v4.root'
+            IasTemplate = 'template_2018B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2018C_v4.root'
+            IasTemplate = 'template_2018C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2018D_v4.root'
+            IasTemplate = 'template_2018D_v5.root'
 else:
     if options.SAMPLE == 'isBckg':
         SampleType = 1
         if options.YEAR == '2017':
-            K = 2.26
-            C = 3.22
+            K = 2.48
+            C = 3.19
             SF0 = 1.009
             SF1 = 1.044
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
-            K = 2.27
-            C = 3.22
+            K = 2.49
+            C = 3.18
             SF0 = 1.006
             SF1 = 1.097
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
     else:
         SampleType = 2
         if options.YEAR == '2017':
-            K = 2.26
-            C = 3.22
+            K = 2.48
+            C = 3.19
             SF0 = 1.009
             SF1 = 1.044
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
-            K = 2.27
-            C = 3.22
+            K = 2.49
+            C = 3.18
             SF0 = 1.006
             SF1 = 1.097
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
 
 process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi")
 process.HSCParticleAnalyzer.SampleType = SampleType
diff --git a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_master_cfg_TAPERECALL.py b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_master_cfg_TAPERECALL.py
index 2fce3a3..91181bc 100644
--- a/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_master_cfg_TAPERECALL.py
+++ b/Analyzer/test/Tamas/HSCParticleProducerAnalyzer_master_cfg_TAPERECALL.py
@@ -198,55 +198,55 @@ if options.SAMPLE == 'isData':
         SF0 = 1.0
         SF1 = 1.0325
         if options.ERA == 'A':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2016B_v4.root'
+            IasTemplate = 'template_2016B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2016C_v4.root'
+            IasTemplate = 'template_2016C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2016D_v4.root'
+            IasTemplate = 'template_2016D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2016E_v4.root'
+            IasTemplate = 'template_2016E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2016F_v4.root'
+            IasTemplate = 'template_2016F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2016G_v4.root'
+            IasTemplate = 'template_2016G_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2016H_v4.root'
+            IasTemplate = 'template_2016H_v5.root'
     if options.YEAR == '2017':
         K = 2.3
         C = 3.17
         SF0 = 1.0
         SF1 = 1.0325
         if options.ERA == 'A':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2017B_v4.root'
+            IasTemplate = 'template_2017B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2017C_v4.root'
+            IasTemplate = 'template_2017C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2017D_v4.root'
+            IasTemplate = 'template_2017D_v5.root'
         if options.ERA == 'E':
-            IasTemplate = 'template_2017E_v4.root'
+            IasTemplate = 'template_2017E_v5.root'
         if options.ERA == 'F':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'G':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
         if options.ERA == 'H':
-            IasTemplate = 'template_2017F_v4.root'
+            IasTemplate = 'template_2017F_v5.root'
     if options.YEAR == '2018':
         K = 2.27
         C = 3.16
         SF0 = 1.0
         SF1 = 1.0817
         if options.ERA == 'A':
-            IasTemplate = 'template_2018A_v4.root'
+            IasTemplate = 'template_2018A_v5.root'
         if options.ERA == 'B':
-            IasTemplate = 'template_2018B_v4.root'
+            IasTemplate = 'template_2018B_v5.root'
         if options.ERA == 'C':
-            IasTemplate = 'template_2018C_v4.root'
+            IasTemplate = 'template_2018C_v5.root'
         if options.ERA == 'D':
-            IasTemplate = 'template_2018D_v4.root'
+            IasTemplate = 'template_2018D_v5.root'
 else:
     if options.SAMPLE == 'isBckg':
         SampleType = 1
@@ -255,13 +255,13 @@ else:
             C = 3.22
             SF0 = 1.0079
             SF1 = 1.0875
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
             K = 2.27
             C = 3.22
             SF0 = 1.0047
             SF1 = 1.1429
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
     else:
         SampleType = 2
         if options.YEAR == '2017':
@@ -269,16 +269,16 @@ else:
             C = 3.22
             SF0 = 1.0079
             SF1 = 1.0875
-            IasTemplate = 'template_2017MC_v4.root'
+            IasTemplate = 'template_2017MC_v5.root'
         if options.YEAR == '2018':
             K = 2.27
             C = 3.22
             SF0 = 1.0047
             SF1 = 1.1429
-            IasTemplate = 'template_2018MC_v4.root'
+            IasTemplate = 'template_2018MC_v5.root'
 
 
-IasTemplate = 'template_2018MC_v4.root'
+IasTemplate = 'template_2018MC_v5.root'
 
 process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi")
 process.HSCParticleAnalyzer.SampleType = SampleType
diff --git a/Analyzer/test/Tamas/Mass_plot.py b/Analyzer/test/Tamas/Mass_plot.py
deleted file mode 100644
index a5f3b26..0000000
--- a/Analyzer/test/Tamas/Mass_plot.py
+++ /dev/null
@@ -1,203 +0,0 @@
-# Usage
-# python3 compareTheProfiles.py
-
-import ROOT, sys
-import numpy as np
-#import tdrstyle
-
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
-(opt,args) = parser.parse_args()
-
-#ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.065);
-ROOT.gStyle.SetPadBottomMargin(0.17);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-fileName = sys.argv[1]
-BinNumber = sys.argv[2]
-
-#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQ_newMethod_v2.root")
-#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wNoProbQ_NewMethod_v1.root")
-#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1_newMethod_v1.root")
-#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1NoProbXY_newMethod_v1.root")
-#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_QCDwPt470To600_woProbQ_CodeV2_v1.root")
-#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_QCDwPt50To80_woProbQ_CodeV2_v1.root")
-#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_CodeV2_v2.root")
-StandardAnalysisInFile = ROOT.TFile.Open(fileName)
-
-
-Mass = StandardAnalysisInFile.Get("/analyzer/BaseName/Mass")
-
-#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQ_newMethod_v2.root")
-#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wNoProbQ_NewMethod_v1.root")
-#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1_newMethod_v1.root")
-#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1NoProbXY_newMethod_v1.root")
-#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_QCDwPt470To600_woProbQ_CodeV2_v1.root")
-#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_QCDwPt50To80_woProbQ_CodeV2_v1.root")
-#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_CodeV2_v2.root")
-StandardAnalysisWpredInFile = ROOT.TFile.Open(fileName)
-
-
-#Mass_wPred= StandardAnalysisWpredInFile.Get("/analyzer/BaseName/Pred_Mass") # Same as the MassComb
-#Mass_wPred= StandardAnalysisWpredInFile.Get("/analyzer/BaseName/Pred_MassComb") # Combination with TOF
-Mass_wPred = StandardAnalysisWpredInFile.Get("/analyzer/BaseName/Pred_Mass_CB") # Fill(MOM*sqrt(ICK),pe,CC*BB/AA);
-#Mass_wPred= StandardAnalysisWpredInFile.Get("/analyzer/BaseName/Pred_Mass_CB_Flip") # no search result
-
-ProjBin = int(BinNumber)
-# https://cds.cern.ch/record/2205281/files/EXO-16-036-pas.pdf
-# had cuts on pt>65 and I_as > 0.3 which corresponds to bins 28,35 --> it's just 28
-# bins 25,35 mean  pt>65 and I_as > 0.175 --> maybe this is 25,-1 -->  just 25
-# bins 18,35 mean no cut on I_as but a cut on the pt
-# bins 3,3 mean  pt>60 and I_as > 0.05
-
-massBins = [0.,50.,100.,150.,200.,250.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,4000.]
-#massBins = [0.,50.,100.,200.,300.,400.,500.,600.,700.,800.,900.,1000.,4000.]
-
-massBinsArray = np.array(massBins)
-
-Mass_projY_NotRebinned = Mass.ProjectionY("Mass_projY",ProjBin,ProjBin,"e")
-Mass_projY = ROOT.TH1F("Mass_projY" , "Mass_projY" , len(massBinsArray)-1, massBinsArray)
-
-Mass_wPred_projY_NotRebinned = Mass_wPred.ProjectionY("Mass_wPred_projY",ProjBin,ProjBin,"e")
-Mass_wPred_projY = ROOT.TH1F("Mass_wPred_projY" , "Mass_wPred_projY" , len(massBinsArray)-1, massBinsArray)
-
-print("Mass_projY_NotRebinned.Integral(): ",Mass_projY_NotRebinned.Integral())
-print("Mass_wPred_projY_NotRebinned.Integral(): ",Mass_wPred_projY_NotRebinned.Integral())
-
-KSvalue = Mass_projY_NotRebinned.KolmogorovTest(Mass_wPred_projY_NotRebinned,"XD")
-print("KS-test: "+str(KSvalue))
-
-for i, bin in enumerate(massBinsArray):
-  Mass_projYCont = Mass_projY_NotRebinned.GetBinContent(i+1)
-  Mass_projY.SetBinContent(i+1,Mass_projYCont)
-  Mass_projYCont_err = Mass_projY_NotRebinned.GetBinError(i+1)
-#  Mass_projYCont_err = Mass.GetBinErrorLow(ProjBin,i+1)
-  Mass_projY.SetBinError(i+1,Mass_projYCont_err)
- 
-  Mass_wPred_projYCont = Mass_wPred_projY_NotRebinned.GetBinContent(i+1)
-  Mass_wPred_projY.SetBinContent(i+1,Mass_wPred_projYCont)
-  Mass_wPred_projYCont_err = Mass_wPred_projY_NotRebinned.GetBinError(i+1)
-#  Mass_wPred_projYCont_err = Mass_wPred.GetBinErrorLow(ProjBin,i+1)
-  Mass_wPred_projY.SetBinError(i+1,Mass_wPred_projYCont_err)
-  
-print("----------------------------------------------")
-KSvalue2 = Mass_projY.KolmogorovTest(Mass_wPred_projY,"XD")
-print("KS-test after rebinning: "+str(KSvalue2))
-
-Mass_projY.SetMarkerColor(1)
-Mass_projY.SetLineColor(1)
-Mass_projY.SetMarkerStyle(20)
-Mass_projY.SetTitle("")
-Mass_projY.GetXaxis().SetTitleSize(0.05)
-Mass_projY.GetXaxis().SetTitleOffset(1)
-Mass_projY.GetXaxis().SetTitle("Mass [GeV]")
-Mass_projY.GetYaxis().SetTitle("Tracks/bin")
-Mass_projY.GetYaxis().SetTitleSize(0.05)
-Mass_projY.GetYaxis().SetTitleOffset(1)
-Mass_projY.SetStats(0)
-Mass_projY.GetYaxis().SetRangeUser(0.1,10000)
-
-
-Mass_wPred_projY.SetMarkerColor(2)
-Mass_wPred_projY.SetLineColor(2)
-Mass_wPred_projY.SetMarkerStyle(20)
-Mass_wPred_projY.SetTitle("")
-Mass_wPred_projY.GetXaxis().SetTitleSize(0.05)
-Mass_wPred_projY.GetXaxis().SetTitleOffset(1)
-Mass_wPred_projY.GetXaxis().SetTitle("Mass [GeV]")
-Mass_wPred_projY.GetYaxis().SetTitle("Tracks/bin")
-Mass_wPred_projY.GetYaxis().SetTitleSize(0.05)
-Mass_wPred_projY.GetYaxis().SetTitleOffset(1)
-Mass_wPred_projY.SetStats(0)
-
-
-print("Mass_projY.Integral(): ",Mass_projY.Integral())
-print("Mass_wPred_projY.Integral(): ",Mass_wPred_projY.Integral())
-    
-legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
-legMass.SetTextFont(42)
-legMass.SetTextSize(0.035)
-legMass.SetBorderSize(1);
-legMass.SetLineColor(1);
-legMass.SetLineStyle(1);
-legMass.SetLineWidth(1);
-legMass.SetFillColor(0);
-legMass.SetFillStyle(1001);
-legMass.AddEntry(Mass_wPred_projY,"Prediction","LP")
-legMass.AddEntry(Mass_projY,"Observation","LP")
-
-tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-tex2.SetNDC();
-tex2.SetTextFont(61);
-tex2.SetTextSize(0.0675);
-tex2.SetLineWidth(2);
-
-#tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
-    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-tex3 = ROOT.TLatex(0.24,0.94,"Internal");
-tex3.SetNDC();
-tex3.SetTextFont(52);
-tex3.SetTextSize(0.0485);
-tex3.SetLineWidth(2);
-
-tex4 = ROOT.TLatex(0.7,0.93,"K-S test v2: "+str(round(KSvalue2,4)));
-tex4.SetNDC();
-tex4.SetTextFont(52);
-tex4.SetTextSize(0.0485);
-tex4.SetLineWidth(2);
-
-
-
-
-
-cMass_projY = ROOT.TCanvas('cMass_projY', 'cMass_projY',800,800)
-
-cMass_projY.SetLogy()
-
-rp = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY)
-
-rp.SetH1DrawOpt("P");
-rp.SetH2DrawOpt("P");
-    
-rp.Draw()
-#rp.GetUpperPad().BuildLegend()
-rp.SetLeftMargin(0.13);
-rp.SetRightMargin(0.05);
-rp.SetUpTopMargin(0.1);
-rp.SetLowTopMargin(0.02);
-rp.SetLowBottomMargin(0.35);
-    
-rp.GetLowerRefGraph().SetMinimum(0.01);
-rp.GetLowerRefGraph().SetMaximum(2);
-#rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-#rp.GetLowerRefGraph().SetLineColor(0) #0
-rp.GetLowerRefGraph().SetMarkerStyle(20)
-rp.GetLowerRefGraph().SetMarkerSize(1);
-rp.GetLowYaxis().SetNdivisions(505);
-rp.GetLowerRefYaxis().SetTitle("Ratio");
-rp.GetLowerRefYaxis().SetTitleSize(0.05);
-rp.GetLowerRefYaxis().SetTitleOffset(1);
-rp.GetLowerRefYaxis().SetLabelSize(0.035);
-    
-    
-rp.GetLowerRefXaxis().SetTitleSize(0.05);
-rp.GetLowerRefXaxis().SetTitleOffset(0.8);
-rp.GetLowerRefXaxis().SetLabelSize(0.035);
-cMass_projY.Modified()
-cMass_projY.Update()
-#Mass_projY.Draw()
-#Mass_wPred_projY.Draw("SAME")
-#rp.Draw("X")
-
-rp.GetUpperPad().cd();
-legMass.Draw("SAME")
-tex2.Draw("SAME")
-tex3.Draw("SAME")
-tex4.Draw("SAME")
-
-name = fileName[0:-5] + "_Bin" + str(ProjBin)+ "/cMass_new.png"
-cMass_projY.SaveAs(name)
diff --git a/Analyzer/test/Tamas/PostProcScripts/4crab_Template_woProbQ.py b/Analyzer/test/Tamas/PostProcScripts/4crab_Template_woProbQ.py
new file mode 100644
index 0000000..0f8506a
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/4crab_Template_woProbQ.py
@@ -0,0 +1,37 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_wProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.instance = 'preprod'
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['dEdxTemplate_harm2_SO_in_noC_CCC_MG_2017B.root','CMS_GeomTree.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/PostProcScripts/AS_Eta_Plots.py b/Analyzer/test/Tamas/PostProcScripts/AS_Eta_Plots.py
new file mode 100644
index 0000000..9456625
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/AS_Eta_Plots.py
@@ -0,0 +1,129 @@
+# Usage
+# python3 compareTheProfiles.py
+
+import ROOT
+#import tdrstyle
+
+#ROOT.gROOT.SetBatch(True)
+#tdrstyle.setTDRStyle()
+
+StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1NoProbXY_newMethod_v2.root")
+
+AS_Eta_RegionA = StandardAnalysisInFile.Get("/analyzer/BaseName/AS_Eta_RegionA")
+AS_Eta_RegionB = StandardAnalysisInFile.Get("/analyzer/BaseName/AS_Eta_RegionB")
+AS_Eta_RegionC = StandardAnalysisInFile.Get("/analyzer/BaseName/AS_Eta_RegionC")
+AS_Eta_RegionD = StandardAnalysisInFile.Get("/analyzer/BaseName/AS_Eta_RegionD")
+
+StandardAnalysisWprobQInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1NoProbXY_newMethod_v2.root")
+AS_Eta_RegionA_wProbQ = StandardAnalysisWprobQInFile.Get("/analyzer/BaseName/AS_Eta_RegionA")
+AS_Eta_RegionB_wProbQ = StandardAnalysisWprobQInFile.Get("/analyzer/BaseName/AS_Eta_RegionB")
+AS_Eta_RegionC_wProbQ = StandardAnalysisWprobQInFile.Get("/analyzer/BaseName/AS_Eta_RegionC")
+AS_Eta_RegionD_wProbQ = StandardAnalysisWprobQInFile.Get("/analyzer/BaseName/AS_Eta_RegionD")
+
+# https://cds.cern.ch/record/2205281/files/EXO-16-036-pas.pdf
+# had cuts on pt>65 and I_as > 0.3 which corresponds to bins 28,35
+# bins 25,35 mean  pt>65 and I_as > 0.175
+# bins 18,35 mean no cut on I_as but a cut on the pt
+AS_Eta_RegionA_projY = AS_Eta_RegionA.ProjectionY("AS_Eta_RegionA_projY",25,35,"e")
+AS_Eta_RegionB_projY = AS_Eta_RegionB.ProjectionY("AS_Eta_RegionB_projY",25,35,"e")
+AS_Eta_RegionC_projY = AS_Eta_RegionC.ProjectionY("AS_Eta_RegionC_projY",25,35,"e")
+AS_Eta_RegionD_projY = AS_Eta_RegionD.ProjectionY("AS_Eta_RegionD_projY",25,35,"e")
+
+AS_Eta_RegionA_wProbQ_projY = AS_Eta_RegionA_wProbQ.ProjectionY("AS_Eta_RegionA_wProbQ_projY",25,35,"e")
+AS_Eta_RegionB_wProbQ_projY = AS_Eta_RegionB_wProbQ.ProjectionY("AS_Eta_RegionB_wProbQ_projY",25,35,"e")
+AS_Eta_RegionC_wProbQ_projY = AS_Eta_RegionC_wProbQ.ProjectionY("AS_Eta_RegionC_wProbQ_projY",25,35,"e")
+AS_Eta_RegionD_wProbQ_projY = AS_Eta_RegionD_wProbQ.ProjectionY("AS_Eta_RegionD_wProbQ_projY",25,35,"e")
+
+
+AS_Eta_RegionA_projY.SetMarkerColor(2)
+AS_Eta_RegionB_projY.SetMarkerColor(2)
+AS_Eta_RegionC_projY.SetMarkerColor(2)
+AS_Eta_RegionD_projY.SetMarkerColor(2)
+
+AS_Eta_RegionA_projY.SetLineColor(2)
+AS_Eta_RegionB_projY.SetLineColor(2)
+AS_Eta_RegionC_projY.SetLineColor(2)
+AS_Eta_RegionD_projY.SetLineColor(2)
+
+AS_Eta_RegionA_wProbQ_projY.SetMarkerColor(3)
+AS_Eta_RegionB_wProbQ_projY.SetMarkerColor(3)
+AS_Eta_RegionC_wProbQ_projY.SetMarkerColor(3)
+AS_Eta_RegionD_wProbQ_projY.SetMarkerColor(3)
+
+AS_Eta_RegionA_wProbQ_projY.SetLineColor(3)
+AS_Eta_RegionB_wProbQ_projY.SetLineColor(3)
+AS_Eta_RegionC_wProbQ_projY.SetLineColor(3)
+AS_Eta_RegionD_wProbQ_projY.SetLineColor(3)
+
+
+
+print("AS_Eta_RegionA_projY.Integral(): ",AS_Eta_RegionA_projY.Integral())
+print("AS_Eta_RegionA_wProbQ_projY.Integral(): ",AS_Eta_RegionA_wProbQ_projY.Integral())
+
+print("AS_Eta_RegionD_projY.Integral(): ",AS_Eta_RegionD_projY.Integral())
+print("AS_Eta_RegionD_wProbQ_projY.Integral(): ",AS_Eta_RegionD_wProbQ_projY.Integral())
+
+#    GenHSCP_probQ_wNoCuts.SetMarkerColor(2)
+#    GenHSCP_probQ_wNoCuts.SetLineColor(2)
+#    GenHSCP_probQ_wNoCuts.SetMarkerStyle(20)
+#
+#    legProbQ =  ROOT.TLegend(.25,.75,.60,.9)
+#    legProbQ.SetTextFont(42)
+#    legProbQ.SetTextSize(0.035)
+#    legProbQ.AddEntry(GenHSCP_probQ_wNoCuts,"HSCP gen truth #tracks:","LP")
+#
+#
+#    tex2 = ROOT.TLatex(0.18,0.96,"CMS");
+#    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+#    tex2.SetNDC();
+#    tex2.SetTextFont(61);
+#    tex2.SetTextSize(0.0375);
+#    tex2.SetLineWidth(2);
+#
+#
+##    tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+#    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+#    tex3 = ROOT.TLatex(0.24,0.96,"Simulation");
+#    tex3.SetNDC();
+#    tex3.SetTextFont(52);
+#    tex3.SetTextSize(0.0285);
+#    tex3.SetLineWidth(2);
+#
+cAS_Eta_RegionA_projY = ROOT.TCanvas('cAS_Eta_RegionA_projY', 'cAS_Eta_RegionA_projY',800,600)
+AS_Eta_RegionA_projY.Draw()
+AS_Eta_RegionA_wProbQ_projY.Draw("SAME")
+#
+#    tex2.Draw("SAME")
+#    tex3.Draw("SAME")
+#
+cAS_Eta_RegionA_projY.SaveAs("cAS_Eta_RegionA_projY.png")
+
+cAS_Eta_RegionB_projY = ROOT.TCanvas('cAS_Eta_RegionB_projY', 'cAS_Eta_RegionB_projY',800,600)
+AS_Eta_RegionB_projY.Draw()
+AS_Eta_RegionB_wProbQ_projY.Draw("SAME")
+#
+#    tex2.Draw("SAME")
+#    tex3.Draw("SAME")
+#
+cAS_Eta_RegionB_projY.SaveAs("cAS_Eta_RegionB_projY.png")
+
+cAS_Eta_RegionC_projY = ROOT.TCanvas('cAS_Eta_RegionC_projY', 'cAS_Eta_RegionC_projY',800,600)
+AS_Eta_RegionC_projY.Draw()
+AS_Eta_RegionC_wProbQ_projY.Draw("SAME")
+#
+#    tex2.Draw("SAME")
+#    tex3.Draw("SAME")
+#
+cAS_Eta_RegionC_projY.SaveAs("cAS_Eta_RegionC_projY.png")
+
+
+
+cAS_Eta_RegionD_projY = ROOT.TCanvas('cAS_Eta_RegionD_projY', 'cAS_Eta_RegionD_projY',800,600)
+AS_Eta_RegionD_projY.Draw()
+AS_Eta_RegionD_wProbQ_projY.Draw("SAME")
+#
+#    tex2.Draw("SAME")
+#    tex3.Draw("SAME")
+#
+cAS_Eta_RegionD_projY.SaveAs("cAS_Eta_RegionD_projY.png")
+#
diff --git a/Analyzer/test/Tamas/PostProcScripts/BS_Plots.py b/Analyzer/test/Tamas/PostProcScripts/BS_Plots.py
new file mode 100644
index 0000000..77fe439
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/BS_Plots.py
@@ -0,0 +1,129 @@
+# Usage
+# python3 compareTheProfiles.py
+
+import ROOT
+#import tdrstyle
+
+#ROOT.gROOT.SetBatch(True)
+#tdrstyle.setTDRStyle()
+
+StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1NoProbXY_newMethod_v2.root")
+
+BS_V3D = StandardAnalysisInFile.Get("/analyzer/BaseName/BS_V3D")
+BS_Chi2 = StandardAnalysisInFile.Get("/analyzer/BaseName/BS_Chi2")
+AS_Eta_RegionC = StandardAnalysisInFile.Get("/analyzer/BaseName/AS_Eta_RegionC")
+AS_Eta_RegionD = StandardAnalysisInFile.Get("/analyzer/BaseName/AS_Eta_RegionD")
+
+StandardAnalysisWprobQInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1NoProbXY_newMethod_v2.root")
+AS_Eta_RegionA_wProbQ = StandardAnalysisWprobQInFile.Get("/analyzer/BaseName/AS_Eta_RegionA")
+AS_Eta_RegionB_wProbQ = StandardAnalysisWprobQInFile.Get("/analyzer/BaseName/AS_Eta_RegionB")
+AS_Eta_RegionC_wProbQ = StandardAnalysisWprobQInFile.Get("/analyzer/BaseName/AS_Eta_RegionC")
+AS_Eta_RegionD_wProbQ = StandardAnalysisWprobQInFile.Get("/analyzer/BaseName/AS_Eta_RegionD")
+
+# https://cds.cern.ch/record/2205281/files/EXO-16-036-pas.pdf
+# had cuts on pt>65 and I_as > 0.3 which corresponds to bins 28,35
+# bins 25,35 mean  pt>65 and I_as > 0.175
+# bins 18,35 mean no cut on I_as but a cut on the pt
+AS_Eta_RegionA_projY = AS_Eta_RegionA.ProjectionY("AS_Eta_RegionA_projY",25,35,"e")
+AS_Eta_RegionB_projY = AS_Eta_RegionB.ProjectionY("AS_Eta_RegionB_projY",25,35,"e")
+AS_Eta_RegionC_projY = AS_Eta_RegionC.ProjectionY("AS_Eta_RegionC_projY",25,35,"e")
+AS_Eta_RegionD_projY = AS_Eta_RegionD.ProjectionY("AS_Eta_RegionD_projY",25,35,"e")
+
+AS_Eta_RegionA_wProbQ_projY = AS_Eta_RegionA_wProbQ.ProjectionY("AS_Eta_RegionA_wProbQ_projY",25,35,"e")
+AS_Eta_RegionB_wProbQ_projY = AS_Eta_RegionB_wProbQ.ProjectionY("AS_Eta_RegionB_wProbQ_projY",25,35,"e")
+AS_Eta_RegionC_wProbQ_projY = AS_Eta_RegionC_wProbQ.ProjectionY("AS_Eta_RegionC_wProbQ_projY",25,35,"e")
+AS_Eta_RegionD_wProbQ_projY = AS_Eta_RegionD_wProbQ.ProjectionY("AS_Eta_RegionD_wProbQ_projY",25,35,"e")
+
+
+AS_Eta_RegionA_projY.SetMarkerColor(2)
+AS_Eta_RegionB_projY.SetMarkerColor(2)
+AS_Eta_RegionC_projY.SetMarkerColor(2)
+AS_Eta_RegionD_projY.SetMarkerColor(2)
+
+AS_Eta_RegionA_projY.SetLineColor(2)
+AS_Eta_RegionB_projY.SetLineColor(2)
+AS_Eta_RegionC_projY.SetLineColor(2)
+AS_Eta_RegionD_projY.SetLineColor(2)
+
+AS_Eta_RegionA_wProbQ_projY.SetMarkerColor(3)
+AS_Eta_RegionB_wProbQ_projY.SetMarkerColor(3)
+AS_Eta_RegionC_wProbQ_projY.SetMarkerColor(3)
+AS_Eta_RegionD_wProbQ_projY.SetMarkerColor(3)
+
+AS_Eta_RegionA_wProbQ_projY.SetLineColor(3)
+AS_Eta_RegionB_wProbQ_projY.SetLineColor(3)
+AS_Eta_RegionC_wProbQ_projY.SetLineColor(3)
+AS_Eta_RegionD_wProbQ_projY.SetLineColor(3)
+
+
+
+print("AS_Eta_RegionA_projY.Integral(): ",AS_Eta_RegionA_projY.Integral())
+print("AS_Eta_RegionA_wProbQ_projY.Integral(): ",AS_Eta_RegionA_wProbQ_projY.Integral())
+
+print("AS_Eta_RegionD_projY.Integral(): ",AS_Eta_RegionD_projY.Integral())
+print("AS_Eta_RegionD_wProbQ_projY.Integral(): ",AS_Eta_RegionD_wProbQ_projY.Integral())
+
+#    GenHSCP_probQ_wNoCuts.SetMarkerColor(2)
+#    GenHSCP_probQ_wNoCuts.SetLineColor(2)
+#    GenHSCP_probQ_wNoCuts.SetMarkerStyle(20)
+#
+#    legProbQ =  ROOT.TLegend(.25,.75,.60,.9)
+#    legProbQ.SetTextFont(42)
+#    legProbQ.SetTextSize(0.035)
+#    legProbQ.AddEntry(GenHSCP_probQ_wNoCuts,"HSCP gen truth #tracks:","LP")
+#
+#
+#    tex2 = ROOT.TLatex(0.18,0.96,"CMS");
+#    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+#    tex2.SetNDC();
+#    tex2.SetTextFont(61);
+#    tex2.SetTextSize(0.0375);
+#    tex2.SetLineWidth(2);
+#
+#
+##    tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+#    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+#    tex3 = ROOT.TLatex(0.24,0.96,"Simulation");
+#    tex3.SetNDC();
+#    tex3.SetTextFont(52);
+#    tex3.SetTextSize(0.0285);
+#    tex3.SetLineWidth(2);
+#
+cAS_Eta_RegionA_projY = ROOT.TCanvas('cAS_Eta_RegionA_projY', 'cAS_Eta_RegionA_projY',800,600)
+AS_Eta_RegionA_projY.Draw()
+AS_Eta_RegionA_wProbQ_projY.Draw("SAME")
+#
+#    tex2.Draw("SAME")
+#    tex3.Draw("SAME")
+#
+cAS_Eta_RegionA_projY.SaveAs("cAS_Eta_RegionA_projY.png")
+
+cAS_Eta_RegionB_projY = ROOT.TCanvas('cAS_Eta_RegionB_projY', 'cAS_Eta_RegionB_projY',800,600)
+AS_Eta_RegionB_projY.Draw()
+AS_Eta_RegionB_wProbQ_projY.Draw("SAME")
+#
+#    tex2.Draw("SAME")
+#    tex3.Draw("SAME")
+#
+cAS_Eta_RegionB_projY.SaveAs("cAS_Eta_RegionB_projY.png")
+
+cAS_Eta_RegionC_projY = ROOT.TCanvas('cAS_Eta_RegionC_projY', 'cAS_Eta_RegionC_projY',800,600)
+AS_Eta_RegionC_projY.Draw()
+AS_Eta_RegionC_wProbQ_projY.Draw("SAME")
+#
+#    tex2.Draw("SAME")
+#    tex3.Draw("SAME")
+#
+cAS_Eta_RegionC_projY.SaveAs("cAS_Eta_RegionC_projY.png")
+
+
+
+cAS_Eta_RegionD_projY = ROOT.TCanvas('cAS_Eta_RegionD_projY', 'cAS_Eta_RegionD_projY',800,600)
+AS_Eta_RegionD_projY.Draw()
+AS_Eta_RegionD_wProbQ_projY.Draw("SAME")
+#
+#    tex2.Draw("SAME")
+#    tex3.Draw("SAME")
+#
+cAS_Eta_RegionD_projY.SaveAs("cAS_Eta_RegionD_projY.png")
+#
diff --git a/Analyzer/test/Tamas/PostProcScripts/Compare2DPlots_woProbQ.py b/Analyzer/test/Tamas/PostProcScripts/Compare2DPlots_woProbQ.py
new file mode 100644
index 0000000..5825c1c
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/Compare2DPlots_woProbQ.py
@@ -0,0 +1,209 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+#BinNumber = sys.argv[2]
+#bin = int(BinNumber)
+bin = 3
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+SingleMuon = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+AllTTbar = ROOT.TFile.Open("crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root")
+AllWJets = ROOT.TFile.Open("crab_Analysis_2018_AllWJets_woProbQ_CodeV"+codeVersion+"_v1.root")
+AllQCD   = ROOT.TFile.Open("crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
+SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2400_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+  
+if os.path.exists(os.path.dirname("2DComparrison_CodeV"+codeVersion)):
+  os.system("mkdir 2DComparrison_woProbQ_CodeV"+codeVersion)
+
+dirs = []
+for i in range(0, AllTTbar.GetListOfKeys().GetEntries()):
+  dirname = AllTTbar.GetListOfKeys().At(i).GetName()
+  curr_dir = AllTTbar.GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = AllTTbar.GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = AllTTbar.Get(newname)
+#          print(keyname2)
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if not obj.InheritsFrom("TObject"): continue
+
+          if (obj.GetEntries() == 0 ) : continue
+          
+          if not (obj.ClassName() == "TH2F") : continue
+          
+          if ("CutFlow" in keyname2) : continue
+          if ("Gen" in keyname2) : continue
+          if not ("PostPre" in keyname2) : continue
+          
+          SingleMuonHisto = SingleMuon.Get(newname)
+          SingleMuonHisto.SetMarkerStyle(20)
+          SingleMuonHisto.SetMarkerColor(1)
+          SingleMuonHisto.SetLineColor(1)
+        
+          AllTTbarHisto = AllTTbar.Get(newname)
+          AllTTbarHisto.SetMarkerStyle(20)
+          AllTTbarHisto.SetMarkerColor(2)
+          AllTTbarHisto.SetLineColor(2)
+          
+          AllWJetsHisto = AllWJets.Get(newname)
+          AllWJetsHisto.SetMarkerStyle(20)
+          AllWJetsHisto.SetMarkerColor(3)
+          AllWJetsHisto.SetLineColor(3)
+          
+          AllQCDHisto = AllQCD.Get(newname)
+          AllQCDHisto.SetMarkerStyle(20)
+          AllQCDHisto.SetMarkerColor(4)
+          AllQCDHisto.SetLineColor(4)
+          
+          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
+          SelectedSignalSamples1Histo.SetMarkerStyle(20)
+          SelectedSignalSamples1Histo.SetMarkerColor(6)
+          SelectedSignalSamples1Histo.SetLineColor(6)
+          
+          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
+          SelectedSignalSamples2Histo.SetMarkerStyle(20)
+          SelectedSignalSamples2Histo.SetMarkerColor(7)
+          SelectedSignalSamples2Histo.SetLineColor(7)
+          
+          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+          if (keyname2.find("Vs")==-1) :
+            axisXTitle = keyname2[keyname2.find("_")+1:]
+            axisYTitle = "Tracks/bin"
+          else :
+            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Vs")]
+            axisYTitle = keyname2[keyname2.find("Vs")+2:]
+          
+          legend.AddEntry(AllTTbarHisto,"TTBar","LP")
+          legend.AddEntry(AllWJetsHisto,"WJets","LP")
+          legend.AddEntry(AllQCDHisto,"mu-QCD p_{T}={50,inf}","LP")
+#          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018C","LP")
+          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
+          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPgluino M=2400 GeV", "LP")
+
+
+          
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex4 = ROOT.TLatex()
+          if ("PrePreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"Before pre-selection")
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"After N-1 selection")
+          elif ("PostPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"After pre-selection")
+            
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.0285);
+          tex4.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+#          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
+
+          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
+          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+
+          AllTTbarHisto.Draw("P")
+          AllTTbarHisto.SetStats(0)
+          AllTTbarHisto.SetTitle("")
+          AllTTbarHisto.GetXaxis().SetTitleSize(0.05)
+          AllTTbarHisto.GetXaxis().SetTitleOffset(1)
+          AllTTbarHisto.GetXaxis().SetTitle(axisXTitle)
+          AllTTbarHisto.GetYaxis().SetTitleSize(0.05)
+#          AllTTbarHisto.GetYaxis().SetTitleOffset(1)
+          AllTTbarHisto.GetYaxis().SetTitle(axisYTitle)
+          AllWJetsHisto.Draw("SAMEP")
+          AllQCDHisto.Draw("SAMEP")
+#          SingleMuonHisto.Draw("SAMEP")
+          SelectedSignalSamples1Histo.Draw("SAMEP")
+          SelectedSignalSamples2Histo.Draw("SAMEP")
+
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+
+          cstackedSummedBackground.SaveAs("2DComparrison_CodeV"+codeVersion+"/"+keyname2+".png")
+          
+#---------------------------------------------------------------------------------------------
+#          # now let's do everything again but on a log Y scale
+#          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
+#          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
+#          cstackedSummedBackground.SetLogy()
+#
+#          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
+#            stackedSummedBackground.SetMinimum(0.0001)
+#          else:
+#            stackedSummedBackground.SetMinimum(0.000000000000000001)
+#
+#          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+#            stackedNormSummedBackground.Draw("HISTO")
+#            stackedNormSummedBackground.SetTitle("")
+#            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
+#            stackedNormSummedBackground.GetXaxis().SetTitle("")
+#            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
+#            stackedNormSummedBackground.SetMaximum(12)
+#          else :
+#            stackedSummedBackground.Draw("HISTO")
+#            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
+#            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
+#            stackedSummedBackground.SetMaximum(max*1000)
+#          SingleMuonHisto.Draw("SAMEP")
+#          SelectedSignalSamples1Histo.Draw("SAME")
+#          SelectedSignalSamples2Histo.Draw("SAME")
+#          legend.Draw("SAME")
+#          tex2.Draw("SAME")
+#          tex3.Draw("SAME")
+#          tex4.Draw("SAME")
+#          tex5.Draw("SAME")
+#
+#          cstackedSummedBackground.SaveAs("2DComparrison_CodeV"+codeVersion+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/CompareQCD.py b/Analyzer/test/Tamas/PostProcScripts/CompareQCD.py
new file mode 100644
index 0000000..687246c
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/CompareQCD.py
@@ -0,0 +1,253 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+QCDBinnedSamples = [
+#"crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_wProbQ_CodeV18p2_v1.root",
+#"crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_wProbQ_CodeV18p2_v1.root",
+#"crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_wProbQ_CodeV18p2_v1.root",
+"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_wProbQ_CodeV18p9_v1.root",
+]
+
+QCDFlat = ROOT.TFile.Open("crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_wProbQ_CodeV18p9_v1.root")
+
+intLumi = 50.0 #137.0
+
+SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2017_wProbQ_CodeV19p2_v1.root")
+
+MET = ROOT.TFile.Open("crab_Analysis_MET_Run2017_wProbQ_CodeV19p2_v1.root")
+
+crossSectionArray = [
+# 2797000.0, #+-8800.0, 2018_QCD_Pt-15To20_MuEnrichedPt5
+# 2518000.0, #+-7940.0, 2018_QCD_Pt-20To30_MuEnrichedPt5
+# 1361000.0, #+-4263.0, 2018_QCD_Pt-30To50_MuEnrichedPt5
+ 377800.0, #+-1184.0, 2018_QCD_Pt-50To80_MuEnrichedPt5
+ 88620.0, #+-275.1, 2018_QCD_Pt-80To120_MuEnrichedPt5
+ 21070.0, #+-65.28, 2018_QCD_Pt-120To170_MuEnrichedPt5
+ 7019.0, #+-21.61, 2018_QCD_Pt-170To300_MuEnrichedPt5
+ 622.4, #+-1.891, 2018_QCD_Pt-300To470_MuEnrichedPt5
+ 58.86, #+-0.1776, 2018_QCD_Pt-470To600_MuEnrichedPt5
+ 18.22, #+-0.05471, 2018_QCD_Pt-600To800_MuEnrichedPt5
+ 3.25, #+-0.0148, 2018_QCD_Pt-600To800_MuEnrichedPt5
+ 1.613, #+-, 2018_QCD_Pt-1000_MuEnrichedPt5
+]
+
+fileInArray = []
+for sample in QCDBinnedSamples:
+  fileInArray.append(ROOT.TFile.Open(sample))
+  
+
+crossSectionFlat = 239000.0	# +-755.8
+nEventsPostTrigArrayFlat = QCDFlat.Get("analyzer/BaseName/TotalTE").Integral()
+
+
+dirs = []
+for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
+  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
+  curr_dir = fileInArray[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileInArray[0].Get(newname)
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if ("Total" in keyname2) :
+            continue
+          if obj.InheritsFrom("TObject"):
+              if not os.path.exists(os.path.dirname("CompareQCDv4/")): os.makedirs(os.path.dirname("CompareQCDv4/"))
+              if (obj.GetEntries() == 0 ) :
+                continue
+              if (obj.ClassName() == "TH1F"): # and "BS_" in keyname2):
+                legMass =  ROOT.TLegend(.55,.60,.80,.89,"","brNDC")
+                legMass.SetTextFont(42)
+                legMass.SetTextSize(0.02)
+                legMass.SetBorderSize(1);
+                legMass.SetBorderSize(0);
+                legMass.SetLineColor(1);
+                legMass.SetLineStyle(1);
+                legMass.SetLineWidth(1);
+                legMass.SetFillColor(0);
+                legMass.SetFillStyle(1001);
+                
+                stackPlots = ROOT.THStack("stackPlots","");
+                histoArray = []
+                nEventsPostTrigArray = []
+                for fileIn in fileInArray:
+                  histoArray.append(fileIn.Get(newname))
+                  nEvetsPostTrig = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
+                  nEventsPostTrigArray.append(nEvetsPostTrig)
+                for index in range(0, len(histoArray)):
+                  
+                  histoArray[index].Scale(intLumi*crossSectionArray[index]/nEventsPostTrigArray[index])
+#                  finalHisto.Add(histoArray[index],intLumi*crossSectionArray[index]/nEventsPostTrigArray[index])
+                  stackPlots.Add(histoArray[index])
+                  legMass.AddEntry(histoArray[index],QCDBinnedSamples[index][14:QCDBinnedSamples[index].find("MuEnrichedPt5_")-1],"LP")
+                  indexNew = -1
+                  if (index>-1):
+                    indexNew = index+2
+                  if (indexNew==10) :
+                    indexNew = 30
+                  elif (indexNew==11) :
+                    indexNew = 40
+                  elif (indexNew==12) :
+                    indexNew = 41
+                  elif (indexNew==13) :
+                    indexNew = 42
+                  elif (indexNew==14) :
+                    indexNew = 46
+                  histoArray[index].SetLineColor(indexNew)
+                  histoArray[index].SetFillColor(indexNew)
+
+                QCDFlatHisto = QCDFlat.Get(newname)
+                QCDFlatHisto.SetMarkerStyle(20)
+                SingleMuonHisto = SingleMuon.Get(newname)
+                SingleMuonHisto.SetMarkerStyle(20)
+                SingleMuonHisto.SetMarkerColor(4)
+                SingleMuonHisto.SetLineColor(4)
+                METHisto = MET.Get(newname)
+                METHisto.SetMarkerStyle(20)
+                METHisto.SetMarkerColor(5)
+                METHisto.SetLineColor(5)
+                
+                if (keyname2 == "BS_MPt") :
+                  stackPlots.Draw()
+                  stackPlots.GetXaxis().SetRangeUser(0,1000)
+                  QCDFlatHisto.GetXaxis().SetRangeUser(0,1000)
+                
+                stackPlotsTemp = stackPlots.Clone()
+                if (keyname2== "CutFlow") :
+                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedTT.GetXaxis().SetBinLabel(1,"Trigger")
+                histoSummedTT.GetXaxis().SetBinLabel(2,"Eta")
+                histoSummedTT.GetXaxis().SetBinLabel(3,"pT")
+                histoSummedTT.GetXaxis().SetBinLabel(4,"NumHits")
+                histoSummedTT.GetXaxis().SetBinLabel(5,"NumPixHits")
+                histoSummedTT.GetXaxis().SetBinLabel(6,"ValidFract")
+                histoSummedTT.GetXaxis().SetBinLabel(7,"NumDeDx")
+                histoSummedTT.GetXaxis().SetBinLabel(8,"ProbXY")
+                histoSummedTT.GetXaxis().SetBinLabel(9,"HighPurity")
+                histoSummedTT.GetXaxis().SetBinLabel(10,"Chi2oDOF")
+                histoSummedTT.GetXaxis().SetBinLabel(11,"EoP")
+                histoSummedTT.GetXaxis().SetBinLabel(12,"dz")
+                histoSummedTT.GetXaxis().SetBinLabel(13,"dxy")
+                histoSummedTT.GetXaxis().SetBinLabel(14,"pTerrOverpT")
+                histoSummedTT.GetXaxis().SetBinLabel(15,"TKIso")
+                histoSummedTT.GetXaxis().SetBinLabel(16,"MiniIso")
+                histoSummedTT.GetXaxis().SetBinLabel(17,"MassT")
+                histoSummedTT.GetXaxis().SetBinLabel(18,"Ih")
+                histoSummedTT.GetXaxis().SetBinLabel(19,"ProbQ")
+                histoSummedTT.GetXaxis().SetBinLabel(20,"MuStat")
+                histoSummedTT.GetXaxis().SetBinLabel(21,"PhiTOF")
+                histoSummedTT.GetXaxis().SetBinLabel(22,"EtaTOF")
+              elif (keyname2== "CutFlowProbQFirst") :
+                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedTT.GetXaxis().SetBinLabel(1,"Trigger")
+                histoSummedTT.GetXaxis().SetBinLabel(2,"Eta")
+                histoSummedTT.GetXaxis().SetBinLabel(3,"pT")
+                histoSummedTT.GetXaxis().SetBinLabel(4,"ProbQ")
+                histoSummedTT.GetXaxis().SetBinLabel(5,"NumHits")
+                histoSummedTT.GetXaxis().SetBinLabel(6,"NumPixHits")
+                histoSummedTT.GetXaxis().SetBinLabel(7,"ValidFract")
+                histoSummedTT.GetXaxis().SetBinLabel(8,"NumDeDx")
+                histoSummedTT.GetXaxis().SetBinLabel(9,"ProbXY")
+                histoSummedTT.GetXaxis().SetBinLabel(10,"HighPurity")
+                histoSummedTT.GetXaxis().SetBinLabel(11,"Chi2oDOF")
+                histoSummedTT.GetXaxis().SetBinLabel(12,"EoP")
+                histoSummedTT.GetXaxis().SetBinLabel(13,"dz")
+                histoSummedTT.GetXaxis().SetBinLabel(14,"dxy")
+                histoSummedTT.GetXaxis().SetBinLabel(15,"pTerrOverpT")
+                histoSummedTT.GetXaxis().SetBinLabel(16,"TKIso")
+                histoSummedTT.GetXaxis().SetBinLabel(17,"MiniIso")
+                histoSummedTT.GetXaxis().SetBinLabel(18,"MassT")
+                histoSummedTT.GetXaxis().SetBinLabel(19,"Ih")
+                histoSummedTT.GetXaxis().SetBinLabel(20,"MuStat")
+                histoSummedTT.GetXaxis().SetBinLabel(21,"PhiTOF")
+                histoSummedTT.GetXaxis().SetBinLabel(22,"EtaTOF")
+              elif (keyname2== "pfType") :
+                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedTT.GetXaxis().SetBinLabel(1,"AllTracks")
+                histoSummedTT.GetXaxis().SetBinLabel(2,"PFtracks")
+                histoSummedTT.GetXaxis().SetBinLabel(3,"isElectron")
+                histoSummedTT.GetXaxis().SetBinLabel(4,"isMuon")
+                histoSummedTT.GetXaxis().SetBinLabel(5,"isPhoton")
+                histoSummedTT.GetXaxis().SetBinLabel(6,"isChHadron")
+                histoSummedTT.GetXaxis().SetBinLabel(7,"isNeutHadron")
+                histoSummedTT.GetXaxis().SetBinLabel(8,"isUndefined")
+                histoSummedTT.GetXaxis().SetBinLabel(9,"else")
+                
+                QCDFlatHisto.Scale(intLumi*crossSectionFlat/nEventsPostTrigArrayFlat)
+                
+                legMass.AddEntry(QCDFlatHisto,"2018_QCD_Pt-20ToInf_MuPt15","LP")
+                legMass.AddEntry(SingleMuonHisto,"SingleMuon-EraC","LP")
+                legMass.AddEntry(METHisto,"MET-EraC","LP")
+                
+                tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+                #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+                tex2.SetNDC();
+                tex2.SetTextFont(61);
+                tex2.SetTextSize(0.0675);
+                tex2.SetLineWidth(2);
+
+                tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
+                #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+                #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+                tex3.SetNDC();
+                tex3.SetTextFont(52);
+                tex3.SetTextSize(0.0485);
+                tex3.SetLineWidth(2);
+
+                cstackPlotsString = 'cstackPlots'+str(j)
+                cstackPlots = ROOT.TCanvas(cstackPlotsString, cstackPlotsString, 800,800)
+                stackPlots.Draw("HIST")
+                QCDFlatHisto.Draw("SAME")
+                SingleMuonHisto.Draw("SAME")
+                METHisto.Draw("SAME")
+#                stackPlots.SetTitle("")
+                stackPlots.GetXaxis().SetTitleSize(0.05)
+                stackPlots.GetXaxis().SetTitleOffset(1)
+                stackPlots.GetYaxis().SetRangeUser(0,1)
+#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
+#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
+#                stackPlots.GetYaxis().SetTitleSize(0.05)
+#                stackPlots.GetYaxis().SetTitleOffset(1)
+
+                max1 = numpy.maximum(stackPlots.GetMaximum(),QCDFlatHisto.GetMaximum())
+                max2 = numpy.maximum(SingleMuonHisto.GetMaximum(),METHisto.GetMaximum())
+                max = numpy.maximum(max1,max2)
+                stackPlots.SetMaximum(max*1.5)
+                stackPlots.SetMinimum(0.001)
+                legMass.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+
+                cstackPlots.SaveAs("CompareQCDv4/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/CompareStackedBcg.py b/Analyzer/test/Tamas/PostProcScripts/CompareStackedBcg.py
new file mode 100644
index 0000000..64582e6
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/CompareStackedBcg.py
@@ -0,0 +1,413 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog binNumber")
+(opt,args) = parser.parse_args()
+
+BinNumber = sys.argv[1]
+bin = int(BinNumber)
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+#"crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+#"crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+#"crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_WJetsToLNu_0J_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_TTToHadronic_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_TTToSemiLeptonic_wProbQ_CodeV19p1_v1.root",
+"crab_Analysis_2018_TTTo2L2Nu_wProbQ_CodeV19p1_v1.root",
+]
+
+QCDFlat = ROOT.TFile.Open("crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_wProbQ_CodeV18p9_v1.root")
+SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2017_wProbQ_CodeV19p2_v1.root")
+MET = ROOT.TFile.Open("crab_Analysis_MET_Run2017_wProbQ_CodeV19p2_v1.root")
+
+intLumi = 10.0 # 137.0
+
+crossSectionArray = [
+# QCD_Pt-20_MuEnrichedPt15_TuneCP5_13TeV-pythia8, 239000.0 +-	755.8
+# 2797000.0, #+-8800.0, 2018_QCD_Pt-15To20_MuEnrichedPt5
+# 2518000.0, #+-7940.0, 2018_QCD_Pt-20To30_MuEnrichedPt5
+# 1361000.0, #+-4263.0, 2018_QCD_Pt-30To50_MuEnrichedPt5
+ 377800.0, #+-1184.0, 2018_QCD_Pt-50To80_MuEnrichedPt5
+ 88620.0, #+-275.1, 2018_QCD_Pt-80To120_MuEnrichedPt5
+ 21070.0, #+-65.28, 2018_QCD_Pt-120To170_MuEnrichedPt5
+ 7019.0, #+-21.61, 2018_QCD_Pt-170To300_MuEnrichedPt5
+ 622.4, #+-1.891, 2018_QCD_Pt-300To470_MuEnrichedPt5
+ 58.86, #+-0.1776, 2018_QCD_Pt-470To600_MuEnrichedPt5
+ 18.22, #+-0.05471, 2018_QCD_Pt-600To800_MuEnrichedPt5
+ 3.25, #+-0.0148, 2018_QCD_Pt-600To800_MuEnrichedPt5
+ 1.613, #+-, 2018_QCD_Pt-1000_MuEnrichedPt5
+ 53330.0, #+-	90.89, WJetsToLNu
+ 687.1, # or 377.96, # or , TTtoHadronic
+ 687.1, # or 65.34, TTtoSemiLeptonic
+ 88.29, # or 687.1, TTto2L2N
+]
+
+crossSectionFlat = 239000.0	# +-755.8
+
+fileInArray = []
+for sample in BackgroundSamples:
+  fileInArray.append(ROOT.TFile.Open(sample))
+  
+
+nEventsPostTrigArrayFlat = QCDFlat.Get("analyzer/BaseName/TotalTE").Integral()
+
+
+dirs = []
+for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
+  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
+  curr_dir = fileInArray[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileInArray[0].Get(newname)
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if obj.InheritsFrom("TObject"):
+              if not os.path.exists(os.path.dirname("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/")): os.makedirs(os.path.dirname("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/"))
+              if (obj.GetEntries() == 0 ) :
+                continue
+              if ("Total" in keyname2) :
+                continue
+                
+              stackPlotsTemp = ROOT.THStack("stackPlotsTemp","")
+              stackPlots = ROOT.THStack("stackPlots","")
+              stackedSummedQCD = ROOT.THStack("stackedSummedQCD","")
+              stackedSummedTT = ROOT.THStack("stackedSummedTT","")
+              stackedSummedW = ROOT.THStack("stackedSummedW","")
+              histoSummedQCD = ROOT.TH1F() #"histoSummedQCD")
+              histoSummedTT = ROOT.TH1F() #"histoSummedTT")
+              histoSummedW = ROOT.TH1F() #"histoSummedW")
+              
+              legMass =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+              legMass.SetTextFont(42)
+              legMass.SetTextSize(0.02)
+              legMass.SetBorderSize(1);
+              legMass.SetBorderSize(0);
+              legMass.SetLineColor(1);
+              legMass.SetLineStyle(1);
+              legMass.SetLineWidth(1);
+              legMass.SetFillColor(0);
+              legMass.SetFillStyle(1001);
+              
+#              print("------------------------------------------------------------")
+              if (obj.ClassName() == "TH1F") : # and "BS_" in keyname2):
+                # array to contain a specific (keyname2) histogram for all samples
+                histoArray = []
+                nEventsPostTrigArray = []
+                for fileIn in fileInArray:
+                  histoArray.append(fileIn.Get(newname))
+                  nEvetsPostTrig = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
+                  nEventsPostTrigArray.append(nEvetsPostTrig)
+                for index in range(0, len(histoArray)):
+                  histoArray[index].Scale(intLumi*crossSectionArray[index]/nEventsPostTrigArray[index])
+                  if (index < 9) :
+                    stackedSummedQCD.Add(histoArray[index])
+                  elif (index>=9 and index<10) :
+                    stackedSummedW.Add(histoArray[index])
+                  elif (index>=10 and index<13) :
+                    stackedSummedTT.Add(histoArray[index])
+                    
+              elif ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "genrecopT" or "BS_" in keyname2)):
+                histo2DArray = []
+                nEventsPostTrig2DArray = []
+                for fileIn in fileInArray:
+                  if (fileIn.Get(newname).GetEntries() == 0 ) :
+                    continue
+                  fileIn.Get(newname).ProjectionY(newname,bin,bin,"e").Draw()
+                  histo2DArray.append(fileIn.Get(newname).ProjectionY(newname,bin,bin,"e"))
+                  nEvetsPostTrig2D = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
+                  nEventsPostTrig2DArray.append(nEvetsPostTrig2D)
+                for index in range(0, len(histo2DArray)):
+                  histo2DArray[index].Scale(intLumi*crossSectionArray[index]/nEventsPostTrig2DArray[index])
+                  if (index < 9) :
+                    stackedSummedQCD.Add(histo2DArray[index])
+                  elif (index>=9 and index<10) :
+                    stackedSummedW.Add(histo2DArray[index])
+                  elif (index>=10 and index<13) :
+                    stackedSummedTT.Add(histo2DArray[index])
+                
+                
+#              elif (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
+#                histo3DArray = []
+#                nEventsPostTrig3DArray = []
+#                for fileIn in fileInArray:
+#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
+#                      continue
+#                  fileIn.Get(newname).GetXaxis().SetRange(bin,bin)
+#                  fileIn.Get(newname).Project3DProfile("ZY").Draw()
+#                  histo3DArray.append(fileIn.Get(newname).Project3DProfile("ZY"))
+#                  nEvetsPostTrig3D = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
+#                  nEventsPostTrig3DArray.append(nEvetsPostTrig3D)
+#                for index in range(0, len(histo3DArray)):
+#                  histo3DArray[index].Scale(intLumi*crossSectionArray[index]/nEventsPostTrig3DArray[index])
+#                  if (index < 9) :
+#                    stackedSummedQCD.Add(histo3DArray[index])
+#                  elif (index>=9 and index<10) :
+#                    stackedSummedW.Add(histo3DArray[index])
+#                  elif (index>=10 and index<13) :
+#                    stackedSummedTT.Add(histo3DArray[index])
+              else :
+                continue
+
+#               convert stacks to (summed) histos
+              histoSummedQCD = stackedSummedQCD.GetStack().Last()
+              histoSummedTT = stackedSummedTT.GetStack().Last()
+              histoSummedW = stackedSummedW.GetStack().Last()
+              
+              stackPlotsTemp.Add(histoSummedTT)
+              histoSummedTT.SetMarkerStyle(20)
+              histoSummedTT.SetLineColor(3)
+              histoSummedTT.SetFillColor(3)
+              histoSummedTT.SetMarkerColor(3)
+              
+              stackPlotsTemp.Add(histoSummedW)
+              histoSummedW.SetMarkerStyle(20)
+              histoSummedW.SetLineColor(4)
+              histoSummedW.SetFillColor(4)
+              histoSummedW.SetMarkerColor(4)
+              
+              
+              stackPlotsTemp.Add(histoSummedQCD)
+              histoSummedQCD.SetMarkerStyle(20)
+              histoSummedQCD.SetLineColor(2)
+              histoSummedQCD.SetFillColor(2)
+              histoSummedQCD.SetMarkerColor(2)
+              
+              QCDFlatHisto = QCDFlat.Get(newname)
+              SingleMuonHisto = SingleMuon.Get(newname)
+              METHisto = MET.Get(newname)
+              
+              QCDFlatHisto.Draw()
+              SingleMuonHisto.Draw()
+              METHisto.Draw()
+              QCDFlatHisto.SetMarkerStyle(20)
+              QCDFlatHisto.SetMarkerColor(1)
+              QCDFlatHisto.SetLineColor(1)
+              
+              QCDFlatHisto.Scale(intLumi*crossSectionFlat/nEventsPostTrigArrayFlat)
+              
+              SingleMuonHisto.SetMarkerStyle(20)
+              SingleMuonHisto.SetMarkerColor(4)
+              SingleMuonHisto.SetLineColor(4)
+              
+              METHisto.SetMarkerStyle(20)
+              METHisto.SetMarkerColor(5)
+              METHisto.SetLineColor(5)
+              
+              
+              if (keyname2== "CutFlow") :
+                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
+                QCDFlatHisto.Scale(1/QCDFlatHisto.GetMaximum())
+                SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+                METHisto.Scale(1/METHisto.GetMaximum())
+                histoSummedTT.GetXaxis().SetBinLabel(1,"Trigger")
+                histoSummedTT.GetXaxis().SetBinLabel(2,"Eta")
+                histoSummedTT.GetXaxis().SetBinLabel(3,"pT")
+                histoSummedTT.GetXaxis().SetBinLabel(4,"NumHits")
+                histoSummedTT.GetXaxis().SetBinLabel(5,"NumPixHits")
+                histoSummedTT.GetXaxis().SetBinLabel(6,"ValidFract")
+                histoSummedTT.GetXaxis().SetBinLabel(7,"NumDeDx")
+                histoSummedTT.GetXaxis().SetBinLabel(8,"ProbXY")
+                histoSummedTT.GetXaxis().SetBinLabel(9,"HighPurity")
+                histoSummedTT.GetXaxis().SetBinLabel(10,"Chi2oDOF")
+                histoSummedTT.GetXaxis().SetBinLabel(11,"EoP")
+                histoSummedTT.GetXaxis().SetBinLabel(12,"dz")
+                histoSummedTT.GetXaxis().SetBinLabel(13,"dxy")
+                histoSummedTT.GetXaxis().SetBinLabel(14,"pTerrOverpT")
+                histoSummedTT.GetXaxis().SetBinLabel(15,"TKIso")
+                histoSummedTT.GetXaxis().SetBinLabel(16,"MiniIso")
+                histoSummedTT.GetXaxis().SetBinLabel(17,"MassT")
+                histoSummedTT.GetXaxis().SetBinLabel(18,"Ih")
+                histoSummedTT.GetXaxis().SetBinLabel(19,"ProbQ")
+                histoSummedTT.GetXaxis().SetBinLabel(20,"MuStat")
+                histoSummedTT.GetXaxis().SetBinLabel(21,"PhiTOF")
+                histoSummedTT.GetXaxis().SetBinLabel(22,"EtaTOF")
+              elif (keyname2== "CutFlowProbQFirst") :
+                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
+                QCDFlatHisto.Scale(1/QCDFlatHisto.GetMaximum())
+                SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+                METHisto.Scale(1/METHisto.GetMaximum())
+                histoSummedTT.GetXaxis().SetBinLabel(1,"Trigger")
+                histoSummedTT.GetXaxis().SetBinLabel(2,"Eta")
+                histoSummedTT.GetXaxis().SetBinLabel(3,"pT")
+                histoSummedTT.GetXaxis().SetBinLabel(4,"ProbQ")
+                histoSummedTT.GetXaxis().SetBinLabel(5,"NumHits")
+                histoSummedTT.GetXaxis().SetBinLabel(6,"NumPixHits")
+                histoSummedTT.GetXaxis().SetBinLabel(7,"ValidFract")
+                histoSummedTT.GetXaxis().SetBinLabel(8,"NumDeDx")
+                histoSummedTT.GetXaxis().SetBinLabel(9,"ProbXY")
+                histoSummedTT.GetXaxis().SetBinLabel(10,"HighPurity")
+                histoSummedTT.GetXaxis().SetBinLabel(11,"Chi2oDOF")
+                histoSummedTT.GetXaxis().SetBinLabel(12,"EoP")
+                histoSummedTT.GetXaxis().SetBinLabel(13,"dz")
+                histoSummedTT.GetXaxis().SetBinLabel(14,"dxy")
+                histoSummedTT.GetXaxis().SetBinLabel(15,"pTerrOverpT")
+                histoSummedTT.GetXaxis().SetBinLabel(16,"TKIso")
+                histoSummedTT.GetXaxis().SetBinLabel(17,"MiniIso")
+                histoSummedTT.GetXaxis().SetBinLabel(18,"MassT")
+                histoSummedTT.GetXaxis().SetBinLabel(19,"Ih")
+                histoSummedTT.GetXaxis().SetBinLabel(20,"MuStat")
+                histoSummedTT.GetXaxis().SetBinLabel(21,"PhiTOF")
+                histoSummedTT.GetXaxis().SetBinLabel(22,"EtaTOF")
+              elif (keyname2== "pfType") :
+                histoSummedTT.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedW.Scale(1/stackPlotsTemp.GetMaximum())
+                histoSummedQCD.Scale(1/stackPlotsTemp.GetMaximum())
+                QCDFlatHisto.Scale(1/QCDFlatHisto.GetMaximum())
+                SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+                METHisto.Scale(1/METHisto.GetMaximum())
+                histoSummedTT.GetXaxis().SetBinLabel(1,"AllTracks")
+                histoSummedTT.GetXaxis().SetBinLabel(2,"PFtracks")
+                histoSummedTT.GetXaxis().SetBinLabel(3,"isElectron")
+                histoSummedTT.GetXaxis().SetBinLabel(4,"isMuon")
+                histoSummedTT.GetXaxis().SetBinLabel(5,"isPhoton")
+                histoSummedTT.GetXaxis().SetBinLabel(6,"isChHadron")
+                histoSummedTT.GetXaxis().SetBinLabel(7,"isNeutHadron")
+                histoSummedTT.GetXaxis().SetBinLabel(8,"isUndefined")
+                histoSummedTT.GetXaxis().SetBinLabel(9,"else")
+              else :
+                histoSummedTT.GetYaxis().SetTitle("Tracks/bin")
+                histoSummedTT.GetXaxis().SetTitle(keyname2)
+                
+              stackPlots.Add(histoSummedTT)
+              stackPlots.Add(histoSummedW)
+              stackPlots.Add(histoSummedQCD)
+            
+              legMass.AddEntry(histoSummedQCD,"#mu-enriched QCD (full pt)","LP")
+              legMass.AddEntry(histoSummedW,"W process","LP")
+              legMass.AddEntry(histoSummedTT,"ttbar process","LP")
+              legMass.AddEntry(QCDFlatHisto,"2018_QCD_Pt-20ToInf_MuPt15","LP")
+              legMass.AddEntry(SingleMuonHisto,"SingleMuon-EraC","LP")
+              legMass.AddEntry(METHisto,"MET-EraC","LP")
+              
+              tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+              #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+              tex2.SetNDC();
+              tex2.SetTextFont(61);
+              tex2.SetTextSize(0.0675);
+              tex2.SetLineWidth(2);
+
+              tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
+              #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+              #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+              tex3.SetNDC();
+              tex3.SetTextFont(52);
+              tex3.SetTextSize(0.0485);
+              tex3.SetLineWidth(2);
+
+              cstackPlotsString = 'cstackPlots'+str(j)
+              cstackPlots = ROOT.TCanvas(cstackPlotsString, cstackPlotsString, 800,800)
+              
+              stackPlots.Draw("HISTO")
+              QCDFlatHisto.Draw("SAME")
+              SingleMuonHisto.Draw("SAME")
+              METHisto.Draw("SAME")
+#                stackPlots.SetTitle("")
+              stackPlots.GetXaxis().SetTitleSize(0.05)
+              stackPlots.GetXaxis().SetTitleOffset(1)
+              if ("Mass" in keyname2) :
+                stackPlots.GetXaxis().SetRangeUser(0,1800)
+#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
+#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
+#                stackPlots.GetYaxis().SetTitleSize(0.05)
+#                stackPlots.GetYaxis().SetTitleOffset(1)
+
+              max1 = numpy.maximum(stackPlots.GetMaximum(),QCDFlatHisto.GetMaximum())
+              max2 = numpy.maximum(SingleMuonHisto.GetMaximum(),METHisto.GetMaximum())
+              max = numpy.maximum(max1,max2)
+              stackPlots.SetMaximum(max*1.4)
+              stackPlots.SetMinimum(0.0)
+              legMass.Draw("SAME")
+              tex2.Draw("SAME")
+              tex3.Draw("SAME")
+              
+#              QCDFlatHisto = QCDFlat.Get(newname)
+#              QCDFlatHisto.SetMarkerStyle(20)
+#              SingleMuonHisto = SingleMuon.Get(newname)
+#              SingleMuonHisto.SetMarkerStyle(20)
+#              SingleMuonHisto.SetMarkerColor(4)
+#              SingleMuonHisto.SetLineColor(4)
+#              METHisto = MET.Get(newname)
+#              METHisto.SetMarkerStyle(20)
+#              METHisto.SetMarkerColor(5)
+#              METHisto.SetLineColor(5)
+
+              cstackPlots.SaveAs("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/"+keyname2+".png")
+              
+              if ("Mass" in keyname2) :
+                cstackPlotsZoomedString = 'cstackPlotsZoomed'+str(j)
+                cstackPlotsZoomed = ROOT.TCanvas(cstackPlotsZoomedString, cstackPlotsZoomedString, 800,800)
+                stackPlotsZoomed = stackPlots.Clone()
+                stackPlotsZoomed.GetXaxis().SetRangeUser(500,1800)
+                stackPlotsZoomed.GetYaxis().SetRangeUser(0,0.0000000000000025)
+                stackPlotsZoomed.SetMaximum(0.0000000000000025)
+#                stackPlots.SetMinimum(0.0)
+                stackPlotsZoomed.Draw("HISTO")
+                QCDFlatHisto.Draw("SAME")
+                SingleMuonHisto.Draw("SAME")
+                METHisto.Draw("SAME")
+                legMass.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                cstackPlotsZoomed.SaveAs("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/"+keyname2+"_zoomed.png")
+                
+              
+              cstackPlotsLogString = 'cstackPlotsLog'+str(j)
+              cstackPlots = ROOT.TCanvas(cstackPlotsLogString, cstackPlotsLogString, 800,800)
+              cstackPlots.SetLogy()
+              stackPlots.Draw()
+
+#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
+#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
+#                stackPlots.GetYaxis().SetTitleSize(0.05)
+#                stackPlots.GetYaxis().SetTitleOffset(1)
+
+              max = numpy.maximum(stackPlots.GetMaximum(),stackPlots.GetMaximum())
+              stackPlots.SetMaximum(max*100000)
+              if ("BS" in keyname2 or "PostPreS" in keyname2) :
+                stackPlots.SetMinimum(0.0001)
+              else:
+                stackPlots.SetMinimum(0.000000000000000001)
+                
+              stackPlots.Draw("HISTO")
+              QCDFlatHisto.Draw("SAME")
+              SingleMuonHisto.Draw("SAME")
+              METHisto.Draw("SAME")
+#                stackPlots.SetTitle("")
+              stackPlots.GetXaxis().SetTitleSize(0.05)
+              stackPlots.GetXaxis().SetTitleOffset(1)
+              stackPlots.GetYaxis().SetRangeUser(0,1)
+              
+              legMass.Draw("SAME")
+              tex2.Draw("SAME")
+              tex3.Draw("SAME")
+
+              cstackPlots.SaveAs("StackedComparrison_"+(BackgroundSamples[0])[BackgroundSamples[0].find("Code"):BackgroundSamples[0].find("Code")+9]+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/CompareStackedBcg_wProbQ.py b/Analyzer/test/Tamas/PostProcScripts/CompareStackedBcg_wProbQ.py
new file mode 100644
index 0000000..cb4affe
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/CompareStackedBcg_wProbQ.py
@@ -0,0 +1,327 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+#BinNumber = sys.argv[2]
+#bin = int(BinNumber)
+bin = 3
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_AllQCD_wProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_AllWJets_wProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_AllTTbar_wProbQ_CodeV"+codeVersion+"_v1.root",
+]
+
+SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_wProbQ_CodeV"+codeVersion+"_v1.root")
+
+SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_wProbQ_CodeV"+codeVersion+"_v1.root")
+SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2400_wProbQ_CodeV"+codeVersion+"_v1.root")
+
+bckArray = []
+for sample in BackgroundSamples:
+  bckArray.append(ROOT.TFile.Open(sample))
+  
+if not os.path.exists(os.path.dirname("StackedComparrison_wProbQ_CodeV"+codeVersion)) :
+  os.system("mkdir StackedComparrison_wProbQ_CodeV"+codeVersion)
+
+dirs = []
+for i in range(0, bckArray[0].GetListOfKeys().GetEntries()):
+  dirname = bckArray[0].GetListOfKeys().At(i).GetName()
+  curr_dir = bckArray[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = bckArray[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = bckArray[0].Get(newname)
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if not obj.InheritsFrom("TObject"): continue
+
+          if (obj.GetEntries() == 0 ) : continue
+          stackedSummedBackground = ROOT.THStack("stackedSummedBackground","")
+          stackedNormSummedBackground = ROOT.THStack("stackedNormSummedBackground","")
+          
+          SingleMuonHisto = SingleMuon.Get(newname)
+          SingleMuonHisto.SetMarkerStyle(20)
+          SingleMuonHisto.SetMarkerColor(1)
+          SingleMuonHisto.SetLineColor(1)
+          
+          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
+          SelectedSignalSamples1Histo.SetMarkerColor(6)
+          SelectedSignalSamples1Histo.SetLineColor(6)
+          
+          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
+          SelectedSignalSamples2Histo.SetMarkerColor(7)
+          SelectedSignalSamples2Histo.SetLineColor(7)
+          
+          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+          if (keyname2.find("Per")==-1) :
+            axisXTitle = keyname2[keyname2.find("_")+1:]
+            axisYTitle = "Tracks/bin"
+          else :
+            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Per")]
+            axisYTitle = keyname2[keyname2.find("Per")+3:]
+          
+#              print("------------------------------------------------------------")
+          if (obj.ClassName() == "TH1F") : # and "BS_" in keyname2):
+
+            # array to contain a specific (keyname2) histogram for all samples
+            histoArray = []
+            nEventsPostTrigArray = []
+            for index,fileIn in enumerate(bckArray):
+              histo = fileIn.Get(newname)
+              histoArray.append(histo)
+              stackedSummedBackground.Add(histo)
+              histo.SetLineColor(index+2)
+              histo.SetFillColor(index+2)
+              histo.SetMarkerColor(index+2)
+              if ((index==0)) :
+                legend.AddEntry(histo,"QCD p_{T}={50,inf}","LP")
+              elif ((index==1)) :
+                legend.AddEntry(histo,"WJets","LP")
+              elif ((index==2)) :
+                legend.AddEntry(histo,"TTBar","LP")
+#              elif ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "genrecopT" or "BS_" in keyname2)):
+#                histo2DArray = []
+#                nEventsPostTrig2DArray = []
+#                for fileIn in bckArray:
+#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
+#                    continue
+#                  fileIn.Get(newname).ProjectionY(newname,bin,bin,"e").Draw()
+#                for index in range(0, len(histo2DArray)):
+#                  if (index < 9) :
+#                    stackedSummedQCD.Add(histo2DArray[index])
+#                  elif (index>=9 and index<10) :
+#                    stackedSummedW.Add(histo2DArray[index])
+#                  elif (index>=10 and index<13) :
+#                    stackedSummedTT.Add(histo2DArray[index])
+            
+#              elif (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
+#                histo3DArray = []
+#                nEventsPostTrig3DArray = []
+#                for fileIn in bckArray:
+#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
+#                      continue
+#                  fileIn.Get(newname).GetXaxis().SetRange(bin,bin)
+#                  fileIn.Get(newname).Project3DProfile("ZY").Draw()
+#                  histo3DArray.append(fileIn.Get(newname).Project3DProfile("ZY"))
+#                  nEvetsPostTrig3D = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
+#                  nEventsPostTrig3DArray.append(nEvetsPostTrig3D)
+#                for index in range(0, len(histo3DArray)):
+          else :
+            continue
+          #          convert stacks to (summed) histos
+          stackedSummedBackground.Draw()
+          stackedSummedBackgroundTmp = stackedSummedBackground.GetStack().Last()
+          for index,fileIn in enumerate(bckArray):
+            normHisto = fileIn.Get(newname)
+            max = stackedSummedBackgroundTmp.GetMaximum()
+            if (max==0) : continue
+            normHisto.Scale(1/max)
+            stackedNormSummedBackground.Add(normHisto)
+
+          stackedNormSummedBackground.Draw()
+
+          if (keyname2== "CutFlow") :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"Trigger")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"Eta")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"pT")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"NumPixHits")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"ValidFract")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"NumDeDx")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"ProbXY")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"HighPurity")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"Chi2oDOF")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(10,"EoP")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(11,"dz")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(12,"dxy")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(13,"pTerrOverpT")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(14,"N/A")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(15,"MiniIso")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(16,"PF ID")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(17,"Ih")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(18,"ProbQ")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(19,"MuStat")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(20,"PhiTOF")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(21,"EtaTOF")
+          elif (keyname2== "CutFlowProbQFirst") :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"Trigger")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"Eta")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"pT")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"ProbQ")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"NumPixHits")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"ValidFract")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"NumDeDx")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"ProbXY")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"HighPurity")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(10,"Chi2oDOF")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(11,"EoP")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(12,"dz")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(13,"dxy")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(14,"pTerrOverpT")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(15,"N/A")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(16,"MiniIso")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(17,"PF ID")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(18,"Ih")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(19,"MuStat")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(20,"PhiTOF")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(21,"EtaTOF")
+          elif ("pfType" in keyname2) :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"AllTracks")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"PFtracks")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"isElectron")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"isMuon")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"isPhoton")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"isChHadron")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"isNeutHadron")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"isUndefined")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"else")
+#          else :
+#
+#
+#
+          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018C","LP")
+          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
+          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPgluino M=2400 GeV", "LP")
+#          legend.AddEntry(METHisto,"MET-EraC","LP")
+          
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex4 = ROOT.TLatex()
+
+          if ("PrePreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"Before pre-selection")
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"After N-1 selection")
+          elif ("PostPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"After pre-selection")
+            
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.0285);
+          tex4.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
+
+          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
+          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+            stackedNormSummedBackground.Draw("HISTO")
+            stackedNormSummedBackground.SetTitle("")
+            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedNormSummedBackground.GetXaxis().SetTitle("")
+            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
+            stackedNormSummedBackground.SetMaximum(1.3)
+          else :
+            stackedSummedBackground.Draw("HISTO")
+            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
+            stackedSummedBackground.GetXaxis().SetTitle(axisXTitle)
+            stackedSummedBackground.GetYaxis().SetTitle(axisYTitle)
+            stackedSummedBackground.SetMaximum(max*1.4)
+            stackedSummedBackground.SetMinimum(0.0)
+          SingleMuonHisto.Draw("SAMEP")
+          SelectedSignalSamples1Histo.Draw("SAME")
+          SelectedSignalSamples2Histo.Draw("SAME")
+          if ("Mass" in keyname2) :
+            stackedSummedBackground.GetXaxis().SetRangeUser(0,1800)
+#                stackedSummedBackground.GetXaxis().SetTitle("Mass [GeV]")
+#                stackedSummedBackground.GetYaxis().SetTitle("Tracks/bin")
+#                stackedSummedBackground.GetYaxis().SetTitleSize(0.05)
+#                stackedSummedBackground.GetYaxis().SetTitleOffset(1)
+
+ 
+          
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+
+          cstackedSummedBackground.SaveAs("StackedComparrison_wProbQ_CodeV"+codeVersion+"/"+keyname2+".png")
+          
+#---------------------------------------------------------------------------------------------
+          # now let's do everything again but on a log Y scale
+          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
+          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
+          cstackedSummedBackground.SetLogy()
+          
+          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
+            stackedSummedBackground.SetMinimum(0.0001)
+          else:
+            stackedSummedBackground.SetMinimum(0.000000000000000001)
+            
+          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+            stackedNormSummedBackground.Draw("HISTO")
+            stackedNormSummedBackground.SetTitle("")
+            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedNormSummedBackground.GetXaxis().SetTitle("")
+            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
+            stackedNormSummedBackground.SetMaximum(12)
+          else :
+            stackedSummedBackground.Draw("HISTO")
+            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
+            stackedSummedBackground.SetMaximum(max*1000)
+          SingleMuonHisto.Draw("SAMEP")
+          SelectedSignalSamples1Histo.Draw("SAME")
+          SelectedSignalSamples2Histo.Draw("SAME")
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+
+          cstackedSummedBackground.SaveAs("StackedComparrison_wProbQ_CodeV"+codeVersion+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/CompareWithArguementList.py b/Analyzer/test/Tamas/PostProcScripts/CompareWithArguementList.py
new file mode 100644
index 0000000..aaa152f
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/CompareWithArguementList.py
@@ -0,0 +1,326 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python3 %prog sample.txt")
+(opt,args) = parser.parse_args()
+
+sampleInFile = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+SamplesArray = []
+
+bin = 3
+
+codeVersion = sampleInFile[sampleInFile.find("Code")+4:sampleInFile.find("Code")+8]
+
+with open(sampleInFile, "r") as a_file:
+  for line in a_file:
+    stripped_line = line.strip()
+    SamplesArray.append(stripped_line)
+
+fileInArray = []
+for sample in SamplesArray:
+  fileInArray.append(ROOT.TFile.Open(sample))
+  
+dirs = []
+
+for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
+  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
+  curr_dir = fileInArray[0].GetDirectory(dirname)
+
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileInArray[0].Get(newname)
+          obj.SetMarkerStyle(20)
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if ("Total" in keyname2 or "IntLumi" in keyname2 or "XSection" in keyname2) :
+            continue
+          if obj.InheritsFrom("TObject"):
+              if not os.path.exists(os.path.dirname("Compare"+sampleInFile[:-4]+"/a.png")):
+                print("Create dir")
+                os.makedirs(os.path.dirname("Compare"+sampleInFile[:-4]+"/"))
+#              print(keyname2)
+              if (obj.GetEntries() == 0 ) :
+                continue
+              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
+                # this maybe should go from bin to bin+1 ?
+                obj.SetMarkerStyle(20)
+                if ("" in keyname2):
+                  obj.GetXaxis().SetRange(bin,bin)
+                  obj.Project3D("ZY").Draw("COLZ")
+                else :
+                  obj.GetXaxis().SetRange(bin,bin)
+                  obj.Project3D("ZY").Draw("COLZ")
+              if (obj.ClassName() == "TH1F" or obj.ClassName() == "TProfile"): # and "BS_" in keyname2):
+                canvasString = 'canvas'+str(j)
+                canvas = ROOT.TCanvas(canvasString, canvasString, 800,800)
+                legend =  ROOT.TLegend(.55,.60,.80,.89,"","brNDC")
+                legend.SetTextFont(42)
+                legend.SetTextSize(0.017)
+                legend.SetBorderSize(1);
+                legend.SetBorderSize(0);
+                legend.SetLineColor(1);
+                legend.SetLineStyle(1);
+                legend.SetLineWidth(1);
+                legend.SetFillColor(0);
+                legend.SetFillStyle(1001);
+                
+                histoArray = []
+                for fileIn in fileInArray:
+                  histoArray.append(fileIn.Get(newname))
+                for index in range(0, len(histoArray)):
+                  histoArray[index].SetStats(0)
+                  histoArray[index].SetMarkerStyle(20)
+                  
+                  legend.AddEntry(histoArray[index],SamplesArray[index][19:SamplesArray[index].find("Code")+9],"LP")
+                  indexNew = -1
+                  if (index>-1):
+                    indexNew = index+2
+                  if (indexNew==10) :
+                    indexNew = 40
+                  elif (indexNew==11) :
+                    indexNew = 46
+                  elif (indexNew==12) :
+                    indexNew = 41
+                  elif (indexNew==13) :
+                    indexNew = 30
+                  elif (indexNew==14) :
+                    indexNew = 42
+                  histoArray[index].SetLineColor(indexNew)
+                  histoArray[index].SetMarkerColor(indexNew)
+#                  histoArray[index].SetFillColor(indexNew)
+                  histoArray[index].SetTitle("")
+                  max = 0.0
+#                  print(keyname2)
+                  for index2 in range(0, len(histoArray)):
+                    max = numpy.maximum(max,histoArray[index2].GetMaximum())
+                  histoArray[index].GetYaxis().SetTitle("Tracks/bin")
+                  histoArray[index].GetXaxis().SetTitle(keyname2)
+                  if (keyname2 == "pfType") :
+                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
+                    histoArray[index].GetXaxis().SetBinLabel(1,"AllTracks")
+                    histoArray[index].GetXaxis().SetBinLabel(2,"PFtracks")
+                    histoArray[index].GetXaxis().SetBinLabel(3,"isElectron")
+                    histoArray[index].GetXaxis().SetBinLabel(4,"isMuon")
+                    histoArray[index].GetXaxis().SetBinLabel(5,"isPhoton")
+                    histoArray[index].GetXaxis().SetBinLabel(6,"isChHadron")
+                    histoArray[index].GetXaxis().SetBinLabel(7,"isNeutHadron")
+                    histoArray[index].GetXaxis().SetBinLabel(8,"isUndefined")
+                    histoArray[index].GetXaxis().SetBinLabel(9,"else")
+                    histoArray[index].GetXaxis().SetTitle("")
+                    histoArray[index].GetYaxis().SetTitle("")
+                    histoArray[index].SetMaximum(1.4)
+                  elif (keyname2== "CutFlow") :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
+                    histoArray[index].GetXaxis().SetBinLabel(1,"Trigger")
+                    histoArray[index].GetXaxis().SetBinLabel(2,"Eta")
+                    histoArray[index].GetXaxis().SetBinLabel(3,"pT")
+                    histoArray[index].GetXaxis().SetBinLabel(4,"NumPixHits")
+                    histoArray[index].GetXaxis().SetBinLabel(5,"ValidFract")
+                    histoArray[index].GetXaxis().SetBinLabel(6,"NumDeDx")
+                    histoArray[index].GetXaxis().SetBinLabel(7,"HighPurity")
+                    histoArray[index].GetXaxis().SetBinLabel(8,"Chi2oDOF")
+                    histoArray[index].GetXaxis().SetBinLabel(9,"EoP")
+                    histoArray[index].GetXaxis().SetBinLabel(10,"dz")
+                    histoArray[index].GetXaxis().SetBinLabel(11,"dxy")
+                    histoArray[index].GetXaxis().SetBinLabel(12,"")
+                    histoArray[index].GetXaxis().SetBinLabel(13,"dRminPfJet")
+                    histoArray[index].GetXaxis().SetBinLabel(14,"MiniIso")
+                    histoArray[index].GetXaxis().SetBinLabel(15,"PFid")
+                    histoArray[index].GetXaxis().SetBinLabel(16,"Ih")
+                    histoArray[index].GetXaxis().SetBinLabel(17,"ProbXY")
+                    histoArray[index].GetXaxis().SetBinLabel(18,"") #ProbQ
+                    histoArray[index].GetXaxis().SetBinLabel(19,"") #MuStat
+                    histoArray[index].GetXaxis().SetBinLabel(20,"") #PhiTOF
+                    histoArray[index].GetXaxis().SetBinLabel(21,"") #EtaTOF
+                    histoArray[index].GetXaxis().SetTitle("")
+                    histoArray[index].GetYaxis().SetTitle("")
+                    histoArray[index].SetMaximum(1.4)
+                  elif (keyname2== "CutFlowReverse") :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
+                    histoArray[index].GetXaxis().SetBinLabel(1,"Trigger")
+                    histoArray[index].GetXaxis().SetBinLabel(2,"Eta")
+                    histoArray[index].GetXaxis().SetBinLabel(3,"pT")
+                    histoArray[index].GetXaxis().SetBinLabel(4,"NumPixHits")
+                    histoArray[index].GetXaxis().SetBinLabel(5,"ValidFract")
+                    histoArray[index].GetXaxis().SetBinLabel(6,"NumDeDx")
+                    histoArray[index].GetXaxis().SetBinLabel(7,"HighPurity")
+                    histoArray[index].GetXaxis().SetBinLabel(8,"Chi2oDOF")
+                    histoArray[index].GetXaxis().SetBinLabel(9,"EoP")
+                    histoArray[index].GetXaxis().SetBinLabel(10,"dz")
+                    histoArray[index].GetXaxis().SetBinLabel(11,"dxy")
+                    histoArray[index].GetXaxis().SetBinLabel(12,"") #pTerrOverpT
+                    histoArray[index].GetXaxis().SetBinLabel(13,"dRminPfJet")
+                    histoArray[index].GetXaxis().SetBinLabel(14,"MiniIso")
+                    histoArray[index].GetXaxis().SetBinLabel(15,"PFid")
+                    histoArray[index].GetXaxis().SetBinLabel(16,"Ih")
+                    histoArray[index].GetXaxis().SetBinLabel(17,"ProbXY")
+                    histoArray[index].GetXaxis().SetBinLabel(18,"") #ProbQ
+                    histoArray[index].GetXaxis().SetBinLabel(19,"") #MuStat
+                    histoArray[index].GetXaxis().SetBinLabel(20,"") #PhiTOF
+                    histoArray[index].GetXaxis().SetBinLabel(21,"") #EtaTOF
+                    histoArray[index].GetXaxis().SetTitle("")
+                    histoArray[index].GetYaxis().SetTitle("")
+                    histoArray[index].SetMaximum(1.4)
+                  elif (keyname2 == "ErrorHisto") :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
+                    histoArray[index].GetXaxis().SetBinLabel(1,"All tracks")
+                    histoArray[index].GetXaxis().SetBinLabel(2,"No track/glob muon")
+                    histoArray[index].GetXaxis().SetBinLabel(3,"Track is null")
+                    histoArray[index].GetXaxis().SetBinLabel(4,"No PV")
+                    histoArray[index].GetXaxis().SetBinLabel(5,"No gen match")
+                    histoArray[index].GetXaxis().SetBinLabel(6,"Gen match too far")
+                    histoArray[index].GetXaxis().SetBinLabel(7,"No dEdx")
+                    histoArray[index].GetXaxis().SetBinLabel(8,"Cosmic track")
+                    histoArray[index].GetXaxis().SetTitle("")
+                    histoArray[index].GetYaxis().SetTitle("")
+                    histoArray[index].SetMaximum(1.4)
+                  elif ("pfType" in keyname2) :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    histoArray[index].GetXaxis().SetBinLabel(1,"AllTracks")
+                    histoArray[index].GetXaxis().SetBinLabel(2,"PFtracks")
+                    histoArray[index].GetXaxis().SetBinLabel(3,"isElectron")
+                    histoArray[index].GetXaxis().SetBinLabel(4,"isMuon")
+                    histoArray[index].GetXaxis().SetBinLabel(5,"isPhoton")
+                    histoArray[index].GetXaxis().SetBinLabel(6,"isChHadron")
+                    histoArray[index].GetXaxis().SetBinLabel(7,"isNeutHadron")
+                    histoArray[index].GetXaxis().SetBinLabel(8,"isUndefined")
+                    histoArray[index].GetXaxis().SetBinLabel(9,"else")
+                    histoArray[index].Draw("COLZ L")
+                  elif (keyname2== "CutFlowEta" or keyname2 == "CutFlowPfType") :
+                    histoArray[index].SetStats(0)
+                    histoArray[index].GetXaxis().SetBinLabel(1,"Trigger")
+                    histoArray[index].GetXaxis().SetBinLabel(2,"Eta")
+                    histoArray[index].GetXaxis().SetBinLabel(3,"pT")
+                    histoArray[index].GetXaxis().SetBinLabel(4,"NumPixHits")
+                    histoArray[index].GetXaxis().SetBinLabel(5,"ValidFract")
+                    histoArray[index].GetXaxis().SetBinLabel(6,"NumDeDx")
+                    histoArray[index].GetXaxis().SetBinLabel(7,"HighPurity")
+                    histoArray[index].GetXaxis().SetBinLabel(8,"Chi2oDOF")
+                    histoArray[index].GetXaxis().SetBinLabel(9,"EoP")
+                    histoArray[index].GetXaxis().SetBinLabel(10,"dz")
+                    histoArray[index].GetXaxis().SetBinLabel(11,"dxy")
+                    histoArray[index].GetXaxis().SetBinLabel(12,"") #pTerrOverpT
+                    histoArray[index].GetXaxis().SetBinLabel(13,"dRminPfJet")
+                    histoArray[index].GetXaxis().SetBinLabel(14,"MiniIso")
+                    histoArray[index].GetXaxis().SetBinLabel(15,"PFid")
+                    histoArray[index].GetXaxis().SetBinLabel(16,"Ih")
+                    histoArray[index].GetXaxis().SetBinLabel(17,"ProbXY")
+                    histoArray[index].GetXaxis().SetBinLabel(18,"") #ProbQ
+                    histoArray[index].GetXaxis().SetBinLabel(19,"") #MuStat
+                    histoArray[index].GetXaxis().SetBinLabel(20,"") #PhiTOF
+                    histoArray[index].GetXaxis().SetBinLabel(21,"") #EtaTOF
+                    histoArray[index].Draw("COLZ")
+                  elif ("IsPer" in keyname2) :
+                    histoArray[index].SetStats(0)
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].ProjectionY(newname,histoArray[index].GetXaxis().FindBin(0.7),-1,"e").Draw("COLZ")
+                  elif ("EIsolPer" in keyname2) :
+                    histoArray[index].SetStats(0)
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].ProjectionY(newname,histoArray[index].GetXaxis().FindBin(0.85),-1,"e").Draw("COLZ")
+                  else :
+                    histoArray[index].SetMaximum(max*1.5)
+                  histoArray[index].Draw("SAME")
+                
+                tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+                #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+                tex2.SetNDC();
+                tex2.SetTextFont(61);
+                tex2.SetTextSize(0.0675);
+                tex2.SetLineWidth(2);
+
+                tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
+                #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+                #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+                tex3.SetNDC();
+                tex3.SetTextFont(52);
+                tex3.SetTextSize(0.0485);
+                tex3.SetLineWidth(2);
+                
+                tex4 = ROOT.TLatex()
+                if ("PrePreS" in keyname2) :
+                  tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
+                elif ("N1" in keyname2) :
+                  tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
+                elif ("PostPreS" in keyname2) :
+                  tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
+                tex4.SetNDC();
+                tex4.SetTextFont(52);
+                tex4.SetTextSize(0.045);
+                tex4.SetLineWidth(2);
+
+
+#                stackPlots.Draw("HIST")
+#                QCDFlatHisto.Draw("SAME")
+#                stackPlots.SetTitle("")
+#                stackPlots.GetXaxis().SetTitleSize(0.05)
+#                stackPlots.GetXaxis().SetTitleOffset(1)
+#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
+#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
+#                stackPlots.GetYaxis().SetTitleSize(0.05)
+#                stackPlots.GetYaxis().SetTitleOffset(1)
+
+#                stackPlots.SetMaximum(max*1.1)
+#                stackPlots.SetMinimum(0.001)
+                legend.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+
+                canvas.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+".png")
+
+                cstackPlotsLogString = 'cstackPlotsLog'+str(j)
+                cstackPlots = ROOT.TCanvas(cstackPlotsLogString, cstackPlotsLogString, 800,800)
+                cstackPlots.SetLogy()
+                for index in range(0, len(histoArray)):
+                  histoArray[index].Draw("SAME")
+                  if ("CutFlow" in keyname2 or "pfType"  in keyname2 ) :
+                     histoArray[index].SetMaximum(100)
+                     histoArray[index].SetMinimum(0.0001)
+                  else :
+                    histoArray[index].SetMaximum(max*10000)
+                    histoArray[index].SetMinimum(0.000001)
+                legend.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+
+                cstackPlots.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_log.png")
+              
diff --git a/Analyzer/test/Tamas/PostProcScripts/CreateEffsSept.py b/Analyzer/test/Tamas/PostProcScripts/CreateEffsSept.py
new file mode 100644
index 0000000..41a8ab0
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/CreateEffsSept.py
@@ -0,0 +1,564 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+ROOT.gStyle.SetPaintTextFormat("4.2f");
+
+InputListSamples = [
+"BackgroundSamplesCode"+codeVersion+".txt",
+#"HSCPgluinoOnlyNeutralSamples_Code"+codeVersion+".txt",
+"HSCPgluinoSamples_Code"+codeVersion+".txt",
+#"HSCPgmsbStauSamples_Code"+codeVersion+".txt",
+#"HSCPpairStauSamples_Code"+codeVersion+".txt",
+#"HSCPstopOnlyNeutralSamples_Code"+codeVersion+".txt",
+#"HSCPstopSamples_Code"+codeVersion+".txt",
+#"HSCPtauPrime1Samples_Code"+codeVersion+".txt",
+#"HSCPtauPrime2Samples_Code"+codeVersion+".txt",
+]
+
+SingleMuonSample = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018C_woProbQ_CodeV"+codeVersion+"_v1.root")
+AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_woProbQ_CodeV"+codeVersion+"_v1.root")
+Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+cutValues = {
+'BefPreS_Eta' : 1.0,
+'N1_Eta' : 1.0,
+'BefPreS_Pt' : 55.,
+'N1_Pt' : 55.,
+'BefPreS_Dxy' : 0.02,
+'N1_Dxy' : 0.02,
+'BefPreS_Dz' : 0.02,
+'N1_Dz' : 0.02,
+'BefPreS_Chi2oNdof' : 5.,
+'N1_Chi2oNdof' : 5.,
+'BefPreS_TNOM' : 10.,
+'N1_TNOM' : 10.,
+'BefPreS_TNOPH' : 2.,
+'N1_TNOPH' : 2.,
+'BefPreS_TNOHFraction' : .9,
+'N1_TNOHFraction' : .9,
+'N1_EoP' : 0.3,
+'BefPreS_EoP' : 0.3,
+'BefPreS_TIsol' : 15,
+'N1_TIsol' : 15,
+'BefPreS_Ih' : 3.47,
+'N1_Ih' : 3.47,
+'BefPreS_ProbXY' : 0.001,
+'N1_ProbXY' : 0.001,
+'BefPreS_MiniRelIsoAll' : 0.02,
+'N1_MiniRelIsoAll' : 0.02,
+}
+
+
+sigma = 3
+
+for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
+  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
+  curr_dir = SingleMuonSample.GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  N1eff = 0
+  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
+  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
+  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          if not ("N1_Eta" in keyname2) : continue
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
+          histo = SingleMuonSample.Get(newname)
+          histoAllBcg = AllBcgSample.Get(newname)
+          histoSignal = Rhadron1800GeV.Get(newname)
+          histoDenomAllBcgFixedN1 = AllBcgSample.Get(dirname + "/" + keyname + "/N1_Eta")
+          histoDenomAllBcgFixedBefPreS = AllBcgSample.Get(dirname + "/" + keyname + "/BefPreS_Eta")
+
+          if not (cutValues.get(keyname2)) : continue
+          Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
+          NumAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(cutValues[keyname2]))
+          NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(cutValues[keyname2]))
+          Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()))
+          DenomAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(histoAllBcg.GetXaxis().GetXmax()))
+          DenomAllBcgFixedBefPreS = histoDenomAllBcgFixedBefPreS.Integral(histoDenomAllBcgFixedBefPreS.GetXaxis().FindBin(0),histoDenomAllBcgFixedBefPreS.GetXaxis().FindBin(histoDenomAllBcgFixedBefPreS.GetXaxis().GetXmax()))
+          DenomAllBcgFixedN1 = histoDenomAllBcgFixedN1.Integral(histoDenomAllBcgFixedN1.GetXaxis().FindBin(0),histoDenomAllBcgFixedN1.GetXaxis().FindBin(histoDenomAllBcgFixedN1.GetXaxis().GetXmax()))
+          
+#          print(keyname2 + ": " + str(DenomAllBcgFixedN1))
+          DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()))
+          if (Denom>0) :  Eff = Num / Denom
+          else : Eff = 0
+          if (DenomAllBcg>0) : EffAllBcg = NumAllBcg / DenomAllBcg
+          else : EffAllBcg = 0
+          if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
+          else : EffSignal = 0
+         
+          if ("BefPreS_Eta" in keyname2) :
+            BefPreSeffForEta = Eff
+            BefPreSeffForEtaBcg = EffAllBcg
+            BefPreSeffForEtaSignal = EffSignal
+            BefPreSeffForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Pt" in keyname2) :
+            BefPreSeffForpT = 1-Eff
+            BefPreSeffForpTBcg = 1-EffAllBcg
+            BefPreSeffForpTSignal = 1-EffSignal
+            BefPreSeffForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_TNOPH" in keyname2) :
+            BefPreSeffForNumPixHits = 1-Eff
+            BefPreSeffForNumPixHitsBcg = 1-EffAllBcg
+            BefPreSeffForNumPixHitsSignal = 1-EffSignal
+            BefPreSeffForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_TNOHFraction" in keyname2) :
+            BefPreSeffForValidFract = 1-Eff
+            BefPreSeffForValidFractBcg = 1-EffAllBcg
+            BefPreSeffForValidFractSignal = 1-EffSignal
+            BefPreSeffForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_TNOM" in keyname2) :
+            BefPreSeffForNumDeDx = 1-Eff
+            BefPreSeffForNumDeDxBcg = 1-EffAllBcg
+            BefPreSeffForNumDeDxSignal = 1-EffSignal
+            BefPreSeffForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Chi2oNdof" in keyname2) :
+            BefPreSeffForChi2oDOF = Eff
+            BefPreSeffForChi2oDOFBcg = EffAllBcg
+            BefPreSeffForChi2oDOFSignal = EffSignal
+            BefPreSeffForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_EoP" in keyname2) :
+            BefPreSeffForEoP = Eff
+            BefPreSeffForEoPBcg = EffAllBcg
+            BefPreSeffForEoPSignal = EffSignal
+            BefPreSeffForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Dz" in keyname2) :
+            BefPreSeffFordz = Eff
+            BefPreSeffFordzBcg = EffAllBcg
+            BefPreSeffFordzSignal = EffSignal
+            BefPreSeffFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Dxy" in keyname2) :
+            BefPreSeffFordxy = Eff
+            BefPreSeffFordxyBcg = EffAllBcg
+            BefPreSeffFordxySignal = EffSignal
+            BefPreSeffFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_MiniRelIsoAll" in keyname2) :
+            BefPreSeffForMiniIso = Eff
+            BefPreSeffForMiniIsoBcg = EffAllBcg
+            BefPreSeffForMiniIsoSignal = EffSignal
+            BefPreSeffForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Ih" in keyname2) :
+            BefPreSeffForIh = 1-Eff
+            BefPreSeffForIhBcg = 1-EffAllBcg
+            BefPreSeffForIhSignal = 1-EffSignal
+            BefPreSeffForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_ProbXY" in keyname2) :
+            BefPreSeffForProbXY = 1-Eff
+            BefPreSeffForProbXYBcg = 1-EffAllBcg
+            BefPreSeffForProbXYSignal = 1-EffSignal
+            BefPreSeffForProbXYPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          
+          
+          if ("N1_Eta" in keyname2) :
+            N1effForEta = Eff
+            N1effForEtaBcg = EffAllBcg
+            N1effForEtaSignal = EffSignal
+            N1effForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Pt" in keyname2) :
+            N1effForpT = 1-Eff
+            N1effForpTBcg = 1-EffAllBcg
+            N1effForpTSignal = 1-EffSignal
+            N1effForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_TNOPH" in keyname2) :
+            N1effForNumPixHits = 1-Eff
+            N1effForNumPixHitsBcg = 1-EffAllBcg
+            N1effForNumPixHitsSignal = 1-EffSignal
+            N1effForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_TNOHFraction" in keyname2) :
+            N1effForValidFract = 1-Eff
+            N1effForValidFractBcg = 1-EffAllBcg
+            N1effForValidFractSignal = 1-EffSignal
+            N1effForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_TNOM" in keyname2) :
+            N1effForNumDeDx = 1-Eff
+            N1effForNumDeDxBcg = 1-EffAllBcg
+            N1effForNumDeDxSignal = 1-EffSignal
+            N1effForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Chi2oNdof" in keyname2) :
+            N1effForChi2oDOF = Eff
+            N1effForChi2oDOFBcg = EffAllBcg
+            N1effForChi2oDOFSignal = EffSignal
+            N1effForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_EoP" in keyname2) :
+            N1effForEoP = Eff
+            N1effForEoPBcg = EffAllBcg
+            N1effForEoPSignal = EffSignal
+            N1effForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Dz" in keyname2) :
+            N1effFordz = Eff
+            N1effFordzBcg = EffAllBcg
+            N1effFordzSignal = EffSignal
+            N1effFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Dxy" in keyname2) :
+            N1effFordxy = Eff
+            N1effFordxyBcg = EffAllBcg
+            N1effFordxySignal = EffSignal
+            N1effFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_MiniRelIsoAll" in keyname2) :
+            N1effForMiniIso = Eff
+            N1effForMiniIsoBcg = EffAllBcg
+            N1effForMiniIsoSignal = EffSignal
+            N1effForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Ih" in keyname2) :
+            N1effForIh = 1-Eff
+            N1effForIhBcg = 1-EffAllBcg
+            N1effForIhSignal = 1-EffSignal
+            N1effForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_ProbXY" in keyname2) :
+            N1effForProbXY = 1-Eff
+            N1effForProbXYBcg = 1-EffAllBcg
+            N1effForProbXYSignal = 1-EffSignal
+            N1effForProbXYPunzi= (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          
+      tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+      tex2.SetNDC();
+      tex2.SetTextFont(61);
+      tex2.SetTextSize(0.0675);
+      tex2.SetLineWidth(2);
+
+      tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+      tex3.SetNDC();
+      tex3.SetTextFont(52);
+      tex3.SetTextSize(0.0485);
+      tex3.SetLineWidth(2);
+      
+      tex4 = ROOT.TLatex()
+
+      tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+      tex5.SetNDC();
+      tex5.SetTextFont(52);
+      tex5.SetTextSize(0.0185);
+      tex5.SetLineWidth(2);
+      
+      cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForData",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,BefPreSeffForEta)
+      EffForData.SetBinContent(2,BefPreSeffForpT)
+      EffForData.SetBinContent(3,BefPreSeffForNumPixHits)
+      EffForData.SetBinContent(4,BefPreSeffForValidFract)
+      EffForData.SetBinContent(5,BefPreSeffForNumDeDx)
+      EffForData.SetBinContent(6,BefPreSeffForChi2oDOF)
+      EffForData.SetBinContent(7,BefPreSeffForEoP)
+      EffForData.SetBinContent(8,BefPreSeffFordz)
+      EffForData.SetBinContent(9,BefPreSeffFordxy)
+      EffForData.SetBinContent(10,BefPreSeffForMiniIso)
+      EffForData.SetBinContent(11,BefPreSeffForIh)
+      EffForData.SetBinContent(12,BefPreSeffForProbXY)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+#      EffForData.SetMarkerStyle(20)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"Eta < 1.0")
+      EffForData.GetXaxis().SetBinLabel(2,"pT > 55")
+      EffForData.GetXaxis().SetBinLabel(3,"NumPixHits > 2")
+      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.9")
+      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 10")
+      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
+      EffForData.GetXaxis().SetBinLabel(7,"EoP < 0.3")
+      EffForData.GetXaxis().SetBinLabel(8,"dz < 0.02")
+      EffForData.GetXaxis().SetBinLabel(9,"dxy < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
+      EffForData.GetXaxis().SetBinLabel(12,"ProbXY > 0.001")
+      EffForData.GetXaxis().SetTitle("")
+      
+      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
+      legend.SetTextFont(42)
+      legend.SetTextSize(0.02)
+      legend.SetBorderSize(1);
+      legend.SetBorderSize(0);
+      legend.SetLineColor(1);
+      legend.SetLineStyle(1);
+      legend.SetLineWidth(1);
+      legend.SetFillColor(0);
+      legend.SetFillStyle(1001);
+      legend.AddEntry(EffForData,"DATA (2018C)","LP")
+      
+
+      EffForBcg = ROOT.TH1F("EffForBcg",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
+      EffForBcg.Draw("SAMEHISTOTEXT00")
+      EffForBcg.SetLineColor(3)
+      EffForBcg.SetMarkerColor(3)
+      EffForBcg.SetBinContent(1,BefPreSeffForEtaBcg)
+      EffForBcg.SetBinContent(2,BefPreSeffForpTBcg)
+      EffForBcg.SetBinContent(3,BefPreSeffForNumPixHitsBcg)
+      EffForBcg.SetBinContent(4,BefPreSeffForValidFractBcg)
+      EffForBcg.SetBinContent(5,BefPreSeffForNumDeDxBcg)
+      EffForBcg.SetBinContent(6,BefPreSeffForChi2oDOFBcg)
+      EffForBcg.SetBinContent(7,BefPreSeffForEoPBcg)
+      EffForBcg.SetBinContent(8,BefPreSeffFordzBcg)
+      EffForBcg.SetBinContent(9,BefPreSeffFordxyBcg)
+      EffForBcg.SetBinContent(10,BefPreSeffForMiniIsoBcg)
+      EffForBcg.SetBinContent(11,BefPreSeffForIhBcg)
+      EffForBcg.SetBinContent(12,BefPreSeffForProbXY)
+      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
+      
+      EffForSignal = ROOT.TH1F("EffForSignal",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
+      EffForSignal.Draw("SAMEHISTOTEXT00")
+      EffForSignal.SetLineColor(6)
+      EffForSignal.SetMarkerColor(6)
+      EffForSignal.SetBinContent(1,BefPreSeffForEtaSignal)
+      EffForSignal.SetBinContent(2,BefPreSeffForpTSignal)
+      EffForSignal.SetBinContent(3,BefPreSeffForNumPixHitsSignal)
+      EffForSignal.SetBinContent(4,BefPreSeffForValidFractSignal)
+      EffForSignal.SetBinContent(5,BefPreSeffForNumDeDxSignal)
+      EffForSignal.SetBinContent(6,BefPreSeffForChi2oDOFSignal)
+      EffForSignal.SetBinContent(7,BefPreSeffForEoPSignal)
+      EffForSignal.SetBinContent(8,BefPreSeffFordzSignal)
+      EffForSignal.SetBinContent(9,BefPreSeffFordxySignal)
+      EffForSignal.SetBinContent(10,BefPreSeffForMiniIsoSignal)
+      EffForSignal.SetBinContent(11,BefPreSeffForIhSignal)
+      EffForSignal.SetBinContent(12,BefPreSeffForProbXY)
+      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
+      
+      tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+#      tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
+      
+      legend.Draw("SAME")
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/"+"EffsInCutflowBefPreS.png")
+      
+      cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForData",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForEta)
+      EffForData.SetBinContent(2,N1effForpT)
+      EffForData.SetBinContent(3,N1effForNumPixHits)
+      EffForData.SetBinContent(4,N1effForValidFract)
+      EffForData.SetBinContent(5,N1effForNumDeDx)
+      EffForData.SetBinContent(6,N1effForChi2oDOF)
+      EffForData.SetBinContent(7,N1effForEoP)
+      EffForData.SetBinContent(8,N1effFordz)
+      EffForData.SetBinContent(9,N1effFordxy)
+      EffForData.SetBinContent(10,N1effForMiniIso)
+      EffForData.SetBinContent(11,N1effForIh)
+      EffForData.SetBinContent(12,N1effForProbXY)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+#      EffForData.SetMarkerStyle(20)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"Eta < 1.0")
+      EffForData.GetXaxis().SetBinLabel(2,"pT > 55")
+      EffForData.GetXaxis().SetBinLabel(3,"NumPixHits > 2")
+      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.9")
+      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 10")
+      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
+      EffForData.GetXaxis().SetBinLabel(7,"EoP < 0.3")
+      EffForData.GetXaxis().SetBinLabel(8,"dz < 0.02")
+      EffForData.GetXaxis().SetBinLabel(9,"dxy < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
+      EffForData.GetXaxis().SetBinLabel(12,"ProbXY > 0.001")
+      EffForData.GetXaxis().SetTitle("")
+      
+      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
+      legend.SetTextFont(42)
+      legend.SetTextSize(0.02)
+      legend.SetBorderSize(1);
+      legend.SetBorderSize(0);
+      legend.SetLineColor(1);
+      legend.SetLineStyle(1);
+      legend.SetLineWidth(1);
+      legend.SetFillColor(0);
+      legend.SetFillStyle(1001);
+      legend.AddEntry(EffForData,"DATA (2018C)","LP")
+      
+
+      EffForBcg = ROOT.TH1F("EffForBcg",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
+      EffForBcg.Draw("SAMEHISTOTEXT00")
+      EffForBcg.SetLineColor(3)
+      EffForBcg.SetMarkerColor(3)
+      EffForBcg.SetBinContent(1,N1effForEtaBcg)
+      EffForBcg.SetBinContent(2,N1effForpTBcg)
+      EffForBcg.SetBinContent(3,N1effForNumPixHitsBcg)
+      EffForBcg.SetBinContent(4,N1effForValidFractBcg)
+      EffForBcg.SetBinContent(5,N1effForNumDeDxBcg)
+      EffForBcg.SetBinContent(6,N1effForChi2oDOFBcg)
+      EffForBcg.SetBinContent(7,N1effForEoPBcg)
+      EffForBcg.SetBinContent(8,N1effFordzBcg)
+      EffForBcg.SetBinContent(9,N1effFordxyBcg)
+      EffForBcg.SetBinContent(10,N1effForMiniIsoBcg)
+      EffForBcg.SetBinContent(11,N1effForIhBcg)
+      EffForBcg.SetBinContent(12,N1effForProbXY)
+      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
+      
+      EffForSignal = ROOT.TH1F("EffForSignal",";;Integral to (from) max (min) cut value /  Integral to inf",12,0.,12.)
+      EffForSignal.Draw("SAMEHISTOTEXT00")
+      EffForSignal.SetLineColor(6)
+      EffForSignal.SetMarkerColor(6)
+      EffForSignal.SetBinContent(1,N1effForEtaSignal)
+      EffForSignal.SetBinContent(2,N1effForpTSignal)
+      EffForSignal.SetBinContent(3,N1effForNumPixHitsSignal)
+      EffForSignal.SetBinContent(4,N1effForValidFractSignal)
+      EffForSignal.SetBinContent(5,N1effForNumDeDxSignal)
+      EffForSignal.SetBinContent(6,N1effForChi2oDOFSignal)
+      EffForSignal.SetBinContent(7,N1effForEoPSignal)
+      EffForSignal.SetBinContent(8,N1effFordzSignal)
+      EffForSignal.SetBinContent(9,N1effFordxySignal)
+      EffForSignal.SetBinContent(10,N1effForMiniIsoSignal)
+      EffForSignal.SetBinContent(11,N1effForIhSignal)
+      EffForSignal.SetBinContent(12,N1effForProbXY)
+      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      legend.Draw("SAME")
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/"+"EffsInCutflowN1.png")
+      
+####################################################################################################################
+      # Punzi for BefPreS
+
+      ROOT.gStyle.SetPaintTextFormat(".2g");
+      cstackedSummedBackgroundStringBefPreSPunzi = "cstackedSummedBackgroundStringBefPreSPunzi"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringBefPreSPunzi, cstackedSummedBackgroundStringBefPreSPunzi, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForData",";;Punzi-significance",11,0.,11.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,BefPreSeffForEtaPunzi)
+      EffForData.SetBinContent(2,BefPreSeffForpTPunzi)
+      EffForData.SetBinContent(3,BefPreSeffForNumPixHitsPunzi)
+      EffForData.SetBinContent(4,BefPreSeffForValidFractPunzi)
+      EffForData.SetBinContent(5,BefPreSeffForNumDeDxPunzi)
+      EffForData.SetBinContent(6,BefPreSeffForChi2oDOFPunzi)
+      EffForData.SetBinContent(7,BefPreSeffForEoPPunzi)
+      EffForData.SetBinContent(8,BefPreSeffFordzPunzi)
+      EffForData.SetBinContent(9,BefPreSeffFordxyPunzi)
+      EffForData.SetBinContent(10,BefPreSeffForMiniIsoPunzi)
+      EffForData.SetBinContent(11,BefPreSeffForIhPunzi)
+#      EffForData.SetBinContent(12,BefPreSeffForProbXYPunzi)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+#      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"Eta < 1.0")
+      EffForData.GetXaxis().SetBinLabel(2,"pT > 55")
+      EffForData.GetXaxis().SetBinLabel(3,"NumPixHits > 2")
+      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.9")
+      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 10")
+      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
+      EffForData.GetXaxis().SetBinLabel(7,"EoP < 0.3")
+      EffForData.GetXaxis().SetBinLabel(8,"dz < 0.02")
+      EffForData.GetXaxis().SetBinLabel(9,"dxy < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
+#      EffForData.GetXaxis().SetBinLabel(12,"ProbXY > 0.001")
+      EffForData.GetXaxis().SetTitle("")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"Before pre-selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/"+"EffsInCutflowBefPreSPunzi.png")
+      
+####################################################################################################################
+      # Punzi for N-1
+      
+      ROOT.gStyle.SetPaintTextFormat(".4f");
+      cstackedSummedBackgroundStringN1Punzi = "cstackedSummedBackgroundStringN1Punzi"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1Punzi, cstackedSummedBackgroundStringN1Punzi, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForData",";;Punzi-significance",11,0.,11.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForEtaPunzi)
+      EffForData.SetBinContent(2,N1effForpTPunzi)
+      EffForData.SetBinContent(3,N1effForNumPixHitsPunzi)
+      EffForData.SetBinContent(4,N1effForValidFractPunzi)
+      EffForData.SetBinContent(5,N1effForNumDeDxPunzi)
+      EffForData.SetBinContent(6,N1effForChi2oDOFPunzi)
+      EffForData.SetBinContent(7,N1effForEoPPunzi)
+      EffForData.SetBinContent(8,N1effFordzPunzi)
+      EffForData.SetBinContent(9,N1effFordxyPunzi)
+      EffForData.SetBinContent(10,N1effForMiniIsoPunzi)
+      EffForData.SetBinContent(11,N1effForIhPunzi)
+#      EffForData.SetBinContent(12,N1effForProbXYPunzi)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+#      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"Eta < 1.0")
+      EffForData.GetXaxis().SetBinLabel(2,"pT > 55")
+      EffForData.GetXaxis().SetBinLabel(3,"NumPixHits > 2")
+      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.9")
+      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 10")
+      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
+      EffForData.GetXaxis().SetBinLabel(7,"EoP < 0.3")
+      EffForData.GetXaxis().SetBinLabel(8,"dz < 0.02")
+      EffForData.GetXaxis().SetBinLabel(9,"dxy < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
+#      EffForData.GetXaxis().SetBinLabel(12,"ProbXY > 0.001")
+      EffForData.GetXaxis().SetTitle("")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/"+"EffsInCutflowN1Punzi.png")
+
diff --git a/Analyzer/test/Tamas/PostProcScripts/CreateROCPlots.py b/Analyzer/test/Tamas/PostProcScripts/CreateROCPlots.py
new file mode 100644
index 0000000..b13b290
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/CreateROCPlots.py
@@ -0,0 +1,158 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+InputListSamples = [
+"BackgroundSamplesCode"+codeVersion+".txt",
+"HSCPgluinoOnlyNeutralSamples_Code"+codeVersion+".txt",
+"HSCPgluinoSamples_Code"+codeVersion+".txt",
+"HSCPgmsbStauSamples_Code"+codeVersion+".txt",
+"HSCPpairStauSamples_Code"+codeVersion+".txt",
+"HSCPstopOnlyNeutralSamples_Code"+codeVersion+".txt",
+"HSCPstopSamples_Code"+codeVersion+".txt",
+"HSCPtauPrime1Samples_Code"+codeVersion+".txt",
+"HSCPtauPrime2Samples_Code"+codeVersion+".txt",
+]
+
+OpenedSamples = []
+for list in InputListSamples:
+  MassPointSamples = []
+  with open(list, "r") as a_file:
+    for line in a_file:
+      stripped_line = line.strip()
+      MassPointSamples.append(ROOT.TFile.Open(stripped_line))
+    OpenedSamples.append(MassPointSamples)
+
+if os.path.exists(os.path.dirname("ROC_CodeV"+codeVersion)):
+  os.makedirs("ROC_CodeV"+codeVersion)
+  
+cutValues = {
+'N1_Eta' : 2.1,
+'N1_Pt' : 55.,
+'N1_Dxy' : 0.02,
+'N1_Dz' : 0.05,
+'N1_Chi2oNdof' : 5.,
+'N1_Qual' : 2.,
+'N1_TNOH' : 10.,
+'N1_TNOM' : 6.,
+'N1_Qual' : 2.,
+'N1_TNOPH' : 2.,
+'N1_TNOHFraction' : .8,
+'N1_EoP' : .3,
+'N1_SumpTOverpT' : 1000.,
+'N1_Ih' : 3.2,
+'N1_ProbQ' : 0.1,
+'N1_Stations' : 9.,
+'N1_PtErrOverPt' : .25,
+'N1_SegSep' : 25,
+'N1_ProbXY' : 1.0,
+'N1_MiniRelIsoAll' : 0.1,
+
+
+}
+
+
+for i in range(0, MassPointSamples[0].GetListOfKeys().GetEntries()):
+  dirname = MassPointSamples[0].GetListOfKeys().At(i).GetName()
+  curr_dir = MassPointSamples[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = MassPointSamples[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          if not ("N1_Eta" in keyname2) : continue
+          if not ("N1" in keyname2) : continue
+          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
+          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(j)
+          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          
+          
+          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+        
+          # array to contain a specific (keyname2) histogram for all samples
+          histoArray = []
+          maxNumBins = 0.0
+          for i in range(0,len(OpenedSamples)) :
+            maxNumBins = numpy.maximum(maxNumBins,len(OpenedSamples[i]))
+ 
+          for indexOnSamples in range(0,len(OpenedSamples)) :
+            singleROCcurveString = 'singleROCcurve'+str(indexOnSamples)+str(j)
+            axisXTitle = keyname2[keyname2.find("N1_")+3:]
+            singleROCcurve = ROOT.TH1F(singleROCcurveString,";Mass;Efficiency for "+axisXTitle,int(maxNumBins),0.,maxNumBins)
+            singleROCcurve.SetStats(0)
+            singleROCcurve.SetMarkerColor(indexOnSamples+1)
+            singleROCcurve.SetMarkerStyle(20)
+            singleROCcurve.SetLineColor(indexOnSamples+1)
+            singleROCcurve.SetMaximum(1.5)
+            
+            for indexOnBins in range(0,len(OpenedSamples[indexOnSamples])) :
+              givenSampleWmassPoint = OpenedSamples[indexOnSamples][indexOnBins]
+              givenSampleWmassPointStr = str(givenSampleWmassPoint)
+              stringIndexWhere2018 = givenSampleWmassPointStr.find("2018_")+5
+              stringIndexWhereM = givenSampleWmassPointStr.find("_M")
+              stringIndexWhereW = givenSampleWmassPointStr.find("_w")
+              if (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW].find("_M")>0) :
+                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereM])
+              else:
+                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW])
+              histo = givenSampleWmassPoint.Get(newname)
+              
+              Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
+              Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()))
+              if (Denom>0) :
+                Eff = Num / Denom
+              else : Eff = 0
+#              print("For j-th: "+str(indexOnBins)+" Eff: "+str(Eff))
+              singleROCcurve.SetBinContent(indexOnBins,Eff)
+            histoArray.append(singleROCcurve)
+            legend.AddEntry(singleROCcurve,sampleName,"LP")
+     
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+          for finalHisto in histoArray :
+            finalHisto.Draw("SAMEPL")
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex5.Draw("SAME")
+
+          canvas.SaveAs("ROC_CodeV"+codeVersion+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/CreateSoB.py b/Analyzer/test/Tamas/PostProcScripts/CreateSoB.py
new file mode 100644
index 0000000..20ec692
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/CreateSoB.py
@@ -0,0 +1,151 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python3 %prog sample.txt")
+(opt,args) = parser.parse_args()
+
+sampleInFile = sys.argv[1]
+
+backFile = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_woProbQ_CodeV23p8_v1.root")
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+SamplesArray = []
+
+with open(sampleInFile, "r") as a_file:
+  for line in a_file:
+    stripped_line = line.strip()
+    SamplesArray.append(stripped_line)
+
+fileInArray = []
+for sample in SamplesArray:
+  fileInArray.append(ROOT.TFile.Open(sample))
+  
+dirs = []
+# loop on the outer directory
+for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
+  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
+  curr_dir = fileInArray[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  # loop on the second level
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      # loop on the third level, this is very the rel plots are
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileInArray[0].Get(newname)
+          if not obj.InheritsFrom("TObject"):
+            continue
+          if (obj.GetEntries() == 0 ) :
+            continue
+          if not ("N1" in keyname2):
+            continue
+          if ("N1_Stations" in keyname2) or ("N1_Qual" in keyname2) or ("pfType" in keyname2):
+            continue
+          if not os.path.exists(os.path.dirname("CompareSoB"+sampleInFile[:-4]+"/")): os.makedirs(os.path.dirname("CompareSoB"+sampleInFile[:-4]+"/"))
+          
+          if (obj.ClassName() == "TH1F" or obj.ClassName() == "TProfile"): # and "BS_" in keyname2):
+            canvasString = 'canvas'+str(j)
+            canvas = ROOT.TCanvas(canvasString, canvasString, 800,800)
+            legend =  ROOT.TLegend(.45,.60,.80,.89,"","brNDC")
+            legend.SetTextFont(42)
+            legend.SetTextSize(0.017)
+            legend.SetBorderSize(1);
+            legend.SetBorderSize(0);
+            legend.SetLineColor(1);
+            legend.SetLineStyle(1);
+            legend.SetLineWidth(1);
+            legend.SetFillColor(0);
+            legend.SetFillStyle(1001);
+            
+            backObj = backFile.Get(newname)
+            histoArray = []
+            SignalOverNoise = []
+            for fileIn in fileInArray:
+              histoArray.append(fileIn.Get(newname))
+              SignalOverNoise.append(fileIn.Get(newname))
+            for index in range(0, len(histoArray)):
+              histoArray[index].GetNbinsX()
+              SoBstring = 'SoB'+str(index)
+              numBins = histoArray[index].GetNbinsX()
+              maxXaxis = histoArray[index].GetXaxis().GetXmax()
+              minXaxis = histoArray[index].GetXaxis().GetXmin()
+
+              stepSize = (maxXaxis-minXaxis)/numBins
+              SignalOverNoise[index] = ROOT.TH1F(SoBstring,SoBstring,numBins,minXaxis,maxXaxis)
+              SignalOverNoise[index].SetStats(0)
+              SignalOverNoise[index].SetMarkerStyle(20)
+              
+              legend.AddEntry(SignalOverNoise[index],SamplesArray[index][19:SamplesArray[index].find("Code")+9],"LP")
+              indexNew = -1
+              if (index>-1):
+                indexNew = index+2
+              if (indexNew==10) :
+                indexNew = 40
+              elif (indexNew==11) :
+                indexNew = 46
+              elif (indexNew==12) :
+                indexNew = 41
+              elif (indexNew==13) :
+                indexNew = 30
+              elif (indexNew==14) :
+                indexNew = 42
+              SignalOverNoise[index].SetLineColor(indexNew)
+              SignalOverNoise[index].SetMarkerColor(indexNew)
+              SignalOverNoise[index].SetTitle("")
+              SignalOverNoise[index].GetYaxis().SetTitle("Normalized S/#sqrt{S+B}")
+              axisTitle = keyname2[3:]
+              SignalOverNoise[index].GetXaxis().SetTitle(axisTitle)
+              for x in numpy.arange(0,maxXaxis,stepSize):
+                Signal = histoArray[index].Integral(histoArray[index].GetXaxis().FindBin(0),histoArray[index].GetXaxis().FindBin(x))
+                Background = backObj.Integral(backObj.GetXaxis().FindBin(0),backObj.GetXaxis().FindBin(x))
+                
+
+#                else :
+#                  Signal = numpy.absolute(histoArray[index].Integral(histoArray[index].GetXaxis().FindBin(minXaxis),histoArray[index].GetXaxis().FindBin(x)))
+#                  Background = numpy.absolutebackObj.Integral(backObj.GetXaxis().FindBin(minXaxis),backObj.GetXaxis().FindBin(x)))
+                if ((Signal+Background)!=0) :
+                  SoB = Signal/numpy.sqrt(Signal+Background)
+                else :
+                  SoB = 0
+                if ("Dxy" in keyname2) :
+                  print("For ",x," the S = ",Signal," and B = ",Background, " and the S/sqrt(S+B)",Signal/numpy.sqrt(Signal+Background))
+                
+                SignalOverNoise[index].SetBinContent(histoArray[index].GetXaxis().FindBin(x),SoB)
+              SignalOverNoise[index].Scale(1/SignalOverNoise[index].GetMaximum())
+              SignalOverNoise[index].GetYaxis().SetRangeUser(0.,2)
+              SignalOverNoise[index].Draw("SAME L")
+                
+#
+#                  histoArray[index].SetMaximum(1.4)
+            
+            tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+            #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+            tex2.SetNDC();
+            tex2.SetTextFont(61);
+            tex2.SetTextSize(0.0675);
+            tex2.SetLineWidth(2);
+
+            tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
+            #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+            #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+            tex3.SetNDC();
+            tex3.SetTextFont(52);
+            tex3.SetTextSize(0.0485);
+            tex3.SetLineWidth(2);
+            
+            legend.Draw("SAME")
+            tex2.Draw("SAME")
+            tex3.Draw("SAME")
+
+            canvas.SaveAs("CompareSoB"+sampleInFile[:-4]+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/Mass_plot.py b/Analyzer/test/Tamas/PostProcScripts/Mass_plot.py
new file mode 100644
index 0000000..a5f3b26
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/Mass_plot.py
@@ -0,0 +1,203 @@
+# Usage
+# python3 compareTheProfiles.py
+
+import ROOT, sys
+import numpy as np
+#import tdrstyle
+
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
+(opt,args) = parser.parse_args()
+
+#ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.065);
+ROOT.gStyle.SetPadBottomMargin(0.17);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+fileName = sys.argv[1]
+BinNumber = sys.argv[2]
+
+#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQ_newMethod_v2.root")
+#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wNoProbQ_NewMethod_v1.root")
+#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1_newMethod_v1.root")
+#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1NoProbXY_newMethod_v1.root")
+#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_QCDwPt470To600_woProbQ_CodeV2_v1.root")
+#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_QCDwPt50To80_woProbQ_CodeV2_v1.root")
+#StandardAnalysisInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_CodeV2_v2.root")
+StandardAnalysisInFile = ROOT.TFile.Open(fileName)
+
+
+Mass = StandardAnalysisInFile.Get("/analyzer/BaseName/Mass")
+
+#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQ_newMethod_v2.root")
+#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wNoProbQ_NewMethod_v1.root")
+#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1_newMethod_v1.root")
+#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_wProbQNoL1NoProbXY_newMethod_v1.root")
+#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_QCDwPt470To600_woProbQ_CodeV2_v1.root")
+#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_QCDwPt50To80_woProbQ_CodeV2_v1.root")
+#StandardAnalysisWpredInFile = ROOT.TFile.Open("crab_Analysis_SingleMuon_UL2017CEra_CodeV2_v2.root")
+StandardAnalysisWpredInFile = ROOT.TFile.Open(fileName)
+
+
+#Mass_wPred= StandardAnalysisWpredInFile.Get("/analyzer/BaseName/Pred_Mass") # Same as the MassComb
+#Mass_wPred= StandardAnalysisWpredInFile.Get("/analyzer/BaseName/Pred_MassComb") # Combination with TOF
+Mass_wPred = StandardAnalysisWpredInFile.Get("/analyzer/BaseName/Pred_Mass_CB") # Fill(MOM*sqrt(ICK),pe,CC*BB/AA);
+#Mass_wPred= StandardAnalysisWpredInFile.Get("/analyzer/BaseName/Pred_Mass_CB_Flip") # no search result
+
+ProjBin = int(BinNumber)
+# https://cds.cern.ch/record/2205281/files/EXO-16-036-pas.pdf
+# had cuts on pt>65 and I_as > 0.3 which corresponds to bins 28,35 --> it's just 28
+# bins 25,35 mean  pt>65 and I_as > 0.175 --> maybe this is 25,-1 -->  just 25
+# bins 18,35 mean no cut on I_as but a cut on the pt
+# bins 3,3 mean  pt>60 and I_as > 0.05
+
+massBins = [0.,50.,100.,150.,200.,250.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,4000.]
+#massBins = [0.,50.,100.,200.,300.,400.,500.,600.,700.,800.,900.,1000.,4000.]
+
+massBinsArray = np.array(massBins)
+
+Mass_projY_NotRebinned = Mass.ProjectionY("Mass_projY",ProjBin,ProjBin,"e")
+Mass_projY = ROOT.TH1F("Mass_projY" , "Mass_projY" , len(massBinsArray)-1, massBinsArray)
+
+Mass_wPred_projY_NotRebinned = Mass_wPred.ProjectionY("Mass_wPred_projY",ProjBin,ProjBin,"e")
+Mass_wPred_projY = ROOT.TH1F("Mass_wPred_projY" , "Mass_wPred_projY" , len(massBinsArray)-1, massBinsArray)
+
+print("Mass_projY_NotRebinned.Integral(): ",Mass_projY_NotRebinned.Integral())
+print("Mass_wPred_projY_NotRebinned.Integral(): ",Mass_wPred_projY_NotRebinned.Integral())
+
+KSvalue = Mass_projY_NotRebinned.KolmogorovTest(Mass_wPred_projY_NotRebinned,"XD")
+print("KS-test: "+str(KSvalue))
+
+for i, bin in enumerate(massBinsArray):
+  Mass_projYCont = Mass_projY_NotRebinned.GetBinContent(i+1)
+  Mass_projY.SetBinContent(i+1,Mass_projYCont)
+  Mass_projYCont_err = Mass_projY_NotRebinned.GetBinError(i+1)
+#  Mass_projYCont_err = Mass.GetBinErrorLow(ProjBin,i+1)
+  Mass_projY.SetBinError(i+1,Mass_projYCont_err)
+ 
+  Mass_wPred_projYCont = Mass_wPred_projY_NotRebinned.GetBinContent(i+1)
+  Mass_wPred_projY.SetBinContent(i+1,Mass_wPred_projYCont)
+  Mass_wPred_projYCont_err = Mass_wPred_projY_NotRebinned.GetBinError(i+1)
+#  Mass_wPred_projYCont_err = Mass_wPred.GetBinErrorLow(ProjBin,i+1)
+  Mass_wPred_projY.SetBinError(i+1,Mass_wPred_projYCont_err)
+  
+print("----------------------------------------------")
+KSvalue2 = Mass_projY.KolmogorovTest(Mass_wPred_projY,"XD")
+print("KS-test after rebinning: "+str(KSvalue2))
+
+Mass_projY.SetMarkerColor(1)
+Mass_projY.SetLineColor(1)
+Mass_projY.SetMarkerStyle(20)
+Mass_projY.SetTitle("")
+Mass_projY.GetXaxis().SetTitleSize(0.05)
+Mass_projY.GetXaxis().SetTitleOffset(1)
+Mass_projY.GetXaxis().SetTitle("Mass [GeV]")
+Mass_projY.GetYaxis().SetTitle("Tracks/bin")
+Mass_projY.GetYaxis().SetTitleSize(0.05)
+Mass_projY.GetYaxis().SetTitleOffset(1)
+Mass_projY.SetStats(0)
+Mass_projY.GetYaxis().SetRangeUser(0.1,10000)
+
+
+Mass_wPred_projY.SetMarkerColor(2)
+Mass_wPred_projY.SetLineColor(2)
+Mass_wPred_projY.SetMarkerStyle(20)
+Mass_wPred_projY.SetTitle("")
+Mass_wPred_projY.GetXaxis().SetTitleSize(0.05)
+Mass_wPred_projY.GetXaxis().SetTitleOffset(1)
+Mass_wPred_projY.GetXaxis().SetTitle("Mass [GeV]")
+Mass_wPred_projY.GetYaxis().SetTitle("Tracks/bin")
+Mass_wPred_projY.GetYaxis().SetTitleSize(0.05)
+Mass_wPred_projY.GetYaxis().SetTitleOffset(1)
+Mass_wPred_projY.SetStats(0)
+
+
+print("Mass_projY.Integral(): ",Mass_projY.Integral())
+print("Mass_wPred_projY.Integral(): ",Mass_wPred_projY.Integral())
+    
+legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
+legMass.SetTextFont(42)
+legMass.SetTextSize(0.035)
+legMass.SetBorderSize(1);
+legMass.SetLineColor(1);
+legMass.SetLineStyle(1);
+legMass.SetLineWidth(1);
+legMass.SetFillColor(0);
+legMass.SetFillStyle(1001);
+legMass.AddEntry(Mass_wPred_projY,"Prediction","LP")
+legMass.AddEntry(Mass_projY,"Observation","LP")
+
+tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+tex2.SetNDC();
+tex2.SetTextFont(61);
+tex2.SetTextSize(0.0675);
+tex2.SetLineWidth(2);
+
+#tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+tex3 = ROOT.TLatex(0.24,0.94,"Internal");
+tex3.SetNDC();
+tex3.SetTextFont(52);
+tex3.SetTextSize(0.0485);
+tex3.SetLineWidth(2);
+
+tex4 = ROOT.TLatex(0.7,0.93,"K-S test v2: "+str(round(KSvalue2,4)));
+tex4.SetNDC();
+tex4.SetTextFont(52);
+tex4.SetTextSize(0.0485);
+tex4.SetLineWidth(2);
+
+
+
+
+
+cMass_projY = ROOT.TCanvas('cMass_projY', 'cMass_projY',800,800)
+
+cMass_projY.SetLogy()
+
+rp = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY)
+
+rp.SetH1DrawOpt("P");
+rp.SetH2DrawOpt("P");
+    
+rp.Draw()
+#rp.GetUpperPad().BuildLegend()
+rp.SetLeftMargin(0.13);
+rp.SetRightMargin(0.05);
+rp.SetUpTopMargin(0.1);
+rp.SetLowTopMargin(0.02);
+rp.SetLowBottomMargin(0.35);
+    
+rp.GetLowerRefGraph().SetMinimum(0.01);
+rp.GetLowerRefGraph().SetMaximum(2);
+#rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+#rp.GetLowerRefGraph().SetLineColor(0) #0
+rp.GetLowerRefGraph().SetMarkerStyle(20)
+rp.GetLowerRefGraph().SetMarkerSize(1);
+rp.GetLowYaxis().SetNdivisions(505);
+rp.GetLowerRefYaxis().SetTitle("Ratio");
+rp.GetLowerRefYaxis().SetTitleSize(0.05);
+rp.GetLowerRefYaxis().SetTitleOffset(1);
+rp.GetLowerRefYaxis().SetLabelSize(0.035);
+    
+    
+rp.GetLowerRefXaxis().SetTitleSize(0.05);
+rp.GetLowerRefXaxis().SetTitleOffset(0.8);
+rp.GetLowerRefXaxis().SetLabelSize(0.035);
+cMass_projY.Modified()
+cMass_projY.Update()
+#Mass_projY.Draw()
+#Mass_wPred_projY.Draw("SAME")
+#rp.Draw("X")
+
+rp.GetUpperPad().cd();
+legMass.Draw("SAME")
+tex2.Draw("SAME")
+tex3.Draw("SAME")
+tex4.Draw("SAME")
+
+name = fileName[0:-5] + "_Bin" + str(ProjBin)+ "/cMass_new.png"
+cMass_projY.SaveAs(name)
diff --git a/Analyzer/test/Tamas/PostProcScripts/PU_plot.py b/Analyzer/test/Tamas/PostProcScripts/PU_plot.py
new file mode 100644
index 0000000..1594e75
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/PU_plot.py
@@ -0,0 +1,161 @@
+import ROOT, sys
+import numpy as np
+#import tdrstyle
+
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
+(opt,args) = parser.parse_args()
+
+#ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.065);
+ROOT.gStyle.SetPadBottomMargin(0.17);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+fileName = sys.argv[1]
+BinNumber = sys.argv[2] if (len(sys.argv)==1) else 3
+
+StandardAnalysisInFile = ROOT.TFile.Open(fileName)
+
+PUA = StandardAnalysisInFile.Get("/HSCParticleAnalyzer/BaseName/PostS_SR2PASS_Ias_PUA")
+PUB = StandardAnalysisInFile.Get("/HSCParticleAnalyzer/BaseName/PostS_SR2PASS_Ias_PUB")
+PUC = StandardAnalysisInFile.Get("/HSCParticleAnalyzer/BaseName/PostS_SR2PASS_Ias_PUC")
+
+PUA.Scale(1/PUA.Integral())
+PUB.Scale(1/PUB.Integral())
+PUC.Scale(1/PUC.Integral())
+
+KSvalueBtoA = round(PUB.Chi2Test(PUA,"XD"),3) #KolmogorovTest
+KSvalueBtoC = round(PUB.Chi2Test(PUC,"XD"),3)
+
+
+max1 = np.maximum(PUA.GetMaximum(),PUB.GetMaximum())
+max2 = np.maximum(PUA.GetMaximum(),PUC.GetMaximum())
+max = np.maximum(max1,max2)
+
+PUA.SetMarkerColor(2)
+PUA.SetLineColor(2)
+PUA.SetMarkerStyle(20)
+PUA.GetXaxis().SetTitleSize(0.015)
+PUA.GetXaxis().SetTitleOffset(1)
+PUA.GetYaxis().SetTitleSize(0.05)
+PUA.GetYaxis().SetTitleOffset(1.3)
+PUA.GetYaxis().SetTitle("Normalized " + PUA.GetYaxis().GetTitle())
+PUA.GetXaxis().SetTitle("G_{i}^{strips} (p_{T} > 200 GeV, F_{i}^{pixels} > 0.9)")
+PUA.SetStats(0)
+PUA.SetMaximum(max*100)
+PUA.SetMinimum(0.00000000000001)
+#PUA.GetYaxis().SetRangeUser(0.1,10000)
+
+
+PUB.SetMarkerColor(1)
+PUB.SetLineColor(1)
+PUB.SetMarkerStyle(20)
+PUB.SetStats(0)
+
+PUC.SetMarkerColor(3)
+PUC.SetLineColor(3)
+PUC.SetMarkerStyle(20)
+PUC.SetStats(0)
+    
+legPUA =  ROOT.TLegend(.45,.75,.80,.85,"","brNDC")
+legPUA.SetTextFont(42)
+legPUA.SetTextSize(0.035)
+legPUA.SetBorderSize(0);
+legPUA.SetLineColor(1);
+legPUA.SetLineStyle(1);
+legPUA.SetLineWidth(1);
+legPUA.SetFillColor(0);
+legPUA.SetFillStyle(1001);
+legPUA.AddEntry(PUA,"PUA, #chi^{2} test wrt to PUB: "+str(KSvalueBtoA),"LP")
+legPUA.AddEntry(PUB,"PUB","LP")
+legPUA.AddEntry(PUC,"PUC, #chi^{2} test wrt to PUB: "+str(KSvalueBtoC) ,"LP")
+
+tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+tex2.SetNDC();
+tex2.SetTextFont(61);
+tex2.SetTextSize(0.0675);
+tex2.SetLineWidth(2);
+
+#tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+tex3 = ROOT.TLatex(0.24,0.94,"Internal");
+tex3.SetNDC();
+tex3.SetTextFont(52);
+tex3.SetTextSize(0.0485);
+tex3.SetLineWidth(2);
+
+tex4 = ROOT.TLatex(0.7,0.93,"Post Selection");
+tex4.SetNDC();
+tex4.SetTextFont(52);
+tex4.SetTextSize(0.0485);
+tex4.SetLineWidth(2);
+
+
+
+cPUA = ROOT.TCanvas('cPUA', 'cPUA',800,800)
+
+cPUA.SetLogy()
+
+rp = ROOT.TRatioPlot(PUA,PUB,"diffsig")
+rp.SetDrawOption("pois")
+
+rp.SetH1DrawOpt("P");
+rp.SetH2DrawOpt("P");
+
+rp2 = ROOT.TRatioPlot(PUC,PUB,"diffsig")
+rp2.SetDrawOption("pois")
+rp2.SetDrawOption("pois")
+    
+rp2.Draw()
+rp.Draw()
+
+#rp.GetUpperPad().BuildLegend()
+rp.SetLeftMargin(0.13);
+rp.SetRightMargin(0.05);
+rp.SetUpTopMargin(0.1);
+rp.SetLowTopMargin(0.02);
+rp.SetLowBottomMargin(0.35);
+    
+rp.GetLowerRefGraph().SetMinimum(-5);
+rp.GetLowerRefGraph().SetMaximum(5);
+rp.GetLowerRefGraph().SetMarkerColor(2)
+rp.GetLowerRefGraph().SetLineColor(2) #0
+rp.GetLowerRefGraph().SetMarkerStyle(20)
+rp.GetLowerRefGraph().SetMarkerSize(1);
+rp.GetLowYaxis().SetNdivisions(505);
+rp.GetLowerRefYaxis().SetTitle("Pull wrt PUB");
+rp.GetLowerRefYaxis().SetTitleSize(0.05);
+rp.GetLowerRefYaxis().SetTitleOffset(1);
+rp.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+
+    
+rp.GetLowerRefXaxis().SetTitleSize(0.04);
+rp.GetLowerRefXaxis().SetTitleOffset(1);
+rp.GetLowerRefXaxis().SetLabelSize(0.035);
+cPUA.Modified()
+cPUA.Update()
+#PUA.Draw()
+#PUB.Draw("SAME")
+#rp.Draw("X")
+
+rp.GetUpperPad().cd();
+PUC.Draw("SAME")
+legPUA.Draw("SAME")
+tex2.Draw("SAME")
+tex3.Draw("SAME")
+tex4.Draw("SAME")
+rp.GetLowerPad().cd();
+rp2.GetLowerRefGraph().SetLineColor(ROOT.kGreen) #0
+rp2.GetLowerRefGraph().SetMarkerSize(1);
+rp2.GetLowerRefGraph().SetMarkerStyle(20)
+rp2.GetLowerRefGraph().SetMarkerColor(3)
+rp2.GetLowerRefGraph().Draw("SAMEP")
+
+#name = fileName[0:-5] + "_Bin" + str(ProjBin)+ "/cPUA_new.png"
+#cPUA.SaveAs(name)
+cPUA.SaveAs("name.png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/PU_plot_v2.py b/Analyzer/test/Tamas/PostProcScripts/PU_plot_v2.py
new file mode 100644
index 0000000..33dd662
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/PU_plot_v2.py
@@ -0,0 +1,88 @@
+import ROOT, sys
+import numpy as np
+#import tdrstyle
+
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
+(opt,args) = parser.parse_args()
+
+#ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.065);
+ROOT.gStyle.SetPadBottomMargin(0.17);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+fileName = sys.argv[1]
+BinNumber = sys.argv[2] if (len(sys.argv)==1) else 3
+
+StandardAnalysisInFile = ROOT.TFile.Open(fileName)
+
+PUA = StandardAnalysisInFile.Get("/HSCParticleAnalyzer/BaseName/PostS_SR2PASS_Ias_PUA")
+PUB = StandardAnalysisInFile.Get("/HSCParticleAnalyzer/BaseName/PostS_SR2PASS_Ias_PUB")
+PUC = StandardAnalysisInFile.Get("/HSCParticleAnalyzer/BaseName/PostS_SR2PASS_Ias_PUC")
+
+
+c = ROOT.TCanvas("c", "c", 800, 800)
+c.Divide(1,2)
+
+ratio1 = ROOT.TRatioPlot(PUB, PUA)
+ratio2 = ROOT.TRatioPlot(PUB, PUC)
+
+
+
+c.cd(1)
+PUB.Draw("hist")
+PUA.Draw("hist same")
+PUB.SetLineColor(ROOT.kRed)
+PUA.SetLineColor(ROOT.kBlue)
+
+c.cd(2)
+ratio1.Draw()
+ratio1.SetLeftMargin(0.13);
+ratio1.SetRightMargin(0.05);
+ratio1.SetUpTopMargin(0.1);
+ratio1.SetLowTopMargin(0.02);
+ratio1.SetLowBottomMargin(0.35);
+ratio2.Draw("same")
+
+ratio1.GetLowerRefYaxis().SetTitle("#frac{pileup B}{pileup A}")
+ratio2.GetLowerRefYaxis().SetTitle("#frac{pileup B}{pileup C}")
+ratio1.GetLowerRefXaxis().SetTitle("vertex multiplicity")
+ratio2.GetLowerRefXaxis().SetTitle("vertex multiplicity")
+
+ratio1.GetUpperRefYaxis().SetTitle("events")
+ratio2.GetUpperRefYaxis().SetTitle("events")
+ratio1.GetUpperRefYaxis().SetTitleOffset(1.2)
+ratio2.GetUpperRefYaxis().SetTitleOffset(1.2)
+
+ratio1.GetLowerRefGraph().SetMinimum(0)
+ratio2.GetLowerRefGraph().SetMinimum(0)
+
+ratio1.GetLowerRefGraph().SetMaximum(2)
+ratio2.GetLowerRefGraph().SetMaximum(2)
+
+ratio1.GetUpperRefObject().SetLineColor(ROOT.kBlue)
+ratio2.GetUpperRefObject().SetLineColor(ROOT.kGreen)
+
+ratio1.GetLowerRefGraph().SetLineColor(ROOT.kBlue)
+ratio2.GetLowerRefGraph().SetLineColor(ROOT.kGreen)
+
+ratio1.GetLowerRefGraph().SetMarkerColor(ROOT.kBlue)
+ratio2.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen)
+
+ratio1.GetLowerRefGraph().SetMarkerStyle(20)
+ratio2.GetLowerRefGraph().SetMarkerStyle(21)
+
+ratio1.GetLowerRefGraph().SetLineWidth(2)
+ratio2.GetLowerRefGraph().SetLineWidth(2)
+
+c.Update()
+
+c.cd(1)
+leg = ROOT.TLegend(0.6, 0.7, 0.9, 0.9)
+leg.AddEntry(PUB, "pileup B", "l")
+leg.AddEntry(PUA, "pileup A", "l")
+leg.Draw()
+
+c.SaveAs("PU_plot_v2.png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/PV_plot.py b/Analyzer/test/Tamas/PostProcScripts/PV_plot.py
new file mode 100644
index 0000000..1b4118d
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/PV_plot.py
@@ -0,0 +1,145 @@
+import ROOT, sys
+import numpy as np
+#import tdrstyle
+
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
+(opt,args) = parser.parse_args()
+
+#ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.065);
+ROOT.gStyle.SetPadBottomMargin(0.17);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+fileName = sys.argv[1]
+BinNumber = sys.argv[2] if (len(sys.argv)==1) else 3
+
+StandardAnalysisInFile = ROOT.TFile.Open(fileName)
+
+PUA = StandardAnalysisInFile.Get("/HSCParticleAnalyzer/BaseName/PostS_SR2FAIL_PV")
+PUB = StandardAnalysisInFile.Get("/HSCParticleAnalyzer/BaseName/PostS_SR2PASS_PV")
+
+PUA.Scale(1/PUA.Integral())
+PUB.Scale(1/PUB.Integral())
+
+PUA.Rebin(5)
+PUB.Rebin(5)
+
+KSvalueBtoA = round(PUB.Chi2Test(PUA,"XD"),3) #KolmogorovTest
+KSvalueAtoB = round(PUA.Chi2Test(PUB,"XD"),3) #KolmogorovTest
+
+
+max1 = np.maximum(PUA.GetMaximum(),PUB.GetMaximum())
+max2 = 0.01
+max = np.maximum(max1,max2)
+
+PUA.SetMarkerColor(2)
+PUA.SetLineColor(2)
+PUA.SetMarkerStyle(20)
+PUA.GetXaxis().SetTitleSize(0.015)
+PUA.GetXaxis().SetTitleOffset(1)
+PUA.GetYaxis().SetTitleSize(0.05)
+PUA.GetYaxis().SetTitleOffset(1.3)
+PUA.GetYaxis().SetTitle("Normalized events / bin") # + PUA.GetYaxis().GetTitle())
+PUA.GetXaxis().SetTitle("PV (p_{T} > 200 GeV)")
+PUA.SetStats(0)
+PUA.SetMaximum(max*10)
+PUA.SetMinimum(0.0001)
+#PUA.GetYaxis().SetRangeUser(0.1,10000)
+
+
+PUB.SetMarkerColor(1)
+PUB.SetLineColor(1)
+PUB.SetMarkerStyle(20)
+PUB.SetStats(0)
+    
+legPUA =  ROOT.TLegend(.45,.75,.80,.85,"","brNDC")
+legPUA.SetTextFont(42)
+legPUA.SetTextSize(0.035)
+legPUA.SetBorderSize(0);
+legPUA.SetLineColor(1);
+legPUA.SetLineStyle(1);
+legPUA.SetLineWidth(1);
+legPUA.SetFillColor(0);
+legPUA.SetFillStyle(1001);
+legPUA.AddEntry(PUA,"PV in FAIL, #chi^{2} test wrt to PASS: "+str(KSvalueBtoA),"LP")
+legPUA.AddEntry(PUB,"PV in PASS, #chi^{2} test wrt to FAIL: "+str(KSvalueAtoB),"LP")
+
+tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+tex2.SetNDC();
+tex2.SetTextFont(61);
+tex2.SetTextSize(0.0675);
+tex2.SetLineWidth(2);
+
+#tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+tex3 = ROOT.TLatex(0.24,0.94,"Internal");
+tex3.SetNDC();
+tex3.SetTextFont(52);
+tex3.SetTextSize(0.0485);
+tex3.SetLineWidth(2);
+
+tex4 = ROOT.TLatex(0.7,0.93,"Post Selection");
+tex4.SetNDC();
+tex4.SetTextFont(52);
+tex4.SetTextSize(0.0485);
+tex4.SetLineWidth(2);
+
+
+
+cPUA = ROOT.TCanvas('cPUA', 'cPUA',800,800)
+
+cPUA.SetLogy()
+
+rp = ROOT.TRatioPlot(PUA,PUB,"diffsig")
+rp.SetDrawOption("pois")
+
+rp.SetH1DrawOpt("P");
+rp.SetH2DrawOpt("P");
+
+rp.Draw()
+
+#rp.GetUpperPad().BuildLegend()
+rp.SetLeftMargin(0.13);
+rp.SetRightMargin(0.05);
+rp.SetUpTopMargin(0.1);
+rp.SetLowTopMargin(0.02);
+rp.SetLowBottomMargin(0.35);
+    
+rp.GetLowerRefGraph().SetMinimum(-5);
+rp.GetLowerRefGraph().SetMaximum(5);
+rp.GetLowerRefGraph().SetMarkerColor(2)
+rp.GetLowerRefGraph().SetLineColor(2) #0
+rp.GetLowerRefGraph().SetMarkerStyle(20)
+rp.GetLowerRefGraph().SetMarkerSize(1);
+rp.GetLowYaxis().SetNdivisions(505);
+rp.GetLowerRefYaxis().SetTitle("Pull");
+rp.GetLowerRefYaxis().SetTitleSize(0.05);
+rp.GetLowerRefYaxis().SetTitleOffset(1);
+rp.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+
+    
+rp.GetLowerRefXaxis().SetTitleSize(0.04);
+rp.GetLowerRefXaxis().SetTitleOffset(1);
+rp.GetLowerRefXaxis().SetLabelSize(0.035);
+cPUA.Modified()
+cPUA.Update()
+#PUA.Draw()
+#PUB.Draw("SAME")
+#rp.Draw("X")
+
+rp.GetUpperPad().cd();
+legPUA.Draw("SAME")
+tex2.Draw("SAME")
+tex3.Draw("SAME")
+tex4.Draw("SAME")
+rp.GetLowerPad().cd();
+
+#name = fileName[0:-5] + "_Bin" + str(ProjBin)+ "/cPUA_new.png"
+#cPUA.SaveAs(name)
+cPUA.SaveAs("name2.png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/ROCCurves.py b/Analyzer/test/Tamas/PostProcScripts/ROCCurves.py
new file mode 100644
index 0000000..89b556d
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/ROCCurves.py
@@ -0,0 +1,114 @@
+import argparse
+import ROOT
+from array import array
+import ROOT, sys, os, time, re
+import tdrstyle
+
+def draw(file_map, h_name, h_name2, layer,  outfile, fileName):
+
+#    Gain_40E14Ne_T253K = ROOT.TGraphErrors("./SignalBackgroundEff_HSCP.txt","%lg %lg")
+    Gain_40E14Ne_T253K = ROOT.TGraphErrors(fileName,"%lg %lg")
+    
+    Gain_40E14Ne_T253K.SetMarkerStyle(20)
+    Gain_40E14Ne_T253K.SetMarkerColor(1)
+    Gain_40E14Ne_T253K.SetLineColor(1)
+    Gain_40E14Ne_T253K.SetLineStyle(1)
+
+    # ------------------------------------------------------
+        
+    mgGainResult =  ROOT.TMultiGraph()
+    mgGainResult.Add(Gain_40E14Ne_T253K,"p");
+    mgGainResult.SetTitle(";HSCP mass [GeV];Signal efficiency")
+    mgGainResult.GetYaxis().SetTitleSize(.05)
+    mgGainResult.GetYaxis().SetTitleOffset(1.5)
+    mgGainResult.GetYaxis().SetLabelSize(.04)
+    mgGainResult.GetXaxis().SetTitleSize(.05)
+    mgGainResult.GetXaxis().SetLabelSize(.04)
+    mgGainResult.GetYaxis().SetRangeUser(0.,1.)
+    
+    legGainResult = ROOT.TLegend(.5,.30,.8,.545)
+    legGainResult.SetTextFont(42)
+    legGainResult.SetTextSize(0.035)
+    legGainResult.AddEntry(Gain_40E14Ne_T253K,"R-hadron with gluino","LP")
+        
+    tex2 = ROOT.TLatex(0.18,0.96,"CMS");
+    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+    tex2.SetNDC();
+    tex2.SetTextFont(61);
+    tex2.SetTextSize(0.0375);
+    tex2.SetLineWidth(2);
+
+    tex3 = ROOT.TLatex(0.27,0.96,"Simulation")
+    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+    tex3.SetNDC();
+    tex3.SetTextFont(52);
+    tex3.SetTextSize(0.0285);
+    tex3.SetLineWidth(2);
+    
+##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#frac{p1}{E}#right)}") #Morris
+#    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = exp[A#upointexp(-b/E)]") #Morris2.0
+##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#left(#frac{p1}{E}#right)^{p2}#right)}")
+##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-(p0*x/p1)^{p2}}") #Muller-Moll
+#    texFunction.SetNDC();
+#    texFunction.SetTextFont(42)
+#    texFunction.SetTextSize(0.035)
+#    texFunction.SetTextColor(2)
+    
+    #    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#left(#frac{p1}{E}#right)^{p2}#right)}")
+#    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-(p0*x/p1)^{p2}}") #Muller-Moll
+    
+    
+#    texFunctionPar0 = ROOT.TLatex(0.27,0.7,"#chi^{2}/ndf=0.3096/5")
+#    texFunctionPar0.SetNDC();
+#    texFunctionPar0.SetTextFont(42)
+#    texFunctionPar0.SetTextSize(0.035)
+##    texFunctionPar.SetTextColor(2)
+#
+#    texFunctionPar1 = ROOT.TLatex(0.27,0.65,"A=1.526x10^{9}")
+#    texFunctionPar1.SetNDC();
+#    texFunctionPar1.SetTextFont(42)
+#    texFunctionPar1.SetTextSize(0.035)
+#    texFunctionPar.SetTextColor(2)
+#
+#    texFunctionPar2 = ROOT.TLatex(0.27,0.6,"b=2.898x10^{7} V/cm")
+#    texFunctionPar2.SetNDC();
+#    texFunctionPar2.SetTextFont(42)
+#    texFunctionPar2.SetTextSize(0.035)
+    
+    cGainResult = ROOT.TCanvas('cGainResult', 'cGainResult',800,800)
+    cGainResult.SetRightMargin(0.08)
+    mgGainResult.Draw('AP')
+#    mgGainResult.Fit("expFit")
+#    expFit.Draw("SAME")
+    legGainResult.Draw("SAME")
+    tex2.Draw("SAME");
+    tex3.Draw("SAME");
+    
+#    texFunction.Draw("SAME")
+#    texFunctionPar0.Draw("SAME")
+#    texFunctionPar1.Draw("SAME")
+#    texFunctionPar2.Draw("SAME")
+    
+    cGainResult.SaveAs("SignalEffHSCPGluino_"+fileName[:-4]+".png")
+    
+if __name__ == '__main__':
+    
+    ROOT.gROOT.SetBatch(True)
+    tdrstyle.setTDRStyle()
+#    ROOT.gStyle.SetOptFit(111)
+
+ #-------------------------------------------------------------------------
+ #  PARSE COMMAND LINE ARGUMENT
+ #-------------------------------------------------------------------------
+    
+    parser = argparse.ArgumentParser(description='Charge MPV extractor')
+    parser.add_argument('-l', action="store", dest = 'inlist', default = 'HSCP_file.list')
+    parser.add_argument('-n', action="store", dest = 'h_name', default = 'analysis/h701_n1')
+    parser.add_argument('-n2', action="store", dest = 'h_name2', default = 'analysis/h701_n1c')
+    parser.add_argument('-lay', action="store", dest = 'layer', default = 'Layer 1')
+    parser.add_argument('-o', action="store", dest = 'outfile', default = 'tmp.pdf')
+    parser.add_argument('-f', action="store", dest = 'fileName', default = 'tmp.pdf')
+
+    p = parser.parse_args()
+
+    draw(p.inlist, p.h_name, p.h_name2, p.layer, p.outfile, p.fileName)
diff --git a/Analyzer/test/Tamas/PostProcScripts/ROCCurves_Bckg.py b/Analyzer/test/Tamas/PostProcScripts/ROCCurves_Bckg.py
new file mode 100644
index 0000000..1898c0d
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/ROCCurves_Bckg.py
@@ -0,0 +1,125 @@
+import argparse
+import ROOT
+from array import array
+import re
+import tdrstyle
+
+
+
+def draw(file_map, h_name, h_name2, layer,  outfile):
+
+#    Gain_40E14Ne_T253K = ROOT.TGraphErrors("./Gain_PixelAV_40E14Ne_T253K_Rescaled2.txt","%lg %lg %lg")
+    Gain_40E14Ne_T253K = ROOT.TGraphErrors("./QCDBackgroundEff.txt","%lg %lg %lg %lg")
+#    Gain_40E14Ne_T253K = ROOT.TGraphErrors("./Gain_PixelAV_40E14Ne_T253K_v2.txt","%lg %lg %lg")
+    Gain_40E14Ne_T253K_Simple = ROOT.TGraphErrors("./QCDBackgroundEff.txt","%lg %lg %lg %lg")
+    # new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);
+    
+    Gain_40E14Ne_T253K.SetMarkerStyle(20)
+    Gain_40E14Ne_T253K.SetMarkerColor(1)
+    Gain_40E14Ne_T253K.SetLineColor(1)
+    Gain_40E14Ne_T253K.SetLineStyle(1)
+    
+    Gain_40E14Ne_T253K_Simple.SetMarkerStyle(20)
+    Gain_40E14Ne_T253K_Simple.SetMarkerColor(4)
+    Gain_40E14Ne_T253K_Simple.SetLineColor(4)
+    Gain_40E14Ne_T253K_Simple.SetLineStyle(1)
+
+    # ------------------------------------------------------
+        
+    mgGainResult =  ROOT.TMultiGraph()
+    mgGainResult.Add(Gain_40E14Ne_T253K,"p");
+#    mgGainResult.Add(Gain_40E14Ne_T253K_Simple,"p");
+    mgGainResult.SetTitle(";QCD p_{T} bin [GeV];Background reduction efficiency [%]")
+    mgGainResult.GetYaxis().SetTitleSize(.05)
+    mgGainResult.GetYaxis().SetTitleOffset(1.5)
+    mgGainResult.GetYaxis().SetLabelSize(.04)
+    mgGainResult.GetXaxis().SetTitleSize(.05)
+    mgGainResult.GetXaxis().SetLabelSize(.04)
+    mgGainResult.GetYaxis().SetRangeUser(0.,100.)
+    
+    legGainResult = ROOT.TLegend(.5,.80,.8,.92)
+    legGainResult.SetTextFont(42)
+    legGainResult.SetTextSize(0.035)
+#    legGainResult.AddEntry(Gain_40E14Ne_T253K_Simple,"4.0x10^{15} n_{eq}/cm^{2} ratio of data/PixelAV","LP")
+    legGainResult.AddEntry(Gain_40E14Ne_T253K,"Muon-enriched QCD","LP")
+        
+    tex2 = ROOT.TLatex(0.18,0.96,"CMS");
+    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+    tex2.SetNDC();
+    tex2.SetTextFont(61);
+    tex2.SetTextSize(0.0375);
+    tex2.SetLineWidth(2);
+
+    tex3 = ROOT.TLatex(0.27,0.96,"Simulation")
+    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+    tex3.SetNDC();
+    tex3.SetTextFont(52);
+    tex3.SetTextSize(0.0285);
+    tex3.SetLineWidth(2);
+    
+##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#frac{p1}{E}#right)}") #Morris
+#    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = exp[A#upointexp(-b/E)]") #Morris2.0
+##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#left(#frac{p1}{E}#right)^{p2}#right)}")
+##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-(p0*x/p1)^{p2}}") #Muller-Moll
+#    texFunction.SetNDC();
+#    texFunction.SetTextFont(42)
+#    texFunction.SetTextSize(0.035)
+#    texFunction.SetTextColor(2)
+    
+    #    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#left(#frac{p1}{E}#right)^{p2}#right)}")
+#    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-(p0*x/p1)^{p2}}") #Muller-Moll
+    
+    
+#    texFunctionPar0 = ROOT.TLatex(0.27,0.7,"#chi^{2}/ndf=0.3096/5")
+#    texFunctionPar0.SetNDC();
+#    texFunctionPar0.SetTextFont(42)
+#    texFunctionPar0.SetTextSize(0.035)
+##    texFunctionPar.SetTextColor(2)
+#
+#    texFunctionPar1 = ROOT.TLatex(0.27,0.65,"A=1.526x10^{9}")
+#    texFunctionPar1.SetNDC();
+#    texFunctionPar1.SetTextFont(42)
+#    texFunctionPar1.SetTextSize(0.035)
+#    texFunctionPar.SetTextColor(2)
+#
+#    texFunctionPar2 = ROOT.TLatex(0.27,0.6,"b=2.898x10^{7} V/cm")
+#    texFunctionPar2.SetNDC();
+#    texFunctionPar2.SetTextFont(42)
+#    texFunctionPar2.SetTextSize(0.035)
+    
+    cGainResult = ROOT.TCanvas('cGainResult', 'cGainResult',800,800)
+    cGainResult.SetRightMargin(0.08)
+    mgGainResult.Draw('AP')
+#    mgGainResult.Fit("expFit")
+#    expFit.Draw("SAME")
+    legGainResult.Draw("SAME")
+    tex2.Draw("SAME");
+    tex3.Draw("SAME");
+    
+#    texFunction.Draw("SAME")
+#    texFunctionPar0.Draw("SAME")
+#    texFunctionPar1.Draw("SAME")
+#    texFunctionPar2.Draw("SAME")
+    
+    cGainResult.SaveAs("BackgroundEff.png")
+    
+if __name__ == '__main__':
+    
+    ROOT.gROOT.SetBatch(True)
+    tdrstyle.setTDRStyle()
+#    ROOT.gStyle.SetOptFit(111)
+
+ #-------------------------------------------------------------------------
+ #  PARSE COMMAND LINE ARGUMENT
+ #-------------------------------------------------------------------------
+    
+    parser = argparse.ArgumentParser(description='Charge MPV extractor')
+    parser.add_argument('-l', action="store", dest = 'inlist', default = 'HSCP_file.list')
+    parser.add_argument('-n', action="store", dest = 'h_name', default = 'analysis/h701_n1')
+    parser.add_argument('-n2', action="store", dest = 'h_name2', default = 'analysis/h701_n1c')
+    parser.add_argument('-lay', action="store", dest = 'layer', default = 'Layer 1')
+    parser.add_argument('-o', action="store", dest = 'outfile', default = 'tmp.pdf')
+
+    p = parser.parse_args()
+
+    draw(p.inlist, p.h_name, p.h_name2, p.layer, p.outfile)
diff --git a/Analyzer/test/Tamas/PostProcScripts/RescaleAndPrintHadd_FakeXsection.py b/Analyzer/test/Tamas/PostProcScripts/RescaleAndPrintHadd_FakeXsection.py
new file mode 100644
index 0000000..e71c835
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/RescaleAndPrintHadd_FakeXsection.py
@@ -0,0 +1,283 @@
+import ROOT, sys, os, time, re, numpy
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_WJetsToLNu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_0J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_1J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_2J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1599_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-500_CodeV"+codeVersion+"_v1.root",
+]
+
+#intLumi = 4598.37 #10.0 #
+intLumi = 100000.0 #100/fb
+#intLumi = 30000.0
+
+crossSectionArray = {
+'crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_CodeV'+codeVersion+'_v1.root' : 239000, #+-755.0,
+'crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2797000, #+-8800.0,
+'crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2518000, #+-7940.0,
+'crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 1361000, #+-4263.0,
+'crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 377800.0, #+-1184.0,
+'crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 88620.0, #+-275.1
+'crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 21070.0, #+-65.28
+'crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 7019.0, #+-21.61
+'crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  622.4, #+-1.891
+'crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  58.86, #+-0.1776
+'crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  18.22, #+-0.05471
+'crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  3.25, #+-0.0148
+'crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  1.61, #+-
+# 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
+'crab_Analysis_2018_WJetsToLNu_0J_CodeV'+codeVersion+'_v1.root' :  53330.0,#	+-90.89
+'crab_Analysis_2018_WJetsToLNu_1J_CodeV'+codeVersion+'_v1.root' : 8875.0, #	+-55.31
+'crab_Analysis_2018_WJetsToLNu_2J_CodeV'+codeVersion+'_v1.root' :  3338.0, #	+-34.64
+'crab_Analysis_2018_TTToHadronic_CodeV'+codeVersion+'_v1.root' : 377.96, # or 377.96,
+'crab_Analysis_2018_TTToSemiLeptonic_CodeV'+codeVersion+'_v1.root' : 365.35, # or 65.34
+'crab_Analysis_2018_TTTo2L2Nu_CodeV'+codeVersion+'_v1.root' :  88.29, # or 687.1 or 91.47600
+'crab_Analysis_2018_HSCPgluino_M-500_CodeV'+codeVersion+'_v1.root' :   10.,
+'crab_Analysis_2018_HSCPgluino_M-800_CodeV'+codeVersion+'_v1.root' :   10.,
+'crab_Analysis_2018_HSCPgluino_M-1000_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluino_M-1200_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluino_M-1400_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluino_M-1600_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluino_M-1800_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluino_M-2000_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluino_M-2200_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluino_M-2400_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluino_M-2600_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-500_CodeV'+codeVersion+'_v1.root' :   10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-800_CodeV'+codeVersion+'_v1.root' :   10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1000_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1200_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1400_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1600_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1800_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2000_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' :  10.,
+'crab_Analysis_2018_HSCPgmsbStau_M-200_CodeV'+codeVersion+'_v1.root' :  2.8E-01,
+'crab_Analysis_2018_HSCPgmsbStau_M-247_CodeV'+codeVersion+'_v1.root' :  8.8E-02,
+'crab_Analysis_2018_HSCPgmsbStau_M-308_CodeV'+codeVersion+'_v1.root' :  2.5E-02,
+'crab_Analysis_2018_HSCPgmsbStau_M-432_CodeV'+codeVersion+'_v1.root' :  3.9E-03,
+'crab_Analysis_2018_HSCPgmsbStau_M-557_CodeV'+codeVersion+'_v1.root' :  1.9E-03,
+'crab_Analysis_2018_HSCPgmsbStau_M-651_CodeV'+codeVersion+'_v1.root' :  4.1E-04,
+'crab_Analysis_2018_HSCPgmsbStau_M-745_CodeV'+codeVersion+'_v1.root' :  1.9E-04,
+'crab_Analysis_2018_HSCPgmsbStau_M-871_CodeV'+codeVersion+'_v1.root' :  6.9E-05,
+'crab_Analysis_2018_HSCPgmsbStau_M-1029_CodeV'+codeVersion+'_v1.root' :  2.2E-05,
+'crab_Analysis_2018_HSCPgmsbStau_M-1218_CodeV'+codeVersion+'_v1.root' :  6.4E-06,
+'crab_Analysis_2018_HSCPgmsbStau_M-1409_CodeV'+codeVersion+'_v1.root' :  2.0E-06,
+'crab_Analysis_2018_HSCPgmsbStau_M-1599_CodeV'+codeVersion+'_v1.root' :  5.3E-07,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-500_CodeV'+codeVersion+'_v1.root' :  0.000257,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-800_CodeV'+codeVersion+'_v1.root' :  0.0326,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1000_CodeV'+codeVersion+'_v1.root' :  0.00683,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0017,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1400_CodeV'+codeVersion+'_v1.root' :  0.000473,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1600_CodeV'+codeVersion+'_v1.root' :  0.000142,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1800_CodeV'+codeVersion+'_v1.root' :  4.51e-05,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2000_CodeV'+codeVersion+'_v1.root' :  1.48e-05,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
+'crab_Analysis_2018_HSCPstop_M-500_CodeV'+codeVersion+'_v1.root' :  0.000257,
+'crab_Analysis_2018_HSCPstop_M-800_CodeV'+codeVersion+'_v1.root' :  0.0326,
+'crab_Analysis_2018_HSCPstop_M-1000_CodeV'+codeVersion+'_v1.root' :  0.00683,
+'crab_Analysis_2018_HSCPstop_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0017,
+'crab_Analysis_2018_HSCPstop_M-1400_CodeV'+codeVersion+'_v1.root' :  0.000473,
+'crab_Analysis_2018_HSCPstop_M-1600_CodeV'+codeVersion+'_v1.root' :  0.000142,
+'crab_Analysis_2018_HSCPstop_M-1800_CodeV'+codeVersion+'_v1.root' :  4.51e-05,
+'crab_Analysis_2018_HSCPstop_M-2000_CodeV'+codeVersion+'_v1.root' :  1.48e-05,
+'crab_Analysis_2018_HSCPstop_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
+'crab_Analysis_2018_HSCPstop_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
+'crab_Analysis_2018_HSCPstop_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-200_CodeV'+codeVersion+'_v1.root' :  1.1E-01,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV'+codeVersion+'_v1.root' :  7.3E-03,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-500_CodeV'+codeVersion+'_v1.root' :  1.2E-03,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV'+codeVersion+'_v1.root' :  2.6E-04,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1000_CodeV'+codeVersion+'_v1.root' :  7.6E-05,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1400_CodeV'+codeVersion+'_v1.root' :  8.5E-06,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1800_CodeV'+codeVersion+'_v1.root' :  1.2E-06,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV'+codeVersion+'_v1.root' :  8.2E-07, #fake
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV'+codeVersion+'_v1.root' :  1.2E-07,#fake
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV'+codeVersion+'_v1.root' :  3.0E-01,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV'+codeVersion+'_v1.root' :  2.3E-02,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-500_CodeV'+codeVersion+'_v1.root' :  3.5E-03,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV'+codeVersion+'_v1.root' :  2.4E-04,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV'+codeVersion+'_v1.root' :  2.7E-05,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV'+codeVersion+'_v1.root' :  3.9E-06,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV'+codeVersion+'_v1.root' :  8.2E-07, #fake
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV'+codeVersion+'_v1.root' :  1.2E-07,#fake
+}
+
+## TTBar is 832 pb (NNLO)
+# gluino x-sections from
+# https://github.com/fuenfundachtzig/xsec/blob/master/json/pp13_gluino_NNLO%2BNNLL.json#L1820
+
+fileInArray = []
+for sample in BackgroundSamples:
+  if not os.path.exists(sample): continue
+  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
+
+for fileIn in fileInArray:
+  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
+    print("NumEvents not found, exit for "+str(fileIn))
+    continue
+  
+  nEvetsPreTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(1)
+  nEvetsPostTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(2)
+  if (nEvetsPreTrig == 0):
+    print("nEvetsPreTrig is zero, exiting")
+    continue
+  nameFromTFile = str(fileIn)[str(fileIn).find("Name")+6:str(fileIn).find("Title")-1]
+  if not (crossSectionArray.get(nameFromTFile)) :
+    print("No crossSectionArray for "+str(nameFromTFile))
+    continue
+  weight = intLumi*crossSectionArray.get(nameFromTFile)/nEvetsPreTrig
+  
+  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
+    dirname = fileIn.GetListOfKeys().At(i).GetName()
+    curr_dir = fileIn.GetDirectory(dirname)
+#    print("dirname: "+dirname)
+    if not (curr_dir) :
+      continue
+    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+        keyname = curr_dir.GetListOfKeys().At(i).GetName()
+        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
+        if not (curr_dir2) :
+          continue
+        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          print("keyname2: "+keyname2)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileIn.Get(newname)
+          if not (obj) : continue
+          if (obj.GetEntries() == 0 ) :
+#            print("obj.GetEntries() == 0")
+            continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if obj.InheritsFrom("TObject"):
+            obj.Scale(weight)
+  fileIn.Write("",ROOT.TObject.kOverwrite)
+  fileIn.Close()
+
+print("hadd crab_Analysis_2018_HSCPgluino_MAll_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_HSCPgluino_M-*_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_2018_HSCPpairStau_MAll_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_HSCPpairStau_M-*_CodeV"+codeVersion+"_v1.root")
diff --git a/Analyzer/test/Tamas/PostProcScripts/VoltrescaleAndPrintHadd.py b/Analyzer/test/Tamas/PostProcScripts/VoltrescaleAndPrintHadd.py
new file mode 100644
index 0000000..789e61c
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/VoltrescaleAndPrintHadd.py
@@ -0,0 +1,169 @@
+import ROOT, sys, os, time, re, numpy
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_WJetsToLNu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_0J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_1J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_2J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root",
+]
+
+#intLumi = 4598.37 #10.0 #
+intLumi = 100000.0 #100/fb
+#intLumi = 30000.0
+
+crossSectionArray = {
+'crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_CodeV'+codeVersion+'_v1.root' : 239000, #+-755.0,
+'crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2797000, #+-8800.0,
+'crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2518000, #+-7940.0,
+'crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 1361000, #+-4263.0,
+'crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 377800.0, #+-1184.0,
+'crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 88620.0, #+-275.1
+'crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 21070.0, #+-65.28
+'crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 7019.0, #+-21.61
+'crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  622.4, #+-1.891
+'crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  58.86, #+-0.1776
+'crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  18.22, #+-0.05471
+'crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  3.25, #+-0.0148
+'crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  1.61, #+-
+# 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
+'crab_Analysis_2018_WJetsToLNu_0J_CodeV'+codeVersion+'_v1.root' :  53330.0,#	+-90.89
+'crab_Analysis_2018_WJetsToLNu_1J_CodeV'+codeVersion+'_v1.root' : 8875.0, #	+-55.31
+'crab_Analysis_2018_WJetsToLNu_2J_CodeV'+codeVersion+'_v1.root' :  3338.0, #	+-34.64
+'crab_Analysis_2018_TTToHadronic_CodeV'+codeVersion+'_v1.root' : 377.96, # or 377.96,
+'crab_Analysis_2018_TTToSemiLeptonic_CodeV'+codeVersion+'_v1.root' : 365.35, # or 65.34
+'crab_Analysis_2018_TTTo2L2Nu_CodeV'+codeVersion+'_v1.root' :  88.29, # or 687.1 or 91.47600
+'crab_Analysis_2018_HSCPgluino_M-500_CodeV'+codeVersion+'_v1.root' :   33.800,
+'crab_Analysis_2018_HSCPgluino_M-800_CodeV'+codeVersion+'_v1.root' :   1.810,
+'crab_Analysis_2018_HSCPgluino_M-1000_CodeV'+codeVersion+'_v1.root' :  0.385,
+'crab_Analysis_2018_HSCPgluino_M-1400_CodeV'+codeVersion+'_v1.root' :  0.0284,
+'crab_Analysis_2018_HSCPgluino_M-1600_CodeV'+codeVersion+'_v1.root' :  0.00887,
+'crab_Analysis_2018_HSCPgluino_M-1800_CodeV'+codeVersion+'_v1.root' :  0.00293,
+'crab_Analysis_2018_HSCPgluino_M-2000_CodeV'+codeVersion+'_v1.root' :  0.00101,
+'crab_Analysis_2018_HSCPgluino_M-2200_CodeV'+codeVersion+'_v1.root' :  0.000356,
+'crab_Analysis_2018_HSCPgluino_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
+'crab_Analysis_2018_HSCPgluino_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
+'crab_Analysis_2018_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 30.3143567/1000.,
+'crab_Analysis_2018_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 12.9202991/1000.,
+'crab_Analysis_2018_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 4.8020183/1000.,
+'crab_Analysis_2018_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 1.2159719/1000.,
+'crab_Analysis_2018_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.389904/1000.  ,
+'crab_Analysis_2018_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.1234716/1000.,
+'crab_Analysis_2018_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 0.058632201/1000.,
+'crab_Analysis_2018_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 0.029178605/1000.,
+'crab_Analysis_2018_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 0.0150415955/1000.,
+'crab_Analysis_2018_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
+'crab_Analysis_2018_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
+'crab_Analysis_2018_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' : 0.00057/1000.  ,
+}
+
+## TTBar is 832 pb (NNLO)
+# gluino x-sections from
+# https://github.com/fuenfundachtzig/xsec/blob/master/json/pp13_gluino_NNLO%2BNNLL.json#L1820
+
+fileInArray = []
+for sample in BackgroundSamples:
+  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
+
+for fileIn in fileInArray:
+  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
+    print("NumEvents not found, exit for "+str(fileIn))
+    continue
+  
+  nEvetsPreTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(1)
+  nEvetsPostTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(2)
+  if (nEvetsPreTrig == 0):
+    print("nEvetsPreTrig is zero, exiting")
+    continue
+  nameFromTFile = str(fileIn)[str(fileIn).find("Name")+6:str(fileIn).find("Title")-1]
+  weight = intLumi*crossSectionArray.get(nameFromTFile)/nEvetsPreTrig
+  
+  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
+    dirname = fileIn.GetListOfKeys().At(i).GetName()
+    curr_dir = fileIn.GetDirectory(dirname)
+#    print("dirname: "+dirname)
+    if not (curr_dir) :
+      continue
+    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+        keyname = curr_dir.GetListOfKeys().At(i).GetName()
+        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
+        if not (curr_dir2) :
+          continue
+        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          print("keyname2: "+keyname2)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileIn.Get(newname)
+          if not (obj) : continue
+          if (obj.GetEntries() == 0 ) :
+#            print("obj.GetEntries() == 0")
+            continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if obj.InheritsFrom("TObject"):
+            obj.Scale(weight)
+  fileIn.Write("",ROOT.TObject.kOverwrite)
+  fileIn.Close()
+
+print("hadd crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu_*J_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root")
+
+#os.system
+print("hadd crab_Analysis_2018_AllQCD_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root")
+
+print("hadd crab_Analysis_2018_AllTTbar_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root")
+
+print("hadd crab_Analysis_2018_AllWJets_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu*J_CodeV"+codeVersion+"_v1.root ")
+
+print("hadd crab_Analysis_SingleMuon_RunPhase1_CodeV"+codeVersion+"_v1.root *SingleMuon*_CodeV"+codeVersion+"_v1.root")
+
+#if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
+#
+#os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_SingleMuon_Run2018C_CodeV*"+codeVersion+"_v1.root .")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-*_CodeV*"+codeVersion+"_v1.root .")
+#os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/PostProcScripts/VoltrescaleAndPrintHaddApr17.py b/Analyzer/test/Tamas/PostProcScripts/VoltrescaleAndPrintHaddApr17.py
new file mode 100644
index 0000000..4e0b24b
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/VoltrescaleAndPrintHaddApr17.py
@@ -0,0 +1,319 @@
+import ROOT, sys, os, time, re, numpy
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_WJetsToLNu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_0J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_1J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_2J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-50To120_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-120To200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-200To400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-400To800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-800To1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-1400To2300_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-2300To3500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-3500To4500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-4500To6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-6000ToInf_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1599_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV"+codeVersion+"_v1.root",
+]
+
+#intLumi = 4598.37 #10.0 #
+intLumi = 100000.0 #100/fb
+#intLumi = 30000.0
+
+crossSectionArray = {
+'crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_CodeV'+codeVersion+'_v1.root' : 239000, #+-755.0,
+'crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2797000, #+-8800.0,
+'crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2518000, #+-7940.0,
+'crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 1361000, #+-4263.0,
+'crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 377800.0, #+-1184.0,
+'crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 88620.0, #+-275.1
+'crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 21070.0, #+-65.28
+'crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 7019.0, #+-21.61
+'crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  622.4, #+-1.891
+'crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  58.86, #+-0.1776
+'crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  18.22, #+-0.05471
+'crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  3.25, #+-0.0148
+'crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  1.61, #+-
+# 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
+'crab_Analysis_2018_WJetsToLNu_0J_CodeV'+codeVersion+'_v1.root' :  53330.0,#	+-90.89
+'crab_Analysis_2018_WJetsToLNu_1J_CodeV'+codeVersion+'_v1.root' : 8875.0, #	+-55.31
+'crab_Analysis_2018_WJetsToLNu_2J_CodeV'+codeVersion+'_v1.root' :  3338.0, #	+-34.64
+'crab_Analysis_2018_TTToHadronic_CodeV'+codeVersion+'_v1.root' : 377.96, # or 377.96,
+'crab_Analysis_2018_TTToSemiLeptonic_CodeV'+codeVersion+'_v1.root' : 365.35, # or 65.34
+'crab_Analysis_2018_TTTo2L2Nu_CodeV'+codeVersion+'_v1.root' :  88.29, # or 687.1 or 91.47600
+'crab_Analysis_2018_ZToMuMu_M-50To120_CodeV'+codeVersion+'_v1.root' : 2.116e+03, #+-9.883e-01
+'crab_Analysis_2018_ZToMuMu_M-120To200_CodeV'+codeVersion+'_v1.root' : 2.058e+01, # +/- 1.362e-02
+'crab_Analysis_2018_ZToMuMu_M-200To400_CodeV'+codeVersion+'_v1.root' : 2.890e+00, # +/- 1.977e-03
+'crab_Analysis_2018_ZToMuMu_M-400To800_CodeV'+codeVersion+'_v1.root' : 2.515e-01, # +/- 1.770e-04
+'crab_Analysis_2018_ZToMuMu_M-800To1400_CodeV'+codeVersion+'_v1.root' : 1.709e-02, # +/- 1.232e-05
+'crab_Analysis_2018_ZToMuMu_M-1400To2300_CodeV'+codeVersion+'_v1.root' : 1.370e-03, # +/- 9.867e-07
+'crab_Analysis_2018_ZToMuMu_M-2300To3500_CodeV'+codeVersion+'_v1.root' : 8.282e-05, #  +/- 5.740e-08
+'crab_Analysis_2018_ZToMuMu_M-3500To4500_CodeV'+codeVersion+'_v1.root' : 4.650e-06,
+'crab_Analysis_2018_ZToMuMu_M-4500To6000_CodeV'+codeVersion+'_v1.root' : 3.650e-07,# +/- 1.874e-10
+'crab_Analysis_2018_ZToMuMu_M-6000ToInf_CodeV'+codeVersion+'_v1.root' : 2.526e-08, # +/- 2.331e-11
+'crab_Analysis_2018_HSCPgluino_M-500_CodeV'+codeVersion+'_v1.root' :   33.800,
+'crab_Analysis_2018_HSCPgluino_M-800_CodeV'+codeVersion+'_v1.root' :   1.810,
+'crab_Analysis_2018_HSCPgluino_M-1000_CodeV'+codeVersion+'_v1.root' :  0.385,
+'crab_Analysis_2018_HSCPgluino_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0985,
+'crab_Analysis_2018_HSCPgluino_M-1400_CodeV'+codeVersion+'_v1.root' :  0.0284,
+'crab_Analysis_2018_HSCPgluino_M-1600_CodeV'+codeVersion+'_v1.root' :  0.00887,
+'crab_Analysis_2018_HSCPgluino_M-1800_CodeV'+codeVersion+'_v1.root' :  0.00293,
+'crab_Analysis_2018_HSCPgluino_M-2000_CodeV'+codeVersion+'_v1.root' :  0.00101,
+'crab_Analysis_2018_HSCPgluino_M-2200_CodeV'+codeVersion+'_v1.root' :  0.000356,
+'crab_Analysis_2018_HSCPgluino_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
+'crab_Analysis_2018_HSCPgluino_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-500_CodeV'+codeVersion+'_v1.root' :   33.800,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-800_CodeV'+codeVersion+'_v1.root' :   1.810,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1000_CodeV'+codeVersion+'_v1.root' :  0.385,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0985,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1400_CodeV'+codeVersion+'_v1.root' :  0.0284,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1600_CodeV'+codeVersion+'_v1.root' :  0.00887,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1800_CodeV'+codeVersion+'_v1.root' :  0.00293,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2000_CodeV'+codeVersion+'_v1.root' :  0.00101,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  0.000356,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
+'crab_Analysis_2018_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 0.0303143567,
+'crab_Analysis_2018_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.01354210931669562,
+'crab_Analysis_2018_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.005617969677491303,
+'crab_Analysis_2018_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.0013205993021946,
+'crab_Analysis_2018_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.0003982919391389629,
+'crab_Analysis_2018_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.00018170273864904894,
+'crab_Analysis_2018_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 8.760649473515753e-5,
+'crab_Analysis_2018_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 3.548748280460506e-5,
+'crab_Analysis_2018_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 1.1684554271190975e-5,
+'crab_Analysis_2018_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
+'crab_Analysis_2018_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
+'crab_Analysis_2018_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' : 0.00057/1000.  ,
+'crab_Analysis_2018_HSCPgmsbStau_M-200_CodeV'+codeVersion+'_v1.root' :  2.8E-01,
+'crab_Analysis_2018_HSCPgmsbStau_M-247_CodeV'+codeVersion+'_v1.root' :  8.8E-02,
+'crab_Analysis_2018_HSCPgmsbStau_M-308_CodeV'+codeVersion+'_v1.root' :  2.5E-02,
+'crab_Analysis_2018_HSCPgmsbStau_M-432_CodeV'+codeVersion+'_v1.root' :  3.9E-03,
+'crab_Analysis_2018_HSCPgmsbStau_M-557_CodeV'+codeVersion+'_v1.root' :  1.9E-03,
+'crab_Analysis_2018_HSCPgmsbStau_M-651_CodeV'+codeVersion+'_v1.root' :  4.1E-04,
+'crab_Analysis_2018_HSCPgmsbStau_M-745_CodeV'+codeVersion+'_v1.root' :  1.9E-04,
+'crab_Analysis_2018_HSCPgmsbStau_M-871_CodeV'+codeVersion+'_v1.root' :  6.9E-05,
+'crab_Analysis_2018_HSCPgmsbStau_M-1029_CodeV'+codeVersion+'_v1.root' :  2.2E-05,
+'crab_Analysis_2018_HSCPgmsbStau_M-1218_CodeV'+codeVersion+'_v1.root' :  6.4E-06,
+'crab_Analysis_2018_HSCPgmsbStau_M-1409_CodeV'+codeVersion+'_v1.root' :  2.0E-06,
+'crab_Analysis_2018_HSCPgmsbStau_M-1599_CodeV'+codeVersion+'_v1.root' :  5.3E-07,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-500_CodeV'+codeVersion+'_v1.root' :  0.000257,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-800_CodeV'+codeVersion+'_v1.root' :  0.0326,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1000_CodeV'+codeVersion+'_v1.root' :  0.00683,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0017,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1400_CodeV'+codeVersion+'_v1.root' :  0.000473,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1600_CodeV'+codeVersion+'_v1.root' :  0.000142,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1800_CodeV'+codeVersion+'_v1.root' :  4.51e-05,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2000_CodeV'+codeVersion+'_v1.root' :  1.48e-05,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
+'crab_Analysis_2018_HSCPstop_M-500_CodeV'+codeVersion+'_v1.root' :  0.000257,
+'crab_Analysis_2018_HSCPstop_M-800_CodeV'+codeVersion+'_v1.root' :  0.0326,
+'crab_Analysis_2018_HSCPstop_M-1000_CodeV'+codeVersion+'_v1.root' :  0.00683,
+'crab_Analysis_2018_HSCPstop_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0017,
+'crab_Analysis_2018_HSCPstop_M-1400_CodeV'+codeVersion+'_v1.root' :  0.000473,
+'crab_Analysis_2018_HSCPstop_M-1600_CodeV'+codeVersion+'_v1.root' :  0.000142,
+'crab_Analysis_2018_HSCPstop_M-1800_CodeV'+codeVersion+'_v1.root' :  4.51e-05,
+'crab_Analysis_2018_HSCPstop_M-2000_CodeV'+codeVersion+'_v1.root' :  1.48e-05,
+'crab_Analysis_2018_HSCPstop_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
+'crab_Analysis_2018_HSCPstop_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
+'crab_Analysis_2018_HSCPstop_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-200_CodeV'+codeVersion+'_v1.root' :  1.1E-01,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV'+codeVersion+'_v1.root' :  7.3E-02,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-500_CodeV'+codeVersion+'_v1.root' :  1.2E-03,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV'+codeVersion+'_v1.root' :  2.6E-04,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1000_CodeV'+codeVersion+'_v1.root' :  7.6E-05,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1400_CodeV'+codeVersion+'_v1.root' :  8.5E-06,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1800_CodeV'+codeVersion+'_v1.root' :  1.2E-06,
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV'+codeVersion+'_v1.root' :  8.2E-07, #fake
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV'+codeVersion+'_v1.root' :  1.2E-07,#fake
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV'+codeVersion+'_v1.root' :  3.0E-01,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV'+codeVersion+'_v1.root' :  2.3E-02,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-500_CodeV'+codeVersion+'_v1.root' :  3.5E-03,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV'+codeVersion+'_v1.root' :  2.4E-04,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV'+codeVersion+'_v1.root' :  2.7E-05,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV'+codeVersion+'_v1.root' :  3.9E-06,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV'+codeVersion+'_v1.root' :  8.57E-07,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV'+codeVersion+'_v1.root' :  2.15E-07,
+}
+
+## TTBar is 832 pb (NNLO)
+# gluino x-sections from
+# https://github.com/fuenfundachtzig/xsec/blob/master/json/pp13_gluino_NNLO%2BNNLL.json#L1820
+
+fileInArray = []
+for sample in BackgroundSamples:
+  if not os.path.exists(sample): continue
+  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
+
+for fileIn in fileInArray:
+  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
+    print("NumEvents not found, exit for "+str(fileIn))
+    continue
+  
+  nEvetsPreTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(1)
+  nEvetsPostTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(2)
+  if (nEvetsPreTrig == 0):
+    print("nEvetsPreTrig is zero, exiting")
+    continue
+  nameFromTFile = str(fileIn)[str(fileIn).find("Name")+6:str(fileIn).find("Title")-1]
+  if not (crossSectionArray.get(nameFromTFile)) :
+    print("No crossSectionArray for "+str(nameFromTFile))
+    continue
+  weight = intLumi*crossSectionArray.get(nameFromTFile)/nEvetsPreTrig
+  
+  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
+    dirname = fileIn.GetListOfKeys().At(i).GetName()
+    curr_dir = fileIn.GetDirectory(dirname)
+#    print("dirname: "+dirname)
+    if not (curr_dir) :
+      continue
+    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+        keyname = curr_dir.GetListOfKeys().At(i).GetName()
+        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
+        if not (curr_dir2) :
+          continue
+        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          print("keyname2: "+keyname2)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileIn.Get(newname)
+          if not (obj) : continue
+          if (obj.GetEntries() == 0 ) :
+#            print("obj.GetEntries() == 0")
+            continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if obj.InheritsFrom("TObject"):
+            obj.Scale(weight)
+  fileIn.Write("",ROOT.TObject.kOverwrite)
+  fileIn.Close()
+
+print("hadd crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-*_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root  crab_Analysis_2018_WJetsToLNu_*J_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo*_CodeV"+codeVersion+"_v1.root  crab_Analysis_2018_ZToMuMu*_CodeV"+codeVersion+"_v1.root")
+
+#os.system
+print("hadd crab_Analysis_2018_AllQCD_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-*_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_2018_AllTTbar_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo*_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_2018_AllWJets_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu*J_CodeV"+codeVersion+"_v1.root ")
+print("hadd crab_Analysis_2018_AllZToMuMu_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_ZToMuMu*_CodeV"+codeVersion+"_v1.root ")
+
+print("hadd crab_Analysis_SingleMuon_RunPhase1_CodeV"+codeVersion+"_v1.root *SingleMuon*_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_SingleMuon_Run2017_CodeV"+codeVersion+"_v1.root *SingleMuon_Run2017*_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_SingleMuon_Run2018_CodeV"+codeVersion+"_v1.root *SingleMuon_Run2018*_CodeV"+codeVersion+"_v1.root")
+
+#if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
+#
+#os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_SingleMuon_Run2018C_CodeV*"+codeVersion+"_v1.root .")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-*_CodeV*"+codeVersion+"_v1.root .")
+#os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateGiSyst.py b/Analyzer/test/Tamas/PostProcScripts/calculateGiSyst.py
new file mode 100644
index 0000000..89067d1
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateGiSyst.py
@@ -0,0 +1,117 @@
+import ROOT
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+ROOT.gStyle.SetPadTopMargin(0.07);
+ROOT.gStyle.SetPadBottomMargin(0.1);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+ROOT.gStyle.SetPadRightMargin(0.13);
+
+
+can = ROOT.TCanvas("newname","newname",800,800)
+can.SetLogy()
+fileName = "crab_Analysis_2018_AllBackground_CodeV42p6_v1.root"
+mc = ROOT.TFile.Open(fileName)
+data = ROOT.TFile.Open("crab_Analysis_SingleMuon_RunPhase1_CodeV42p6_v1.root")
+Gi_MC = mc.Get("HSCParticleAnalyzer/BaseName/PostPreS_Ias_CR_lowPt")
+Gi_Data = data.Get("HSCParticleAnalyzer/BaseName/PostPreS_Ias_CR_lowPt")
+
+Gi_MC.SetStats(0)
+Gi_MC.SetMarkerColor(1)
+Gi_MC.SetLineColor(1)
+Gi_MC.SetMarkerStyle(20)
+Gi_MC.Scale(1/Gi_MC.Integral())
+Gi_MC.GetYaxis().SetTitle("Normalized Tracks / 0.1")
+#Gi_MC.GetYaxis().SetTitleOffset(1.5)
+Gi_MC.Draw()
+
+Gi_Data.SetStats(0)
+Gi_Data.SetMarkerStyle(20)
+Gi_Data.SetMarkerColor(2)
+Gi_Data.SetLineColor(2)
+Gi_Data.Scale(1/Gi_Data.Integral())
+Gi_Data.Draw()
+
+legIasForCR =  ROOT.TLegend(.60,.80,.80,.90,"","brNDC")
+legIasForCR.SetTextFont(42)
+legIasForCR.SetTextSize(0.035)
+legIasForCR.SetBorderSize(1);
+legIasForCR.SetLineColor(0);
+legIasForCR.SetLineStyle(1);
+legIasForCR.SetLineWidth(1);
+legIasForCR.SetFillColor(0);
+legIasForCR.SetFillStyle(1001);
+legIasForCR.AddEntry(Gi_Data,"Data CR","LP")
+legIasForCR.AddEntry(Gi_MC,"SM MC CR","LP")
+
+tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+tex2.SetNDC();
+tex2.SetTextFont(61);
+tex2.SetTextSize(0.0675);
+tex2.SetLineWidth(2);
+
+tex3 = ROOT.TLatex(0.27,0.94,"Internal");
+tex3.SetNDC();
+tex3.SetTextFont(52);
+tex3.SetTextSize(0.0485);
+tex3.SetLineWidth(2);
+
+tex4 = ROOT.TLatex()
+tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
+tex4.SetNDC();
+tex4.SetTextFont(52);
+tex4.SetTextSize(0.045);
+tex4.SetLineWidth(2);
+
+codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+fileVersion = fileName[fileName.find("2018")+5:fileName.find("CodeV")+9]
+tex5 = ROOT.TLatex(0.07,0.03,fileVersion);
+tex5.SetNDC();
+tex5.SetTextFont(52);
+tex5.SetTextSize(0.0185);
+tex5.SetLineWidth(2);
+
+
+rp2 = ROOT.TRatioPlot(Gi_Data,Gi_MC,"divsym") #, "diffsigerrasym"
+ 
+rp2.SetH1DrawOpt("P");
+rp2.SetH2DrawOpt("P");
+
+rp2.Draw("SAME")
+
+
+rp2.SetLeftMargin(0.13);
+rp2.SetRightMargin(0.05);
+rp2.SetUpTopMargin(0.1);
+rp2.SetLowTopMargin(0.02);
+rp2.SetLowBottomMargin(0.35);
+
+
+rp2.GetLowerRefGraph().SetMinimum(0)
+rp2.GetLowerRefGraph().SetMaximum(1.05);
+rp2.GetLowerRefGraph().SetMarkerStyle(20)
+rp2.GetLowerRefGraph().SetMarkerSize(1);
+rp2.GetLowYaxis().SetNdivisions(510);
+rp2.GetLowerRefYaxis().SetTitle("Ratio");
+rp2.GetLowerRefYaxis().SetTitleSize(0.05);
+rp2.GetLowerRefYaxis().SetTitleOffset(1);
+rp2.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+rp2.GetLowerRefXaxis().SetTitleSize(0.05);
+rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
+rp2.GetLowerRefXaxis().SetLabelSize(0.035);
+
+can.Update()
+
+
+legIasForCR.Draw("SAME")
+tex2.Draw("SAME")
+tex3.Draw("SAME")
+tex4.Draw("SAME")
+tex5.Draw("SAME")
+can.SaveAs("GiSysts_DataOverMC_Norm.png")
+
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateTrigSyst.py b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSyst.py
new file mode 100644
index 0000000..334e4a8
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSyst.py
@@ -0,0 +1,201 @@
+import ROOT
+
+ROOT.gStyle.SetPaintTextFormat(".2g");
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-All_CodeV42p6_v1.root")
+EtaA_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA")
+EtaA_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp")
+EtaA_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown")
+EtaB_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB")
+EtaB_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp")
+EtaB_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown")
+EtaC_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC")
+EtaC_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp")
+EtaC_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown")
+
+EtaA_Nom_ProfY = EtaA_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaA_UP_ProfY = EtaA_UP.RebinY(2).ProfileY().ProjectionX()
+EtaA_DOWN_ProfY = EtaA_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaB_Nom_ProfY = EtaB_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaB_UP_ProfY = EtaB_UP.RebinY(2).ProfileY().ProjectionX()
+EtaB_DOWN_ProfY = EtaB_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaC_Nom_ProfY = EtaC_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaC_UP_ProfY = EtaC_UP.RebinY(2).ProfileY().ProjectionX()
+EtaC_DOWN_ProfY = EtaC_DOWN.RebinY(2).ProfileY().ProjectionX()
+
+# --------------------------------------------------
+EtaA_UpRatio = EtaA_UP_ProfY.Clone()
+EtaA_UpRatio.Divide(EtaA_Nom_ProfY)
+
+EtaA_DownRatio = EtaA_DOWN_ProfY.Clone()
+EtaA_DownRatio.Divide(EtaA_Nom_ProfY)
+
+EtaA_UpRatio.Draw("COLZTEXT40")
+EtaA_UpRatio.SetMarkerColor(2)
+EtaA_UpRatio.SetMarkerStyle(20)
+EtaA_UpRatio.SetStats(0)
+EtaA_UpRatio.SetLineColor(2)
+EtaA_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaA_DownRatio.Draw("SAMETEXT40")
+EtaA_DownRatio.SetMarkerStyle(20)
+EtaA_DownRatio.SetMarkerColor(3)
+EtaA_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaA.SetTextFont(42)
+legRatiosSyst_EtaA.SetTextSize(0.035)
+legRatiosSyst_EtaA.SetBorderSize(1);
+legRatiosSyst_EtaA.SetLineColor(0);
+legRatiosSyst_EtaA.SetLineStyle(1);
+legRatiosSyst_EtaA.SetLineWidth(1);
+legRatiosSyst_EtaA.SetFillColor(0);
+legRatiosSyst_EtaA.SetFillStyle(1001);
+legRatiosSyst_EtaA.AddEntry(EtaA_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaA.AddEntry(EtaA_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaA.Draw("SAME")
+can.SaveAs("TriggerEff_RatiosSyst_EtaA.png")
+
+EtaA_Nom_ProfY.Draw("COLZ")
+EtaA_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaA_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaA_UP_ProfY.Draw("SAME")
+EtaA_UP_ProfY.SetLineColor(2)
+EtaA_DOWN_ProfY.Draw("SAME")
+EtaA_DOWN_ProfY.SetLineColor(3)
+EtaA_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaA.SetTextFont(42)
+legTriggerEff_EtaA.SetTextSize(0.035)
+legTriggerEff_EtaA.SetBorderSize(1);
+legTriggerEff_EtaA.SetLineColor(0);
+legTriggerEff_EtaA.SetLineStyle(1);
+legTriggerEff_EtaA.SetLineWidth(1);
+legTriggerEff_EtaA.SetFillColor(0);
+legTriggerEff_EtaA.SetFillStyle(1001);
+legTriggerEff_EtaA.AddEntry(EtaA_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaA.AddEntry(EtaA_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaA.AddEntry(EtaA_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaA.Draw("SAME")
+can.SaveAs("TriggerEff_Syst_EtaA.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaB_UpRatio = EtaB_UP_ProfY.Clone()
+EtaB_UpRatio.Divide(EtaB_Nom_ProfY)
+
+EtaB_DownRatio = EtaB_DOWN_ProfY.Clone()
+EtaB_DownRatio.Divide(EtaB_Nom_ProfY)
+
+EtaB_UpRatio.Draw("COLZTEXT40")
+EtaB_UpRatio.SetMarkerColor(2)
+EtaB_UpRatio.SetMarkerStyle(20)
+EtaB_UpRatio.SetStats(0)
+EtaB_UpRatio.SetLineColor(2)
+EtaB_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaB_DownRatio.Draw("SAMETEXT40")
+EtaB_DownRatio.SetMarkerStyle(20)
+EtaB_DownRatio.SetMarkerColor(3)
+EtaB_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaB.SetTextFont(42)
+legRatiosSyst_EtaB.SetTextSize(0.035)
+legRatiosSyst_EtaB.SetBorderSize(1);
+legRatiosSyst_EtaB.SetLineColor(0);
+legRatiosSyst_EtaB.SetLineStyle(1);
+legRatiosSyst_EtaB.SetLineWidth(1);
+legRatiosSyst_EtaB.SetFillColor(0);
+legRatiosSyst_EtaB.SetFillStyle(1001);
+legRatiosSyst_EtaB.AddEntry(EtaB_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaB.AddEntry(EtaB_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaB.Draw("SAME")
+can.SaveAs("TriggerEff_RatiosSyst_EtaB.png")
+#print("EtaB_DownRatio content:")
+#for xBin in range(1,EtaB_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaB_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaB_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaB_Nom_ProfY.Draw("COLZ")
+EtaB_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaB_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaB_UP_ProfY.Draw("SAME")
+EtaB_UP_ProfY.SetLineColor(2)
+EtaB_DOWN_ProfY.Draw("SAME")
+EtaB_DOWN_ProfY.SetLineColor(3)
+EtaB_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaB.SetTextFont(42)
+legTriggerEff_EtaB.SetTextSize(0.035)
+legTriggerEff_EtaB.SetBorderSize(1);
+legTriggerEff_EtaB.SetLineColor(0);
+legTriggerEff_EtaB.SetLineStyle(1);
+legTriggerEff_EtaB.SetLineWidth(1);
+legTriggerEff_EtaB.SetFillColor(0);
+legTriggerEff_EtaB.SetFillStyle(1001);
+legTriggerEff_EtaB.AddEntry(EtaB_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaB.AddEntry(EtaB_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaB.AddEntry(EtaB_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaB.Draw("SAME")
+can.SaveAs("TriggerEff_Syst_EtaB.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaC_UpRatio = EtaC_UP_ProfY.Clone()
+EtaC_UpRatio.Divide(EtaC_Nom_ProfY)
+
+EtaC_DownRatio = EtaC_DOWN_ProfY.Clone()
+EtaC_DownRatio.Divide(EtaC_Nom_ProfY)
+
+EtaC_UpRatio.Draw("COLZTEXT40")
+EtaC_UpRatio.SetMarkerColor(2)
+EtaC_UpRatio.SetMarkerStyle(20)
+EtaC_UpRatio.SetStats(0)
+EtaC_UpRatio.SetLineColor(2)
+EtaC_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaC_DownRatio.Draw("SAMETEXT40")
+EtaC_DownRatio.SetMarkerStyle(20)
+EtaC_DownRatio.SetMarkerColor(3)
+EtaC_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaC.SetTextFont(42)
+legRatiosSyst_EtaC.SetTextSize(0.035)
+legRatiosSyst_EtaC.SetBorderSize(1);
+legRatiosSyst_EtaC.SetLineColor(0);
+legRatiosSyst_EtaC.SetLineStyle(1);
+legRatiosSyst_EtaC.SetLineWidth(1);
+legRatiosSyst_EtaC.SetFillColor(0);
+legRatiosSyst_EtaC.SetFillStyle(1001);
+legRatiosSyst_EtaC.AddEntry(EtaC_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaC.AddEntry(EtaC_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaC.Draw("SAME")
+can.SaveAs("TriggerEff_RatiosSyst_EtaC.png")
+#print("EtaC_DownRatio content:")
+#for xBin in range(1,EtaC_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaC_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaC_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaC_Nom_ProfY.Draw("COLZ")
+EtaC_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaC_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaC_UP_ProfY.Draw("SAME")
+EtaC_UP_ProfY.SetLineColor(2)
+EtaC_DOWN_ProfY.Draw("SAME")
+EtaC_DOWN_ProfY.SetLineColor(3)
+EtaC_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaC.SetTextFont(42)
+legTriggerEff_EtaC.SetTextSize(0.035)
+legTriggerEff_EtaC.SetBorderSize(1);
+legTriggerEff_EtaC.SetLineColor(0);
+legTriggerEff_EtaC.SetLineStyle(1);
+legTriggerEff_EtaC.SetLineWidth(1);
+legTriggerEff_EtaC.SetFillColor(0);
+legTriggerEff_EtaC.SetFillStyle(1001);
+legTriggerEff_EtaC.AddEntry(EtaC_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaC.AddEntry(EtaC_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaC.AddEntry(EtaC_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaC.Draw("SAME")
+can.SaveAs("TriggerEff_Syst_EtaC.png")
+
+can.Clear()
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABC.py b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABC.py
new file mode 100644
index 0000000..f7e18c7
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABC.py
@@ -0,0 +1,204 @@
+import ROOT, sys
+
+ROOT.gStyle.SetPaintTextFormat(".2g");
+
+fileName = sys.argv[1]
+codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open(fileName)
+EtaA_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA")
+EtaA_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp")
+EtaA_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown")
+EtaB_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB")
+EtaB_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp")
+EtaB_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown")
+EtaC_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC")
+EtaC_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp")
+EtaC_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown")
+
+EtaA_Nom_ProfY = EtaA_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaA_UP_ProfY = EtaA_UP.RebinY(2).ProfileY().ProjectionX()
+EtaA_DOWN_ProfY = EtaA_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaB_Nom_ProfY = EtaB_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaB_UP_ProfY = EtaB_UP.RebinY(2).ProfileY().ProjectionX()
+EtaB_DOWN_ProfY = EtaB_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaC_Nom_ProfY = EtaC_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaC_UP_ProfY = EtaC_UP.RebinY(2).ProfileY().ProjectionX()
+EtaC_DOWN_ProfY = EtaC_DOWN.RebinY(2).ProfileY().ProjectionX()
+
+# --------------------------------------------------
+EtaA_UpRatio = EtaA_UP_ProfY.Clone()
+EtaA_UpRatio.Divide(EtaA_Nom_ProfY)
+
+EtaA_DownRatio = EtaA_DOWN_ProfY.Clone()
+EtaA_DownRatio.Divide(EtaA_Nom_ProfY)
+
+EtaA_UpRatio.Draw("COLZTEXT40")
+EtaA_UpRatio.SetMarkerColor(2)
+EtaA_UpRatio.SetMarkerStyle(20)
+EtaA_UpRatio.SetStats(0)
+EtaA_UpRatio.SetLineColor(2)
+EtaA_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaA_DownRatio.Draw("SAMETEXT40")
+EtaA_DownRatio.SetMarkerStyle(20)
+EtaA_DownRatio.SetMarkerColor(3)
+EtaA_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaA.SetTextFont(42)
+legRatiosSyst_EtaA.SetTextSize(0.035)
+legRatiosSyst_EtaA.SetBorderSize(1);
+legRatiosSyst_EtaA.SetLineColor(0);
+legRatiosSyst_EtaA.SetLineStyle(1);
+legRatiosSyst_EtaA.SetLineWidth(1);
+legRatiosSyst_EtaA.SetFillColor(0);
+legRatiosSyst_EtaA.SetFillStyle(1001);
+legRatiosSyst_EtaA.AddEntry(EtaA_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaA.AddEntry(EtaA_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaA.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaA.png")
+
+EtaA_Nom_ProfY.Draw("COLZ")
+EtaA_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaA_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaA_UP_ProfY.Draw("SAME")
+EtaA_UP_ProfY.SetLineColor(2)
+EtaA_DOWN_ProfY.Draw("SAME")
+EtaA_DOWN_ProfY.SetLineColor(3)
+EtaA_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaA.SetTextFont(42)
+legTriggerEff_EtaA.SetTextSize(0.035)
+legTriggerEff_EtaA.SetBorderSize(1);
+legTriggerEff_EtaA.SetLineColor(0);
+legTriggerEff_EtaA.SetLineStyle(1);
+legTriggerEff_EtaA.SetLineWidth(1);
+legTriggerEff_EtaA.SetFillColor(0);
+legTriggerEff_EtaA.SetFillStyle(1001);
+legTriggerEff_EtaA.AddEntry(EtaA_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaA.AddEntry(EtaA_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaA.AddEntry(EtaA_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaA.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaA.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaB_UpRatio = EtaB_UP_ProfY.Clone()
+EtaB_UpRatio.Divide(EtaB_Nom_ProfY)
+
+EtaB_DownRatio = EtaB_DOWN_ProfY.Clone()
+EtaB_DownRatio.Divide(EtaB_Nom_ProfY)
+
+EtaB_UpRatio.Draw("COLZTEXT40")
+EtaB_UpRatio.SetMarkerColor(2)
+EtaB_UpRatio.SetMarkerStyle(20)
+EtaB_UpRatio.SetStats(0)
+EtaB_UpRatio.SetLineColor(2)
+EtaB_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaB_DownRatio.Draw("SAMETEXT40")
+EtaB_DownRatio.SetMarkerStyle(20)
+EtaB_DownRatio.SetMarkerColor(3)
+EtaB_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaB.SetTextFont(42)
+legRatiosSyst_EtaB.SetTextSize(0.035)
+legRatiosSyst_EtaB.SetBorderSize(1);
+legRatiosSyst_EtaB.SetLineColor(0);
+legRatiosSyst_EtaB.SetLineStyle(1);
+legRatiosSyst_EtaB.SetLineWidth(1);
+legRatiosSyst_EtaB.SetFillColor(0);
+legRatiosSyst_EtaB.SetFillStyle(1001);
+legRatiosSyst_EtaB.AddEntry(EtaB_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaB.AddEntry(EtaB_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaB.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaB.png")
+#print("EtaB_DownRatio content:")
+#for xBin in range(1,EtaB_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaB_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaB_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaB_Nom_ProfY.Draw("COLZ")
+EtaB_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaB_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaB_UP_ProfY.Draw("SAME")
+EtaB_UP_ProfY.SetLineColor(2)
+EtaB_DOWN_ProfY.Draw("SAME")
+EtaB_DOWN_ProfY.SetLineColor(3)
+EtaB_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaB.SetTextFont(42)
+legTriggerEff_EtaB.SetTextSize(0.035)
+legTriggerEff_EtaB.SetBorderSize(1);
+legTriggerEff_EtaB.SetLineColor(0);
+legTriggerEff_EtaB.SetLineStyle(1);
+legTriggerEff_EtaB.SetLineWidth(1);
+legTriggerEff_EtaB.SetFillColor(0);
+legTriggerEff_EtaB.SetFillStyle(1001);
+legTriggerEff_EtaB.AddEntry(EtaB_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaB.AddEntry(EtaB_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaB.AddEntry(EtaB_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaB.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaB.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaC_UpRatio = EtaC_UP_ProfY.Clone()
+EtaC_UpRatio.Divide(EtaC_Nom_ProfY)
+
+EtaC_DownRatio = EtaC_DOWN_ProfY.Clone()
+EtaC_DownRatio.Divide(EtaC_Nom_ProfY)
+
+EtaC_UpRatio.Draw("COLZTEXT40")
+EtaC_UpRatio.SetMarkerColor(2)
+EtaC_UpRatio.SetMarkerStyle(20)
+EtaC_UpRatio.SetStats(0)
+EtaC_UpRatio.SetLineColor(2)
+EtaC_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaC_DownRatio.Draw("SAMETEXT40")
+EtaC_DownRatio.SetMarkerStyle(20)
+EtaC_DownRatio.SetMarkerColor(3)
+EtaC_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaC.SetTextFont(42)
+legRatiosSyst_EtaC.SetTextSize(0.035)
+legRatiosSyst_EtaC.SetBorderSize(1);
+legRatiosSyst_EtaC.SetLineColor(0);
+legRatiosSyst_EtaC.SetLineStyle(1);
+legRatiosSyst_EtaC.SetLineWidth(1);
+legRatiosSyst_EtaC.SetFillColor(0);
+legRatiosSyst_EtaC.SetFillStyle(1001);
+legRatiosSyst_EtaC.AddEntry(EtaC_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaC.AddEntry(EtaC_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaC.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaC.png")
+#print("EtaC_DownRatio content:")
+#for xBin in range(1,EtaC_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaC_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaC_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaC_Nom_ProfY.Draw("COLZ")
+EtaC_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaC_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaC_UP_ProfY.Draw("SAME")
+EtaC_UP_ProfY.SetLineColor(2)
+EtaC_DOWN_ProfY.Draw("SAME")
+EtaC_DOWN_ProfY.SetLineColor(3)
+EtaC_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaC.SetTextFont(42)
+legTriggerEff_EtaC.SetTextSize(0.035)
+legTriggerEff_EtaC.SetBorderSize(1);
+legTriggerEff_EtaC.SetLineColor(0);
+legTriggerEff_EtaC.SetLineStyle(1);
+legTriggerEff_EtaC.SetLineWidth(1);
+legTriggerEff_EtaC.SetFillColor(0);
+legTriggerEff_EtaC.SetFillStyle(1001);
+legTriggerEff_EtaC.AddEntry(EtaC_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaC.AddEntry(EtaC_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaC.AddEntry(EtaC_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaC.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaC.png")
+
+can.Clear()
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABCAtL1.py b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABCAtL1.py
new file mode 100644
index 0000000..0e3d267
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABCAtL1.py
@@ -0,0 +1,210 @@
+import ROOT, sys
+
+ROOT.gStyle.SetPaintTextFormat(".2g");
+
+fileName = sys.argv[1]
+codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open(fileName)
+EtaA_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA")
+EtaA_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL1DT")
+EtaA_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL1DT")
+EtaB_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB")
+EtaB_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL1DT")
+EtaB_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL1DT")
+EtaC_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC")
+EtaC_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL1DT")
+EtaC_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL1DT")
+
+EtaA_Nom_ProfY = EtaA_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaA_UP_ProfY = EtaA_UP.RebinY(2).ProfileY().ProjectionX()
+EtaA_DOWN_ProfY = EtaA_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaB_Nom_ProfY = EtaB_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaB_UP_ProfY = EtaB_UP.RebinY(2).ProfileY().ProjectionX()
+EtaB_DOWN_ProfY = EtaB_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaC_Nom_ProfY = EtaC_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaC_UP_ProfY = EtaC_UP.RebinY(2).ProfileY().ProjectionX()
+EtaC_DOWN_ProfY = EtaC_DOWN.RebinY(2).ProfileY().ProjectionX()
+
+# --------------------------------------------------
+EtaA_UpRatio = EtaA_UP_ProfY.Clone()
+EtaA_UpRatio.Divide(EtaA_Nom_ProfY)
+
+EtaA_DownRatio = EtaA_DOWN_ProfY.Clone()
+EtaA_DownRatio.Divide(EtaA_Nom_ProfY)
+
+EtaA_UpRatio.Draw("COLZTEXT40")
+EtaA_UpRatio.SetMarkerColor(2)
+EtaA_UpRatio.SetMarkerStyle(20)
+EtaA_UpRatio.SetStats(0)
+EtaA_UpRatio.SetLineColor(2)
+EtaA_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaA_DownRatio.Draw("SAMETEXT40")
+EtaA_DownRatio.SetMarkerStyle(20)
+EtaA_DownRatio.SetMarkerColor(3)
+EtaA_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaA.SetTextFont(42)
+legRatiosSyst_EtaA.SetTextSize(0.035)
+legRatiosSyst_EtaA.SetBorderSize(1);
+legRatiosSyst_EtaA.SetLineColor(0);
+legRatiosSyst_EtaA.SetLineStyle(1);
+legRatiosSyst_EtaA.SetLineWidth(1);
+legRatiosSyst_EtaA.SetFillColor(0);
+legRatiosSyst_EtaA.SetFillStyle(1001);
+legRatiosSyst_EtaA.AddEntry(EtaA_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaA.AddEntry(EtaA_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaA.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaA.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaAAtL1.png")
+
+EtaA_Nom_ProfY.Draw("COLZ")
+EtaA_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaA_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaA_UP_ProfY.Draw("SAME")
+EtaA_UP_ProfY.SetLineColor(2)
+EtaA_DOWN_ProfY.Draw("SAME")
+EtaA_DOWN_ProfY.SetLineColor(3)
+EtaA_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaA.SetTextFont(42)
+legTriggerEff_EtaA.SetTextSize(0.035)
+legTriggerEff_EtaA.SetBorderSize(1);
+legTriggerEff_EtaA.SetLineColor(0);
+legTriggerEff_EtaA.SetLineStyle(1);
+legTriggerEff_EtaA.SetLineWidth(1);
+legTriggerEff_EtaA.SetFillColor(0);
+legTriggerEff_EtaA.SetFillStyle(1001);
+legTriggerEff_EtaA.AddEntry(EtaA_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaA.AddEntry(EtaA_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaA.AddEntry(EtaA_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaA.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaA.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaAAtL1.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaB_UpRatio = EtaB_UP_ProfY.Clone()
+EtaB_UpRatio.Divide(EtaB_Nom_ProfY)
+
+EtaB_DownRatio = EtaB_DOWN_ProfY.Clone()
+EtaB_DownRatio.Divide(EtaB_Nom_ProfY)
+
+EtaB_UpRatio.Draw("COLZTEXT40")
+EtaB_UpRatio.SetMarkerColor(2)
+EtaB_UpRatio.SetMarkerStyle(20)
+EtaB_UpRatio.SetStats(0)
+EtaB_UpRatio.SetLineColor(2)
+EtaB_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaB_DownRatio.Draw("SAMETEXT40")
+EtaB_DownRatio.SetMarkerStyle(20)
+EtaB_DownRatio.SetMarkerColor(3)
+EtaB_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaB.SetTextFont(42)
+legRatiosSyst_EtaB.SetTextSize(0.035)
+legRatiosSyst_EtaB.SetBorderSize(1);
+legRatiosSyst_EtaB.SetLineColor(0);
+legRatiosSyst_EtaB.SetLineStyle(1);
+legRatiosSyst_EtaB.SetLineWidth(1);
+legRatiosSyst_EtaB.SetFillColor(0);
+legRatiosSyst_EtaB.SetFillStyle(1001);
+legRatiosSyst_EtaB.AddEntry(EtaB_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaB.AddEntry(EtaB_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaB.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaB.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaBAtL1.png")
+#print("EtaB_DownRatio content:")
+#for xBin in range(1,EtaB_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaB_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaB_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaB_Nom_ProfY.Draw("COLZ")
+EtaB_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaB_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaB_UP_ProfY.Draw("SAME")
+EtaB_UP_ProfY.SetLineColor(2)
+EtaB_DOWN_ProfY.Draw("SAME")
+EtaB_DOWN_ProfY.SetLineColor(3)
+EtaB_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaB.SetTextFont(42)
+legTriggerEff_EtaB.SetTextSize(0.035)
+legTriggerEff_EtaB.SetBorderSize(1);
+legTriggerEff_EtaB.SetLineColor(0);
+legTriggerEff_EtaB.SetLineStyle(1);
+legTriggerEff_EtaB.SetLineWidth(1);
+legTriggerEff_EtaB.SetFillColor(0);
+legTriggerEff_EtaB.SetFillStyle(1001);
+legTriggerEff_EtaB.AddEntry(EtaB_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaB.AddEntry(EtaB_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaB.AddEntry(EtaB_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaB.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaB.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaBAtL1.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaC_UpRatio = EtaC_UP_ProfY.Clone()
+EtaC_UpRatio.Divide(EtaC_Nom_ProfY)
+
+EtaC_DownRatio = EtaC_DOWN_ProfY.Clone()
+EtaC_DownRatio.Divide(EtaC_Nom_ProfY)
+
+EtaC_UpRatio.Draw("COLZTEXT40")
+EtaC_UpRatio.SetMarkerColor(2)
+EtaC_UpRatio.SetMarkerStyle(20)
+EtaC_UpRatio.SetStats(0)
+EtaC_UpRatio.SetLineColor(2)
+EtaC_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaC_DownRatio.Draw("SAMETEXT40")
+EtaC_DownRatio.SetMarkerStyle(20)
+EtaC_DownRatio.SetMarkerColor(3)
+EtaC_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaC.SetTextFont(42)
+legRatiosSyst_EtaC.SetTextSize(0.035)
+legRatiosSyst_EtaC.SetBorderSize(1);
+legRatiosSyst_EtaC.SetLineColor(0);
+legRatiosSyst_EtaC.SetLineStyle(1);
+legRatiosSyst_EtaC.SetLineWidth(1);
+legRatiosSyst_EtaC.SetFillColor(0);
+legRatiosSyst_EtaC.SetFillStyle(1001);
+legRatiosSyst_EtaC.AddEntry(EtaC_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaC.AddEntry(EtaC_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaC.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaC.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaCAtL1.png")
+#print("EtaC_DownRatio content:")
+#for xBin in range(1,EtaC_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaC_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaC_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaC_Nom_ProfY.Draw("COLZ")
+EtaC_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaC_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaC_UP_ProfY.Draw("SAME")
+EtaC_UP_ProfY.SetLineColor(2)
+EtaC_DOWN_ProfY.Draw("SAME")
+EtaC_DOWN_ProfY.SetLineColor(3)
+EtaC_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaC.SetTextFont(42)
+legTriggerEff_EtaC.SetTextSize(0.035)
+legTriggerEff_EtaC.SetBorderSize(1);
+legTriggerEff_EtaC.SetLineColor(0);
+legTriggerEff_EtaC.SetLineStyle(1);
+legTriggerEff_EtaC.SetLineWidth(1);
+legTriggerEff_EtaC.SetFillColor(0);
+legTriggerEff_EtaC.SetFillStyle(1001);
+legTriggerEff_EtaC.AddEntry(EtaC_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaC.AddEntry(EtaC_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaC.AddEntry(EtaC_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaC.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaC.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaCAtL1.png")
+
+can.Clear()
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABCAtL4.py b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABCAtL4.py
new file mode 100644
index 0000000..fa88ee2
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystABCAtL4.py
@@ -0,0 +1,210 @@
+import ROOT, sys
+
+ROOT.gStyle.SetPaintTextFormat(".2g");
+
+fileName = sys.argv[1]
+codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open(fileName)
+EtaA_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA")
+EtaA_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaUpAtL4DT")
+EtaA_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaDownAtL4DT")
+EtaB_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB")
+EtaB_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaUpAtL4DT")
+EtaB_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaDownAtL4DT")
+EtaC_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC")
+EtaC_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaUpAtL4DT")
+EtaC_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaDownAtL4DT")
+
+EtaA_Nom_ProfY = EtaA_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaA_UP_ProfY = EtaA_UP.RebinY(2).ProfileY().ProjectionX()
+EtaA_DOWN_ProfY = EtaA_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaB_Nom_ProfY = EtaB_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaB_UP_ProfY = EtaB_UP.RebinY(2).ProfileY().ProjectionX()
+EtaB_DOWN_ProfY = EtaB_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaC_Nom_ProfY = EtaC_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaC_UP_ProfY = EtaC_UP.RebinY(2).ProfileY().ProjectionX()
+EtaC_DOWN_ProfY = EtaC_DOWN.RebinY(2).ProfileY().ProjectionX()
+
+# --------------------------------------------------
+EtaA_UpRatio = EtaA_UP_ProfY.Clone()
+EtaA_UpRatio.Divide(EtaA_Nom_ProfY)
+
+EtaA_DownRatio = EtaA_DOWN_ProfY.Clone()
+EtaA_DownRatio.Divide(EtaA_Nom_ProfY)
+
+EtaA_UpRatio.Draw("COLZTEXT40")
+EtaA_UpRatio.SetMarkerColor(2)
+EtaA_UpRatio.SetMarkerStyle(20)
+EtaA_UpRatio.SetStats(0)
+EtaA_UpRatio.SetLineColor(2)
+EtaA_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaA_DownRatio.Draw("SAMETEXT40")
+EtaA_DownRatio.SetMarkerStyle(20)
+EtaA_DownRatio.SetMarkerColor(3)
+EtaA_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaA.SetTextFont(42)
+legRatiosSyst_EtaA.SetTextSize(0.035)
+legRatiosSyst_EtaA.SetBorderSize(1);
+legRatiosSyst_EtaA.SetLineColor(0);
+legRatiosSyst_EtaA.SetLineStyle(1);
+legRatiosSyst_EtaA.SetLineWidth(1);
+legRatiosSyst_EtaA.SetFillColor(0);
+legRatiosSyst_EtaA.SetFillStyle(1001);
+legRatiosSyst_EtaA.AddEntry(EtaA_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaA.AddEntry(EtaA_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaA.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaA.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaAAtL4.png")
+
+EtaA_Nom_ProfY.Draw("COLZ")
+EtaA_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaA_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaA_UP_ProfY.Draw("SAME")
+EtaA_UP_ProfY.SetLineColor(2)
+EtaA_DOWN_ProfY.Draw("SAME")
+EtaA_DOWN_ProfY.SetLineColor(3)
+EtaA_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaA.SetTextFont(42)
+legTriggerEff_EtaA.SetTextSize(0.035)
+legTriggerEff_EtaA.SetBorderSize(1);
+legTriggerEff_EtaA.SetLineColor(0);
+legTriggerEff_EtaA.SetLineStyle(1);
+legTriggerEff_EtaA.SetLineWidth(1);
+legTriggerEff_EtaA.SetFillColor(0);
+legTriggerEff_EtaA.SetFillStyle(1001);
+legTriggerEff_EtaA.AddEntry(EtaA_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaA.AddEntry(EtaA_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaA.AddEntry(EtaA_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaA.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaA.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaAAtL4.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaB_UpRatio = EtaB_UP_ProfY.Clone()
+EtaB_UpRatio.Divide(EtaB_Nom_ProfY)
+
+EtaB_DownRatio = EtaB_DOWN_ProfY.Clone()
+EtaB_DownRatio.Divide(EtaB_Nom_ProfY)
+
+EtaB_UpRatio.Draw("COLZTEXT40")
+EtaB_UpRatio.SetMarkerColor(2)
+EtaB_UpRatio.SetMarkerStyle(20)
+EtaB_UpRatio.SetStats(0)
+EtaB_UpRatio.SetLineColor(2)
+EtaB_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaB_DownRatio.Draw("SAMETEXT40")
+EtaB_DownRatio.SetMarkerStyle(20)
+EtaB_DownRatio.SetMarkerColor(3)
+EtaB_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaB.SetTextFont(42)
+legRatiosSyst_EtaB.SetTextSize(0.035)
+legRatiosSyst_EtaB.SetBorderSize(1);
+legRatiosSyst_EtaB.SetLineColor(0);
+legRatiosSyst_EtaB.SetLineStyle(1);
+legRatiosSyst_EtaB.SetLineWidth(1);
+legRatiosSyst_EtaB.SetFillColor(0);
+legRatiosSyst_EtaB.SetFillStyle(1001);
+legRatiosSyst_EtaB.AddEntry(EtaB_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaB.AddEntry(EtaB_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaB.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaB.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaBAtL4.png")
+#print("EtaB_DownRatio content:")
+#for xBin in range(1,EtaB_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaB_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaB_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaB_Nom_ProfY.Draw("COLZ")
+EtaB_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaB_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaB_UP_ProfY.Draw("SAME")
+EtaB_UP_ProfY.SetLineColor(2)
+EtaB_DOWN_ProfY.Draw("SAME")
+EtaB_DOWN_ProfY.SetLineColor(3)
+EtaB_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaB.SetTextFont(42)
+legTriggerEff_EtaB.SetTextSize(0.035)
+legTriggerEff_EtaB.SetBorderSize(1);
+legTriggerEff_EtaB.SetLineColor(0);
+legTriggerEff_EtaB.SetLineStyle(1);
+legTriggerEff_EtaB.SetLineWidth(1);
+legTriggerEff_EtaB.SetFillColor(0);
+legTriggerEff_EtaB.SetFillStyle(1001);
+legTriggerEff_EtaB.AddEntry(EtaB_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaB.AddEntry(EtaB_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaB.AddEntry(EtaB_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaB.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaB.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaBAtL4.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaC_UpRatio = EtaC_UP_ProfY.Clone()
+EtaC_UpRatio.Divide(EtaC_Nom_ProfY)
+
+EtaC_DownRatio = EtaC_DOWN_ProfY.Clone()
+EtaC_DownRatio.Divide(EtaC_Nom_ProfY)
+
+EtaC_UpRatio.Draw("COLZTEXT40")
+EtaC_UpRatio.SetMarkerColor(2)
+EtaC_UpRatio.SetMarkerStyle(20)
+EtaC_UpRatio.SetStats(0)
+EtaC_UpRatio.SetLineColor(2)
+EtaC_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaC_DownRatio.Draw("SAMETEXT40")
+EtaC_DownRatio.SetMarkerStyle(20)
+EtaC_DownRatio.SetMarkerColor(3)
+EtaC_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaC.SetTextFont(42)
+legRatiosSyst_EtaC.SetTextSize(0.035)
+legRatiosSyst_EtaC.SetBorderSize(1);
+legRatiosSyst_EtaC.SetLineColor(0);
+legRatiosSyst_EtaC.SetLineStyle(1);
+legRatiosSyst_EtaC.SetLineWidth(1);
+legRatiosSyst_EtaC.SetFillColor(0);
+legRatiosSyst_EtaC.SetFillStyle(1001);
+legRatiosSyst_EtaC.AddEntry(EtaC_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaC.AddEntry(EtaC_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaC.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaC.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaCAtL4.png")
+#print("EtaC_DownRatio content:")
+#for xBin in range(1,EtaC_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaC_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaC_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaC_Nom_ProfY.Draw("COLZ")
+EtaC_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaC_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaC_UP_ProfY.Draw("SAME")
+EtaC_UP_ProfY.SetLineColor(2)
+EtaC_DOWN_ProfY.Draw("SAME")
+EtaC_DOWN_ProfY.SetLineColor(3)
+EtaC_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaC.SetTextFont(42)
+legTriggerEff_EtaC.SetTextSize(0.035)
+legTriggerEff_EtaC.SetBorderSize(1);
+legTriggerEff_EtaC.SetLineColor(0);
+legTriggerEff_EtaC.SetLineStyle(1);
+legTriggerEff_EtaC.SetLineWidth(1);
+legTriggerEff_EtaC.SetFillColor(0);
+legTriggerEff_EtaC.SetFillStyle(1001);
+legTriggerEff_EtaC.AddEntry(EtaC_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaC.AddEntry(EtaC_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaC.AddEntry(EtaC_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaC.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaC.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaCAtL4.png")
+
+can.Clear()
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEF.py b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEF.py
new file mode 100644
index 0000000..2dda110
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEF.py
@@ -0,0 +1,204 @@
+import ROOT, sys
+
+ROOT.gStyle.SetPaintTextFormat(".2g");
+
+fileName = sys.argv[1]
+codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open(fileName)
+EtaD_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD")
+EtaD_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD_BetaUp")
+EtaD_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD_BetaDown")
+EtaE_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE")
+EtaE_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE_BetaUp")
+EtaE_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE_BetaDown")
+EtaF_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF")
+EtaF_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF_BetaUp")
+EtaF_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF_BetaDown")
+
+EtaD_Nom_ProfY = EtaD_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaD_UP_ProfY = EtaD_UP.RebinY(2).ProfileY().ProjectionX()
+EtaD_DOWN_ProfY = EtaD_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaE_Nom_ProfY = EtaE_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaE_UP_ProfY = EtaE_UP.RebinY(2).ProfileY().ProjectionX()
+EtaE_DOWN_ProfY = EtaE_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaF_Nom_ProfY = EtaF_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaF_UP_ProfY = EtaF_UP.RebinY(2).ProfileY().ProjectionX()
+EtaF_DOWN_ProfY = EtaF_DOWN.RebinY(2).ProfileY().ProjectionX()
+
+# --------------------------------------------------
+EtaD_UpRatio = EtaD_UP_ProfY.Clone()
+EtaD_UpRatio.Divide(EtaD_Nom_ProfY)
+
+EtaD_DownRatio = EtaD_DOWN_ProfY.Clone()
+EtaD_DownRatio.Divide(EtaD_Nom_ProfY)
+
+EtaD_UpRatio.Draw("COLZTEXT40")
+EtaD_UpRatio.SetMarkerColor(2)
+EtaD_UpRatio.SetMarkerStyle(20)
+EtaD_UpRatio.SetStats(0)
+EtaD_UpRatio.SetLineColor(2)
+EtaD_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaD_DownRatio.Draw("SAMETEXT40")
+EtaD_DownRatio.SetMarkerStyle(20)
+EtaD_DownRatio.SetMarkerColor(3)
+EtaD_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaD =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaD.SetTextFont(42)
+legRatiosSyst_EtaD.SetTextSize(0.035)
+legRatiosSyst_EtaD.SetBorderSize(1);
+legRatiosSyst_EtaD.SetLineColor(0);
+legRatiosSyst_EtaD.SetLineStyle(1);
+legRatiosSyst_EtaD.SetLineWidth(1);
+legRatiosSyst_EtaD.SetFillColor(0);
+legRatiosSyst_EtaD.SetFillStyle(1001);
+legRatiosSyst_EtaD.AddEntry(EtaD_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaD.AddEntry(EtaD_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaD.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaD.png")
+
+EtaD_Nom_ProfY.Draw("COLZ")
+EtaD_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaD_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaD_UP_ProfY.Draw("SAME")
+EtaD_UP_ProfY.SetLineColor(2)
+EtaD_DOWN_ProfY.Draw("SAME")
+EtaD_DOWN_ProfY.SetLineColor(3)
+EtaD_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaD =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaD.SetTextFont(42)
+legTriggerEff_EtaD.SetTextSize(0.035)
+legTriggerEff_EtaD.SetBorderSize(1);
+legTriggerEff_EtaD.SetLineColor(0);
+legTriggerEff_EtaD.SetLineStyle(1);
+legTriggerEff_EtaD.SetLineWidth(1);
+legTriggerEff_EtaD.SetFillColor(0);
+legTriggerEff_EtaD.SetFillStyle(1001);
+legTriggerEff_EtaD.AddEntry(EtaD_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaD.AddEntry(EtaD_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaD.AddEntry(EtaD_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaD.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaD.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaE_UpRatio = EtaE_UP_ProfY.Clone()
+EtaE_UpRatio.Divide(EtaE_Nom_ProfY)
+
+EtaE_DownRatio = EtaE_DOWN_ProfY.Clone()
+EtaE_DownRatio.Divide(EtaE_Nom_ProfY)
+
+EtaE_UpRatio.Draw("COLZTEXT40")
+EtaE_UpRatio.SetMarkerColor(2)
+EtaE_UpRatio.SetMarkerStyle(20)
+EtaE_UpRatio.SetStats(0)
+EtaE_UpRatio.SetLineColor(2)
+EtaE_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaE_DownRatio.Draw("SAMETEXT40")
+EtaE_DownRatio.SetMarkerStyle(20)
+EtaE_DownRatio.SetMarkerColor(3)
+EtaE_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaE =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaE.SetTextFont(42)
+legRatiosSyst_EtaE.SetTextSize(0.035)
+legRatiosSyst_EtaE.SetBorderSize(1);
+legRatiosSyst_EtaE.SetLineColor(0);
+legRatiosSyst_EtaE.SetLineStyle(1);
+legRatiosSyst_EtaE.SetLineWidth(1);
+legRatiosSyst_EtaE.SetFillColor(0);
+legRatiosSyst_EtaE.SetFillStyle(1001);
+legRatiosSyst_EtaE.AddEntry(EtaE_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaE.AddEntry(EtaE_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaE.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaE.png")
+#print("EtaE_DownRatio content:")
+#for xBin in range(1,EtaE_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaE_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaE_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaE_Nom_ProfY.Draw("COLZ")
+EtaE_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaE_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaE_UP_ProfY.Draw("SAME")
+EtaE_UP_ProfY.SetLineColor(2)
+EtaE_DOWN_ProfY.Draw("SAME")
+EtaE_DOWN_ProfY.SetLineColor(3)
+EtaE_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaE =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaE.SetTextFont(42)
+legTriggerEff_EtaE.SetTextSize(0.035)
+legTriggerEff_EtaE.SetBorderSize(1);
+legTriggerEff_EtaE.SetLineColor(0);
+legTriggerEff_EtaE.SetLineStyle(1);
+legTriggerEff_EtaE.SetLineWidth(1);
+legTriggerEff_EtaE.SetFillColor(0);
+legTriggerEff_EtaE.SetFillStyle(1001);
+legTriggerEff_EtaE.AddEntry(EtaE_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaE.AddEntry(EtaE_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaE.AddEntry(EtaE_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaE.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaE.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaF_UpRatio = EtaF_UP_ProfY.Clone()
+EtaF_UpRatio.Divide(EtaF_Nom_ProfY)
+
+EtaF_DownRatio = EtaF_DOWN_ProfY.Clone()
+EtaF_DownRatio.Divide(EtaF_Nom_ProfY)
+
+EtaF_UpRatio.Draw("COLZTEXT40")
+EtaF_UpRatio.SetMarkerColor(2)
+EtaF_UpRatio.SetMarkerStyle(20)
+EtaF_UpRatio.SetStats(0)
+EtaF_UpRatio.SetLineColor(2)
+EtaF_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaF_DownRatio.Draw("SAMETEXT40")
+EtaF_DownRatio.SetMarkerStyle(20)
+EtaF_DownRatio.SetMarkerColor(3)
+EtaF_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaF =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaF.SetTextFont(42)
+legRatiosSyst_EtaF.SetTextSize(0.035)
+legRatiosSyst_EtaF.SetBorderSize(1);
+legRatiosSyst_EtaF.SetLineColor(0);
+legRatiosSyst_EtaF.SetLineStyle(1);
+legRatiosSyst_EtaF.SetLineWidth(1);
+legRatiosSyst_EtaF.SetFillColor(0);
+legRatiosSyst_EtaF.SetFillStyle(1001);
+legRatiosSyst_EtaF.AddEntry(EtaF_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaF.AddEntry(EtaF_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaF.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaF.png")
+#print("EtaF_DownRatio content:")
+#for xBin in range(1,EtaF_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaF_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaF_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaF_Nom_ProfY.Draw("COLZ")
+EtaF_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaF_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaF_UP_ProfY.Draw("SAME")
+EtaF_UP_ProfY.SetLineColor(2)
+EtaF_DOWN_ProfY.Draw("SAME")
+EtaF_DOWN_ProfY.SetLineColor(3)
+EtaF_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaF =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaF.SetTextFont(42)
+legTriggerEff_EtaF.SetTextSize(0.035)
+legTriggerEff_EtaF.SetBorderSize(1);
+legTriggerEff_EtaF.SetLineColor(0);
+legTriggerEff_EtaF.SetLineStyle(1);
+legTriggerEff_EtaF.SetLineWidth(1);
+legTriggerEff_EtaF.SetFillColor(0);
+legTriggerEff_EtaF.SetFillStyle(1001);
+legTriggerEff_EtaF.AddEntry(EtaF_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaF.AddEntry(EtaF_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaF.AddEntry(EtaF_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaF.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaF.png")
+
+can.Clear()
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEFAtL1.py b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEFAtL1.py
new file mode 100644
index 0000000..37e69b8
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEFAtL1.py
@@ -0,0 +1,210 @@
+import ROOT, sys
+
+ROOT.gStyle.SetPaintTextFormat(".2g");
+
+fileName = sys.argv[1]
+codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open(fileName)
+EtaD_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD")
+EtaD_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL1DT")
+EtaD_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL1DT")
+EtaE_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE")
+EtaE_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL1DT")
+EtaE_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL1DT")
+EtaF_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF")
+EtaF_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL1DT")
+EtaF_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL1DT")
+
+EtaD_Nom_ProfY = EtaD_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaD_UP_ProfY = EtaD_UP.RebinY(2).ProfileY().ProjectionX()
+EtaD_DOWN_ProfY = EtaD_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaE_Nom_ProfY = EtaE_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaE_UP_ProfY = EtaE_UP.RebinY(2).ProfileY().ProjectionX()
+EtaE_DOWN_ProfY = EtaE_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaF_Nom_ProfY = EtaF_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaF_UP_ProfY = EtaF_UP.RebinY(2).ProfileY().ProjectionX()
+EtaF_DOWN_ProfY = EtaF_DOWN.RebinY(2).ProfileY().ProjectionX()
+
+# --------------------------------------------------
+EtaD_UpRatio = EtaD_UP_ProfY.Clone()
+EtaD_UpRatio.Divide(EtaD_Nom_ProfY)
+
+EtaD_DownRatio = EtaD_DOWN_ProfY.Clone()
+EtaD_DownRatio.Divide(EtaD_Nom_ProfY)
+
+EtaD_UpRatio.Draw("COLZTEXT40")
+EtaD_UpRatio.SetMarkerColor(2)
+EtaD_UpRatio.SetMarkerStyle(20)
+EtaD_UpRatio.SetStats(0)
+EtaD_UpRatio.SetLineColor(2)
+EtaD_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaD_DownRatio.Draw("SAMETEXT40")
+EtaD_DownRatio.SetMarkerStyle(20)
+EtaD_DownRatio.SetMarkerColor(3)
+EtaD_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaD =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaD.SetTextFont(42)
+legRatiosSyst_EtaD.SetTextSize(0.035)
+legRatiosSyst_EtaD.SetBorderSize(1);
+legRatiosSyst_EtaD.SetLineColor(0);
+legRatiosSyst_EtaD.SetLineStyle(1);
+legRatiosSyst_EtaD.SetLineWidth(1);
+legRatiosSyst_EtaD.SetFillColor(0);
+legRatiosSyst_EtaD.SetFillStyle(1001);
+legRatiosSyst_EtaD.AddEntry(EtaD_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaD.AddEntry(EtaD_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaD.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaD.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaDAtL1.png")
+
+EtaD_Nom_ProfY.Draw("COLZ")
+EtaD_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaD_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaD_UP_ProfY.Draw("SAME")
+EtaD_UP_ProfY.SetLineColor(2)
+EtaD_DOWN_ProfY.Draw("SAME")
+EtaD_DOWN_ProfY.SetLineColor(3)
+EtaD_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaD =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaD.SetTextFont(42)
+legTriggerEff_EtaD.SetTextSize(0.035)
+legTriggerEff_EtaD.SetBorderSize(1);
+legTriggerEff_EtaD.SetLineColor(0);
+legTriggerEff_EtaD.SetLineStyle(1);
+legTriggerEff_EtaD.SetLineWidth(1);
+legTriggerEff_EtaD.SetFillColor(0);
+legTriggerEff_EtaD.SetFillStyle(1001);
+legTriggerEff_EtaD.AddEntry(EtaD_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaD.AddEntry(EtaD_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaD.AddEntry(EtaD_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaD.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaD.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaDAtL1.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaE_UpRatio = EtaE_UP_ProfY.Clone()
+EtaE_UpRatio.Divide(EtaE_Nom_ProfY)
+
+EtaE_DownRatio = EtaE_DOWN_ProfY.Clone()
+EtaE_DownRatio.Divide(EtaE_Nom_ProfY)
+
+EtaE_UpRatio.Draw("COLZTEXT40")
+EtaE_UpRatio.SetMarkerColor(2)
+EtaE_UpRatio.SetMarkerStyle(20)
+EtaE_UpRatio.SetStats(0)
+EtaE_UpRatio.SetLineColor(2)
+EtaE_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaE_DownRatio.Draw("SAMETEXT40")
+EtaE_DownRatio.SetMarkerStyle(20)
+EtaE_DownRatio.SetMarkerColor(3)
+EtaE_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaE =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaE.SetTextFont(42)
+legRatiosSyst_EtaE.SetTextSize(0.035)
+legRatiosSyst_EtaE.SetBorderSize(1);
+legRatiosSyst_EtaE.SetLineColor(0);
+legRatiosSyst_EtaE.SetLineStyle(1);
+legRatiosSyst_EtaE.SetLineWidth(1);
+legRatiosSyst_EtaE.SetFillColor(0);
+legRatiosSyst_EtaE.SetFillStyle(1001);
+legRatiosSyst_EtaE.AddEntry(EtaE_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaE.AddEntry(EtaE_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaE.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaE.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaEAtL1.png")
+#print("EtaE_DownRatio content:")
+#for xBin in range(1,EtaE_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaE_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaE_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaE_Nom_ProfY.Draw("COLZ")
+EtaE_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaE_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaE_UP_ProfY.Draw("SAME")
+EtaE_UP_ProfY.SetLineColor(2)
+EtaE_DOWN_ProfY.Draw("SAME")
+EtaE_DOWN_ProfY.SetLineColor(3)
+EtaE_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaE =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaE.SetTextFont(42)
+legTriggerEff_EtaE.SetTextSize(0.035)
+legTriggerEff_EtaE.SetBorderSize(1);
+legTriggerEff_EtaE.SetLineColor(0);
+legTriggerEff_EtaE.SetLineStyle(1);
+legTriggerEff_EtaE.SetLineWidth(1);
+legTriggerEff_EtaE.SetFillColor(0);
+legTriggerEff_EtaE.SetFillStyle(1001);
+legTriggerEff_EtaE.AddEntry(EtaE_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaE.AddEntry(EtaE_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaE.AddEntry(EtaE_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaE.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaE.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaEAtL1.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaF_UpRatio = EtaF_UP_ProfY.Clone()
+EtaF_UpRatio.Divide(EtaF_Nom_ProfY)
+
+EtaF_DownRatio = EtaF_DOWN_ProfY.Clone()
+EtaF_DownRatio.Divide(EtaF_Nom_ProfY)
+
+EtaF_UpRatio.Draw("COLZTEXT40")
+EtaF_UpRatio.SetMarkerColor(2)
+EtaF_UpRatio.SetMarkerStyle(20)
+EtaF_UpRatio.SetStats(0)
+EtaF_UpRatio.SetLineColor(2)
+EtaF_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaF_DownRatio.Draw("SAMETEXT40")
+EtaF_DownRatio.SetMarkerStyle(20)
+EtaF_DownRatio.SetMarkerColor(3)
+EtaF_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaF =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaF.SetTextFont(42)
+legRatiosSyst_EtaF.SetTextSize(0.035)
+legRatiosSyst_EtaF.SetBorderSize(1);
+legRatiosSyst_EtaF.SetLineColor(0);
+legRatiosSyst_EtaF.SetLineStyle(1);
+legRatiosSyst_EtaF.SetLineWidth(1);
+legRatiosSyst_EtaF.SetFillColor(0);
+legRatiosSyst_EtaF.SetFillStyle(1001);
+legRatiosSyst_EtaF.AddEntry(EtaF_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaF.AddEntry(EtaF_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaF.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaF.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaFAtL1.png")
+#print("EtaF_DownRatio content:")
+#for xBin in range(1,EtaF_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaF_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaF_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaF_Nom_ProfY.Draw("COLZ")
+EtaF_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaF_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaF_UP_ProfY.Draw("SAME")
+EtaF_UP_ProfY.SetLineColor(2)
+EtaF_DOWN_ProfY.Draw("SAME")
+EtaF_DOWN_ProfY.SetLineColor(3)
+EtaF_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaF =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaF.SetTextFont(42)
+legTriggerEff_EtaF.SetTextSize(0.035)
+legTriggerEff_EtaF.SetBorderSize(1);
+legTriggerEff_EtaF.SetLineColor(0);
+legTriggerEff_EtaF.SetLineStyle(1);
+legTriggerEff_EtaF.SetLineWidth(1);
+legTriggerEff_EtaF.SetFillColor(0);
+legTriggerEff_EtaF.SetFillStyle(1001);
+legTriggerEff_EtaF.AddEntry(EtaF_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaF.AddEntry(EtaF_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaF.AddEntry(EtaF_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaF.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaF.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaFAtL1.png")
+
+can.Clear()
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEFAtL4.py b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEFAtL4.py
new file mode 100644
index 0000000..8072f19
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSystDEFAtL4.py
@@ -0,0 +1,210 @@
+import ROOT, sys
+
+ROOT.gStyle.SetPaintTextFormat(".2g");
+
+fileName = sys.argv[1]
+codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open(fileName)
+EtaD_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD")
+EtaD_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD_BetaUpAtL4DT")
+EtaD_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaD_BetaDownAtL4DT")
+EtaE_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE")
+EtaE_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE_BetaUpAtL4DT")
+EtaE_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaE_BetaDownAtL4DT")
+EtaF_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF")
+EtaF_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF_BetaUpAtL4DT")
+EtaF_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaF_BetaDownAtL4DT")
+
+EtaD_Nom_ProfY = EtaD_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaD_UP_ProfY = EtaD_UP.RebinY(2).ProfileY().ProjectionX()
+EtaD_DOWN_ProfY = EtaD_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaE_Nom_ProfY = EtaE_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaE_UP_ProfY = EtaE_UP.RebinY(2).ProfileY().ProjectionX()
+EtaE_DOWN_ProfY = EtaE_DOWN.RebinY(2).ProfileY().ProjectionX()
+EtaF_Nom_ProfY = EtaF_Nom.RebinY(2).ProfileY().ProjectionX()
+EtaF_UP_ProfY = EtaF_UP.RebinY(2).ProfileY().ProjectionX()
+EtaF_DOWN_ProfY = EtaF_DOWN.RebinY(2).ProfileY().ProjectionX()
+
+# --------------------------------------------------
+EtaD_UpRatio = EtaD_UP_ProfY.Clone()
+EtaD_UpRatio.Divide(EtaD_Nom_ProfY)
+
+EtaD_DownRatio = EtaD_DOWN_ProfY.Clone()
+EtaD_DownRatio.Divide(EtaD_Nom_ProfY)
+
+EtaD_UpRatio.Draw("COLZTEXT40")
+EtaD_UpRatio.SetMarkerColor(2)
+EtaD_UpRatio.SetMarkerStyle(20)
+EtaD_UpRatio.SetStats(0)
+EtaD_UpRatio.SetLineColor(2)
+EtaD_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaD_DownRatio.Draw("SAMETEXT40")
+EtaD_DownRatio.SetMarkerStyle(20)
+EtaD_DownRatio.SetMarkerColor(3)
+EtaD_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaD =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaD.SetTextFont(42)
+legRatiosSyst_EtaD.SetTextSize(0.035)
+legRatiosSyst_EtaD.SetBorderSize(1);
+legRatiosSyst_EtaD.SetLineColor(0);
+legRatiosSyst_EtaD.SetLineStyle(1);
+legRatiosSyst_EtaD.SetLineWidth(1);
+legRatiosSyst_EtaD.SetFillColor(0);
+legRatiosSyst_EtaD.SetFillStyle(1001);
+legRatiosSyst_EtaD.AddEntry(EtaD_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaD.AddEntry(EtaD_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaD.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaD.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaDAtL4.png")
+
+EtaD_Nom_ProfY.Draw("COLZ")
+EtaD_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaD_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaD_UP_ProfY.Draw("SAME")
+EtaD_UP_ProfY.SetLineColor(2)
+EtaD_DOWN_ProfY.Draw("SAME")
+EtaD_DOWN_ProfY.SetLineColor(3)
+EtaD_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaD =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaD.SetTextFont(42)
+legTriggerEff_EtaD.SetTextSize(0.035)
+legTriggerEff_EtaD.SetBorderSize(1);
+legTriggerEff_EtaD.SetLineColor(0);
+legTriggerEff_EtaD.SetLineStyle(1);
+legTriggerEff_EtaD.SetLineWidth(1);
+legTriggerEff_EtaD.SetFillColor(0);
+legTriggerEff_EtaD.SetFillStyle(1001);
+legTriggerEff_EtaD.AddEntry(EtaD_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaD.AddEntry(EtaD_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaD.AddEntry(EtaD_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaD.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaD.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaDAtL4.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaE_UpRatio = EtaE_UP_ProfY.Clone()
+EtaE_UpRatio.Divide(EtaE_Nom_ProfY)
+
+EtaE_DownRatio = EtaE_DOWN_ProfY.Clone()
+EtaE_DownRatio.Divide(EtaE_Nom_ProfY)
+
+EtaE_UpRatio.Draw("COLZTEXT40")
+EtaE_UpRatio.SetMarkerColor(2)
+EtaE_UpRatio.SetMarkerStyle(20)
+EtaE_UpRatio.SetStats(0)
+EtaE_UpRatio.SetLineColor(2)
+EtaE_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaE_DownRatio.Draw("SAMETEXT40")
+EtaE_DownRatio.SetMarkerStyle(20)
+EtaE_DownRatio.SetMarkerColor(3)
+EtaE_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaE =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaE.SetTextFont(42)
+legRatiosSyst_EtaE.SetTextSize(0.035)
+legRatiosSyst_EtaE.SetBorderSize(1);
+legRatiosSyst_EtaE.SetLineColor(0);
+legRatiosSyst_EtaE.SetLineStyle(1);
+legRatiosSyst_EtaE.SetLineWidth(1);
+legRatiosSyst_EtaE.SetFillColor(0);
+legRatiosSyst_EtaE.SetFillStyle(1001);
+legRatiosSyst_EtaE.AddEntry(EtaE_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaE.AddEntry(EtaE_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaE.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaE.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaEAtL4.png")
+#print("EtaE_DownRatio content:")
+#for xBin in range(1,EtaE_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaE_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaE_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaE_Nom_ProfY.Draw("COLZ")
+EtaE_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaE_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaE_UP_ProfY.Draw("SAME")
+EtaE_UP_ProfY.SetLineColor(2)
+EtaE_DOWN_ProfY.Draw("SAME")
+EtaE_DOWN_ProfY.SetLineColor(3)
+EtaE_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaE =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaE.SetTextFont(42)
+legTriggerEff_EtaE.SetTextSize(0.035)
+legTriggerEff_EtaE.SetBorderSize(1);
+legTriggerEff_EtaE.SetLineColor(0);
+legTriggerEff_EtaE.SetLineStyle(1);
+legTriggerEff_EtaE.SetLineWidth(1);
+legTriggerEff_EtaE.SetFillColor(0);
+legTriggerEff_EtaE.SetFillStyle(1001);
+legTriggerEff_EtaE.AddEntry(EtaE_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaE.AddEntry(EtaE_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaE.AddEntry(EtaE_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaE.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaE.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaEAtL4.png")
+
+can.Clear()
+
+# --------------------------------------------------
+EtaF_UpRatio = EtaF_UP_ProfY.Clone()
+EtaF_UpRatio.Divide(EtaF_Nom_ProfY)
+
+EtaF_DownRatio = EtaF_DOWN_ProfY.Clone()
+EtaF_DownRatio.Divide(EtaF_Nom_ProfY)
+
+EtaF_UpRatio.Draw("COLZTEXT40")
+EtaF_UpRatio.SetMarkerColor(2)
+EtaF_UpRatio.SetMarkerStyle(20)
+EtaF_UpRatio.SetStats(0)
+EtaF_UpRatio.SetLineColor(2)
+EtaF_UpRatio.GetYaxis().SetTitle("Ratio")
+EtaF_DownRatio.Draw("SAMETEXT40")
+EtaF_DownRatio.SetMarkerStyle(20)
+EtaF_DownRatio.SetMarkerColor(3)
+EtaF_DownRatio.SetLineColor(3)
+legRatiosSyst_EtaF =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_EtaF.SetTextFont(42)
+legRatiosSyst_EtaF.SetTextSize(0.035)
+legRatiosSyst_EtaF.SetBorderSize(1);
+legRatiosSyst_EtaF.SetLineColor(0);
+legRatiosSyst_EtaF.SetLineStyle(1);
+legRatiosSyst_EtaF.SetLineWidth(1);
+legRatiosSyst_EtaF.SetFillColor(0);
+legRatiosSyst_EtaF.SetFillStyle(1001);
+legRatiosSyst_EtaF.AddEntry(EtaF_UpRatio,"Up systematics / nominal","LP")
+legRatiosSyst_EtaF.AddEntry(EtaF_DownRatio,"Down systematics / nominal","LP")
+legRatiosSyst_EtaF.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legRatiosSyst_EtaF.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_RatiosSyst_EtaFAtL4.png")
+#print("EtaF_DownRatio content:")
+#for xBin in range(1,EtaF_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(EtaF_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(EtaF_DownRatio.GetBinContent(xBin),2))+",")
+
+EtaF_Nom_ProfY.Draw("COLZ")
+EtaF_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+EtaF_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+EtaF_UP_ProfY.Draw("SAME")
+EtaF_UP_ProfY.SetLineColor(2)
+EtaF_DOWN_ProfY.Draw("SAME")
+EtaF_DOWN_ProfY.SetLineColor(3)
+EtaF_Nom_ProfY.SetStats(0)
+legTriggerEff_EtaF =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_EtaF.SetTextFont(42)
+legTriggerEff_EtaF.SetTextSize(0.035)
+legTriggerEff_EtaF.SetBorderSize(1);
+legTriggerEff_EtaF.SetLineColor(0);
+legTriggerEff_EtaF.SetLineStyle(1);
+legTriggerEff_EtaF.SetLineWidth(1);
+legTriggerEff_EtaF.SetFillColor(0);
+legTriggerEff_EtaF.SetFillStyle(1001);
+legTriggerEff_EtaF.AddEntry(EtaF_Nom_ProfY,"Nominal","LP")
+legTriggerEff_EtaF.AddEntry(EtaF_UP_ProfY,"Up systematics","LP")
+legTriggerEff_EtaF.AddEntry(EtaF_DOWN_ProfY,"Down systematics","LP")
+legTriggerEff_EtaF.SetFillColorAlpha(ROOT.kWhite, 0.5)
+legTriggerEff_EtaF.Draw("SAME")
+can.SaveAs("CodeV"+str(codeVersion)+"_TriggerEff_Syst_EtaFAtL4.png")
+
+can.Clear()
diff --git a/Analyzer/test/Tamas/PostProcScripts/calculateTrigSyst_v2.py b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSyst_v2.py
new file mode 100644
index 0000000..0aeed0c
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/calculateTrigSyst_v2.py
@@ -0,0 +1,205 @@
+import ROOT, sys
+
+ROOT.gStyle.SetPaintTextFormat(".2g");
+
+fileName = sys.argv[1]
+codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open(fileName)
+HalfSigma_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_Beta")
+HalfSigma_UP = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpHalfSigma")
+HalfSigma_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownHalfSigma")
+#OneSigma_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_Beta")
+OneSigma_UP = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpOneSigma")
+OneSigma_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownOneSigma")
+#TwoSigma_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_Beta")
+TwoSigma_UP = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_BetaUpTwoSigma")
+TwoSigma_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostS_SR2PASS_TriggerMuon50VsBeta_BetaDownTwoSigma")
+
+HalfSigma_Nom_ProfY = HalfSigma_Nom.RebinY(2).ProfileY().ProjectionX()
+HalfSigma_UP_ProfY = HalfSigma_UP.RebinY(2).ProfileY().ProjectionX()
+HalfSigma_DOWN_ProfY = HalfSigma_DOWN.RebinY(2).ProfileY().ProjectionX()
+#OneSigma_Nom_ProfY = OneSigma_Nom.RebinY(2).ProfileY().ProjectionX()
+OneSigma_UP_ProfY = OneSigma_UP.RebinY(2).ProfileY().ProjectionX()
+OneSigma_DOWN_ProfY = OneSigma_DOWN.RebinY(2).ProfileY().ProjectionX()
+#TwoSigma_Nom_ProfY = TwoSigma_Nom.RebinY(2).ProfileY().ProjectionX()
+TwoSigma_UP_ProfY = TwoSigma_UP.RebinY(2).ProfileY().ProjectionX()
+TwoSigma_DOWN_ProfY = TwoSigma_DOWN.RebinY(2).ProfileY().ProjectionX()
+
+# --------------------------------------------------
+HalfSigma_UpRatio = HalfSigma_UP_ProfY.Clone()
+HalfSigma_UpRatio.Divide(HalfSigma_Nom_ProfY)
+
+HalfSigma_DownRatio = HalfSigma_DOWN_ProfY.Clone()
+HalfSigma_DownRatio.Divide(HalfSigma_Nom_ProfY)
+
+HalfSigma_UpRatio.Draw("COLZTEXT40")
+HalfSigma_UpRatio.SetMarkerColor(2)
+HalfSigma_UpRatio.SetMarkerStyle(20)
+HalfSigma_UpRatio.SetStats(0)
+HalfSigma_UpRatio.SetLineColor(2)
+HalfSigma_UpRatio.GetYaxis().SetTitle("Ratio")
+HalfSigma_DownRatio.Draw("SAMETEXT40")
+HalfSigma_DownRatio.SetMarkerStyle(20)
+HalfSigma_DownRatio.SetMarkerColor(3)
+HalfSigma_DownRatio.SetLineColor(3)
+legRatiosSyst_HalfSigma =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_HalfSigma.SetTextFont(42)
+legRatiosSyst_HalfSigma.SetTextSize(0.035)
+legRatiosSyst_HalfSigma.SetBorderSize(1);
+legRatiosSyst_HalfSigma.SetLineColor(0);
+legRatiosSyst_HalfSigma.SetLineStyle(1);
+legRatiosSyst_HalfSigma.SetLineWidth(1);
+legRatiosSyst_HalfSigma.SetFillColor(0);
+legRatiosSyst_HalfSigma.SetFillStyle(1001);
+legRatiosSyst_HalfSigma.AddEntry(HalfSigma_UpRatio,"Up (0.5#sigma) systematics / nominal","LP")
+legRatiosSyst_HalfSigma.AddEntry(HalfSigma_DownRatio,"Down (0.5#sigma) systematics / nominal","LP")
+legRatiosSyst_HalfSigma.Draw("SAME")
+can.SaveAs(fileName[0:-5] + "_TriggerEff_RatiosSyst_HalfSigma.png")
+
+HalfSigma_Nom_ProfY.Draw("COLZ")
+HalfSigma_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+HalfSigma_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+HalfSigma_UP_ProfY.Draw("SAME")
+HalfSigma_UP_ProfY.SetLineColor(2)
+HalfSigma_DOWN_ProfY.Draw("SAME")
+HalfSigma_DOWN_ProfY.SetLineColor(3)
+HalfSigma_Nom_ProfY.SetStats(0)
+legTriggerEff_HalfSigma =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_HalfSigma.SetTextFont(42)
+legTriggerEff_HalfSigma.SetTextSize(0.035)
+legTriggerEff_HalfSigma.SetBorderSize(1);
+legTriggerEff_HalfSigma.SetLineColor(0);
+legTriggerEff_HalfSigma.SetLineStyle(1);
+legTriggerEff_HalfSigma.SetLineWidth(1);
+legTriggerEff_HalfSigma.SetFillColor(0);
+legTriggerEff_HalfSigma.SetFillStyle(1001);
+legTriggerEff_HalfSigma.AddEntry(HalfSigma_Nom_ProfY,"Nominal","LP")
+legTriggerEff_HalfSigma.AddEntry(HalfSigma_UP_ProfY,"Up (0.5#sigma) systematics","LP")
+legTriggerEff_HalfSigma.AddEntry(HalfSigma_DOWN_ProfY,"Down (0.5#sigma) systematics","LP")
+legTriggerEff_HalfSigma.Draw("SAME")
+can.SaveAs(fileName[0:-5] + "_TriggerEff_Syst_HalfSigma.png")
+
+can.Clear()
+
+# --------------------------------------------------
+OneSigma_UpRatio = OneSigma_UP_ProfY.Clone()
+OneSigma_UpRatio.Divide(HalfSigma_Nom_ProfY)
+
+OneSigma_DownRatio = OneSigma_DOWN_ProfY.Clone()
+OneSigma_DownRatio.Divide(HalfSigma_Nom_ProfY)
+
+OneSigma_UpRatio.Draw("COLZTEXT40")
+OneSigma_UpRatio.SetMarkerColor(2)
+OneSigma_UpRatio.SetMarkerStyle(20)
+OneSigma_UpRatio.SetStats(0)
+OneSigma_UpRatio.SetLineColor(2)
+OneSigma_UpRatio.GetYaxis().SetTitle("Ratio")
+OneSigma_DownRatio.Draw("SAMETEXT40")
+OneSigma_DownRatio.SetMarkerStyle(20)
+OneSigma_DownRatio.SetMarkerColor(3)
+OneSigma_DownRatio.SetLineColor(3)
+legRatiosSyst_OneSigma =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_OneSigma.SetTextFont(42)
+legRatiosSyst_OneSigma.SetTextSize(0.035)
+legRatiosSyst_OneSigma.SetBorderSize(1);
+legRatiosSyst_OneSigma.SetLineColor(0);
+legRatiosSyst_OneSigma.SetLineStyle(1);
+legRatiosSyst_OneSigma.SetLineWidth(1);
+legRatiosSyst_OneSigma.SetFillColor(0);
+legRatiosSyst_OneSigma.SetFillStyle(1001);
+legRatiosSyst_OneSigma.AddEntry(OneSigma_UpRatio,"Up (1#sigma) systematics / nominal","LP")
+legRatiosSyst_OneSigma.AddEntry(OneSigma_DownRatio,"Down (1#sigma) systematics / nominal","LP")
+legRatiosSyst_OneSigma.Draw("SAME")
+can.SaveAs(fileName[0:-5] + "_TriggerEff_RatiosSyst_OneSigma.png")
+#print("OneSigma_DownRatio content:")
+#for xBin in range(1,OneSigma_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(OneSigma_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(OneSigma_DownRatio.GetBinContent(xBin),2))+",")
+
+HalfSigma_Nom_ProfY.Draw("COLZ")
+HalfSigma_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+HalfSigma_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+OneSigma_UP_ProfY.Draw("SAME")
+OneSigma_UP_ProfY.SetLineColor(2)
+OneSigma_DOWN_ProfY.Draw("SAME")
+OneSigma_DOWN_ProfY.SetLineColor(3)
+HalfSigma_Nom_ProfY.SetStats(0)
+legTriggerEff_OneSigma =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_OneSigma.SetTextFont(42)
+legTriggerEff_OneSigma.SetTextSize(0.035)
+legTriggerEff_OneSigma.SetBorderSize(1);
+legTriggerEff_OneSigma.SetLineColor(0);
+legTriggerEff_OneSigma.SetLineStyle(1);
+legTriggerEff_OneSigma.SetLineWidth(1);
+legTriggerEff_OneSigma.SetFillColor(0);
+legTriggerEff_OneSigma.SetFillStyle(1001);
+legTriggerEff_OneSigma.AddEntry(HalfSigma_Nom_ProfY,"Nominal","LP")
+legTriggerEff_OneSigma.AddEntry(OneSigma_UP_ProfY,"Up (1#sigma) systematics","LP")
+legTriggerEff_OneSigma.AddEntry(OneSigma_DOWN_ProfY,"Down (1#sigma) systematics","LP")
+legTriggerEff_OneSigma.Draw("SAME")
+can.SaveAs(fileName[0:-5] + "_TriggerEff_Syst_OneSigma.png")
+
+can.Clear()
+
+# --------------------------------------------------
+TwoSigma_UpRatio = TwoSigma_UP_ProfY.Clone()
+TwoSigma_UpRatio.Divide(HalfSigma_Nom_ProfY)
+
+TwoSigma_DownRatio = TwoSigma_DOWN_ProfY.Clone()
+TwoSigma_DownRatio.Divide(HalfSigma_Nom_ProfY)
+
+TwoSigma_UpRatio.Draw("COLZTEXT40")
+TwoSigma_UpRatio.SetMarkerColor(2)
+TwoSigma_UpRatio.SetMarkerStyle(20)
+TwoSigma_UpRatio.SetStats(0)
+TwoSigma_UpRatio.SetLineColor(2)
+TwoSigma_UpRatio.GetYaxis().SetTitle("Ratio")
+TwoSigma_DownRatio.Draw("SAMETEXT40")
+TwoSigma_DownRatio.SetMarkerStyle(20)
+TwoSigma_DownRatio.SetMarkerColor(3)
+TwoSigma_DownRatio.SetLineColor(3)
+legRatiosSyst_TwoSigma =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legRatiosSyst_TwoSigma.SetTextFont(42)
+legRatiosSyst_TwoSigma.SetTextSize(0.035)
+legRatiosSyst_TwoSigma.SetBorderSize(1);
+legRatiosSyst_TwoSigma.SetLineColor(0);
+legRatiosSyst_TwoSigma.SetLineStyle(1);
+legRatiosSyst_TwoSigma.SetLineWidth(1);
+legRatiosSyst_TwoSigma.SetFillColor(0);
+legRatiosSyst_TwoSigma.SetFillStyle(1001);
+legRatiosSyst_TwoSigma.AddEntry(TwoSigma_UpRatio,"Up (2#sigma) systematics / nominal","LP")
+legRatiosSyst_TwoSigma.AddEntry(TwoSigma_DownRatio,"Down (2#sigma) systematics / nominal","LP")
+legRatiosSyst_TwoSigma.Draw("SAME")
+can.SaveAs(fileName[0:-5] + "_TriggerEff_RatiosSyst_TwoSigma.png")
+#print("TwoSigma_DownRatio content:")
+#for xBin in range(1,TwoSigma_DownRatio.GetNbinsX()+1) :
+  #"" + str(round(TwoSigma_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
+#  print(str(round(TwoSigma_DownRatio.GetBinContent(xBin),2))+",")
+
+HalfSigma_Nom_ProfY.Draw("COLZ")
+HalfSigma_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
+HalfSigma_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
+TwoSigma_UP_ProfY.Draw("SAME")
+TwoSigma_UP_ProfY.SetLineColor(2)
+TwoSigma_DOWN_ProfY.Draw("SAME")
+TwoSigma_DOWN_ProfY.SetLineColor(3)
+HalfSigma_Nom_ProfY.SetStats(0)
+legTriggerEff_TwoSigma =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
+legTriggerEff_TwoSigma.SetTextFont(42)
+legTriggerEff_TwoSigma.SetTextSize(0.035)
+legTriggerEff_TwoSigma.SetBorderSize(1);
+legTriggerEff_TwoSigma.SetLineColor(0);
+legTriggerEff_TwoSigma.SetLineStyle(1);
+legTriggerEff_TwoSigma.SetLineWidth(1);
+legTriggerEff_TwoSigma.SetFillColor(0);
+legTriggerEff_TwoSigma.SetFillStyle(1001);
+legTriggerEff_TwoSigma.AddEntry(HalfSigma_Nom_ProfY,"Nominal","LP")
+legTriggerEff_TwoSigma.AddEntry(TwoSigma_UP_ProfY,"Up (2#sigma) systematics","LP")
+legTriggerEff_TwoSigma.AddEntry(TwoSigma_DOWN_ProfY,"Down (2#sigma) systematics","LP")
+legTriggerEff_TwoSigma.Draw("SAME")
+can.SaveAs(fileName[0:-5] + "_TriggerEff_Syst_TwoSigma.png")
+
+can.Clear()
+print("scp -r "+ fileName[0:-5] + "*.png tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/compAndRun.sh b/Analyzer/test/Tamas/PostProcScripts/compAndRun.sh
new file mode 100644
index 0000000..731357f
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/compAndRun.sh
@@ -0,0 +1,3 @@
+scram b -j
+#cmsRun HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent.py
+cmsRun HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py
diff --git a/Analyzer/test/Tamas/PostProcScripts/compareHSCP.py b/Analyzer/test/Tamas/PostProcScripts/compareHSCP.py
new file mode 100644
index 0000000..9eb0739
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/compareHSCP.py
@@ -0,0 +1,410 @@
+import ROOT, sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+
+f1 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_100_CodeV17_v1.root")
+f2 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_200_CodeV17_v1.root")
+f3 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_400_CodeV17_v1.root")
+f4 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_500_CodeV17_v1.root")
+f5 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_800_CodeV17_v1.root")
+f6 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1000_CodeV17_v1.root")
+f7 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1400_CodeV17_v1.root")
+f8 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1800_CodeV17_v1.root")
+f9 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2000_CodeV17_v1.root")
+f10 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2200_CodeV17_v1.root")
+f11 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2400_CodeV17_v1.root")
+f12 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2600_CodeV17_v1.root")
+
+fileOut = open("BetaGammaValuesMPV.txt", "a")
+
+dirs = []
+for i in range(0, f1.GetListOfKeys().GetEntries()):
+  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
+  dirname = f1.GetListOfKeys().At(i).GetName()
+  curr_dir = f1.GetDirectory(dirname)
+# print("dirname: "+dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      # Match the plot of interest
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = f1.GetDirectory(dirname+"/"+keyname)
+#                    print("keyname: "+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          # The plot should be TCanvas
+          newname = dirname + "/" + keyname+ "/" + keyname2
+#         print("newname: "+newname)
+          obj1 = f1.Get(newname)
+          obj2 = f2.Get(newname)
+          obj3 = f3.Get(newname)
+          obj4 = f4.Get(newname)
+          obj5 = f5.Get(newname)
+          obj6 = f6.Get(newname)
+          obj7 = f7.Get(newname)
+          obj8 = f8.Get(newname)
+          obj9 = f9.Get(newname)
+          obj10 = f10.Get(newname)
+          obj11 = f11.Get(newname)
+          obj12 = f12.Get(newname)
+          if obj1.InheritsFrom("TObject"):
+              can = obj1
+              can = ROOT.TCanvas(newname)
+              # bin 3: pt>60 and I_as > 0.05
+              # bin 25: pt>65 and I_as > 0.175
+              # bin 28: pt>65 and I_as > 0.3
+              name = "CompareHSCP/" + keyname2 +  ".png"
+#                 print(name)
+              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+              if not (obj1.ClassName() == "TH1F"):
+                  continue
+              if ("BS_" in keyname2 or keyname2 == "genlevelbeta") :
+#                  can.SetLogy()
+                  obj1.SetMarkerColor(1)
+                  obj2.SetMarkerColor(2)
+                  obj3.SetMarkerColor(3)
+                  obj4.SetMarkerColor(4)
+                  obj5.SetMarkerColor(5)
+                  obj6.SetMarkerColor(6)
+                  obj7.SetMarkerColor(7)
+                  obj8.SetMarkerColor(8)
+                  obj9.SetMarkerColor(9)
+                  obj10.SetMarkerColor(10)
+                  obj11.SetMarkerColor(11)
+                  obj12.SetMarkerColor(12)
+                  
+                  obj1.SetLineColor(1)
+                  obj2.SetLineColor(2)
+                  obj3.SetLineColor(3)
+                  obj4.SetLineColor(4)
+                  obj5.SetLineColor(5)
+                  obj6.SetLineColor(6)
+                  obj7.SetLineColor(7)
+                  obj8.SetLineColor(8)
+                  obj9.SetLineColor(9)
+                  obj10.SetLineColor(10)
+                  obj11.SetLineColor(11)
+                  obj12.SetLineColor(12)
+                  
+                  
+                  obj1.SetMarkerStyle(20)
+                  obj2.SetMarkerStyle(20)
+                  obj3.SetMarkerStyle(20)
+                  obj4.SetMarkerStyle(20)
+                  obj5.SetMarkerStyle(20)
+                  obj6.SetMarkerStyle(20)
+                  obj7.SetMarkerStyle(20)
+                  obj8.SetMarkerStyle(20)
+                  obj9.SetMarkerStyle(20)
+                  obj10.SetMarkerStyle(20)
+                  obj11.SetMarkerStyle(20)
+                  obj12.SetMarkerStyle(20)
+                  
+#                  obj1.SetTitle("")
+#                  obj1.GetXaxis().SetTitleSize(0.05)
+#                  obj1.GetXaxis().SetTitleOffset(1)
+#                  obj1.GetYaxis().SetTitleSize(0.05)
+#                  obj1.GetYaxis().SetTitleOffset(1)
+                  obj12.SetStats(0)
+                  max = np.maximum(obj12.GetMaximum(), obj1.GetMaximum())
+                  obj12.SetMaximum(max*1.5)
+                  
+                  legMass =  ROOT.TLegend(.15,.55,.40,.9,"","brNDC")
+                  legMass.SetTextFont(42)
+                  legMass.SetTextSize(0.035)
+                  legMass.SetBorderSize(1);
+                  legMass.SetLineColor(1);
+                  legMass.SetLineStyle(1);
+                  legMass.SetLineWidth(1);
+                  legMass.SetFillColor(0);
+                  legMass.SetFillStyle(1001);
+                  legMass.AddEntry(obj12,"Mass=2600 GeV","LP")
+                  legMass.AddEntry(obj11,"Mass=2400 GeV","LP")
+                  legMass.AddEntry(obj10,"Mass=2200 GeV","LP")
+                  legMass.AddEntry(obj9,"Mass=2000 GeV","LP")
+                  legMass.AddEntry(obj8,"Mass=1800 GeV","LP")
+                  legMass.AddEntry(obj7,"Mass=1400 GeV","LP")
+                  legMass.AddEntry(obj6,"Mass=1000 GeV","LP")
+                  legMass.AddEntry(obj5,"Mass=800 GeV","LP")
+                  legMass.AddEntry(obj4,"Mass=500 GeV","LP")
+                  legMass.AddEntry(obj3,"Mass=400 GeV","LP")
+                  legMass.AddEntry(obj2,"Mass=200 GeV","LP")
+                  legMass.AddEntry(obj1,"Mass=100 GeV","LP")
+                  
+                  
+                  obj12.Draw("COLZ L")
+                  obj11.Draw("SAME")
+                  obj10.Draw("SAME")
+                  obj9.Draw("SAME")
+                  obj8.Draw("SAME")
+                  obj7.Draw("SAME")
+                  obj6.Draw("SAME")
+                  obj5.Draw("SAME")
+                  obj4.Draw("SAME")
+                  obj3.Draw("SAME")
+                  obj2.Draw("SAME")
+                  obj1.Draw("SAME")
+                  
+                  legMass.Draw("SAME")
+              else :
+                  continue
+              can.SaveAs(name)
+              if (keyname2 == "genlevelbeta") :
+                  meanValue1 = obj1.GetMean()
+                  meanValue2 = obj2.GetMean()
+                  meanValue3 = obj3.GetMean()
+                  meanValue4 = obj4.GetMean()
+                  meanValue5 = obj5.GetMean()
+                  meanValue6 = obj6.GetMean()
+                  meanValue7 = obj7.GetMean()
+                  meanValue8 = obj8.GetMean()
+                  meanValue9 = obj9.GetMean()
+                  meanValue10 = obj10.GetMean()
+                  meanValue11 = obj11.GetMean()
+                  meanValue12 = obj12.GetMean()
+                  
+#                  meanValue1 = obj1.GetBinCenter(obj1.GetMaximumBin())
+#                  meanValue2 = obj2.GetBinCenter(obj2.GetMaximumBin())
+#                  meanValue3 = obj3.GetBinCenter(obj3.GetMaximumBin())
+#                  meanValue4 = obj4.GetBinCenter(obj4.GetMaximumBin())
+#                  meanValue5 = obj5.GetBinCenter(obj5.GetMaximumBin())
+#                  meanValue6 = obj6.GetBinCenter(obj6.GetMaximumBin())
+#                  meanValue7 = obj7.GetBinCenter(obj7.GetMaximumBin())
+#                  meanValue8 = obj8.GetBinCenter(obj8.GetMaximumBin())
+#                  meanValue9 = obj9.GetBinCenter(obj9.GetMaximumBin())
+#                  meanValue10 = obj10.GetBinCenter(obj10.GetMaximumBin())
+#                  meanValue11 = obj11.GetBinCenter(obj11.GetMaximumBin())
+#                  meanValue12 = obj12.GetBinCenter(obj12.GetMaximumBin())
+                  
+                  error1 = obj1.GetStdDev()
+                  error2 = obj2.GetStdDev()
+                  error3 = obj3.GetStdDev()
+                  error4 = obj4.GetStdDev()
+                  error5 = obj5.GetStdDev()
+                  error6 = obj6.GetStdDev()
+                  error7 = obj7.GetStdDev()
+                  error8 = obj8.GetStdDev()
+                  error9 = obj9.GetStdDev()
+                  error10 = obj10.GetStdDev()
+                  error11 = obj11.GetStdDev()
+                  error12 = obj12.GetStdDev()
+                  
+                  betaGammaMPV1 = meanValue1 * (1/np.sqrt(1-meanValue1*meanValue1))
+                  betaGammaMPV2 = meanValue2 * (1/np.sqrt(1-meanValue2*meanValue2))
+                  betaGammaMPV3 = meanValue3 * (1/np.sqrt(1-meanValue3*meanValue3))
+                  betaGammaMPV4 = meanValue4 * (1/np.sqrt(1-meanValue4*meanValue4))
+                  betaGammaMPV5 = meanValue5 * (1/np.sqrt(1-meanValue5*meanValue5))
+                  betaGammaMPV6 = meanValue6 * (1/np.sqrt(1-meanValue6*meanValue6))
+                  betaGammaMPV7 = meanValue7 * (1/np.sqrt(1-meanValue7*meanValue7))
+                  betaGammaMPV8 = meanValue8 * (1/np.sqrt(1-meanValue8*meanValue8))
+                  betaGammaMPV9 = meanValue9 * (1/np.sqrt(1-meanValue9*meanValue9))
+                  betaGammaMPV10 = meanValue10 * (1/np.sqrt(1-meanValue10*meanValue10))
+                  betaGammaMPV11 = meanValue11 * (1/np.sqrt(1-meanValue11*meanValue11))
+                  betaGammaMPV12 = meanValue12 * (1/np.sqrt(1-meanValue12*meanValue12))
+                  
+                  betaGammaMPV1Up = (meanValue1+error1) * (1/np.sqrt(1-(meanValue1+error1)*(meanValue1+error1)))
+                  betaGammaMPV2Up = (meanValue2+error2) * (1/np.sqrt(1-(meanValue2+error2)*(meanValue2+error2)))
+                  betaGammaMPV3Up = (meanValue3+error3) * (1/np.sqrt(1-(meanValue3+error3)*(meanValue3+error3)))
+                  betaGammaMPV4Up = (meanValue4+error4) * (1/np.sqrt(1-(meanValue4+error4)*(meanValue4+error4)))
+                  betaGammaMPV5Up = (meanValue5+error5) * (1/np.sqrt(1-(meanValue5+error5)*(meanValue5+error5)))
+                  betaGammaMPV6Up = (meanValue6+error6) * (1/np.sqrt(1-(meanValue6+error6)*(meanValue6+error6)))
+                  betaGammaMPV7Up = (meanValue7+error7) * (1/np.sqrt(1-(meanValue7+error7)*(meanValue7+error7)))
+                  betaGammaMPV8Up = (meanValue8+error8) * (1/np.sqrt(1-(meanValue8+error8)*(meanValue8+error8)))
+                  betaGammaMPV9Up = (meanValue9+error9) * (1/np.sqrt(1-(meanValue9+error9)*(meanValue9+error9)))
+                  betaGammaMPV10Up = (meanValue10+error10) * (1/np.sqrt(1-(meanValue10+error10)*(meanValue10+error10)))
+                  betaGammaMPV11Up = (meanValue11+error11) * (1/np.sqrt(1-(meanValue11+error11)*(meanValue11+error11)))
+                  betaGammaMPV12Up = (meanValue12+error12) * (1/np.sqrt(1-(meanValue12+error12)*(meanValue12+error12)))
+                  
+#                  betaGammaErr1 = error1 * error1 / (np.sqrt((1-error1 * error1)**3))
+                  betaGammaErr1 = betaGammaMPV1Up - betaGammaMPV1
+                  betaGammaErr2 = betaGammaMPV2Up - betaGammaMPV2
+                  betaGammaErr3 = betaGammaMPV3Up - betaGammaMPV3
+                  betaGammaErr4 = betaGammaMPV4Up - betaGammaMPV4
+                  betaGammaErr5 = betaGammaMPV5Up - betaGammaMPV5
+                  betaGammaErr6 = betaGammaMPV6Up - betaGammaMPV6
+                  betaGammaErr7 = betaGammaMPV7Up - betaGammaMPV7
+                  betaGammaErr8 = betaGammaMPV8Up - betaGammaMPV8
+                  betaGammaErr9 = betaGammaMPV9Up - betaGammaMPV9
+                  betaGammaErr10 = betaGammaMPV10Up - betaGammaMPV10
+                  betaGammaErr11 = betaGammaMPV11Up - betaGammaMPV11
+                  betaGammaErr12 = betaGammaMPV12Up - betaGammaMPV12
+                  
+                  
+                  fileOut.write("100\t"+str(betaGammaMPV1)+"\t"+str(betaGammaErr1)+"\n")
+                  fileOut.write("200\t"+str(betaGammaMPV2)+"\t"+str(betaGammaErr2)+"\n")
+                  fileOut.write("400\t"+str(betaGammaMPV3)+"\t"+str(betaGammaErr3)+"\n")
+                  fileOut.write("500\t"+str(betaGammaMPV4)+"\t"+str(betaGammaErr4)+"\n")
+                  fileOut.write("800\t"+str(betaGammaMPV5)+"\t"+str(betaGammaErr5)+"\n")
+                  fileOut.write("1000\t"+str(betaGammaMPV6)+"\t"+str(betaGammaErr6)+"\n")
+                  fileOut.write("1400\t"+str(betaGammaMPV7)+"\t"+str(betaGammaErr7)+"\n")
+                  fileOut.write("1800\t"+str(betaGammaMPV8)+"\t"+str(betaGammaErr8)+"\n")
+                  fileOut.write("2000\t"+str(betaGammaMPV9)+"\t"+str(betaGammaErr9)+"\n")
+                  fileOut.write("2200\t"+str(betaGammaMPV10)+"\t"+str(betaGammaErr10)+"\n")
+                  fileOut.write("2400\t"+str(betaGammaMPV11)+"\t"+str(betaGammaErr11)+"\n")
+                  fileOut.write("2600\t"+str(betaGammaMPV12)+"\t"+str(betaGammaErr12)+"\n")
+                  fileOut.close()
+              #can.SaveAs(name.replace(".png",".pdf"))
+              #can.SaveAs(name.replace(".png",".C"))
+              can.Close()
+
+#Mass = f.Get("/analyzer/BaseName/Mass")
+#Mass_wPred = f.Get("/analyzer/BaseName/Pred_Mass_CB")
+#if Mass_wPred :
+#  massBins = [0.,50.,100.,150.,200.,250.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,4000.]
+#  massBinsArray = np.array(massBins)
+#  Mass_projY_NotRebinned = Mass.ProjectionY("Mass_projY",ProjBin,ProjBin,"e")
+#  Mass_projY = ROOT.TH1F("Mass_projY" , "Mass_projY" , len(massBinsArray)-1, massBinsArray)
+#
+#  Mass_wPred_projY_NotRebinned = Mass_wPred.ProjectionY("Mass_wPred_projY",ProjBin,ProjBin,"e")
+#  Mass_wPred_projY = ROOT.TH1F("Mass_wPred_projY" , "Mass_wPred_projY" , len(massBinsArray)-1, massBinsArray)
+#
+#  print("Mass_projY_NotRebinned.Integral(): ",Mass_projY_NotRebinned.Integral())
+#  print("Mass_wPred_projY_NotRebinned.Integral(): ",Mass_wPred_projY_NotRebinned.Integral())
+#
+#  KSvalue = Mass_projY_NotRebinned.KolmogorovTest(Mass_wPred_projY_NotRebinned,"XD")
+#  print("KS-test: "+str(KSvalue))
+#
+#  for i, bin in enumerate(massBinsArray):
+#    Mass_projYCont = Mass_projY_NotRebinned.GetBinContent(i+1)
+#    Mass_projY.SetBinContent(i+1,Mass_projYCont)
+#    Mass_projYCont_err = Mass_projY_NotRebinned.GetBinError(i+1)
+#    #Mass_projYCont_err = Mass.GetBinErrorLow(ProjBin,i+1)
+#    Mass_projY.SetBinError(i+1,Mass_projYCont_err)
+#
+#    Mass_wPred_projYCont = Mass_wPred_projY_NotRebinned.GetBinContent(i+1)
+#    Mass_wPred_projY.SetBinContent(i+1,Mass_wPred_projYCont)
+#    Mass_wPred_projYCont_err = Mass_wPred_projY_NotRebinned.GetBinError(i+1)
+#    #Mass_wPred_projYCont_err = Mass_wPred.GetBinErrorLow(ProjBin,i+1)
+#    Mass_wPred_projY.SetBinError(i+1,Mass_wPred_projYCont_err)
+#
+#  print("----------------------------------------------")
+#  KSvalue2 = Mass_projY.KolmogorovTest(Mass_wPred_projY,"XD")
+#  print("KS-test after rebinning: "+str(KSvalue2))
+#
+#  Mass_projY.SetMarkerColor(1)
+#  Mass_projY.SetLineColor(1)
+#  Mass_projY.SetMarkerStyle(20)
+#  Mass_projY.SetTitle("")
+#  Mass_projY.GetXaxis().SetTitleSize(0.05)
+#  Mass_projY.GetXaxis().SetTitleOffset(1)
+#  Mass_projY.GetXaxis().SetTitle("Mass [GeV]")
+#  Mass_projY.GetYaxis().SetTitle("Tracks/bin")
+#  Mass_projY.GetYaxis().SetTitleSize(0.05)
+#  Mass_projY.GetYaxis().SetTitleOffset(1)
+#  Mass_projY.SetStats(0)
+#  Mass_projY.GetYaxis().SetRangeUser(0.1,10000)
+#
+#
+#  Mass_wPred_projY.SetMarkerColor(2)
+#  Mass_wPred_projY.SetLineColor(2)
+#  Mass_wPred_projY.SetMarkerStyle(20)
+#  Mass_wPred_projY.SetTitle("")
+#  Mass_wPred_projY.GetXaxis().SetTitleSize(0.05)
+#  Mass_wPred_projY.GetXaxis().SetTitleOffset(1)
+#  Mass_wPred_projY.GetXaxis().SetTitle("Mass [GeV]")
+#  Mass_wPred_projY.GetYaxis().SetTitle("Tracks/bin")
+#  Mass_wPred_projY.GetYaxis().SetTitleSize(0.05)
+#  Mass_wPred_projY.GetYaxis().SetTitleOffset(1)
+#  Mass_wPred_projY.SetStats(0)
+#
+#
+#  print("Mass_projY.Integral(): ",Mass_projY.Integral())
+#  print("Mass_wPred_projY.Integral(): ",Mass_wPred_projY.Integral())
+#
+#  legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
+#  legMass.SetTextFont(42)
+#  legMass.SetTextSize(0.035)
+#  legMass.SetBorderSize(1);
+#  legMass.SetLineColor(1);
+#  legMass.SetLineStyle(1);
+#  legMass.SetLineWidth(1);
+#  legMass.SetFillColor(0);
+#  legMass.SetFillStyle(1001);
+#  legMass.AddEntry(Mass_wPred_projY,"Prediction","LP")
+#  legMass.AddEntry(Mass_projY,"Observation","LP")
+#
+#  tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+#  #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+#  tex2.SetNDC();
+#  tex2.SetTextFont(61);
+#  tex2.SetTextSize(0.0675);
+#  tex2.SetLineWidth(2);
+#
+#  #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+#  #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+#  tex3 = ROOT.TLatex(0.24,0.94,"Internal");
+#  tex3.SetNDC();
+#  tex3.SetTextFont(52);
+#  tex3.SetTextSize(0.0485);
+#  tex3.SetLineWidth(2);
+#
+#  tex4 = ROOT.TLatex(0.7,0.93,"K-S test v2: "+str(round(KSvalue2,4)));
+#  tex4.SetNDC();
+#  tex4.SetTextFont(52);
+#  tex4.SetTextSize(0.0485);
+#  tex4.SetLineWidth(2);
+#
+#
+#
+#
+#
+#  cMass_projY = ROOT.TCanvas('cMass_projY', 'cMass_projY',800,800)
+#  cMass_projY.SetLogy()
+#
+#  rp = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY)
+#
+#  rp.SetH1DrawOpt("P");
+#  rp.SetH2DrawOpt("P");
+#
+#  rp.Draw()
+#  #rp.GetUpperPad().BuildLegend()
+#  rp.SetLeftMargin(0.13);
+#  rp.SetRightMargin(0.05);
+#  rp.SetUpTopMargin(0.1);
+#  rp.SetLowTopMargin(0.02);
+#  rp.SetLowBottomMargin(0.35);
+#
+#  rp.GetLowerRefGraph().SetMinimum(0.01);
+#  rp.GetLowerRefGraph().SetMaximum(2);
+#  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+#  #rp.GetLowerRefGraph().SetLineColor(0) #0
+#  rp.GetLowerRefGraph().SetMarkerStyle(20)
+#  rp.GetLowerRefGraph().SetMarkerSize(1);
+#  rp.GetLowYaxis().SetNdivisions(505);
+#  rp.GetLowerRefYaxis().SetTitle("Ratio");
+#  rp.GetLowerRefYaxis().SetTitleSize(0.05);
+#  rp.GetLowerRefYaxis().SetTitleOffset(1);
+#  rp.GetLowerRefYaxis().SetLabelSize(0.035);
+#
+#
+#  rp.GetLowerRefXaxis().SetTitleSize(0.05);
+#  rp.GetLowerRefXaxis().SetTitleOffset(0.8);
+#  rp.GetLowerRefXaxis().SetLabelSize(0.035);
+#  cMass_projY.Modified()
+#  cMass_projY.Update()
+#  #Mass_projY.Draw()
+#  #Mass_wPred_projY.Draw("SAME")
+#  #rp.Draw("X")
+#
+#  rp.GetUpperPad().cd();
+#  legMass.Draw("SAME")
+#  tex2.Draw("SAME")
+#  tex3.Draw("SAME")
+#  tex4.Draw("SAME")
+#
+#  name = newFileDir + "/cMass_new.png"
+#  cMass_projY.SaveAs(name)
+#
+#os.system("cp forWebpage/* "+newFileDir+"/.")
+#print("scp -r "+ newFileDir + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV8/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/compareHSCPandBckCutflow.py b/Analyzer/test/Tamas/PostProcScripts/compareHSCPandBckCutflow.py
new file mode 100644
index 0000000..d6e77e8
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/compareHSCPandBckCutflow.py
@@ -0,0 +1,249 @@
+import ROOT, sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+
+f1 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1800_wProbQ_CodeV16p8_v1.root")
+f2 = ROOT.TFile.Open("crab_Analysis_2018_TTToHadronic_wProbQ_CodeV16p8_v1.root")
+f3 = ROOT.TFile.Open("crab_Analysis_2018_TTToSemiLeptonic_wProbQ_CodeV16p8_v1.root")
+f4 = ROOT.TFile.Open("crab_Analysis_2018_TTTo2L2Nu_wProbQ_CodeV16p8_v1.root")
+f5 = ROOT.TFile.Open("crab_Analysis_2018_QCDwPt1000_wProbQ_CodeV16p8_v1.root")
+f6 = ROOT.TFile.Open("crab_Analysis_2018_WJetsToLNu_wProbQ_CodeV16p8_v1.root")
+f7 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1400_CodeV8_v1.root")
+f8 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1800_CodeV8_v1.root")
+f9 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2000_CodeV8_v1.root")
+f10 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2200_CodeV8_v1.root")
+f11 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2400_CodeV8_v1.root")
+f12 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2600_CodeV8_v1.root")
+
+fileOut = open("BetaGammaValuesMPV.txt", "a")
+
+dirs = []
+for i in range(0, f1.GetListOfKeys().GetEntries()):
+  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
+  dirname = f1.GetListOfKeys().At(i).GetName()
+  curr_dir = f1.GetDirectory(dirname)
+# print("dirname: "+dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      # Match the plot of interest
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = f1.GetDirectory(dirname+"/"+keyname)
+#                    print("keyname: "+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          # The plot should be TCanvas
+          newname = dirname + "/" + keyname+ "/" + keyname2
+#         print("newname: "+newname)
+          obj1 = f1.Get(newname)
+          obj2 = f2.Get(newname)
+          obj3 = f3.Get(newname)
+          obj4 = f4.Get(newname)
+          obj5 = f5.Get(newname)
+          obj6 = f6.Get(newname)
+#          obj7 = f7.Get(newname)
+#          obj8 = f8.Get(newname)
+#          obj9 = f9.Get(newname)
+#          obj10 = f10.Get(newname)
+#          obj11 = f11.Get(newname)
+#          obj12 = f12.Get(newname)
+          if obj1.InheritsFrom("TObject"):
+              can = obj1
+              can = ROOT.TCanvas(newname)
+              # bin 3: pt>60 and I_as > 0.05
+              # bin 25: pt>65 and I_as > 0.175
+              # bin 28: pt>65 and I_as > 0.3
+              name = "CompareHSCPandBcg/" + keyname2 +  ".png"
+#                 print(name)
+              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+              if not (obj1.ClassName() == "TH1F"):
+                  continue
+              if not (obj1.Integral()) :
+                      continue
+              if ("BS_" in keyname2 or keyname2 == "CutFlow" or keyname2 == "CutFlowProbQLast" or keyname2 == "CutFlowProbQFirst") :
+#                  can.SetLogy()
+                  obj1.SetMarkerColor(1)
+                  obj2.SetMarkerColor(2)
+                  obj3.SetMarkerColor(3)
+                  obj4.SetMarkerColor(4)
+                  obj5.SetMarkerColor(5)
+                  obj6.SetMarkerColor(6)
+#                  obj7.SetMarkerColor(7)
+#                  obj8.SetMarkerColor(8)
+#                  obj9.SetMarkerColor(9)
+#                  obj10.SetMarkerColor(10)
+#                  obj11.SetMarkerColor(11)
+#                  obj12.SetMarkerColor(12)
+                  
+                  obj1.SetLineColor(1)
+                  obj2.SetLineColor(2)
+                  obj3.SetLineColor(3)
+                  obj4.SetLineColor(4)
+                  obj5.SetLineColor(5)
+                  obj6.SetLineColor(6)
+#                  obj7.SetLineColor(7)
+#                  obj8.SetLineColor(8)
+#                  obj9.SetLineColor(9)
+#                  obj10.SetLineColor(10)
+#                  obj11.SetLineColor(11)
+#                  obj12.SetLineColor(12)
+                  
+                  
+                  obj1.SetMarkerStyle(20)
+                  obj2.SetMarkerStyle(20)
+                  obj3.SetMarkerStyle(20)
+                  obj4.SetMarkerStyle(20)
+                  obj5.SetMarkerStyle(20)
+                  obj6.SetMarkerStyle(20)
+#                  obj7.SetMarkerStyle(20)
+#                  obj8.SetMarkerStyle(20)
+#                  obj9.SetMarkerStyle(20)
+#                  obj10.SetMarkerStyle(20)
+#                  obj11.SetMarkerStyle(20)
+#                  obj12.SetMarkerStyle(20)
+                  
+#                  obj1.SetTitle("")
+#                  obj1.GetXaxis().SetTitleSize(0.05)
+#                  obj1.GetXaxis().SetTitleOffset(1)
+#                  obj1.GetYaxis().SetTitleSize(0.05)
+#                  obj1.GetYaxis().SetTitleOffset(1)
+                  obj1.SetStats(0)
+
+
+                  if (keyname2 == "CutFlow" or keyname2 == "CutFlowProbQLast" or keyname2 == "CutFlowProbQFirst") :
+                    obj1.Scale(1/obj1.GetMaximum())
+                    obj2.Scale(1/obj2.GetMaximum())
+                    obj3.Scale(1/obj3.GetMaximum())
+                    obj4.Scale(1/obj4.GetMaximum())
+                    obj5.Scale(1/obj5.GetMaximum())
+                    obj6.Scale(1/obj6.GetMaximum())
+                  else:
+                    obj1.Scale(1/obj1.Integral(), "width")
+                    obj2.Scale(1/obj2.Integral(), "width")
+                    obj3.Scale(1/obj3.Integral(), "width")
+                    obj4.Scale(1/obj4.Integral(), "width")
+                    obj5.Scale(1/obj5.Integral(), "width")
+                    obj6.Scale(1/obj6.Integral(), "width")
+                    
+                  max = np.maximum(obj2.GetMaximum(), obj1.GetMaximum())
+                  obj1.SetMaximum(max*1.5)
+                  
+                  legMass =  ROOT.TLegend(.55,.55,.80,.9,"","brNDC")
+                  legMass.SetTextFont(42)
+                  legMass.SetTextSize(0.035)
+                  legMass.SetBorderSize(1);
+                  legMass.SetLineColor(1);
+                  legMass.SetLineStyle(1);
+                  legMass.SetLineWidth(1);
+                  legMass.SetFillColor(0);
+                  legMass.SetFillStyle(1001);
+#                  legMass.AddEntry(obj12,"Mass=2600 GeV","LP")
+#                  legMass.AddEntry(obj11,"Mass=2400 GeV","LP")
+#                  legMass.AddEntry(obj10,"Mass=2200 GeV","LP")
+#                  legMass.AddEntry(obj9,"Mass=2000 GeV","LP")
+#                  legMass.AddEntry(obj8,"Mass=1800 GeV","LP")
+#                  legMass.AddEntry(obj7,"Mass=1400 GeV","LP")
+                  legMass.AddEntry(obj1,"HSCP 1800 GeV","LP")
+                  legMass.AddEntry(obj2,"TTToHadronic","LP")
+                  legMass.AddEntry(obj3,"TTToSemiLeptonic","LP")
+                  legMass.AddEntry(obj4,"TTTo2L2N","LP")
+                  legMass.AddEntry(obj5,"QCDwPt1000","LP")
+                  legMass.AddEntry(obj6,"WJetsToLNu","LP")
+                  
+                  if (keyname2 == "CutFlow") :
+                    obj1.GetXaxis().SetBinLabel(1,"Trigger")
+                    obj1.GetXaxis().SetBinLabel(2,"Eta")
+                    obj1.GetXaxis().SetBinLabel(3,"pT")
+                    obj1.GetXaxis().SetBinLabel(4,"NumHits")
+                    obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
+                    obj1.GetXaxis().SetBinLabel(6,"ValidFract")
+                    obj1.GetXaxis().SetBinLabel(7,"NumDeDx")
+                    obj1.GetXaxis().SetBinLabel(8,"ProbQ")
+                    obj1.GetXaxis().SetBinLabel(9,"ProbXY")
+                    obj1.GetXaxis().SetBinLabel(10,"HighPurity")
+                    obj1.GetXaxis().SetBinLabel(11,"Chi2oDOF")
+                    obj1.GetXaxis().SetBinLabel(12,"EoP")
+                    obj1.GetXaxis().SetBinLabel(13,"dz")
+                    obj1.GetXaxis().SetBinLabel(14,"dxy")
+                    obj1.GetXaxis().SetBinLabel(15,"pTerrOverpT")
+                    obj1.GetXaxis().SetBinLabel(16,"TKIso")
+                    obj1.GetXaxis().SetBinLabel(17,"Ih")
+                    obj1.GetXaxis().SetBinLabel(18,"MuStat")
+                    obj1.GetXaxis().SetBinLabel(19,"PhiTOF")
+                    obj1.GetXaxis().SetBinLabel(20,"EtaTOF")
+                  
+                  if (keyname2 == "CutFlowProbQFirst") :
+                    obj1.GetXaxis().SetBinLabel(1,"Trigger")
+                    obj1.GetXaxis().SetBinLabel(2,"pT")
+                    obj1.GetXaxis().SetBinLabel(3,"ProbQ")
+                    obj1.GetXaxis().SetBinLabel(4,"Eta")
+                    obj1.GetXaxis().SetBinLabel(5,"NumHits")
+                    obj1.GetXaxis().SetBinLabel(6,"NumPixHits")
+                    obj1.GetXaxis().SetBinLabel(7,"ValidFract")
+                    obj1.GetXaxis().SetBinLabel(8,"NumDeDx")
+                    obj1.GetXaxis().SetBinLabel(9,"ProbXY")
+                    obj1.GetXaxis().SetBinLabel(10,"HighPurity")
+                    obj1.GetXaxis().SetBinLabel(11,"Chi2oDOF")
+                    obj1.GetXaxis().SetBinLabel(12,"EoP")
+                    obj1.GetXaxis().SetBinLabel(13,"dz")
+                    obj1.GetXaxis().SetBinLabel(14,"dxy")
+                    obj1.GetXaxis().SetBinLabel(15,"pTerrOverpT")
+                    obj1.GetXaxis().SetBinLabel(16,"TKIso")
+                    obj1.GetXaxis().SetBinLabel(17,"Ih")
+                    obj1.GetXaxis().SetBinLabel(18,"MuStat")
+                    obj1.GetXaxis().SetBinLabel(19,"PhiTOF")
+                    obj1.GetXaxis().SetBinLabel(20,"EtaTOF")
+                    
+                  if (keyname2 == "CutFlowProbQLast") :
+                    obj1.GetXaxis().SetBinLabel(1,"Trigger")
+                    obj1.GetXaxis().SetBinLabel(2,"Eta")
+                    obj1.GetXaxis().SetBinLabel(3,"pT")
+                    obj1.GetXaxis().SetBinLabel(4,"NumHits")
+                    obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
+                    obj1.GetXaxis().SetBinLabel(6,"ValidFract")
+                    obj1.GetXaxis().SetBinLabel(7,"NumDeDx")
+                    obj1.GetXaxis().SetBinLabel(8,"ProbXY")
+                    obj1.GetXaxis().SetBinLabel(9,"HighPurity")
+                    obj1.GetXaxis().SetBinLabel(10,"Chi2oDOF")
+                    obj1.GetXaxis().SetBinLabel(11,"EoP")
+                    obj1.GetXaxis().SetBinLabel(12,"dz")
+                    obj1.GetXaxis().SetBinLabel(13,"dxy")
+                    obj1.GetXaxis().SetBinLabel(14,"pTerrOverpT")
+                    obj1.GetXaxis().SetBinLabel(15,"TKIso")
+                    obj1.GetXaxis().SetBinLabel(16,"Ih")
+                    obj1.GetXaxis().SetBinLabel(17,"ProbQ")
+                    obj1.GetXaxis().SetBinLabel(18,"MuStat")
+                    obj1.GetXaxis().SetBinLabel(19,"PhiTOF")
+                    obj1.GetXaxis().SetBinLabel(20,"EtaTOF")
+                    
+                  obj1.Draw("COLZ L")
+                  obj2.Draw("SAME")
+                  obj3.Draw("SAME")
+                  obj4.Draw("SAME")
+                  obj5.Draw("SAME")
+                  obj6.Draw("SAME")
+#                  obj10.Draw("SAME")
+#                  obj9.Draw("SAME")
+#                  obj8.Draw("SAME")
+#                  obj7.Draw("SAME")
+                  
+
+                  
+                  legMass.Draw("SAME")
+              else :
+                  continue
+              can.SaveAs(name)
+              #can.SaveAs(name.replace(".png",".pdf"))
+              #can.SaveAs(name.replace(".png",".C"))
+              can.Close()
diff --git a/Analyzer/test/Tamas/PostProcScripts/compareHSCPandBckHighMass.py b/Analyzer/test/Tamas/PostProcScripts/compareHSCPandBckHighMass.py
new file mode 100644
index 0000000..3283295
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/compareHSCPandBckHighMass.py
@@ -0,0 +1,531 @@
+import ROOT, sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+f1 = ROOT.TFile.Open("crab_Analysis_2018_TTTo2L2Nu_wProbQ_CodeV18p1_v1.root")
+f2 = ROOT.TFile.Open("crab_Analysis_2018_TTToSemiLeptonic_wProbQ_CodeV18p1_v1.root")
+f3 = ROOT.TFile.Open("crab_Analysis_2018_TTToHadronic_wProbQ_CodeV18p1_v1.root")
+f4 = ROOT.TFile.Open("crab_Analysis_2018_QCDwPt1000_wProbQ_CodeV18p1_v1.root")
+f5 = ROOT.TFile.Open("crab_Analysis_2018_WJetsToLNu_wProbQ_CodeV18p1_v1.root")
+
+f6 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1000_CodeV17p8_v1.root")
+f7 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1400_CodeV17p8_v1.root")
+f8 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1800_CodeV17p8_v1.root")
+f9 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2000_CodeV17p8_v1.root")
+f10 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2000_CodeV17p8_v1.root")
+#f10 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2200_CodeV17p8_v1.root")
+f11 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2400_CodeV17p8_v1.root")
+f12 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2600_CodeV17p8_v1.root")
+
+fileOut = open("BetaGammaValuesMPV.txt", "a")
+outdirName = "CompareHSCPandBcg_CodeV18p1/"
+
+dirs = []
+for i in range(0, f1.GetListOfKeys().GetEntries()):
+  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
+  dirname = f1.GetListOfKeys().At(i).GetName()
+  curr_dir = f1.GetDirectory(dirname)
+# print("dirname: "+dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      # Match the plot of interest
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = f1.GetDirectory(dirname+"/"+keyname)
+#                    print("keyname: "+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          # The plot should be TCanvas
+          newname = dirname + "/" + keyname+ "/" + keyname2
+#         print("newname: "+newname)
+          obj1 = f1.Get(newname)
+          obj2 = f2.Get(newname)
+          obj3 = f3.Get(newname)
+          obj4 = f4.Get(newname)
+          obj5 = f5.Get(newname)
+          obj6 = f6.Get(newname)
+          obj7 = f7.Get(newname)
+          obj8 = f8.Get(newname)
+          obj9 = f9.Get(newname)
+          obj10 = f10.Get(newname)
+          obj11 = f11.Get(newname)
+          obj12 = f12.Get(newname)
+          if obj1.InheritsFrom("TObject"):
+              can = obj1
+              can = ROOT.TCanvas(newname)
+              # bin 3: pt>60 and I_as > 0.05
+              # bin 25: pt>65 and I_as > 0.175
+              # bin 28: pt>65 and I_as > 0.3
+              name = outdirName + keyname2 +  ".png"
+#                 print(name)
+              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+              if not (obj1.ClassName() == "TH1F"):
+                  continue
+              legMass =  ROOT.TLegend(.55,.55,.80,.9,"","brNDC")
+              legMass.SetTextFont(42)
+              legMass.SetTextSize(0.035)
+              legMass.SetBorderSize(1);
+              legMass.SetLineColor(1);
+              legMass.SetLineStyle(1);
+              legMass.SetLineWidth(1);
+              legMass.SetFillColor(0);
+              legMass.SetFillStyle(1001);
+              legMass.AddEntry(obj6,"HSCP 1000 GeV","LP")
+              legMass.AddEntry(obj7,"HSCP 1400 GeV","LP")
+              legMass.AddEntry(obj8,"HSCP 1800 GeV","LP")
+              legMass.AddEntry(obj9,"HSCP 2000 GeV","LP")
+              legMass.AddEntry(obj10,"HSCP 2200 GeV","LP")
+              legMass.AddEntry(obj11,"HSCP 2400 GeV","LP")
+              legMass.AddEntry(obj12,"HSCP 2600 GeV","LP")
+              legMass.AddEntry(obj5,"WJetsToLNu","LP")
+              legMass.AddEntry(obj4,"QCD","LP")
+              legMass.AddEntry(obj3,"TTtoHadronic","LP")
+              legMass.AddEntry(obj2,"TTtoSemiLeptonic","LP")
+              legMass.AddEntry(obj1,"TTto2L2N","LP")
+              obj1.SetMarkerColor(38)
+              obj2.SetMarkerColor(42)
+              obj3.SetMarkerColor(41)
+              obj4.SetMarkerColor(9)
+              obj5.SetMarkerColor(8)
+              obj6.SetMarkerColor(7)
+              obj7.SetMarkerColor(6)
+              obj8.SetMarkerColor(5)
+              obj9.SetMarkerColor(4)
+              obj10.SetMarkerColor(3)
+              obj11.SetMarkerColor(2)
+              obj12.SetMarkerColor(1)
+              
+              obj1.SetLineColor(38)
+              obj2.SetLineColor(42)
+              obj3.SetLineColor(41)
+              obj4.SetLineColor(9)
+              obj5.SetLineColor(8)
+              obj6.SetLineColor(7)
+              obj7.SetLineColor(6)
+              obj8.SetLineColor(5)
+              obj9.SetLineColor(4)
+              obj10.SetLineColor(3)
+              obj11.SetLineColor(2)
+              obj12.SetLineColor(1)
+            
+              obj1.SetMarkerStyle(21)
+              obj2.SetMarkerStyle(21)
+              obj3.SetMarkerStyle(21)
+              obj4.SetMarkerStyle(21)
+              obj5.SetMarkerStyle(21)
+              obj6.SetMarkerStyle(20)
+              obj7.SetMarkerStyle(20)
+              obj8.SetMarkerStyle(20)
+              obj9.SetMarkerStyle(20)
+              obj10.SetMarkerStyle(20)
+              obj11.SetMarkerStyle(20)
+              obj12.SetMarkerStyle(20)
+              obj12.SetStats(0)
+              obj1.SetStats(0)
+              max = np.maximum(obj12.GetMaximum(), obj1.GetMaximum())
+              obj12.SetMaximum(max*1.2)
+              obj1.SetMaximum(max*1.2)
+#                  obj1.SetTitle("")
+#                  obj1.GetXaxis().SetTitleSize(0.05)
+#                  obj1.GetXaxis().SetTitleOffset(1)
+#                  obj1.GetYaxis().SetTitleSize(0.05)
+#                  obj1.GetYaxis().SetTitleOffset(1)
+              if ("BS_" in keyname2 or keyname2 == "genlevelbeta") :
+                  if not (obj1.Integral()) :
+                      continue
+#                  can.SetLogy()
+                  
+                  obj1.Scale(1/obj1.Integral(), "width")
+                  obj2.Scale(1/obj2.Integral(), "width")
+                  obj3.Scale(1/obj3.Integral(), "width")
+                  obj4.Scale(1/obj4.Integral(), "width")
+                  obj5.Scale(1/obj5.Integral(), "width")
+                  obj6.Scale(1/obj6.Integral(), "width")
+                  obj7.Scale(1/obj7.Integral(), "width")
+                  obj8.Scale(1/obj8.Integral(), "width")
+                  obj9.Scale(1/obj9.Integral(), "width")
+                  obj10.Scale(1/obj10.Integral(), "width")
+                  obj11.Scale(1/obj11.Integral(), "width")
+                  obj12.Scale(1/obj12.Integral(), "width")
+                  
+                  obj12.Draw("HIST P")
+                  obj11.Draw("SAME")
+                  obj10.Draw("SAME")
+                  obj9.Draw("SAME")
+                  obj8.Draw("SAME")
+                  obj7.Draw("SAME")
+                  obj6.Draw("SAME")
+                  obj5.Draw("SAME")
+                  obj4.Draw("SAME")
+                  obj3.Draw("SAME")
+                  obj2.Draw("SAME")
+                  obj1.Draw("SAME")
+                  
+                  legMass.Draw("SAME")
+              elif (keyname2== "CutFlow") :
+                
+                obj1.GetXaxis().SetBinLabel(1,"Trigger")
+                obj1.GetXaxis().SetBinLabel(2,"Eta")
+                obj1.GetXaxis().SetBinLabel(3,"pT")
+                obj1.GetXaxis().SetBinLabel(4,"NumHits")
+                obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
+                obj1.GetXaxis().SetBinLabel(6,"ValidFract")
+                obj1.GetXaxis().SetBinLabel(7,"NumDeDx")
+                obj1.GetXaxis().SetBinLabel(8,"ProbXY")
+                obj1.GetXaxis().SetBinLabel(9,"HighPurity")
+                obj1.GetXaxis().SetBinLabel(10,"Chi2oDOF")
+                obj1.GetXaxis().SetBinLabel(11,"EoP")
+                obj1.GetXaxis().SetBinLabel(12,"dz")
+                obj1.GetXaxis().SetBinLabel(13,"dxy")
+                obj1.GetXaxis().SetBinLabel(14,"pTerrOverpT")
+                obj1.GetXaxis().SetBinLabel(15,"TKIso")
+                obj1.GetXaxis().SetBinLabel(16,"MiniIso")
+                obj1.GetXaxis().SetBinLabel(17,"MassT")
+                obj1.GetXaxis().SetBinLabel(18,"Ih")
+                obj1.GetXaxis().SetBinLabel(19,"ProbQ")
+                obj1.GetXaxis().SetBinLabel(20,"MuStat")
+                obj1.GetXaxis().SetBinLabel(21,"PhiTOF")
+                obj1.GetXaxis().SetBinLabel(22,"EtaTOF")
+                
+                obj1.Scale(1/obj1.GetMaximum())
+                obj2.Scale(1/obj2.GetMaximum())
+                obj3.Scale(1/obj3.GetMaximum())
+                obj4.Scale(1/obj4.GetMaximum())
+                obj5.Scale(1/obj5.GetMaximum())
+                obj6.Scale(1/obj6.GetMaximum())
+                obj7.Scale(1/obj7.GetMaximum())
+                obj8.Scale(1/obj8.GetMaximum())
+                obj9.Scale(1/obj9.GetMaximum())
+                obj10.Scale(1/obj10.GetMaximum())
+                obj11.Scale(1/obj11.GetMaximum())
+                obj12.Scale(1/obj12.GetMaximum())
+                
+                obj1.GetYaxis().SetRangeUser(0,1.3)
+                obj1.Draw("L")
+                obj11.Draw("SAME")
+                obj10.Draw("SAME")
+                obj9.Draw("SAME")
+                obj8.Draw("SAME")
+                obj7.Draw("SAME")
+                obj6.Draw("SAME")
+                obj5.Draw("SAME")
+                obj4.Draw("SAME")
+                obj3.Draw("SAME")
+                obj2.Draw("SAME")
+                obj12.Draw("SAME")
+                legMass.Draw("SAME")
+              elif (keyname2== "CutFlowProbQFirst") :
+                obj1.SetMarkerColor(1)
+                obj1.SetLineColor(1)
+                obj1.SetMarkerStyle(20)
+                obj1.SetStats(0)
+                obj1.Scale(1/obj1.GetMaximum())
+                obj1.GetXaxis().SetBinLabel(1,"Trigger")
+                obj1.GetXaxis().SetBinLabel(2,"Eta")
+                obj1.GetXaxis().SetBinLabel(3,"pT")
+                obj1.GetXaxis().SetBinLabel(4,"ProbQ")
+                obj1.GetXaxis().SetBinLabel(5,"NumHits")
+                obj1.GetXaxis().SetBinLabel(6,"NumPixHits")
+                obj1.GetXaxis().SetBinLabel(7,"ValidFract")
+                obj1.GetXaxis().SetBinLabel(8,"NumDeDx")
+                obj1.GetXaxis().SetBinLabel(9,"ProbXY")
+                obj1.GetXaxis().SetBinLabel(10,"HighPurity")
+                obj1.GetXaxis().SetBinLabel(11,"Chi2oDOF")
+                obj1.GetXaxis().SetBinLabel(12,"EoP")
+                obj1.GetXaxis().SetBinLabel(13,"dz")
+                obj1.GetXaxis().SetBinLabel(14,"dxy")
+                obj1.GetXaxis().SetBinLabel(15,"pTerrOverpT")
+                obj1.GetXaxis().SetBinLabel(16,"TKIso")
+                obj1.GetXaxis().SetBinLabel(17,"MiniIso")
+                obj1.GetXaxis().SetBinLabel(18,"MassT")
+                obj1.GetXaxis().SetBinLabel(19,"Ih")
+                obj1.GetXaxis().SetBinLabel(20,"MuStat")
+                obj1.GetXaxis().SetBinLabel(21,"PhiTOF")
+                obj1.GetXaxis().SetBinLabel(22,"EtaTOF")
+                
+                obj1.Scale(1/obj1.GetMaximum())
+                obj2.Scale(1/obj2.GetMaximum())
+                obj3.Scale(1/obj3.GetMaximum())
+                obj4.Scale(1/obj4.GetMaximum())
+                obj5.Scale(1/obj5.GetMaximum())
+                obj6.Scale(1/obj6.GetMaximum())
+                obj7.Scale(1/obj7.GetMaximum())
+                obj8.Scale(1/obj8.GetMaximum())
+                obj9.Scale(1/obj9.GetMaximum())
+                obj10.Scale(1/obj10.GetMaximum())
+                obj11.Scale(1/obj11.GetMaximum())
+                obj12.Scale(1/obj12.GetMaximum())
+                obj1.Draw("COLZ L")
+                obj11.Draw("SAME")
+                obj10.Draw("SAME")
+                obj9.Draw("SAME")
+                obj8.Draw("SAME")
+                obj7.Draw("SAME")
+                obj6.Draw("SAME")
+                obj5.Draw("SAME")
+                obj4.Draw("SAME")
+                obj3.Draw("SAME")
+                obj2.Draw("SAME")
+                obj12.Draw("SAME")
+                legMass.Draw("SAME")
+              else :
+                  continue
+              can.SaveAs(name)
+              if (keyname2 == "genlevelbeta") :
+                  meanValue1 = obj1.GetMean()
+                  meanValue2 = obj2.GetMean()
+                  meanValue3 = obj3.GetMean()
+                  meanValue4 = obj4.GetMean()
+                  meanValue5 = obj5.GetMean()
+                  meanValue6 = obj6.GetMean()
+                  meanValue7 = obj7.GetMean()
+                  meanValue8 = obj8.GetMean()
+                  meanValue9 = obj9.GetMean()
+                  meanValue10 = obj10.GetMean()
+                  meanValue11 = obj11.GetMean()
+                  meanValue12 = obj12.GetMean()
+                  
+#                  meanValue1 = obj1.GetBinCenter(obj1.GetMaximumBin())
+#                  meanValue2 = obj2.GetBinCenter(obj2.GetMaximumBin())
+#                  meanValue3 = obj3.GetBinCenter(obj3.GetMaximumBin())
+#                  meanValue4 = obj4.GetBinCenter(obj4.GetMaximumBin())
+#                  meanValue5 = obj5.GetBinCenter(obj5.GetMaximumBin())
+#                  meanValue6 = obj6.GetBinCenter(obj6.GetMaximumBin())
+#                  meanValue7 = obj7.GetBinCenter(obj7.GetMaximumBin())
+#                  meanValue8 = obj8.GetBinCenter(obj8.GetMaximumBin())
+#                  meanValue9 = obj9.GetBinCenter(obj9.GetMaximumBin())
+#                  meanValue10 = obj10.GetBinCenter(obj10.GetMaximumBin())
+#                  meanValue11 = obj11.GetBinCenter(obj11.GetMaximumBin())
+#                  meanValue12 = obj12.GetBinCenter(obj12.GetMaximumBin())
+                  
+                  error1 = obj1.GetStdDev()
+                  error2 = obj2.GetStdDev()
+                  error3 = obj3.GetStdDev()
+                  error4 = obj4.GetStdDev()
+                  error5 = obj5.GetStdDev()
+                  error6 = obj6.GetStdDev()
+                  error7 = obj7.GetStdDev()
+                  error8 = obj8.GetStdDev()
+                  error9 = obj9.GetStdDev()
+                  error10 = obj10.GetStdDev()
+                  error11 = obj11.GetStdDev()
+                  error12 = obj12.GetStdDev()
+                  
+                  betaGammaMPV1 = meanValue1 * (1/np.sqrt(1-meanValue1*meanValue1))
+                  betaGammaMPV2 = meanValue2 * (1/np.sqrt(1-meanValue2*meanValue2))
+                  betaGammaMPV3 = meanValue3 * (1/np.sqrt(1-meanValue3*meanValue3))
+                  betaGammaMPV4 = meanValue4 * (1/np.sqrt(1-meanValue4*meanValue4))
+                  betaGammaMPV5 = meanValue5 * (1/np.sqrt(1-meanValue5*meanValue5))
+                  betaGammaMPV6 = meanValue6 * (1/np.sqrt(1-meanValue6*meanValue6))
+                  betaGammaMPV7 = meanValue7 * (1/np.sqrt(1-meanValue7*meanValue7))
+                  betaGammaMPV8 = meanValue8 * (1/np.sqrt(1-meanValue8*meanValue8))
+                  betaGammaMPV9 = meanValue9 * (1/np.sqrt(1-meanValue9*meanValue9))
+                  betaGammaMPV10 = meanValue10 * (1/np.sqrt(1-meanValue10*meanValue10))
+                  betaGammaMPV11 = meanValue11 * (1/np.sqrt(1-meanValue11*meanValue11))
+                  betaGammaMPV12 = meanValue12 * (1/np.sqrt(1-meanValue12*meanValue12))
+                  
+                  betaGammaMPV1Up = (meanValue1+error1) * (1/np.sqrt(1-(meanValue1+error1)*(meanValue1+error1)))
+                  betaGammaMPV2Up = (meanValue2+error2) * (1/np.sqrt(1-(meanValue2+error2)*(meanValue2+error2)))
+                  betaGammaMPV3Up = (meanValue3+error3) * (1/np.sqrt(1-(meanValue3+error3)*(meanValue3+error3)))
+                  betaGammaMPV4Up = (meanValue4+error4) * (1/np.sqrt(1-(meanValue4+error4)*(meanValue4+error4)))
+                  betaGammaMPV5Up = (meanValue5+error5) * (1/np.sqrt(1-(meanValue5+error5)*(meanValue5+error5)))
+                  betaGammaMPV6Up = (meanValue6+error6) * (1/np.sqrt(1-(meanValue6+error6)*(meanValue6+error6)))
+                  betaGammaMPV7Up = (meanValue7+error7) * (1/np.sqrt(1-(meanValue7+error7)*(meanValue7+error7)))
+                  betaGammaMPV8Up = (meanValue8+error8) * (1/np.sqrt(1-(meanValue8+error8)*(meanValue8+error8)))
+                  betaGammaMPV9Up = (meanValue9+error9) * (1/np.sqrt(1-(meanValue9+error9)*(meanValue9+error9)))
+                  betaGammaMPV10Up = (meanValue10+error10) * (1/np.sqrt(1-(meanValue10+error10)*(meanValue10+error10)))
+                  betaGammaMPV11Up = (meanValue11+error11) * (1/np.sqrt(1-(meanValue11+error11)*(meanValue11+error11)))
+                  betaGammaMPV12Up = (meanValue12+error12) * (1/np.sqrt(1-(meanValue12+error12)*(meanValue12+error12)))
+                  
+#                  betaGammaErr1 = error1 * error1 / (np.sqrt((1-error1 * error1)**3))
+                  betaGammaErr1 = betaGammaMPV1Up - betaGammaMPV1
+                  betaGammaErr2 = betaGammaMPV2Up - betaGammaMPV2
+                  betaGammaErr3 = betaGammaMPV3Up - betaGammaMPV3
+                  betaGammaErr4 = betaGammaMPV4Up - betaGammaMPV4
+                  betaGammaErr5 = betaGammaMPV5Up - betaGammaMPV5
+                  betaGammaErr6 = betaGammaMPV6Up - betaGammaMPV6
+                  betaGammaErr7 = betaGammaMPV7Up - betaGammaMPV7
+                  betaGammaErr8 = betaGammaMPV8Up - betaGammaMPV8
+                  betaGammaErr9 = betaGammaMPV9Up - betaGammaMPV9
+                  betaGammaErr10 = betaGammaMPV10Up - betaGammaMPV10
+                  betaGammaErr11 = betaGammaMPV11Up - betaGammaMPV11
+                  betaGammaErr12 = betaGammaMPV12Up - betaGammaMPV12
+                  
+                  
+#                  fileOut.write("TTto2L2N\t"+str(betaGammaMPV1)+"\t"+str(betaGammaErr1)+"\n")
+#                  fileOut.write("TTtoSemiLeptonic\t"+str(betaGammaMPV2)+"\t"+str(betaGammaErr2)+"\n")
+#                  fileOut.write("TTtoHadronic\t"+str(betaGammaMPV3)+"\t"+str(betaGammaErr3)+"\n")
+#                  fileOut.write("QCD\t"+str(betaGammaMPV4)+"\t"+str(betaGammaErr4)+"\n")
+#                  fileOut.write("WJetsToLNu\t"+str(betaGammaMPV5)+"\t"+str(betaGammaErr5)+"\n")
+#                  fileOut.write("DYJetsToLL\t"+str(betaGammaMPV6)+"\t"+str(betaGammaErr6)+"\n")
+#                  fileOut.write("1400\t"+str(betaGammaMPV7)+"\t"+str(betaGammaErr7)+"\n")
+#                  fileOut.write("1800\t"+str(betaGammaMPV8)+"\t"+str(betaGammaErr8)+"\n")
+#                  fileOut.write("2000\t"+str(betaGammaMPV9)+"\t"+str(betaGammaErr9)+"\n")
+#                  fileOut.write("2200\t"+str(betaGammaMPV10)+"\t"+str(betaGammaErr10)+"\n")
+#                  fileOut.write("2400\t"+str(betaGammaMPV11)+"\t"+str(betaGammaErr11)+"\n")
+#                  fileOut.write("2600\t"+str(betaGammaMPV12)+"\t"+str(betaGammaErr12)+"\n")
+                  fileOut.close()
+              #can.SaveAs(name.replace(".png",".pdf"))
+              #can.SaveAs(name.replace(".png",".C"))
+              can.Close()
+
+#Mass = f.Get("/analyzer/BaseName/Mass")
+#Mass_wPred = f.Get("/analyzer/BaseName/Pred_Mass_CB")
+#if Mass_wPred :
+#  massBins = [0.,50.,100.,150.,200.,250.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,4000.]
+#  massBinsArray = np.array(massBins)
+#  Mass_projY_NotRebinned = Mass.ProjectionY("Mass_projY",ProjBin,ProjBin,"e")
+#  Mass_projY = ROOT.TH1F("Mass_projY" , "Mass_projY" , len(massBinsArray)-1, massBinsArray)
+#
+#  Mass_wPred_projY_NotRebinned = Mass_wPred.ProjectionY("Mass_wPred_projY",ProjBin,ProjBin,"e")
+#  Mass_wPred_projY = ROOT.TH1F("Mass_wPred_projY" , "Mass_wPred_projY" , len(massBinsArray)-1, massBinsArray)
+#
+#  print("Mass_projY_NotRebinned.Integral(): ",Mass_projY_NotRebinned.Integral())
+#  print("Mass_wPred_projY_NotRebinned.Integral(): ",Mass_wPred_projY_NotRebinned.Integral())
+#
+#  KSvalue = Mass_projY_NotRebinned.KolmogorovTest(Mass_wPred_projY_NotRebinned,"XD")
+#  print("KS-test: "+str(KSvalue))
+#
+#  for i, bin in enumerate(massBinsArray):
+#    Mass_projYCont = Mass_projY_NotRebinned.GetBinContent(i+1)
+#    Mass_projY.SetBinContent(i+1,Mass_projYCont)
+#    Mass_projYCont_err = Mass_projY_NotRebinned.GetBinError(i+1)
+#    #Mass_projYCont_err = Mass.GetBinErrorLow(ProjBin,i+1)
+#    Mass_projY.SetBinError(i+1,Mass_projYCont_err)
+#
+#    Mass_wPred_projYCont = Mass_wPred_projY_NotRebinned.GetBinContent(i+1)
+#    Mass_wPred_projY.SetBinContent(i+1,Mass_wPred_projYCont)
+#    Mass_wPred_projYCont_err = Mass_wPred_projY_NotRebinned.GetBinError(i+1)
+#    #Mass_wPred_projYCont_err = Mass_wPred.GetBinErrorLow(ProjBin,i+1)
+#    Mass_wPred_projY.SetBinError(i+1,Mass_wPred_projYCont_err)
+#
+#  print("----------------------------------------------")
+#  KSvalue2 = Mass_projY.KolmogorovTest(Mass_wPred_projY,"XD")
+#  print("KS-test after rebinning: "+str(KSvalue2))
+#
+#  Mass_projY.SetMarkerColor(1)
+#  Mass_projY.SetLineColor(1)
+#  Mass_projY.SetMarkerStyle(20)
+#  Mass_projY.SetTitle("")
+#  Mass_projY.GetXaxis().SetTitleSize(0.05)
+#  Mass_projY.GetXaxis().SetTitleOffset(1)
+#  Mass_projY.GetXaxis().SetTitle("Mass [GeV]")
+#  Mass_projY.GetYaxis().SetTitle("Tracks/bin")
+#  Mass_projY.GetYaxis().SetTitleSize(0.05)
+#  Mass_projY.GetYaxis().SetTitleOffset(1)
+#  Mass_projY.SetStats(0)
+#  Mass_projY.GetYaxis().SetRangeUser(0.1,10000)
+#
+#
+#  Mass_wPred_projY.SetMarkerColor(2)
+#  Mass_wPred_projY.SetLineColor(2)
+#  Mass_wPred_projY.SetMarkerStyle(20)
+#  Mass_wPred_projY.SetTitle("")
+#  Mass_wPred_projY.GetXaxis().SetTitleSize(0.05)
+#  Mass_wPred_projY.GetXaxis().SetTitleOffset(1)
+#  Mass_wPred_projY.GetXaxis().SetTitle("Mass [GeV]")
+#  Mass_wPred_projY.GetYaxis().SetTitle("Tracks/bin")
+#  Mass_wPred_projY.GetYaxis().SetTitleSize(0.05)
+#  Mass_wPred_projY.GetYaxis().SetTitleOffset(1)
+#  Mass_wPred_projY.SetStats(0)
+#
+#
+#  print("Mass_projY.Integral(): ",Mass_projY.Integral())
+#  print("Mass_wPred_projY.Integral(): ",Mass_wPred_projY.Integral())
+#
+#  legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
+#  legMass.SetTextFont(42)
+#  legMass.SetTextSize(0.035)
+#  legMass.SetBorderSize(1);
+#  legMass.SetLineColor(1);
+#  legMass.SetLineStyle(1);
+#  legMass.SetLineWidth(1);
+#  legMass.SetFillColor(0);
+#  legMass.SetFillStyle(1001);
+#  legMass.AddEntry(Mass_wPred_projY,"Prediction","LP")
+#  legMass.AddEntry(Mass_projY,"Observation","LP")
+#
+#  tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+#  #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+#  tex2.SetNDC();
+#  tex2.SetTextFont(61);
+#  tex2.SetTextSize(0.0675);
+#  tex2.SetLineWidth(2);
+#
+#  #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+#  #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+#  tex3 = ROOT.TLatex(0.24,0.94,"Internal");
+#  tex3.SetNDC();
+#  tex3.SetTextFont(52);
+#  tex3.SetTextSize(0.0485);
+#  tex3.SetLineWidth(2);
+#
+#  tex4 = ROOT.TLatex(0.7,0.93,"K-S test v2: "+str(round(KSvalue2,4)));
+#  tex4.SetNDC();
+#  tex4.SetTextFont(52);
+#  tex4.SetTextSize(0.0485);
+#  tex4.SetLineWidth(2);
+#
+#
+#
+#
+#
+#  cMass_projY = ROOT.TCanvas('cMass_projY', 'cMass_projY',800,800)
+#  cMass_projY.SetLogy()
+#
+#  rp = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY)
+#
+#  rp.SetH1DrawOpt("P");
+#  rp.SetH2DrawOpt("P");
+#
+#  rp.Draw()
+#  #rp.GetUpperPad().BuildLegend()
+#  rp.SetLeftMargin(0.13);
+#  rp.SetRightMargin(0.05);
+#  rp.SetUpTopMargin(0.1);
+#  rp.SetLowTopMargin(0.02);
+#  rp.SetLowBottomMargin(0.35);
+#
+#  rp.GetLowerRefGraph().SetMinimum(0.01);
+#  rp.GetLowerRefGraph().SetMaximum(2);
+#  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+#  #rp.GetLowerRefGraph().SetLineColor(0) #0
+#  rp.GetLowerRefGraph().SetMarkerStyle(20)
+#  rp.GetLowerRefGraph().SetMarkerSize(1);
+#  rp.GetLowYaxis().SetNdivisions(505);
+#  rp.GetLowerRefYaxis().SetTitle("Ratio");
+#  rp.GetLowerRefYaxis().SetTitleSize(0.05);
+#  rp.GetLowerRefYaxis().SetTitleOffset(1);
+#  rp.GetLowerRefYaxis().SetLabelSize(0.035);
+#
+#
+#  rp.GetLowerRefXaxis().SetTitleSize(0.05);
+#  rp.GetLowerRefXaxis().SetTitleOffset(0.8);
+#  rp.GetLowerRefXaxis().SetLabelSize(0.035);
+#  cMass_projY.Modified()
+#  cMass_projY.Update()
+#  #Mass_projY.Draw()
+#  #Mass_wPred_projY.Draw("SAME")
+#  #rp.Draw("X")
+#
+#  rp.GetUpperPad().cd();
+#  legMass.Draw("SAME")
+#  tex2.Draw("SAME")
+#  tex3.Draw("SAME")
+#  tex4.Draw("SAME")
+#
+#  name = newFileDir + "/cMass_new.png"
+#  cMass_projY.SaveAs(name)
+#
+#os.system("cp forWebpage/* "+newFileDir+"/.")
+#print("scp -r "+ newFileDir + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV8/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/compareStackedBcg.py b/Analyzer/test/Tamas/PostProcScripts/compareStackedBcg.py
new file mode 100644
index 0000000..11a1bbd
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/compareStackedBcg.py
@@ -0,0 +1,496 @@
+import ROOT, sys, os, time, re, numpy
+import numpy as np
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion BinNumber")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+BinNumber = sys.argv[2] if (len(sys.argv)==1) else 3
+bin = int(BinNumber)
+# bin 3: pt>60 and I_as > 0.05
+# bin 25: pt>65 and I_as > 0.175
+# bin 28: pt>65 and I_as > 0.3
+
+blind = True
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_AllTTbar_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_AllWJets_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_AllQCD_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_AllZToMuMu_CodeV"+codeVersion+"_v1.root",
+]
+
+SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_RunPhase1_CodeV"+codeVersion+"_v1.root")
+#SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_CodeV"+codeVersion+"_v1.root")
+
+SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root")
+SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root")
+#SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root")
+#SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root")
+
+bckArray = []
+for sample in BackgroundSamples:
+  bckArray.append(ROOT.TFile.Open(sample))
+
+name = "StackedComparrison_CodeV"+codeVersion +"_Bin" + str(bin)+"/A.png"
+print(os.path.dirname(name))
+if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+
+dirs = []
+for i in range(0, bckArray[0].GetListOfKeys().GetEntries()):
+  dirname = bckArray[0].GetListOfKeys().At(i).GetName()
+  curr_dir = bckArray[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = bckArray[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = bckArray[0].Get(newname)
+          if not (obj) : continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if not obj.InheritsFrom("TObject"): continue
+          if any(substring in keyname2 for substring in ["_regionA_", "_regionB_", "_regionC_", "_regionD_", "VR1_Mass",  "VR2_Mass", "VR3_Mass", "SR1_Mass",  "SR2_Mass", "SR3_Mass"]) : continue
+          
+          if not ("MiniRelIsoAll" in keyname2) : continue
+
+          if (obj.GetEntries() == 0 ) : continue
+          stackedSummedBackground = ROOT.THStack("stackedSummedBackground","")
+          stackedNormSummedBackground = ROOT.THStack("stackedNormSummedBackground","")
+          
+          SingleMuonHisto = SingleMuon.Get(newname)
+          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
+          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
+          
+          if (obj.ClassName() == "TH2F") :
+            xAxisTitle = SingleMuon.Get(newname).GetYaxis().GetTitle()
+            SingleMuonHisto = SingleMuon.Get(newname).ProjectionY(str(keyname2)+"Data_ProjY",bin,bin,"e")
+            SingleMuonHisto.GetXaxis().SetTitle(xAxisTitle)
+            SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname).ProjectionY(str(keyname2)+"Signal1_ProjY",bin,bin,"e")
+            SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname).ProjectionY(str(keyname2)+"Signal2_ProjY",bin,bin,"e")
+          
+          SingleMuonHisto.SetMarkerStyle(20)
+          SingleMuonHisto.SetMarkerColor(1)
+          SingleMuonHisto.SetLineColor(1)
+          
+          SelectedSignalSamples1Histo.SetMarkerColor(6)
+          SelectedSignalSamples1Histo.SetLineColor(6)
+          SelectedSignalSamples1Histo.SetMarkerStyle(22)
+          
+          SelectedSignalSamples2Histo.SetMarkerColor(7)
+          SelectedSignalSamples2Histo.SetLineColor(7)
+          SelectedSignalSamples2Histo.SetMarkerStyle(22)
+          
+          legend =  ROOT.TLegend(.5,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+#          if (keyname2.find("Per")==-1) :
+#            axisXTitle = keyname2[keyname2.find("_")+1:]
+#            axisYTitle = "Tracks/bin"
+#          else :
+#            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Per")]
+#            axisYTitle = keyname2[keyname2.find("Per")+3:]
+
+          if ((obj.ClassName() == "TH1F") or (obj.ClassName() == "TH2F" and (("PostS" in keyname2) or ("Mass" in keyname2)) and not "Vs" in keyname2) or ("K_and_C_Kin" in keyname2)) :
+            # array to contain a specific (keyname2) histogram for all samples
+#            print(keyname2)
+            histoArray = []
+            nEventsPostTrigArray = []
+            for index,fileIn in enumerate(bckArray):
+              if (obj.ClassName() == "TH1F" or obj.ClassName() == "TH1D") :
+                histo = fileIn.Get(newname)
+                if not histo : continue
+                xAxisTitle = histo.GetXaxis().GetTitle()
+                yAxisTitle = histo.GetYaxis().GetTitle()
+                if (yAxisTitle == "") : yAxisTitle = "Tracks / bin"
+                if ("Ias" in keyname2) : xAxisTitle = "G_{i}"
+                if ("Pt" in keyname2) and not ("PtErr" in keyname2) : xAxisTitle = "p_{T} [GeV]"
+                if ("Chi2oNdof" in keyname2) : xAxisTitle = "#chi^{2} / N_{dof}"
+                if ("Dxy" in keyname2) : xAxisTitle = "d_{xy} [cm]"
+              if (obj.ClassName() == "TH2F") :
+                histo = obj.ProjectionY(str(newname)+"ProjY"+str(index),bin,bin,"e")
+                if not histo : continue
+                xAxisTitle = histo.GetYaxis().GetTitle()
+                yAxisTitle = histo.GetZaxis().GetTitle()
+              histo.GetXaxis().SetTitle(xAxisTitle)
+              histoArray.append(histo)
+              stackedSummedBackground.Add(histo)
+              if ((index==2)) :
+                histo.SetLineColor(2)
+                histo.SetFillColor(2)
+                histo.SetMarkerColor(2)
+                legend.AddEntry(histo,"mu-QCD p_{T}={50,inf}","LP")
+              elif ((index==1)) :
+                histo.SetLineColor(3)
+                histo.SetFillColor(3)
+                histo.SetMarkerColor(4)
+                legend.AddEntry(histo,"WJets","LP")
+              elif ((index==0)) :
+                histo.SetLineColor(4)
+                histo.SetFillColor(4)
+                histo.SetMarkerColor(4)
+                legend.AddEntry(histo,"TTBar","LP")
+              elif ((index==3)) :
+                histo.SetLineColor(28)
+                histo.SetFillColor(28)
+                histo.SetMarkerColor(28)
+                legend.AddEntry(histo,"ZToMuMu","LP")
+          else :
+            continue
+
+          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
+          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+          #  convert stacks to (summed) histos
+          stackedSummedBackground.Draw()
+          OFbin = stackedSummedBackground.GetStack().Last().GetNbinsX()+1
+          if any(substring in keyname2 for substring in ["Ias", "ProbQ", "Beta", "CutFlow", "Qual", "Eta", "MiniTkIso", "closestPfJet"]): #"MiniRelIsoAll"
+            OFbin = stackedSummedBackground.GetStack().Last().GetNbinsX()
+          UFbin = 1
+          if any(substring in keyname2 for substring in ["Dxy", "Dz"]):
+            UFbin = 0
+          stackedSummedBackground.GetXaxis().SetRange(UFbin,OFbin)
+#          stackedSummedBackground.GetXaxis().SetTitle(xAxisTitle)
+          stackedSummedBackground.GetYaxis().SetTitle(yAxisTitle)
+          stackedSummedBackground.GetXaxis().SetTitle(xAxisTitle)
+          stackedSummedBackgroundTmp = stackedSummedBackground.GetStack().Last()
+          
+          for hist in stackedSummedBackground.GetStack():
+            hist.GetXaxis().SetRange(UFbin,OFbin)
+          
+          SelectedSignalSamples1Histo.GetXaxis().SetRange(UFbin,OFbin)
+          SelectedSignalSamples2Histo.GetXaxis().SetRange(UFbin,OFbin)
+          SingleMuonHisto.GetXaxis().SetRange(UFbin,OFbin)
+#          stackedSummedBackgroundTmp
+          for index,fileIn in enumerate(bckArray):
+            normHisto = fileIn.Get(newname)
+            if not normHisto : continue
+            max = stackedSummedBackgroundTmp.GetMaximum()
+            if (max==0) : continue
+            normHisto.Scale(1/max)
+            stackedNormSummedBackground.Add(normHisto)
+          stackedNormSummedBackground.Draw()
+          
+          if (keyname2== "EventCutFlow") :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            if (blind) :
+              SingleMuonHisto.SetBinContent(18,0)
+              SingleMuonHisto.SetBinContent(19,0)
+              SingleMuonHisto.SetBinContent(20,0)
+            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+            obj.SetStats(0)
+            ROOT.gStyle.SetPaintTextFormat(".2g");
+            obj.Draw("HISTOTEXT00")
+            tex2.Draw("SAME")
+            tex3.Draw("SAME")
+            tex4.Draw("SAME")
+            tex5.Draw("SAME")
+            overFlowText.Draw("SAME")
+            overFlowLine.DrawLine(overFlowLocX,stackedSummedBackgroundTmp.GetMinimum(),overFlowLocX,max*3)
+          elif (keyname2== "CutFlow") :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            if (blind) :
+              SingleMuonHisto.SetBinContent(18,-1)
+              SingleMuonHisto.SetBinContent(19,-1)
+              SingleMuonHisto.SetBinContent(20,-1)
+          elif (keyname2== "ProbQ") :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+#            if (blind) :
+#              SingleMuonHisto.SetBinContent(18,-1)
+#              SingleMuonHisto.SetBinContent(19,-1)
+#              SingleMuonHisto.SetBinContent(20,-1)
+#              SingleMuonHisto.SetBinContent(21,-1)
+            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+          elif (keyname2== "CutFlowReverse") :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+          elif (keyname2 == "ErrorHisto") :
+            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+            stackedNormSummedBackground.SetMaximum(1.4)
+          elif ("pfType" in keyname2) :
+            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+          legend.AddEntry(SingleMuonHisto,"SingleMuon 2017-2018","LP")
+#          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018C","LP")
+          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
+          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPstau M=557 GeV", "LP")
+#          legend.AddEntry(METHisto,"MET-EraC","LP")
+          
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,""); # for square plots
+#          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex4 = ROOT.TLatex()
+
+          if ("Calibration" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"Calibration selection")
+          elif ("BefPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"Before preselection")
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
+          elif ("PostPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After preselection")
+          elif ("PostS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After selection")
+            
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.045);
+          tex4.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
+          
+          overFlowText = ROOT.TLatex(0.836,0.15,"OF");
+#          overFlowText.SetTextAngle(-30)
+          overFlowText.SetNDC();
+          overFlowText.SetTextFont(52);
+          overFlowText.SetTextSize(0.01);
+          overFlowText.SetLineWidth(2);
+          
+          overFlowLine = ROOT.TLine();
+          overFlowLine.SetLineWidth(2);
+          overFlowLine.SetLineStyle(ROOT.kDashed);
+          
+          overFlowLine2 = ROOT.TLine();
+          overFlowLine2.SetLineWidth(2);
+          overFlowLine2.SetLineStyle(ROOT.kDashed);
+          
+          binWidth = histo.GetXaxis().GetBinWidth(1)
+          firstBinLocXCent = histo.GetXaxis().GetBinCenter(1)
+          overFlowLocXCent = histo.GetXaxis().GetBinCenter(histo.GetNbinsX()+ 1)
+          overFlowLocX = (overFlowLocXCent - (binWidth)/2)
+
+          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+            stackedNormSummedBackground.Draw("HISTO")
+            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
+            stackedNormSummedBackground.SetMaximum(1.3)
+          else :
+            stackedSummedBackground.Draw("HISTO")
+            stackedSummedBackground.GetXaxis().SetTitleOffset(1.1)
+            stackedSummedBackground.GetXaxis().SetTitle(xAxisTitle)
+            stackedSummedBackground.SetMaximum(max*1.4)
+            stackedSummedBackground.SetMinimum(0.0)
+          if not ("Mass" in keyname2 or "Ias" in keyname2 or "SR2PASS" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+          if ("SR2FAIL" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+          if ("CR" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+          if ("K_and_C_Kin_Mass" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+          SelectedSignalSamples1Histo.Draw("SAME")
+          SelectedSignalSamples2Histo.Draw("SAME")
+           
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+          overFlowText.Draw("SAME")
+          overFlowLine.DrawLine(overFlowLocX,stackedSummedBackgroundTmp.GetMinimum(),overFlowLocX,max*1.4)
+          cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/"+keyname2+".png")
+          
+#---------------------------------------------------------------------------------------------
+          # now let's do everything again but on a log Y scale
+          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
+          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
+          cstackedSummedBackground.SetLogy()
+          
+          stackedSummedBackground.SetMinimum(0.0001)
+            
+          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+            stackedNormSummedBackground.Draw("HISTO")
+            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
+            stackedNormSummedBackground.SetMaximum(200)
+            stackedNormSummedBackground.SetMinimum(0.0000001)
+          else :
+            stackedSummedBackground.Draw("HISTO")
+#            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedSummedBackground.GetXaxis().SetTitleOffset(1.1)
+            stackedSummedBackground.GetXaxis().SetTitle(xAxisTitle)
+            stackedSummedBackground.SetMaximum(max*10000)
+          if not ("Mass" in keyname2 or "Ias" in keyname2 or "SR2PASS" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+          if ("CR" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+          if ("K_and_C_Kin_Mass" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+          if ("SR2FAIL" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+          SelectedSignalSamples1Histo.Draw("SAME")
+          SelectedSignalSamples2Histo.Draw("SAME")
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+          overFlowText.Draw("SAME")
+          overFlowLine.DrawLine(overFlowLocX,0.00001,overFlowLocX,max*40000)
+           # max was max*40000 earlier, or stackedSummedBackground.GetMaximum()
+          
+          cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/"+keyname2+"_log.png")
+          
+          
+#---------------------------------------------------------------------------------------------
+          # now let's do everything again but on a log Y scale normalized to the area
+          cstackedSummedBackgroundNormString = 'cstackedSummedBackgroundNorm'+str(j)
+          cstackedSummedBackgroundNorm = ROOT.TCanvas(cstackedSummedBackgroundNormString, cstackedSummedBackgroundNormString, 800,800)
+          cstackedSummedBackgroundNorm.SetLogy(0)
+
+          normFactToArea = 0 #
+          normFactToArea2 = 0
+          for hist in stackedSummedBackground.GetStack():
+            normFactToArea += hist.Integral(1,hist.GetNbinsX()+1)
+            
+          if (normFactToArea == 0) :
+            print("No data")
+            normFactToArea = 1
+            
+          for hist in stackedSummedBackground.GetStack():
+            normFactToArea2 += hist.Integral(1,hist.GetNbinsX()+1)
+            
+          stackedSummedBackgroundNormToArea = ROOT.THStack("stackedSummedBackgroundNormToArea","")
+          for hist in stackedSummedBackground.GetStack():
+            hist.GetXaxis().SetRange(UFbin,OFbin)
+            normHistoToArea = hist.Clone()
+            normHistoToArea.Scale(1/normFactToArea)
+            stackedSummedBackgroundNormToArea.Add(normHistoToArea)
+            
+          if (SingleMuonHisto.Integral() > 0) :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.Integral(1,SingleMuonHisto.GetNbinsX()+1))
+          if (SelectedSignalSamples1Histo.Integral() > 0) :
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.Integral(1,SelectedSignalSamples1Histo.GetNbinsX()+1))
+          if (SelectedSignalSamples2Histo.Integral() > 0) :
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.Integral(1,SelectedSignalSamples2Histo.GetNbinsX()+1))
+
+          
+          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
+            stackedSummedBackground.SetMinimum(0.0001)
+          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+            stackedSummedBackgroundNormToArea.Draw("HISTO")
+            stackedSummedBackgroundNormToArea.GetXaxis().SetTitleSize(0.05)
+            stackedSummedBackgroundNormToArea.GetYaxis().SetRangeUser(0,1.5)
+            stackedSummedBackgroundNormToArea.SetMaximum(1)
+            stackedSummedBackgroundNormToArea.SetMinimum(0.00000000001)
+          else :
+            stackedSummedBackgroundNormToArea.Draw("HISTO")
+            stackedSummedBackgroundNormToArea.GetYaxis().SetTitle("Normalized "+stackedSummedBackground.GetYaxis().GetTitle())
+            stackedSummedBackgroundNormToArea.GetXaxis().SetTitleOffset(1.1)
+            stackedSummedBackgroundNormToArea.GetXaxis().SetRange(UFbin,OFbin)
+            stackedSummedBackgroundNormToArea.GetXaxis().SetTitle(xAxisTitle)
+            max1 = np.maximum(stackedSummedBackgroundNormToArea.GetMaximum(),SelectedSignalSamples1Histo.GetMaximum())
+            max2 = np.maximum(SelectedSignalSamples1Histo.GetMaximum(),SingleMuonHisto.GetMaximum())
+            max = np.maximum(max1,max2)
+            stackedSummedBackgroundNormToArea.SetMaximum(max*1.2)
+            stackedSummedBackgroundNormToArea.SetMinimum(0.00000000001)
+          SelectedSignalSamples1Histo.Draw("SAME")
+          SelectedSignalSamples2Histo.Draw("SAME")
+          if not ("Mass" in keyname2 or "Ias" in keyname2 or "SR2PASS" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+            SingleMuonHisto.SetMarkerStyle(24)
+          if ("K_and_C_Kin_Mass" in keyname2 or "SR2FAIL" in keyname2 or "CR" in keyname2) :
+            SingleMuonHisto.Draw("SAMEP")
+            SingleMuonHisto.SetMarkerStyle(24)
+
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+          overFlowText.Draw("SAME")
+          overFlowLine.DrawLine(overFlowLocX,stackedSummedBackgroundNormToArea.GetMinimum(),overFlowLocX,max*1.2)
+          cstackedSummedBackgroundNorm.SaveAs("StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/"+keyname2+"_Norm.png")
+
+#################################### same again but on log scale ####################################
+          
+          cstackedSummedBackgroundLogNormString = 'cstackedSummedBackgroundLogNorm'+str(j)
+          cstackedSummedBackgroundLogNorm = ROOT.TCanvas(cstackedSummedBackgroundLogNormString, cstackedSummedBackgroundLogNormString, 800,800)
+          cstackedSummedBackgroundLogNorm.SetLogy(1)
+#          stackedSummedBackgroundNormToArea.SetMaximum(1000)
+
+          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
+            stackedSummedBackground.SetMinimum(0.0001)
+          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+            stackedSummedBackgroundNormToArea.Draw("HISTO")
+            stackedSummedBackgroundNormToArea.GetXaxis().SetTitleSize(0.05)
+            stackedSummedBackgroundNormToArea.GetYaxis().SetRangeUser(0,1.5)
+            stackedSummedBackgroundNormToArea.SetMaximum(1)
+            stackedSummedBackgroundNormToArea.SetMinimum(0.00000000001)
+          else :
+            stackedSummedBackgroundNormToArea.Draw("HISTO")
+#            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedSummedBackgroundNormToArea.GetYaxis().SetTitle("Normalized "+stackedSummedBackground.GetYaxis().GetTitle())
+            stackedSummedBackgroundNormToArea.GetXaxis().SetTitleOffset(1.1)
+            stackedSummedBackgroundNormToArea.GetXaxis().SetRange(UFbin,OFbin)
+            stackedSummedBackgroundNormToArea.GetXaxis().SetTitle(xAxisTitle)
+            stackedSummedBackgroundNormToArea.SetMaximum(max*10000)
+            stackedSummedBackgroundNormToArea.SetMinimum(0.00000000001)
+          SelectedSignalSamples1Histo.Draw("SAME")
+          SelectedSignalSamples2Histo.Draw("SAME")
+          if not any(substring in keyname2 for substring in ["Mass", "Ias", "SR2PASS"]):
+            SingleMuonHisto.Draw("SAMEP")
+            SingleMuonHisto.SetMarkerStyle(24)
+          if any(substring in keyname2 for substring in ["K_and_C_Kin_Mass", "SR2FAIL", "CR"]):
+            SingleMuonHisto.Draw("SAMEP")
+            SingleMuonHisto.SetMarkerStyle(24)
+
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+          overFlowText.Draw("SAME")
+          
+          overFlowLine2.DrawLine(overFlowLocX,stackedSummedBackgroundNormToArea.GetMinimum(),overFlowLocX,max*40000)
+          cstackedSummedBackgroundLogNorm.SaveAs("StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/"+keyname2+"_LogNorm.png")
+
+os.system("cp forWebpage/* StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/.")
+os.system("cp forWebpage/.htaccess StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/.")
+print("scp -r StackedComparrison_CodeV"+ codeVersion+"_Bin"+str(bin) + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/compareWithArguementList.py b/Analyzer/test/Tamas/PostProcScripts/compareWithArguementList.py
new file mode 100644
index 0000000..9b5c94b
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/compareWithArguementList.py
@@ -0,0 +1,484 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python3 %prog sample.txt")
+(opt,args) = parser.parse_args()
+
+sampleInFile = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+SamplesArray = []
+
+bin = 3
+
+codeVersion = sampleInFile[sampleInFile.find("Code")+5:sampleInFile.find("Code")+9]
+
+with open(sampleInFile, "r") as a_file:
+  for line in a_file:
+    stripped_line = line.strip()
+    SamplesArray.append(stripped_line)
+
+fileInArray = []
+for sample in SamplesArray:
+  fileInArray.append(ROOT.TFile.Open(sample))
+  
+dirs = []
+
+for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
+  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
+  curr_dir = fileInArray[0].GetDirectory(dirname)
+
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileInArray[0].Get(newname)
+          obj.SetMarkerStyle(20)
+          
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
+          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex4 = ROOT.TLatex()
+          if ("Calibration" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"Calibration selection")
+          elif ("BefPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"Before preselection")
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
+          elif ("PostPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After preselection")
+          elif ("PostS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After selection")
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.045);
+          tex4.SetLineWidth(2);
+                
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+          overFlowText = ROOT.TLatex(0.836,0.15,"OF");
+#          overFlowText.SetTextAngle(-30)
+          overFlowText.SetNDC();
+          overFlowText.SetTextFont(52);
+          overFlowText.SetTextSize(0.01);
+          overFlowText.SetLineWidth(2);
+          
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if ("Total" in keyname2 or "IntLumi" in keyname2 or "XSection" in keyname2 or "__" in keyname2 or "PostS_VR" in keyname2) :
+            continue
+          if any(substring in keyname2 for substring in ["_regionA_", "_regionB_", "_regionC_", "_regionD_", "VR1_Mass",  "VR2_Mass", "VR3_Mass", "SR1_Mass",  "SR2_Mass", "SR3_Mass"]) : continue
+          if obj.InheritsFrom("TObject"):
+              if not os.path.exists(os.path.dirname("Compare"+sampleInFile[:-4]+"/a.png")):
+                print("Create dir")
+                os.makedirs(os.path.dirname("Compare"+sampleInFile[:-4]+"/"))
+#              print(keyname2)
+              # skip everything else but
+#              if not ("RelDiff" in keyname2) : continue
+#              if not ("MuonType" in keyname2) : continue
+
+              if (obj.GetEntries() == 0 ) : continue
+
+              OFbin = 0
+              if (any(substring in keyname2 for substring in ["Ias", "ProbQ", "Beta", "CutFlow", "Qual", "Eta", "Type"])):
+                OFbin = obj.GetNbinsX()
+              else :
+                OFbin = obj.GetNbinsX()+1
+                
+#              if (any(substring in keyname2 for substring in ["BetaGamma"])):
+#                OFbin = obj.GetNbinsX()+1
+
+              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
+                obj.SetMarkerStyle(20)
+                obj.GetXaxis().SetRange(bin,bin)
+                obj.Project3D("ZY").Draw("COLZ")
+              if (obj.ClassName() == "TH2F" and  (("Trigger" in keyname2) and ( "Vs" in keyname2) or "VsBeta" in keyname2)) :
+                canvasString = 'canvas1'+str(j)
+                canvas = ROOT.TCanvas(canvasString, canvasString, 800,800)
+                legendStartX = 0.0
+                legendEntryForZero = SamplesArray[0][19:SamplesArray[0].find("Code")]
+                legendEntryForZero = legendEntryForZero.replace("Pythia8_TuneCP2_","")
+                legendEntryForZero = legendEntryForZero.replace("_v3","")
+                legendEntryForZero = legendEntryForZero.replace("_v4","")
+                if ((len(legendEntryForZero)) < 25) :
+                  legendStartX = 0.6
+                if ((len(legendEntryForZero)) >= 25) :
+                  legendStartX = 0.5
+                if ((len(legendEntryForZero)) >= 40) :
+                  legendStartX = 0.3
+                if ((len(legendEntryForZero)) >= 55) :
+                  legendStartX = 0.2
+                legend = ROOT.TLegend(legendStartX,.65,.75,.89,"","brNDC")
+                legend.SetTextFont(42)
+                legend.SetTextSize(0.017)
+                legend.SetBorderSize(1);
+                legend.SetBorderSize(0);
+                legend.SetLineColor(1);
+                legend.SetLineStyle(1);
+                legend.SetLineWidth(1);
+                legend.SetFillColor(0);
+                legend.SetFillStyle(1001);
+
+                
+                histoArrayProfY = []
+                k = 0
+                for fileIn in fileInArray:
+                  k = k + 1
+                  projXName = keyname2 + str(k)
+                  if (fileIn.Get(newname)) : histoArrayProfY.append(fileIn.Get(newname).ProfileY().ProjectionX(projXName))
+                indexNew = -1
+                for index in range(0, len(histoArrayProfY)):
+                  histoArrayProfY[index].SetStats(0)
+                  histoArrayProfY[index].SetMarkerStyle(20)
+                  legendEntry = SamplesArray[index][19:SamplesArray[index].find("Code")-1]
+                  legendEntry = legendEntry.replace("Pythia8_TuneCP2_","")
+                  legendEntry = legendEntry.replace("_v3","")
+                  legendEntry = legendEntry.replace("_v4","")
+                  legend.AddEntry(histoArrayProfY[index],legendEntry,"LP")
+                  if (index>-1):
+                    indexNew = index+2
+                  if (indexNew==10) :
+                    indexNew = 40
+                  elif (indexNew==11) :
+                    indexNew = 46
+                  elif (indexNew==12) :
+                    indexNew = 41
+                  elif (indexNew==13) :
+                    indexNew = 30
+                  elif (indexNew==14) :
+                    indexNew = 42
+                  histoArrayProfY[index].SetLineColor(indexNew)
+                  histoArrayProfY[index].SetMarkerColor(indexNew)
+#                  histoArray[index].SetFillColor(indexNew)
+                  histoArrayProfY[index].SetTitle("")
+                  histoArrayProfY[index].GetYaxis().SetTitle("Efficiency")
+                  histoArrayProfY[index].SetMaximum(1.6)
+                  histoArrayProfY[index].DrawClone("SAME")
+                legend.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                canvas.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_profileY.png")
+
+              # Now do the 1D histos
+              if (obj.ClassName() == "TH1F" or obj.ClassName() == "TProfile"): # and "BS_" in keyname2):
+                canvasString = 'canvas'+str(j)
+                canvas = ROOT.TCanvas(canvasString, canvasString, 800,800)
+                                #TADA
+                legendStartX = 0.0
+                legendEntryForZero = SamplesArray[0][19:SamplesArray[0].find("Code")]
+                legendEntryForZero = legendEntryForZero.replace("Pythia8_TuneCP2_","")
+                legendEntryForZero = legendEntryForZero.replace("_v3","")
+                legendEntryForZero = legendEntryForZero.replace("_v4","")
+#                print((len(legendEntryForZero)))
+                if ((len(legendEntryForZero)) < 25) :
+                  legendStartX = 0.6
+                if ((len(legendEntryForZero)) >= 25) :
+                  legendStartX = 0.5
+                if ((len(legendEntryForZero)) >= 40) :
+                  legendStartX = 0.3
+                if ((len(legendEntryForZero)) >= 55) :
+                  legendStartX = 0.2
+                legend =  ROOT.TLegend(legendStartX,.65,.85,.89,"","brNDC")
+                legend.SetTextFont(42)
+                legend.SetTextSize(0.017)
+                legend.SetBorderSize(1);
+                legend.SetBorderSize(0);
+                legend.SetLineColor(1);
+                legend.SetLineStyle(1);
+                legend.SetLineWidth(1);
+                legend.SetFillColor(0);
+#                legend.SetFillStyle(1001);
+                legend.SetFillStyle(0);
+                
+                histoArray = []
+                for fileIn in fileInArray:
+                  if (fileIn.Get(newname)) : histoArray.append(fileIn.Get(newname))
+                for index in range(0, len(histoArray)):
+                  histoArray[index].SetStats(0)
+                  histoArray[index].SetMarkerStyle(20)
+                  histoArray[index].GetXaxis().SetRange(1,OFbin)
+                  legendEntry = SamplesArray[index][19:SamplesArray[index].find("Code")-1]
+                  legendEntry = legendEntry.replace("Pythia8_TuneCP2_","")
+                  legendEntry = legendEntry.replace("_v3","")
+                  legendEntry = legendEntry.replace("_v4","")
+                  legend.AddEntry(histoArray[index],legendEntry,"LP")
+                  indexNew = -1
+                  if (index>-1):
+                    indexNew = index+2
+                  if (indexNew==10) :
+                    indexNew = 40
+                  elif (indexNew==11) :
+                    indexNew = 46
+                  elif (indexNew==12) :
+                    indexNew = 41
+                  elif (indexNew==13) :
+                    indexNew = 30
+                  elif (indexNew==14) :
+                    indexNew = 42
+                  histoArray[index].SetLineColor(indexNew)
+                  histoArray[index].SetMarkerColor(indexNew)
+#                  histoArray[index].SetFillColor(indexNew)
+                  histoArray[index].SetTitle("")
+                  max = 0.0
+#                  print(keyname2)
+                  for index2 in range(0, len(histoArray)):
+                    if not (histoArray[index2]) : continue
+                    max = numpy.maximum(max,histoArray[index2].GetMaximum())
+#                  histoArray[index].GetYaxis().SetTitle("Tracks/bin")
+#                  histoArray[index].GetXaxis().SetTitle(keyname2)
+                  binWidth = histoArray[index].GetXaxis().GetBinWidth(1)
+                  firstBinLocXCent = histoArray[index].GetXaxis().GetBinCenter(1)
+                  overFlowLocXCent = histoArray[index].GetXaxis().GetBinCenter(histoArray[index].GetNbinsX()+ 1)
+                  overFlowLocX = (overFlowLocXCent - (binWidth)/2)
+                  firstBinLoxX = abs(firstBinLocXCent - (binWidth)/2)
+                  
+                  overFlowLine = ROOT.TLine();
+#                  overFlowLine.SetNDC();
+                  overFlowLine.SetLineWidth(2);
+                  overFlowLine.SetLineStyle(ROOT.kDashed);
+                  if (keyname2 == "pfType") :
+                    if (histoArray[index].GetMaximum() > 0 ) :  histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
+                    histoArray[index].GetXaxis().SetBinLabel(1,"AllTracks")
+                    histoArray[index].GetXaxis().SetBinLabel(2,"PFtracks")
+                    histoArray[index].GetXaxis().SetBinLabel(3,"isElectron")
+                    histoArray[index].GetXaxis().SetBinLabel(4,"isMuon")
+                    histoArray[index].GetXaxis().SetBinLabel(5,"isPhoton")
+                    histoArray[index].GetXaxis().SetBinLabel(6,"isChHadron")
+                    histoArray[index].GetXaxis().SetBinLabel(7,"isNeutHadron")
+                    histoArray[index].GetXaxis().SetBinLabel(8,"isUndefined")
+                    histoArray[index].GetXaxis().SetBinLabel(9,"else")
+                    histoArray[index].GetXaxis().SetTitle("")
+                    histoArray[index].GetYaxis().SetTitle("")
+                    histoArray[index].SetMaximum(1.4)
+                  elif (keyname2== "EventCutFlow") :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    SecondBinSize =  histoArray[0].GetBinContent(1) * 1.3
+                    histoArray[index].GetYaxis().SetRangeUser(0.,SecondBinSize)
+                    histoArray[index].SetMaximum(SecondBinSize)
+                    ROOT.gStyle.SetPaintTextFormat(".2g");
+                    histoArray[index].Draw("SAMEHISTOTEXT00")
+                  elif (keyname2== "CutFlow") :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    if (histoArray[index].GetMaximum() > 0 ) :  histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    SecondBinSize =  histoArray[0].GetBinContent(1) * 1.3
+                    histoArray[index].GetYaxis().SetRangeUser(0.,SecondBinSize)
+                    histoArray[index].SetMaximum(SecondBinSize)
+                  elif (keyname2== "CutFlowReverse") :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    if (histoArray[index].GetMaximum() > 0 ) :  histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    histoArray[index].GetYaxis().SetRangeUser(0.,1.6)
+                    histoArray[index].SetMaximum(1.6)
+                  elif ("TriggerType" in keyname2) :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    normFactor = histoArray[index].GetBinContent(1) + histoArray[index].GetBinContent(4)
+                    if (normFactor>0) :
+                        histoArray[index].Scale(1/normFactor)
+                    histoArray[index].GetXaxis().SetTitle("")
+                    yAxisTitle = histoArray[index].GetYaxis().GetTitle()
+                    histoArray[index].GetYaxis().SetTitle("Normalized " + yAxisTitle)
+                    histoArray[index].GetXaxis().SetRange(1,6)
+#                    histoArray[index].GetYaxis().SetRangeUser(0.01,1.)
+                    histoArray[index].SetMaximum(1.4)
+                    ROOT.gStyle.SetPaintTextFormat(".2g");
+                    histoArray[index].Draw("SAMEHISTOTEXT00")
+                  elif ("HltMatchTrackLevel" in keyname2) :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    histoArray[index].SetBinError(1,0.)
+                    histoArray[index].SetBinError(2,0.)
+                    histoArray[index].SetBinError(3,0.)
+                    histoArray[index].SetMinimum(0)
+                    histoArray[index].SetMaximum(histoArray[index].GetMaximum()*1.6)
+                    ROOT.gStyle.SetPaintTextFormat(".2g");
+                    histoArray[index].Draw("SAMEHISTOTEXT00")
+                  elif ("TriggerGenMatch" in keyname2) :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    ROOT.gStyle.SetPaintTextFormat(".4g");
+                    histoArray[index].Draw("SAMEHISTOTEXT00")
+                  elif ("pfType" in keyname2) :
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].SetStats(0)
+                    if (histoArray[index].GetMaximum() > 0 ) :  histoArray[index].Scale(1/histoArray[index].GetMaximum())
+                    histoArray[index].Draw("COLZ L")
+                  elif (keyname2== "CutFlowEta" or keyname2 == "CutFlowPfType") :
+                    histoArray[index].SetStats(0)
+                    histoArray[index].Draw("COLZ")
+                  elif ("IsPer" in keyname2) :
+                    histoArray[index].SetStats(0)
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].ProjectionY(newname,histoArray[index].GetXaxis().FindBin(0.7),-1,"e").Draw("COLZ")
+                  elif ("EIsolPer" in keyname2) :
+                    histoArray[index].SetStats(0)
+                    histoArray[index].SetMarkerStyle(20)
+                    histoArray[index].ProjectionY(newname,histoArray[index].GetXaxis().FindBin(0.85),-1,"e").Draw("COLZ")
+                  else :
+                    histoArray[index].SetMaximum(max*1.5)
+                    histoArray[index].SetMinimum(0)
+                  histoArray[index].Draw("SAME")
+
+                legend.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                overFlowText.Draw("SAME")
+                overFlowLine.DrawLine(overFlowLocX,histoArray[0].GetMinimum(),overFlowLocX,histoArray[0].GetMaximum())
+                canvas.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+".png")
+
+                # repeat everything with LOG scale
+                cstackPlotsLogString = 'cstackPlotsLog'+str(j)
+                cstackPlots = ROOT.TCanvas(cstackPlotsLogString, cstackPlotsLogString, 800,800)
+                cstackPlots.SetLogy()
+                for index in range(0, len(histoArray)):
+                  histoArray[index].GetXaxis().SetRange(1,OFbin)
+                  if ("HltMatchTrackLevel" in keyname2 or "TriggerGenMatch" in keyname2) :
+                     histoArray[index].Draw("SAMEHISTOTEXT00")
+                  else :
+                    histoArray[index].Draw("SAME")
+#                  histoArray[index].Draw("SAME")
+                  if ("CutFlow" in keyname2 or "pfType"  in keyname2 ) :
+                     histoArray[index].SetMaximum(100)
+                     histoArray[index].SetMinimum(0.0001)
+                  if (keyname2== "EventCutFlow") :
+                     histoArray[index].SetStats(0)
+                     if ("SingleMuon" in SamplesArray[index]) :
+                       histoArray[index].SetMinimum(300000)
+                       histoArray[index].SetMaximum(max*10000)
+                       print(str(SamplesArray[index][14:SamplesArray[index].find("Code")-1])+": "+str(histoArray[index].GetBinContent(17)))
+                     else :
+                      histoArray[index].SetMaximum(max*10000)
+                      histoArray[index].SetMinimum(0.01)
+
+                     
+                     ROOT.gStyle.SetPaintTextFormat(".2g");
+                     histoArray[index].Draw("SAMEHISTOTEXT25")
+
+                  elif ("ProbQ" in keyname2) :
+                    histoArray[index].SetMaximum(max*1000000)
+                    histoArray[index].SetMinimum(0.000001)
+                  else :
+                    histoArray[index].SetMaximum(max*10000)
+                    histoArray[index].SetMinimum(0.000001)
+                legend.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                
+                overFlowText.Draw("SAME")
+                overFlowLine.DrawLine(overFlowLocX,histoArray[0].GetMinimum(),overFlowLocX,max*10000)
+                cstackPlots.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_log.png")
+                
+                cstackPlotsNormString = 'cstackPlotsNorm'+str(j)
+                cstackPlotsNorm = ROOT.TCanvas(cstackPlotsNormString, cstackPlotsLogString, 800,800)
+                maxNorm = 0.
+                for index in range(0, len(histoArray)):
+                  yAxisTitle = histoArray[index].GetYaxis().GetTitle()
+                  if (any(substring in keyname2 for substring in ["Ias", "ProbQ", "Beta", "CutFlow", "Qual", "Eta", "Type"])):
+                    int = histoArray[index].Integral(1,histoArray[index].GetNbinsX())
+                  else :
+                    int = histoArray[index].Integral(1,histoArray[index].GetNbinsX()+1)
+                  if (any(substring in keyname2 for substring in ["CandidateType", "HltMatchTrackLevel", "TriggerGenMatch", "MuonType"])):
+                    int = histoArray[index].GetBinContent(1)
+                  if (int>0) :
+                    histoArray[index].Scale(1/int)
+                  histoArray[index].GetYaxis().SetTitle("Normalized " + yAxisTitle)
+                  maxNorm = numpy.maximum(maxNorm,histoArray[index].GetMaximum())
+                  
+                  if ("CandidateType" in keyname2 or "HltMatchTrackLevel" in keyname2 or "TriggerGenMatch" in keyname2) :
+                    histoArray[index].Draw("SAMEHISTOTEXT00")
+                  if ("GenBeta" in keyname2) :
+                    print("i =" +str(index) + "# #beta[0.5-0.75] " + str(round(histoArray[index].Integral(histoArray[index].GetXaxis().FindBin(0.5),histoArray[index].GetXaxis().FindBin(0.75)),2)))
+                    histoArray[index].Draw("SAME")
+#                  if ("HSCPCandidateType" in keyname2) :
+#                    print(str(round(100*histoArray[index].GetBinContent(4),1))+"%")
+                  else :
+                    histoArray[index].Draw("SAME")
+                histoArray[0].SetMaximum(maxNorm*1.6)
+                histoArray[0].SetMinimum(0) # was -maxNorm*1.6/20
+                if ("HltMatchTrackLevel" in keyname2) :
+                    histoArray[0].GetYaxis().SetRangeUser(0.60,1.25)
+                    
+                legend.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                
+                overFlowText.Draw("SAME")
+                overFlowLine.DrawLine(overFlowLocX,histoArray[0].GetMinimum(),overFlowLocX,histoArray[0].GetMaximum())
+                cstackPlotsNorm.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_Norm.png")
+                
+                # -----------------------------------------------------------------------------------------
+                
+                cstackPlotsNormLogString = 'cstackPlotsNormLog'+str(j)
+                cstackPlotsNormLog = ROOT.TCanvas(cstackPlotsNormLogString, cstackPlotsNormLogString, 800,800)
+                cstackPlotsNormLog.SetLogy()
+                maxNorm = 0.
+                for index in range(0, len(histoArray)):
+                  yAxisTitle = histoArray[index].GetYaxis().GetTitle()
+                  int = histoArray[index].Integral(1,histoArray[index].GetNbinsX()+1)
+                  if ("CandidateType" in keyname2 or "HltMatchTrackLevel" in keyname2 or "TriggerGenMatch" in keyname2) :
+                    int = histoArray[index].GetBinContent(1)
+                  if (int>0) :
+                    histoArray[index].Scale(1/int)
+                  maxNorm = numpy.maximum(maxNorm,histoArray[index].GetMaximum())
+                  histoArray[index].GetXaxis().SetRange(1,OFbin)
+                  if ("CandidateType" in keyname2 or "HltMatchTrackLevel" in keyname2 or "TriggerGenMatch" in keyname2) :
+                    histoArray[index].SetMaximum(1.6)
+                    histoArray[index].Draw("SAMEHISTOTEXT00")
+                  if ("RecoHSCParticleType" in keyname2) :
+                    histoArray[index].Draw("SAMEHISTOTEXT00")
+#                    print(histoArray[index].GetBinContent(1))
+                  else :
+                    histoArray[index].Draw("SAME")
+                histoArray[0].SetMaximum(maxNorm*10000)
+                legend.Draw("SAME")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+
+                overFlowText.Draw("SAME")
+                overFlowLine.DrawLine(overFlowLocX,histoArray[0].GetMinimum(),overFlowLocX,maxNorm*10000)
+                cstackPlotsNormLog.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_NormLog.png")
+              
+os.system("cp forWebpage/* Compare"+sampleInFile[:-4]+"/.")
+os.system("cp forWebpage/.htaccess Compare"+sampleInFile[:-4]+"/.")
+print("scp -r Compare"+sampleInFile[:-4]+" tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createCutflow.py b/Analyzer/test/Tamas/PostProcScripts/createCutflow.py
new file mode 100644
index 0000000..aab31ec
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createCutflow.py
@@ -0,0 +1,269 @@
+import ROOT, sys, os, time, re
+import numpy as np
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileName.root")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetStyle("Plain")
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+fileName = sys.argv[1]
+
+print("Filename: "+fileName)
+
+f1 = ROOT.TFile.Open(fileName)
+
+for i in range(0, f1.GetListOfKeys().GetEntries()):
+  dirname = f1.GetListOfKeys().At(i).GetName()
+  curr_dir = f1.GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = f1.GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj1 = f1.Get(newname)
+          if obj1.InheritsFrom("TObject"):
+              can = obj1
+              can = ROOT.TCanvas(newname)
+              name = keyname2 +  ".png"
+              if (keyname2 == "CutFlow") :
+                obj1.SetMarkerColor(1)
+                obj1.SetLineColor(1)
+                obj1.SetMarkerStyle(20)
+                obj1.SetStats(0)
+
+                obj1.Scale(1/obj1.GetMaximum())
+              
+                legend =  ROOT.TLegend(.35,.85,.90,.90,"","brNDC")
+                legend.SetTextFont(42)
+                legend.SetTextSize(0.03)
+                legend.SetBorderSize(1);
+                legend.SetLineColor(1);
+                legend.SetLineStyle(1);
+                legend.SetLineWidth(1);
+                legend.SetFillColor(0);
+                legend.SetFillStyle(1001);
+                legend.AddEntry(obj1,fileName,"LP")
+                    
+                obj1.Draw("COLZ L")
+                    
+                obj1.GetXaxis().SetBinLabel(1,"Trigger")
+                obj1.GetXaxis().SetBinLabel(2,"Eta")
+                obj1.GetXaxis().SetBinLabel(3,"pT")
+                obj1.GetXaxis().SetBinLabel(4,"NumHits")
+                obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
+                obj1.GetXaxis().SetBinLabel(6,"ValidFract")
+                obj1.GetXaxis().SetBinLabel(7,"NumDeDx")
+                obj1.GetXaxis().SetBinLabel(8,"ProbXY")
+                obj1.GetXaxis().SetBinLabel(9,"HighPurity")
+                obj1.GetXaxis().SetBinLabel(10,"Chi2oDOF")
+                obj1.GetXaxis().SetBinLabel(11,"EoP")
+                obj1.GetXaxis().SetBinLabel(12,"dz")
+                obj1.GetXaxis().SetBinLabel(13,"dxy")
+                obj1.GetXaxis().SetBinLabel(14,"pTerrOverpT")
+                obj1.GetXaxis().SetBinLabel(15,"TKIso")
+                obj1.GetXaxis().SetBinLabel(16,"MiniIso")
+                obj1.GetXaxis().SetBinLabel(17,"MassT")
+                obj1.GetXaxis().SetBinLabel(18,"Ih")
+                obj1.GetXaxis().SetBinLabel(19,"ProbQ")
+                obj1.GetXaxis().SetBinLabel(20,"MuStat")
+                obj1.GetXaxis().SetBinLabel(21,"PhiTOF")
+                obj1.GetXaxis().SetBinLabel(22,"EtaTOF")
+                    
+                legend.Draw("SAME")
+                can.SaveAs("CutFlow_"+fileName[:-5]+".png")
+                #can.SaveAs(name.replace(".png",".pdf"))
+                #can.SaveAs(name.replace(".png",".C"))
+                can.Close()
+            
+              if (keyname2 == "N1Eta"):
+                N1EtaEff = obj1.Integral(obj1.GetXaxis().FindBin(-2.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral(obj1.GetXaxis().FindBin(-3),obj1.GetXaxis().FindBin(3)))
+              elif (keyname2 == "N1Chi2PerNdof"):
+                N1Chi2PerNdofEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(5))/(obj1.Integral())
+              elif (keyname2 == "N1Dxy"):
+                N1DxyEff = obj1.Integral(obj1.GetXaxis().FindBin(-0.5),obj1.GetXaxis().FindBin(0.5))/(obj1.Integral()) #obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(10))
+              elif (keyname2 == "N1Dz"):
+                N1DzEff = obj1.Integral(obj1.GetXaxis().FindBin(-0.5),obj1.GetXaxis().FindBin(0.5))/(obj1.Integral()) #obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(10))
+              elif (keyname2 == "N1EIsol"):
+                N1EIsolEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.3))/(obj1.Integral())
+              elif (keyname2 == "N1MIh"):
+                N1MIhEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(40))/(obj1.Integral())
+              elif (keyname2 == "N1MPt"):
+                N1MPtEff = obj1.Integral(obj1.GetXaxis().FindBin(55.0),obj1.GetXaxis().FindBin(4001.0))/(obj1.Integral())
+              elif (keyname2 == "N1ProbQ"):
+                N1ProbQEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.1))/(obj1.Integral())
+              elif (keyname2 == "N1ProbXY"):
+                N1ProbXYEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(1.0))/(obj1.Integral())
+              elif (keyname2 == "N1PtErrOverPt"):
+                N1PtErrOverPtEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.25))/(obj1.Integral())
+              elif (keyname2 == "N1Qual"):
+                N1QualEff = obj1.Integral(obj1.GetXaxis().FindBin(1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral())
+#              elif (keyname2 == "N1SegSep"):
+#                N1SegSepEff = obj1.Integral(obj1.GetXaxis().FindBin(-2.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral())
+              elif (keyname2 == "N1Stations"):
+                N1StationsEff = obj1.Integral(obj1.GetXaxis().FindBin(2),obj1.GetXaxis().FindBin(8))/(obj1.Integral())
+              elif (keyname2 == "N1TNOH"):
+                N1TNOHEff = obj1.Integral(obj1.GetXaxis().FindBin(9),obj1.GetXaxis().FindBin(40))/(obj1.Integral())
+              elif (keyname2 == "N1TNOHFraction"):
+                N1TNOHFractionEff = obj1.Integral(obj1.GetXaxis().FindBin(0.8),obj1.GetXaxis().FindBin(0.999))/(obj1.Integral())
+              elif (keyname2 == "N1TNOPH"):
+                N1TNOPHEff = obj1.Integral(obj1.GetXaxis().FindBin(3),obj1.GetXaxis().FindBin(8))/(obj1.Integral())
+                
+              elif (keyname2 == "BS_Eta"):
+                BSEtaEff = obj1.Integral(obj1.GetXaxis().FindBin(-2.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral(obj1.GetXaxis().FindBin(-3),obj1.GetXaxis().FindBin(3)))
+              elif (keyname2 == "BS_Chi2PerNdof"):
+                BS_Chi2PerNdofEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(5))/(obj1.Integral())
+              elif (keyname2 == "BS_dxyMinv3d"):
+                BS_DxyEff = obj1.Integral(obj1.GetXaxis().FindBin(-0.5),obj1.GetXaxis().FindBin(0.5))/(obj1.Integral()) #obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(10))
+              elif (keyname2 == "BS_dzMinv3d"):
+                BS_DzEff = obj1.Integral(obj1.GetXaxis().FindBin(-0.5),obj1.GetXaxis().FindBin(0.5))/(obj1.Integral()) #obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(10))
+              elif (keyname2 == "BS_EIsol"):
+                BS_EIsolEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.3))/(obj1.Integral())
+              elif (keyname2 == "BS_MIh"):
+                BS_MIhEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(40))/(obj1.Integral())
+              elif (keyname2 == "BS_MPt"):
+                BS_MPtEff = obj1.Integral(obj1.GetXaxis().FindBin(55),obj1.GetXaxis().FindBin(3999))/(obj1.Integral())
+              elif (keyname2 == "BS_ProbQ"):
+                BS_ProbQEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.1))/(obj1.Integral())
+              elif (keyname2 == "BS_ProbXY"):
+                BS_ProbXYEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(1.0))/(obj1.Integral())
+              elif (keyname2 == "BS_PtErrOverPt"):
+                BS_PtErrOverPtEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.25))/(obj1.Integral())
+              elif (keyname2 == "BS_Qual"):
+                BS_QualEff = obj1.Integral(obj1.GetXaxis().FindBin(1.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral())
+#              elif (keyname2 == "BS_SegSep"):
+#                BS_SegSepEff = obj1.Integral(obj1.GetXaxis().FindBin(-2.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral())
+#              elif (keyname2 == "BS_Stations"):
+#                BS_StationsEff = obj1.Integral(obj1.GetXaxis().FindBin(2),obj1.GetXaxis().FindBin(8))/(obj1.Integral())
+              elif (keyname2 == "BS_TNOH"):
+                BS_TNOHEff = obj1.Integral(obj1.GetXaxis().FindBin(9),obj1.GetXaxis().FindBin(40))/(obj1.Integral())
+              elif (keyname2 == "BS_TNOHFraction"):
+                BS_TNOHFractionEff = obj1.Integral(obj1.GetXaxis().FindBin(0.8),obj1.GetXaxis().FindBin(0.999))/(obj1.Integral())
+              elif (keyname2 == "BS_TNOPH"):
+                BS_TNOPHEff = obj1.Integral(obj1.GetXaxis().FindBin(3),obj1.GetXaxis().FindBin(8))/(obj1.Integral())
+
+
+
+fileOutEtaEff = open("EtaEff.txt", "a")
+fileOutMPtEff = open("MPtEff.txt", "a")
+fileOutTNOHEff = open("TNOHEff.txt", "a")
+fileOutTNOPHEff = open("TNOPHEff.txt", "a")
+fileOutTNOHFractionEff = open("TNOHFractionEff.txt", "a")
+fileOutProbQEff = open("ProbQEff.txt", "a")
+fileOutProbXYEff = open("ProbXYEff.txt", "a")
+fileOutChi2PerNdofEff = open("Chi2PerNdofEff.txt", "a")
+fileOutEIsolEff = open("EIsolEff.txt", "a")
+fileOutMIhEff = open("MIhEff.txt", "a")
+fileOutPtErrOverPtEff = open("PtErrOverPtEff.txt", "a")
+fileOutDzEff = open("DzEff.txt", "a")
+fileOutDxyEff = open("DxyEff.txt", "a")
+
+idx = fileName.find("_M_")
+fileOutEtaEff.write(fileName[idx+3:idx+7]+"\t"+str(BSEtaEff)+"\n")
+fileOutMPtEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_MPtEff)+"\n")
+fileOutTNOHEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_TNOHEff)+"\n")
+fileOutTNOPHEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_TNOPHEff)+"\n")
+fileOutTNOHFractionEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_TNOHFractionEff)+"\n")
+fileOutProbQEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_ProbQEff)+"\n")
+fileOutProbXYEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_ProbXYEff)+"\n")
+fileOutChi2PerNdofEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_Chi2PerNdofEff)+"\n")
+fileOutEIsolEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_EIsolEff)+"\n")
+fileOutMIhEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_MIhEff)+"\n")
+fileOutPtErrOverPtEff .write(fileName[idx+3:idx+7]+"\t"+str(BS_PtErrOverPtEff)+"\n")
+fileOutDzEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_DzEff)+"\n")
+fileOutDxyEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_DxyEff)+"\n")
+
+can = ROOT.TCanvas("CutEffs")
+obj1 = ROOT.TH1F("CutEffs","CutEffs",14,0.0,14.0)
+obj2 = ROOT.TH1F("CutEffsN1","CutEffsN1",14,0.0,14.0)
+obj1.SetBinContent(1,1)
+obj1.SetBinContent(2,BSEtaEff)
+obj1.SetBinContent(3,BS_MPtEff)
+obj1.SetBinContent(4,BS_TNOHEff)
+obj1.SetBinContent(5,BS_TNOPHEff)
+obj1.SetBinContent(6,BS_TNOHFractionEff)
+obj1.SetBinContent(7,BS_ProbXYEff)
+obj1.SetBinContent(8,BS_Chi2PerNdofEff)
+obj1.SetBinContent(9,BS_EIsolEff)
+obj1.SetBinContent(10,BS_DzEff)
+obj1.SetBinContent(11,BS_DxyEff)
+obj1.SetBinContent(12,BS_PtErrOverPtEff)
+obj1.SetBinContent(13,BS_MIhEff)
+obj1.SetBinContent(14,BS_ProbQEff)
+obj1.SetMaximum(1.1)
+#obj1.SetBinContent(9,1) #N1QualEff/BS_QualEff
+#obj1.SetBinContent(16,1)
+#obj1.SetBinContent(17,1)
+#obj1.SetBinContent(18,1)
+#obj1.SetBinContent(19,1)
+#obj1.SetBinContent(20,1)
+
+obj2.SetBinContent(1,1)
+obj2.SetBinContent(2,N1EtaEff)
+obj2.SetBinContent(3,N1MPtEff)
+obj2.SetBinContent(4,N1TNOHEff)
+obj2.SetBinContent(5,N1TNOPHEff)
+obj2.SetBinContent(6,N1TNOHFractionEff)
+obj2.SetBinContent(7,N1ProbXYEff)
+obj2.SetBinContent(8,N1Chi2PerNdofEff)
+obj2.SetBinContent(9,N1EIsolEff)
+obj2.SetBinContent(10,N1DzEff)
+obj2.SetBinContent(11,N1DxyEff)
+obj2.SetBinContent(12,N1PtErrOverPtEff)
+obj2.SetBinContent(13,N1MIhEff)
+obj2.SetBinContent(14,N1ProbQEff)
+#obj2.SetBinContent(9,1) #N1QualEff/BS_QualEff
+#obj2.SetBinContent(16,1)
+#obj2.SetBinContent(17,1)
+#obj2.SetBinContent(18,1)
+#obj2.SetBinContent(19,1)
+#obj2.SetBinContent(20,1)
+obj2.SetLineColor(2)
+obj2.SetMarkerColor(2)
+
+obj1.GetXaxis().SetBinLabel(1,"Trigger")
+obj1.GetXaxis().SetBinLabel(2,"Eta")
+obj1.GetXaxis().SetBinLabel(3,"pT")
+obj1.GetXaxis().SetBinLabel(4,"NumHits")
+obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
+obj1.GetXaxis().SetBinLabel(6,"ValidFract")
+obj1.GetXaxis().SetBinLabel(7,"ProbXY")
+obj1.GetXaxis().SetBinLabel(8,"Chi2oDOF")
+obj1.GetXaxis().SetBinLabel(9,"EoP")
+obj1.GetXaxis().SetBinLabel(10,"dz")
+obj1.GetXaxis().SetBinLabel(11,"dxy")
+obj1.GetXaxis().SetBinLabel(12,"pTerrOverpT")
+obj1.GetXaxis().SetBinLabel(13,"Ih")
+obj1.GetXaxis().SetBinLabel(14,"ProbQ")
+#obj1.GetXaxis().SetBinLabel(15,"TKIso")
+#obj1.GetXaxis().SetBinLabel(9,"HighPurity")
+#obj1.GetXaxis().SetBinLabel(17,"MuStat")
+#obj1.GetXaxis().SetBinLabel(18,"EtaTOF")
+#obj1.GetXaxis().SetBinLabel(19,"PhiTOF")
+#obj1.GetXaxis().SetBinLabel(20,"N/A")
+obj1.GetYaxis().SetTitle("Efficiency")
+obj1.GetYaxis().SetTitleOffset(1.1)
+obj1.SetStats(0)
+
+legend =  ROOT.TLegend(.65,.75,.90,.9,"","brNDC")
+legend.SetTextFont(42)
+legend.SetTextSize(0.035)
+legend.SetBorderSize(1);
+legend.SetLineColor(1);
+legend.SetLineStyle(1);
+legend.SetLineWidth(1);
+legend.SetFillColor(0);
+legend.SetFillStyle(1001);
+legend.AddEntry(obj1,"Cut alone","LP")
+legend.AddEntry(obj2,"Cut with other cuts","LP")
+
+obj1.Draw()
+obj2.Draw("SAME")
+legend.Draw("SAME")
+can.SaveAs("CutEffs_"+fileName[:-5]+".png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createEffVsMass.py b/Analyzer/test/Tamas/PostProcScripts/createEffVsMass.py
new file mode 100644
index 0000000..8466636
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createEffVsMass.py
@@ -0,0 +1,92 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
+]
+
+fileInArray = []
+for sample in BackgroundSamples:
+  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
+  
+  
+cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"
+canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
+
+EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
+
+for fileIn in fileInArray:
+  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
+    print("NumEvents not found, exit")
+    continue
+  
+  obj = fileIn.Get("HSCParticleAnalyzer/BaseName/PostPreS_ProbQNoL1")
+
+  firstBinInt = obj.Integral(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(0.1)+1)
+  totalInt = obj.Integral()
+  efficiency = firstBinInt/float(totalInt)
+
+  
+      
+      EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForMiniRelTkIso)
+      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUA)
+      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUB)
+      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUC)
+      EffForData.SetBinContent(5,N1effForMiniTkIso)
+      EffForData.SetBinContent(6,N1effForMiniTkIsoPUA)
+      EffForData.SetBinContent(7,N1effForMiniTkIsoPUB)
+      EffForData.SetBinContent(8,N1effForMiniTkIsoPUC)
+      EffForData.SetBinContent(9,N1effForMiniIso)
+      EffForData.SetBinContent(10,N1effForTIsol)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+#      EffForData.SetMarkerStyle(20)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
+      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
+      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetTitle("")
+      
+      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
+      legend.SetTextFont(42)
+      legend.SetTextSize(0.02)
+      legend.SetBorderSize(1);
+      legend.SetBorderSize(0);
+      legend.SetLineColor(1);
+      legend.SetLineStyle(1);
+      legend.SetLineWidth(1);
+      legend.SetFillColor(0);
+      legend.SetFillStyle(1001);
+      legend.AddEntry(EffForData,"DATA (2018C)","LP")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v2.py b/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v2.py
new file mode 100644
index 0000000..197d0cf
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v2.py
@@ -0,0 +1,719 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+ROOT.gStyle.SetPaintTextFormat("4.2f");
+
+SingleMuonSample = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018C_woProbQ_CodeV"+codeVersion+"_v1.root")
+AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_woProbQ_CodeV"+codeVersion+"_v1.root")
+Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+cutValues = {
+'BefPreS_Pt' : 55.,
+'N1_Pt' : 55.,
+'BefPreS_Eta' : 1.0,
+'N1_Eta' : 1.0,
+'BefPreS_TNOPH' : 1., # after 29p2 should be 1
+'N1_TNOPH' : 1., # after 29p2 should be 1
+'BefPreS_TNOHFraction' : .8,
+'N1_TNOHFraction' : .8,
+'BefPreS_TNOM' : 9.,
+'N1_TNOM' : 9.,
+'BefPreS_Chi2oNdof' : 5.,
+'N1_Chi2oNdof' : 5.,
+'BefPreS_Dz' : 0.1,
+'N1_Dz' : 0.1,
+'BefPreS_Dxy' : 0.02,
+'N1_Dxy' : 0.02,
+'BefPreS_PtErrOverPt2' : 0.001,
+'PostPreS_PtErrOverPt2' : 0.001,
+'N1_EoP' : 0.3,
+'BefPreS_EoP' : 0.3,
+'BefPreS_Ih' : 3.47,
+'N1_Ih' : 3.47,
+'BefPreS_ProbXY' : 0.01,
+'N1_ProbXY' : 0.01,
+'BefPreS_MiniRelIsoAll' : 0.02,
+'N1_MiniRelIsoAll' : 0.02,
+'BefPreS_MiniRelTkIso' : 0.02,
+'N1_MiniRelTkIso' : 0.02,
+'BefPreS_MiniRelTkIso_PUA' : 0.02,
+'N1_MiniRelTkIso_PUA' : 0.02,
+'BefPreS_MiniRelTkIso_PUB' : 0.02,
+'N1_MiniRelTkIso_PUB' : 0.02,
+'BefPreS_MiniRelTkIso_PUC' : 0.02,
+'N1_MiniRelTkIso_PUC' : 0.02,
+'BefPreS_P' : 3000,
+'PostPreS_P' : 3000,
+'BefPreS_TIsol' : 15,
+'PostPreS_TIsol' : 15,
+'BefPreS_MiniTkIso' : 15,
+'N1_MiniTkIso' : 15,
+'BefPreS_MiniTkIso_PUA' : 15,
+'N1_MiniTkIso_PUA' : 15,
+'BefPreS_MiniTkIso_PUB' : 15,
+'N1_MiniTkIso_PUB' : 15,
+'BefPreS_MiniTkIso_PUC' : 15,
+'N1_MiniTkIso_PUC' : 15,
+}
+
+
+sigma = 3
+
+if not os.path.exists(os.path.dirname("Effs_CodeV"+codeVersion+"/a.png")):
+  print("Create dir")
+  os.makedirs(os.path.dirname("Effs_CodeV"+codeVersion+"/"))
+
+for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
+  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
+  curr_dir = SingleMuonSample.GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  N1eff = N1effForP = N1effForPPunzi = N1effForPBcg = N1effForPSignal = 0
+  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
+  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
+  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          if not ("N1_Eta" in keyname2) : continue
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
+          histo = SingleMuonSample.Get(newname)
+          histoAllBcg = AllBcgSample.Get(newname)
+          histoSignal = Rhadron1800GeV.Get(newname)
+          histoDenomAllBcgFixedN1 = AllBcgSample.Get(dirname + "/" + keyname + "/N1_Eta")
+          histoDenomAllBcgFixedBefPreS = AllBcgSample.Get(dirname + "/" + keyname + "/BefPreS_Eta")
+
+          if not (cutValues.get(keyname2)) : continue
+          Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
+          NumAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(cutValues[keyname2]))
+          NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(cutValues[keyname2]))
+          Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()+1))
+          DenomAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(histoAllBcg.GetXaxis().GetXmax()+1))
+          DenomAllBcgFixedBefPreS = histoDenomAllBcgFixedBefPreS.Integral(histoDenomAllBcgFixedBefPreS.GetXaxis().FindBin(0),histoDenomAllBcgFixedBefPreS.GetXaxis().FindBin(histoDenomAllBcgFixedBefPreS.GetXaxis().GetXmax()+1))
+          DenomAllBcgFixedN1 = histoDenomAllBcgFixedN1.Integral(histoDenomAllBcgFixedN1.GetXaxis().FindBin(0),histoDenomAllBcgFixedN1.GetXaxis().FindBin(histoDenomAllBcgFixedN1.GetXaxis().GetXmax()+1))
+          
+#          print(keyname2 + ": " + str(DenomAllBcgFixedN1))
+          DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()+1))
+          if (Denom>0) :  Eff = Num / Denom
+          else : Eff = 0
+          if (DenomAllBcg>0) : EffAllBcg = NumAllBcg / DenomAllBcg
+          else : EffAllBcg = 0
+          if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
+          else : EffSignal = 0
+         
+          if ("BefPreS_Eta" in keyname2) :
+            BefPreSeffForEta = Eff
+            BefPreSeffForEtaBcg = EffAllBcg
+            BefPreSeffForEtaSignal = EffSignal
+            BefPreSeffForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_P") :
+            BefPreSeffForP = Eff
+            BefPreSeffForPBcg = EffAllBcg
+            BefPreSeffForPSignal = EffSignal
+            BefPreSeffForPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Pt" in keyname2) :
+            BefPreSeffForpT = 1-Eff
+            BefPreSeffForpTBcg = 1-EffAllBcg
+            BefPreSeffForpTSignal = 1-EffSignal
+            BefPreSeffForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_PtErrOverPt2" in keyname2) :
+            BefPreSeffForpTErrOverPt2 = Eff
+            BefPreSeffForpTErrOverPt2Bcg = EffAllBcg
+            BefPreSeffForpTErrOverPt2Signal = EffSignal
+            BefPreSeffForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_TNOPH" in keyname2) :
+            BefPreSeffForNumPixHits = 1-Eff
+            BefPreSeffForNumPixHitsBcg = 1-EffAllBcg
+            BefPreSeffForNumPixHitsSignal = 1-EffSignal
+            BefPreSeffForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_TNOHFraction" in keyname2) :
+            BefPreSeffForValidFract = 1-Eff
+            BefPreSeffForValidFractBcg = 1-EffAllBcg
+            BefPreSeffForValidFractSignal = 1-EffSignal
+            BefPreSeffForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_TNOM" in keyname2) :
+            BefPreSeffForNumDeDx = 1-Eff
+            BefPreSeffForNumDeDxBcg = 1-EffAllBcg
+            BefPreSeffForNumDeDxSignal = 1-EffSignal
+            BefPreSeffForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Chi2oNdof" in keyname2) :
+            BefPreSeffForChi2oDOF = Eff
+            BefPreSeffForChi2oDOFBcg = EffAllBcg
+            BefPreSeffForChi2oDOFSignal = EffSignal
+            BefPreSeffForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_EoP" in keyname2) :
+            BefPreSeffForEoP = Eff
+            BefPreSeffForEoPBcg = EffAllBcg
+            BefPreSeffForEoPSignal = EffSignal
+            BefPreSeffForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Dz" in keyname2) :
+            BefPreSeffFordz = Eff
+            BefPreSeffFordzBcg = EffAllBcg
+            BefPreSeffFordzSignal = EffSignal
+            BefPreSeffFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Dxy" in keyname2) :
+            BefPreSeffFordxy = Eff
+            BefPreSeffFordxyBcg = EffAllBcg
+            BefPreSeffFordxySignal = EffSignal
+            BefPreSeffFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_MiniRelIsoAll" in keyname2) :
+            BefPreSeffForMiniIso = Eff
+            BefPreSeffForMiniIsoBcg = EffAllBcg
+            BefPreSeffForMiniIsoSignal = EffSignal
+            BefPreSeffForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_Ih" in keyname2) :
+            BefPreSeffForIh = 1-Eff
+            BefPreSeffForIhBcg = 1-EffAllBcg
+            BefPreSeffForIhSignal = 1-EffSignal
+            BefPreSeffForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if ("BefPreS_ProbXY" in keyname2) :
+            BefPreSeffForProbXY = 1-Eff
+            BefPreSeffForProbXYBcg = 1-EffAllBcg
+            BefPreSeffForProbXYSignal = 1-EffSignal
+            BefPreSeffForProbXYPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_TIsol") :
+            BefPreSeffForTIsol = Eff
+            BefPreSeffForTIsolBcg = EffAllBcg
+            BefPreSeffForTIsolSignal = EffSignal
+            BefPreSeffForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_MiniRelTkIso") :
+            BefPreSeffForMiniRelTkIso = Eff
+            BefPreSeffForMiniRelTkIsoBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_MiniRelTkIso_PUA") :
+            BefPreSeffForMiniRelTkIsoPUA = Eff
+            BefPreSeffForMiniRelTkIsoPUABcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUASignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_MiniRelTkIso_PUB") :
+            BefPreSeffForMiniRelTkIsoPUB = Eff
+            BefPreSeffForMiniRelTkIsoPUBBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUBSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_MiniRelTkIso_PUC") :
+            BefPreSeffForMiniRelTkIsoPUC = Eff
+            BefPreSeffForMiniRelTkIsoPUCBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUCSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_MiniTkIso") :
+            BefPreSeffForMiniTkIso = Eff
+            BefPreSeffForMiniTkIsoBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoSignal = EffSignal
+            BefPreSeffForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_MiniTkIso_PUA") :
+            BefPreSeffForMiniTkIsoPUA = Eff
+            BefPreSeffForMiniTkIsoPUABcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUASignal = EffSignal
+            BefPreSeffForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_MiniTkIso_PUB") :
+            BefPreSeffForMiniTkIsoPUB = Eff
+            BefPreSeffForMiniTkIsoPUBBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUBSignal = EffSignal
+            BefPreSeffForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+          if (keyname2 == "BefPreS_MiniTkIso_PUC") :
+            BefPreSeffForMiniTkIsoPUC = Eff
+            BefPreSeffForMiniTkIsoPUCBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUCSignal = EffSignal
+            BefPreSeffForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
+            
+            
+          if ("N1_Eta" in keyname2) :
+            N1effForEta = Eff
+            N1effForEtaBcg = EffAllBcg
+            N1effForEtaSignal = EffSignal
+            N1effForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Pt" in keyname2) :
+            N1effForpT = 1-Eff
+            N1effForpTBcg = 1-EffAllBcg
+            N1effForpTSignal = 1-EffSignal
+            N1effForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("PostPreS_PtErrOverPt2" in keyname2) :
+            N1effForpTErrOverPt2 = Eff
+            N1effForpTErrOverPt2Bcg = EffAllBcg
+            N1effForpTErrOverPt2Signal = EffSignal
+            N1effForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_TNOPH" in keyname2) :
+            N1effForNumPixHits = 1-Eff
+            N1effForNumPixHitsBcg = 1-EffAllBcg
+            N1effForNumPixHitsSignal = 1-EffSignal
+            N1effForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_TNOHFraction" in keyname2) :
+            N1effForValidFract = 1-Eff
+            N1effForValidFractBcg = 1-EffAllBcg
+            N1effForValidFractSignal = 1-EffSignal
+            N1effForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_TNOM" in keyname2) :
+            N1effForNumDeDx = 1-Eff
+            N1effForNumDeDxBcg = 1-EffAllBcg
+            N1effForNumDeDxSignal = 1-EffSignal
+            N1effForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Chi2oNdof" in keyname2) :
+            N1effForChi2oDOF = Eff
+            N1effForChi2oDOFBcg = EffAllBcg
+            N1effForChi2oDOFSignal = EffSignal
+            N1effForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_EoP" in keyname2) :
+            N1effForEoP = Eff
+            N1effForEoPBcg = EffAllBcg
+            N1effForEoPSignal = EffSignal
+            N1effForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Dz" in keyname2) :
+            N1effFordz = Eff
+            N1effFordzBcg = EffAllBcg
+            N1effFordzSignal = EffSignal
+            N1effFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Dxy" in keyname2) :
+            N1effFordxy = Eff
+            N1effFordxyBcg = EffAllBcg
+            N1effFordxySignal = EffSignal
+            N1effFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_MiniRelIsoAll" in keyname2) :
+            N1effForMiniIso = Eff
+            N1effForMiniIsoBcg = EffAllBcg
+            N1effForMiniIsoSignal = EffSignal
+            N1effForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_Ih" in keyname2) :
+            N1effForIh = 1-Eff
+            N1effForIhBcg = 1-EffAllBcg
+            N1effForIhSignal = 1-EffSignal
+            N1effForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if ("N1_ProbXY" in keyname2) :
+            N1effForProbXY = 1-Eff
+            N1effForProbXYBcg = 1-EffAllBcg
+            N1effForProbXYSignal = 1-EffSignal
+            N1effForProbXYPunzi= (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "PostPreS_P" ) :
+            N1effForP = Eff
+            N1effForPBcg = EffAllBcg
+            N1effForPSignal = EffSignal
+            N1effForPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "PostPreS_TIsol") :
+            N1effForTIsol = Eff
+            N1effForTIsolBcg = EffAllBcg
+            N1effForTIsolSignal = EffSignal
+            N1effForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "N1_MiniRelTkIso") :
+            N1effForMiniRelTkIso = Eff
+            N1effForMiniRelTkIsoBcg = EffAllBcg
+            N1effForMiniRelTkIsoSignal = EffSignal
+            N1effForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "N1_MiniRelTkIso_PUA") :
+            N1effForMiniRelTkIsoPUA = Eff
+            N1effForMiniRelTkIsoPUABcg = EffAllBcg
+            N1effForMiniRelTkIsoPUASignal = EffSignal
+            N1effForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "N1_MiniRelTkIso_PUB") :
+            N1effForMiniRelTkIsoPUB = Eff
+            N1effForMiniRelTkIsoPUBBcg = EffAllBcg
+            N1effForMiniRelTkIsoPUBSignal = EffSignal
+            N1effForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "N1_MiniRelTkIso_PUC") :
+            N1effForMiniRelTkIsoPUC = Eff
+            N1effForMiniRelTkIsoPUCBcg = EffAllBcg
+            N1effForMiniRelTkIsoPUCSignal = EffSignal
+            N1effForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "N1_MiniTkIso") :
+            N1effForMiniTkIso = Eff
+            N1effForMiniTkIsoBcg = EffAllBcg
+            N1effForMiniTkIsoSignal = EffSignal
+            N1effForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "N1_MiniTkIso_PUA") :
+            N1effForMiniTkIsoPUA = Eff
+            N1effForMiniTkIsoPUABcg = EffAllBcg
+            N1effForMiniTkIsoPUASignal = EffSignal
+            N1effForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "N1_MiniTkIso_PUB") :
+            N1effForMiniTkIsoPUB = Eff
+            N1effForMiniTkIsoPUBBcg = EffAllBcg
+            N1effForMiniTkIsoPUBSignal = EffSignal
+            N1effForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          if (keyname2 == "N1_MiniTkIso_PUC") :
+            N1effForMiniTkIsoPUC = Eff
+            N1effForMiniTkIsoPUCBcg = EffAllBcg
+            N1effForMiniTkIsoPUCSignal = EffSignal
+            N1effForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
+          
+      tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+      tex2.SetNDC();
+      tex2.SetTextFont(61);
+      tex2.SetTextSize(0.0675);
+      tex2.SetLineWidth(2);
+
+      tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+      tex3.SetNDC();
+      tex3.SetTextFont(52);
+      tex3.SetTextSize(0.0485);
+      tex3.SetLineWidth(2);
+      
+      tex4 = ROOT.TLatex()
+
+      tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+      tex5.SetNDC();
+      tex5.SetTextFont(52);
+      tex5.SetTextSize(0.0185);
+      tex5.SetLineWidth(2);
+      
+####################################################################################
+      # EffsInCutflowBefPreS.png
+      cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForData",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,BefPreSeffForpT)
+      EffForData.SetBinContent(2,BefPreSeffForEta)
+      EffForData.SetBinContent(3,BefPreSeffForNumPixHits)
+      EffForData.SetBinContent(4,BefPreSeffForValidFract)
+      EffForData.SetBinContent(5,BefPreSeffForNumDeDx)
+      EffForData.SetBinContent(6,BefPreSeffForChi2oDOF)
+      EffForData.SetBinContent(7,BefPreSeffFordz)
+      EffForData.SetBinContent(8,BefPreSeffFordxy)
+      EffForData.SetBinContent(9,BefPreSeffForEoP)
+      EffForData.SetBinContent(10,BefPreSeffForMiniIso)
+      EffForData.SetBinContent(11,BefPreSeffForIh)
+      EffForData.SetBinContent(12,BefPreSeffForP)
+      EffForData.SetBinContent(13,BefPreSeffForTIsol)
+      EffForData.SetBinContent(14,BefPreSeffForpTErrOverPt2)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+#      EffForData.SetMarkerStyle(20)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"pT > 55")
+      EffForData.GetXaxis().SetBinLabel(2,"Eta < 1.0")
+      EffForData.GetXaxis().SetBinLabel(3,"NumPixHitsNoL1 > 1")
+      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.8")
+      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 9")
+      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
+      EffForData.GetXaxis().SetBinLabel(7,"dz < 0.1")
+      EffForData.GetXaxis().SetBinLabel(8,"dxy < 0.02")
+      EffForData.GetXaxis().SetBinLabel(9,"EoP < 0.3")
+      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
+      EffForData.GetXaxis().SetBinLabel(12,"P < 3 TeV")
+      EffForData.GetXaxis().SetBinLabel(13,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetBinLabel(14,"ptErr/pt2 < 0.001")
+      EffForData.GetXaxis().SetTitle("")
+      
+      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
+      legend.SetTextFont(42)
+      legend.SetTextSize(0.02)
+      legend.SetBorderSize(1);
+      legend.SetBorderSize(0);
+      legend.SetLineColor(1);
+      legend.SetLineStyle(1);
+      legend.SetLineWidth(1);
+      legend.SetFillColor(0);
+      legend.SetFillStyle(1001);
+      legend.AddEntry(EffForData,"DATA (2018C)","LP")
+      
+
+      EffForBcg = ROOT.TH1F("EffForBcg",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
+      EffForBcg.Draw("SAMEHISTOTEXT00")
+      EffForBcg.SetLineColor(3)
+      EffForBcg.SetMarkerColor(3)
+      EffForBcg.SetBinContent(1,BefPreSeffForpTBcg)
+      EffForBcg.SetBinContent(2,BefPreSeffForEtaBcg)
+      EffForBcg.SetBinContent(3,BefPreSeffForNumPixHitsBcg)
+      EffForBcg.SetBinContent(4,BefPreSeffForValidFractBcg)
+      EffForBcg.SetBinContent(5,BefPreSeffForNumDeDxBcg)
+      EffForBcg.SetBinContent(6,BefPreSeffForChi2oDOFBcg)
+      EffForBcg.SetBinContent(7,BefPreSeffFordzBcg)
+      EffForBcg.SetBinContent(8,BefPreSeffFordxyBcg)
+      EffForBcg.SetBinContent(9,BefPreSeffForEoPBcg)
+      EffForBcg.SetBinContent(10,BefPreSeffForMiniIsoBcg)
+      EffForBcg.SetBinContent(11,BefPreSeffForIhBcg)
+      EffForBcg.SetBinContent(12,BefPreSeffForPBcg)
+      EffForBcg.SetBinContent(13,BefPreSeffForTIsolBcg)
+      EffForBcg.SetBinContent(14,BefPreSeffForpTErrOverPt2Bcg)
+      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
+      
+      EffForSignal = ROOT.TH1F("EffForSignal",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
+      EffForSignal.Draw("SAMEHISTOTEXT00")
+      EffForSignal.SetLineColor(6)
+      EffForSignal.SetMarkerColor(6)
+      EffForSignal.SetBinContent(1,BefPreSeffForpTSignal)
+      EffForSignal.SetBinContent(2,BefPreSeffForEtaSignal)
+      EffForSignal.SetBinContent(3,BefPreSeffForNumPixHitsSignal)
+      EffForSignal.SetBinContent(4,BefPreSeffForValidFractSignal)
+      EffForSignal.SetBinContent(5,BefPreSeffForNumDeDxSignal)
+      EffForSignal.SetBinContent(6,BefPreSeffForChi2oDOFSignal)
+      EffForSignal.SetBinContent(7,BefPreSeffFordzSignal)
+      EffForSignal.SetBinContent(8,BefPreSeffFordxySignal)
+      EffForSignal.SetBinContent(9,BefPreSeffForEoPSignal)
+      EffForSignal.SetBinContent(10,BefPreSeffForMiniIsoSignal)
+      EffForSignal.SetBinContent(11,BefPreSeffForIhSignal)
+      EffForSignal.SetBinContent(12,BefPreSeffForPSignal)
+      EffForSignal.SetBinContent(13,BefPreSeffForTIsolSignal)
+      EffForSignal.SetBinContent(14,BefPreSeffForpTErrOverPt2Signal)
+      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
+      
+      tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+#      tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
+      
+      legend.Draw("SAME")
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowBefPreS.png")
+####################################################################################
+      # EffsInCutflowN1.png
+      cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForpT)
+      EffForData.SetBinContent(2,N1effForEta)
+      EffForData.SetBinContent(3,N1effForNumPixHits)
+      EffForData.SetBinContent(4,N1effForValidFract)
+      EffForData.SetBinContent(5,N1effForNumDeDx)
+      EffForData.SetBinContent(6,N1effForChi2oDOF)
+      EffForData.SetBinContent(7,N1effFordz)
+      EffForData.SetBinContent(8,N1effFordxy)
+      EffForData.SetBinContent(9,N1effForEoP)
+      EffForData.SetBinContent(10,N1effForMiniIso)
+      EffForData.SetBinContent(11,N1effForIh)
+      EffForData.SetBinContent(12,N1effForP)
+      EffForData.SetBinContent(13,N1effForTIsol)
+      print(N1effForTIsol)
+      EffForData.SetBinContent(14,N1effForpTErrOverPt2)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+#      EffForData.SetMarkerStyle(20)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"pT > 55")
+      EffForData.GetXaxis().SetBinLabel(2,"Eta < 1.0")
+      EffForData.GetXaxis().SetBinLabel(3,"NumPixHitsNoL1 > 1")
+      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.8")
+      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 9")
+      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
+      EffForData.GetXaxis().SetBinLabel(7,"dz < 0.1")
+      EffForData.GetXaxis().SetBinLabel(8,"dxy < 0.02")
+      EffForData.GetXaxis().SetBinLabel(9,"EoP < 0.3")
+      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
+      EffForData.GetXaxis().SetBinLabel(12,"P < 3 TeV")
+      EffForData.GetXaxis().SetBinLabel(13,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetBinLabel(14,"ptErr/pt2 < 0.001")
+      EffForData.GetXaxis().SetTitle("")
+      
+      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
+      legend.SetTextFont(42)
+      legend.SetTextSize(0.02)
+      legend.SetBorderSize(1);
+      legend.SetBorderSize(0);
+      legend.SetLineColor(1);
+      legend.SetLineStyle(1);
+      legend.SetLineWidth(1);
+      legend.SetFillColor(0);
+      legend.SetFillStyle(1001);
+      legend.AddEntry(EffForData,"DATA (2018C)","LP")
+      
+
+      EffForBcg = ROOT.TH1F("EffForBcgN1",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
+      EffForBcg.Draw("SAMEHISTOTEXT00")
+      EffForBcg.SetLineColor(3)
+      EffForBcg.SetMarkerColor(3)
+      EffForBcg.SetBinContent(1,N1effForpTBcg)
+      EffForBcg.SetBinContent(2,N1effForEtaBcg)
+      EffForBcg.SetBinContent(3,N1effForNumPixHitsBcg)
+      EffForBcg.SetBinContent(4,N1effForValidFractBcg)
+      EffForBcg.SetBinContent(5,N1effForNumDeDxBcg)
+      EffForBcg.SetBinContent(6,N1effForChi2oDOFBcg)
+      EffForBcg.SetBinContent(7,N1effFordzBcg)
+      EffForBcg.SetBinContent(8,N1effFordxyBcg)
+      EffForBcg.SetBinContent(9,N1effForEoPBcg)
+      EffForBcg.SetBinContent(10,N1effForMiniIsoBcg)
+      EffForBcg.SetBinContent(11,N1effForIhBcg)
+      EffForBcg.SetBinContent(12,N1effForPBcg)
+      EffForBcg.SetBinContent(13,N1effForTIsolBcg)
+      print(N1effForTIsolBcg)
+      EffForBcg.SetBinContent(14,N1effForpTErrOverPt2Bcg)
+      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
+      
+      EffForSignal = ROOT.TH1F("EffForSignalN1",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
+      EffForSignal.Draw("SAMEHISTOTEXT00")
+      EffForSignal.SetLineColor(6)
+      EffForSignal.SetMarkerColor(6)
+      EffForSignal.SetBinContent(1,N1effForpTSignal)
+      EffForSignal.SetBinContent(2,N1effForEtaSignal)
+      EffForSignal.SetBinContent(3,N1effForNumPixHitsSignal)
+      EffForSignal.SetBinContent(4,N1effForValidFractSignal)
+      EffForSignal.SetBinContent(5,N1effForNumDeDxSignal)
+      EffForSignal.SetBinContent(6,N1effForChi2oDOFSignal)
+      EffForSignal.SetBinContent(7,N1effFordzSignal)
+      EffForSignal.SetBinContent(8,N1effFordxySignal)
+      EffForSignal.SetBinContent(9,N1effForEoPSignal)
+      EffForSignal.SetBinContent(10,N1effForMiniIsoSignal)
+      EffForSignal.SetBinContent(11,N1effForIhSignal)
+      EffForSignal.SetBinContent(12,N1effForPSignal)
+      EffForSignal.SetBinContent(13,N1effForTIsolSignal)
+      print(N1effForTIsolSignal)
+      EffForSignal.SetBinContent(14,N1effForpTErrOverPt2Signal)
+      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      legend.Draw("SAME")
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1.png")
+      
+####################################################################################################################
+      # Punzi for BefPreS (EffsInCutflowBefPreSPunzi.png)
+
+      ROOT.gStyle.SetPaintTextFormat(".2g");
+      cstackedSummedBackgroundStringBefPreSPunzi = "cstackedSummedBackgroundStringBefPreSPunzi"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringBefPreSPunzi, cstackedSummedBackgroundStringBefPreSPunzi, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForDataBef",";;Punzi-significance",14,0.,14.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,BefPreSeffForpTPunzi)
+      EffForData.SetBinContent(2,BefPreSeffForEtaPunzi)
+      EffForData.SetBinContent(3,BefPreSeffForNumPixHitsPunzi)
+      EffForData.SetBinContent(4,BefPreSeffForValidFractPunzi)
+      EffForData.SetBinContent(5,BefPreSeffForNumDeDxPunzi)
+      EffForData.SetBinContent(6,BefPreSeffForChi2oDOFPunzi)
+      EffForData.SetBinContent(7,BefPreSeffFordzPunzi)
+      EffForData.SetBinContent(8,BefPreSeffFordxyPunzi)
+      EffForData.SetBinContent(9,BefPreSeffForEoPPunzi)
+      EffForData.SetBinContent(10,BefPreSeffForMiniIsoPunzi)
+      EffForData.SetBinContent(11,BefPreSeffForIhPunzi)
+      EffForData.SetBinContent(12,BefPreSeffForPPunzi)
+      EffForData.SetBinContent(13,BefPreSeffForTIsolPunzi)
+      EffForData.SetBinContent(14,BefPreSeffForpTErrOverPt2Punzi)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+#      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"pT > 55")
+      EffForData.GetXaxis().SetBinLabel(2,"Eta < 1.0")
+      EffForData.GetXaxis().SetBinLabel(3,"NumPixHitsNoL1 > 1")
+      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.8")
+      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 9")
+      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
+      EffForData.GetXaxis().SetBinLabel(7,"dz < 0.1")
+      EffForData.GetXaxis().SetBinLabel(8,"dxy < 0.02")
+      EffForData.GetXaxis().SetBinLabel(9,"EoP < 0.3")
+      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
+      EffForData.GetXaxis().SetBinLabel(12,"P < 3 TeV")
+      EffForData.GetXaxis().SetBinLabel(13,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetBinLabel(14,"ptErr/pt2 < 0.001")
+      EffForData.GetXaxis().SetTitle("")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"Before pre-selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowBefPreSPunzi.png")
+      
+####################################################################################################################
+      # Punzi for N-1 (EffsInCutflowN1Punzi.png)
+      
+      ROOT.gStyle.SetPaintTextFormat(".4f");
+      cstackedSummedBackgroundStringN1Punzi = "cstackedSummedBackgroundStringN1Punzi"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1Punzi, cstackedSummedBackgroundStringN1Punzi, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForDataPunzi",";;Punzi-significance",14,0.,14.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForpTPunzi)
+      EffForData.SetBinContent(2,N1effForEtaPunzi)
+      EffForData.SetBinContent(3,N1effForNumPixHitsPunzi)
+      EffForData.SetBinContent(4,N1effForValidFractPunzi)
+      EffForData.SetBinContent(5,N1effForNumDeDxPunzi)
+      EffForData.SetBinContent(6,N1effForChi2oDOFPunzi)
+      EffForData.SetBinContent(7,N1effFordzPunzi)
+      EffForData.SetBinContent(8,N1effFordxyPunzi)
+      EffForData.SetBinContent(9,N1effForEoPPunzi)
+      EffForData.SetBinContent(10,N1effForMiniIsoPunzi)
+      EffForData.SetBinContent(11,N1effForIhPunzi)
+      EffForData.SetBinContent(12,N1effForPPunzi)
+      EffForData.SetBinContent(13,N1effForTIsolPunzi)
+      EffForData.SetBinContent(14,N1effForpTErrOverPt2Punzi)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+#      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"pT > 55")
+      EffForData.GetXaxis().SetBinLabel(2,"Eta < 1.0")
+      EffForData.GetXaxis().SetBinLabel(3,"NumPixHitsNoL1 > 1")
+      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.8")
+      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 9")
+      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
+      EffForData.GetXaxis().SetBinLabel(7,"dz < 0.1")
+      EffForData.GetXaxis().SetBinLabel(8,"dxy < 0.02")
+      EffForData.GetXaxis().SetBinLabel(9,"EoP < 0.3")
+      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
+      EffForData.GetXaxis().SetBinLabel(12,"P < 3 TeV")
+      EffForData.GetXaxis().SetBinLabel(13,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetBinLabel(14,"ptErr/pt2 < 0.001")
+      EffForData.GetXaxis().SetTitle("")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1Punzi.png")
+
+os.system("cp forWebpage/* Effs_CodeV"+codeVersion+"/.")
+os.system("cp forWebpage/.htaccess Effs_CodeV"+codeVersion+"/.")
+print("scp -r Effs_CodeV"+ codeVersion + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v3.py b/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v3.py
new file mode 100644
index 0000000..b87e7b4
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v3.py
@@ -0,0 +1,532 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+ROOT.gStyle.SetPaintTextFormat("4.2f");
+
+SingleMuonSample = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_CodeV"+codeVersion+"_v1.root")
+AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
+Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root")
+
+cutValues = {
+'BefPreS_Pt' : 55.,
+'N1_Pt' : 55.,
+'BefPreS_Eta' : 1.0,
+'N1_Eta' : 1.0,
+'BefPreS_TNOPH' : 1., # after 29p2 should be 1
+'N1_TNOPH' : 1., # after 29p2 should be 1
+'BefPreS_TNOHFraction' : .8,
+'N1_TNOHFraction' : .8,
+'BefPreS_TNOM' : 9.,
+'N1_TNOM' : 9.,
+'BefPreS_Chi2oNdof' : 5.,
+'N1_Chi2oNdof' : 5.,
+'BefPreS_Dz' : 0.1,
+'N1_Dz' : 0.1,
+'BefPreS_Dxy' : 0.02,
+'N1_Dxy' : 0.02,
+'BefPreS_PtErrOverPt2' : 0.001,
+'PostPreS_PtErrOverPt2' : 0.001,
+'N1_EoP' : 0.3,
+'BefPreS_EoP' : 0.3,
+'BefPreS_Ih' : 3.47,
+'N1_Ih' : 3.47,
+'BefPreS_ProbXY' : 0.01,
+'N1_ProbXY' : 0.01,
+'BefPreS_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'BefPreS_P' : 3000,
+'PostPreS_P' : 3000,
+'BefPreS_TIsol' : 10,
+'PostPreS_TIsol' : 10,
+'BefPreS_MiniTkIso' : 10,
+'N1_MiniTkIso' : 10,
+'BefPreS_MiniTkIso_PUA' : 10,
+'N1_MiniTkIso_PUA' : 10,
+'BefPreS_MiniTkIso_PUB' : 10,
+'N1_MiniTkIso_PUB' : 10,
+'BefPreS_MiniTkIso_PUC' : 10,
+'N1_MiniTkIso_PUC' : 10,
+}
+
+
+sigma = 3
+
+if not os.path.exists(os.path.dirname("Effs_CodeV"+codeVersion+"/a.png")):
+  print("Create dir")
+  os.makedirs(os.path.dirname("Effs_CodeV"+codeVersion+"/"))
+
+for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
+  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
+  curr_dir = SingleMuonSample.GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  N1eff = N1effForP = N1effForPPunzi = N1effForPBcg = N1effForPSignal = 0
+  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
+  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
+  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          if not ("N1_Eta" in keyname2) : continue
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
+          histo = SingleMuonSample.Get(newname)
+          histoAllBcg = AllBcgSample.Get(newname)
+          histoSignal = Rhadron1800GeV.Get(newname)
+#          histoDenomAllBcg = AllBcgSample.Get(dirname + "/" + keyname + "/N1_Eta")
+#          histoDenomAllBcg = AllBcgSample.Get(dirname + "/" + keyname + "/BefPreS_Eta")
+
+          if not (cutValues.get(keyname2)) : continue
+          Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
+          NumAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(cutValues[keyname2]))
+          NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(cutValues[keyname2]))
+          Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()+1))
+          DenomAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(histoAllBcg.GetXaxis().GetXmax()+1))
+#          DenomAllBcg = histoDenomAllBcg.Integral(histoDenomAllBcg.GetXaxis().FindBin(0),histoDenomAllBcg.GetXaxis().FindBin(histoDenomAllBcg.GetXaxis().GetXmax()+1))
+#          DenomAllBcg = histoDenomAllBcg.Integral(histoDenomAllBcg.GetXaxis().FindBin(0),histoDenomAllBcg.GetXaxis().FindBin(histoDenomAllBcg.GetXaxis().GetXmax()+1))
+#
+#          print(keyname2 + ": " + str(DenomAllBcg))
+          DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()+1))
+          if (Denom>0) :  Eff = Num / Denom
+          else : Eff = 0
+          if (DenomAllBcg>0) : EffAllBcg = NumAllBcg / DenomAllBcg
+          else : EffAllBcg = 0
+          if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
+          else : EffSignal = 0
+         
+          if ("BefPreS_Eta" in keyname2) :
+            BefPreSeffForEta = Eff
+            BefPreSeffForEtaBcg = EffAllBcg
+            BefPreSeffForEtaSignal = EffSignal
+            BefPreSeffForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_P") :
+            BefPreSeffForP = Eff
+            BefPreSeffForPBcg = EffAllBcg
+            BefPreSeffForPSignal = EffSignal
+            BefPreSeffForPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Pt" in keyname2) :
+            BefPreSeffForpT = 1-Eff
+            BefPreSeffForpTBcg = 1-EffAllBcg
+            BefPreSeffForpTSignal = 1-EffSignal
+            BefPreSeffForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_PtErrOverPt2" in keyname2) :
+            BefPreSeffForpTErrOverPt2 = Eff
+            BefPreSeffForpTErrOverPt2Bcg = EffAllBcg
+            BefPreSeffForpTErrOverPt2Signal = EffSignal
+            BefPreSeffForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_TNOPH" in keyname2) :
+            BefPreSeffForNumPixHits = 1-Eff
+            BefPreSeffForNumPixHitsBcg = 1-EffAllBcg
+            BefPreSeffForNumPixHitsSignal = 1-EffSignal
+            BefPreSeffForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_TNOHFraction" in keyname2) :
+            BefPreSeffForValidFract = 1-Eff
+            BefPreSeffForValidFractBcg = 1-EffAllBcg
+            BefPreSeffForValidFractSignal = 1-EffSignal
+            BefPreSeffForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_TNOM" in keyname2) :
+            BefPreSeffForNumDeDx = 1-Eff
+            BefPreSeffForNumDeDxBcg = 1-EffAllBcg
+            BefPreSeffForNumDeDxSignal = 1-EffSignal
+            BefPreSeffForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Chi2oNdof" in keyname2) :
+            BefPreSeffForChi2oDOF = Eff
+            BefPreSeffForChi2oDOFBcg = EffAllBcg
+            BefPreSeffForChi2oDOFSignal = EffSignal
+            BefPreSeffForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_EoP" in keyname2) :
+            BefPreSeffForEoP = Eff
+            BefPreSeffForEoPBcg = EffAllBcg
+            BefPreSeffForEoPSignal = EffSignal
+            BefPreSeffForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Dz" in keyname2) :
+            BefPreSeffFordz = Eff
+            BefPreSeffFordzBcg = EffAllBcg
+            BefPreSeffFordzSignal = EffSignal
+            BefPreSeffFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Dxy" in keyname2) :
+            BefPreSeffFordxy = Eff
+            BefPreSeffFordxyBcg = EffAllBcg
+            BefPreSeffFordxySignal = EffSignal
+            BefPreSeffFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_MiniRelIsoAll_lowMiniRelIso" in keyname2) :
+            BefPreSeffForMiniIso = Eff
+            BefPreSeffForMiniIsoBcg = EffAllBcg
+            BefPreSeffForMiniIsoSignal = EffSignal
+            BefPreSeffForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Ih" in keyname2) :
+            BefPreSeffForIh = 1-Eff
+            BefPreSeffForIhBcg = 1-EffAllBcg
+            BefPreSeffForIhSignal = 1-EffSignal
+            BefPreSeffForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_ProbXY" in keyname2) :
+            BefPreSeffForProbXY = 1-Eff
+            BefPreSeffForProbXYBcg = 1-EffAllBcg
+            BefPreSeffForProbXYSignal = 1-EffSignal
+            BefPreSeffForProbXYPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_TIsol") :
+            BefPreSeffForTIsol = Eff
+            BefPreSeffForTIsolBcg = EffAllBcg
+            BefPreSeffForTIsolSignal = EffSignal
+            BefPreSeffForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso") :
+            BefPreSeffForMiniRelTkIso = Eff
+            BefPreSeffForMiniRelTkIsoBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUA") :
+            BefPreSeffForMiniRelTkIsoPUA = Eff
+            BefPreSeffForMiniRelTkIsoPUABcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUASignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUB") :
+            BefPreSeffForMiniRelTkIsoPUB = Eff
+            BefPreSeffForMiniRelTkIsoPUBBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUBSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUC") :
+            BefPreSeffForMiniRelTkIsoPUC = Eff
+            BefPreSeffForMiniRelTkIsoPUCBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUCSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniTkIso") :
+            BefPreSeffForMiniTkIso = Eff
+            BefPreSeffForMiniTkIsoBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoSignal = EffSignal
+            BefPreSeffForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniTkIso_PUA") :
+            BefPreSeffForMiniTkIsoPUA = Eff
+            BefPreSeffForMiniTkIsoPUABcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUASignal = EffSignal
+            BefPreSeffForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniTkIso_PUB") :
+            BefPreSeffForMiniTkIsoPUB = Eff
+            BefPreSeffForMiniTkIsoPUBBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUBSignal = EffSignal
+            BefPreSeffForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniTkIso_PUC") :
+            BefPreSeffForMiniTkIsoPUC = Eff
+            BefPreSeffForMiniTkIsoPUCBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUCSignal = EffSignal
+            BefPreSeffForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+            
+            
+          if ("N1_Eta" in keyname2) :
+            N1effForEta = Eff
+            N1effForEtaBcg = EffAllBcg
+            N1effForEtaSignal = EffSignal
+            N1effForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Pt" in keyname2) :
+            N1effForpT = 1-Eff
+            N1effForpTBcg = 1-EffAllBcg
+            N1effForpTSignal = 1-EffSignal
+            N1effForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("PostPreS_PtErrOverPt2" in keyname2) :
+            N1effForpTErrOverPt2 = Eff
+            N1effForpTErrOverPt2Bcg = EffAllBcg
+            N1effForpTErrOverPt2Signal = EffSignal
+            N1effForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_TNOPH" in keyname2) :
+            N1effForNumPixHits = 1-Eff
+            N1effForNumPixHitsBcg = 1-EffAllBcg
+            N1effForNumPixHitsSignal = 1-EffSignal
+            N1effForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_TNOHFraction" in keyname2) :
+            N1effForValidFract = 1-Eff
+            N1effForValidFractBcg = 1-EffAllBcg
+            N1effForValidFractSignal = 1-EffSignal
+            N1effForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_TNOM" in keyname2) :
+            N1effForNumDeDx = 1-Eff
+            N1effForNumDeDxBcg = 1-EffAllBcg
+            N1effForNumDeDxSignal = 1-EffSignal
+            N1effForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Chi2oNdof" in keyname2) :
+            N1effForChi2oDOF = Eff
+            N1effForChi2oDOFBcg = EffAllBcg
+            N1effForChi2oDOFSignal = EffSignal
+            N1effForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_EoP" in keyname2) :
+            N1effForEoP = Eff
+            N1effForEoPBcg = EffAllBcg
+            N1effForEoPSignal = EffSignal
+            N1effForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Dz" in keyname2) :
+            N1effFordz = Eff
+            N1effFordzBcg = EffAllBcg
+            N1effFordzSignal = EffSignal
+            N1effFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Dxy" in keyname2) :
+            N1effFordxy = Eff
+            N1effFordxyBcg = EffAllBcg
+            N1effFordxySignal = EffSignal
+            N1effFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_MiniRelIsoAll_lowMiniRelIso" in keyname2) :
+            N1effForMiniIso = Eff
+            N1effForMiniIsoBcg = EffAllBcg
+            N1effForMiniIsoSignal = EffSignal
+            print("MiniRelIsoAll EffSignal: "+str(EffSignal))
+            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Ih" in keyname2) :
+            N1effForIh = 1-Eff
+            N1effForIhBcg = 1-EffAllBcg
+            N1effForIhSignal = 1-EffSignal
+            N1effForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_ProbXY" in keyname2) :
+            N1effForProbXY = 1-Eff
+            N1effForProbXYBcg = 1-EffAllBcg
+            N1effForProbXYSignal = 1-EffSignal
+            N1effForProbXYPunzi= (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "PostPreS_P" ) :
+            N1effForP = Eff
+            N1effForPBcg = EffAllBcg
+            N1effForPSignal = EffSignal
+            N1effForPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "PostPreS_TIsol") :
+            N1effForTIsol = Eff
+            N1effForTIsolBcg = EffAllBcg
+            N1effForTIsolSignal = EffSignal
+            N1effForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso") :
+            N1effForMiniRelTkIso = Eff
+            N1effForMiniRelTkIsoBcg = EffAllBcg
+            N1effForMiniRelTkIsoSignal = EffSignal
+            print("MiniRelTkIso EffSignal: "+str(EffSignal))
+            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUA") :
+            N1effForMiniRelTkIsoPUA = Eff
+            N1effForMiniRelTkIsoPUABcg = EffAllBcg
+            N1effForMiniRelTkIsoPUASignal = EffSignal
+#            print("PUA EffSignal: "+str(EffSignal))
+#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUB") :
+            N1effForMiniRelTkIsoPUB = Eff
+            N1effForMiniRelTkIsoPUBBcg = EffAllBcg
+            N1effForMiniRelTkIsoPUBSignal = EffSignal
+#            print("PUB EffSignal: "+str(EffSignal))
+#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUC") :
+            N1effForMiniRelTkIsoPUC = Eff
+            N1effForMiniRelTkIsoPUCBcg = EffAllBcg
+            N1effForMiniRelTkIsoPUCSignal = EffSignal
+#            print("PUC EffSignal: "+str(EffSignal))
+#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniTkIso") :
+            N1effForMiniTkIso = Eff
+            N1effForMiniTkIsoBcg = EffAllBcg
+            N1effForMiniTkIsoSignal = EffSignal
+            N1effForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniTkIso_PUA") :
+            N1effForMiniTkIsoPUA = Eff
+            N1effForMiniTkIsoPUABcg = EffAllBcg
+            N1effForMiniTkIsoPUASignal = EffSignal
+            N1effForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniTkIso_PUB") :
+            N1effForMiniTkIsoPUB = Eff
+            N1effForMiniTkIsoPUBBcg = EffAllBcg
+            N1effForMiniTkIsoPUBSignal = EffSignal
+            N1effForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniTkIso_PUC") :
+            N1effForMiniTkIsoPUC = Eff
+            N1effForMiniTkIsoPUCBcg = EffAllBcg
+            N1effForMiniTkIsoPUCSignal = EffSignal
+            N1effForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          
+      tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+      tex2.SetNDC();
+      tex2.SetTextFont(61);
+      tex2.SetTextSize(0.0675);
+      tex2.SetLineWidth(2);
+
+      tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+      tex3.SetNDC();
+      tex3.SetTextFont(52);
+      tex3.SetTextSize(0.0485);
+      tex3.SetLineWidth(2);
+      
+      tex4 = ROOT.TLatex()
+
+      tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+      tex5.SetNDC();
+      tex5.SetTextFont(52);
+      tex5.SetTextSize(0.0185);
+      tex5.SetLineWidth(2);
+      
+####################################################################################
+      # EffsInCutflowN1.png
+      cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForMiniRelTkIso)
+      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUA)
+      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUB)
+      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUC)
+      EffForData.SetBinContent(5,N1effForMiniTkIso)
+      EffForData.SetBinContent(6,N1effForMiniTkIsoPUA)
+      EffForData.SetBinContent(7,N1effForMiniTkIsoPUB)
+      EffForData.SetBinContent(8,N1effForMiniTkIsoPUC)
+      EffForData.SetBinContent(9,N1effForMiniIso)
+      EffForData.SetBinContent(10,N1effForTIsol)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+#      EffForData.SetMarkerStyle(20)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
+      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
+      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetTitle("")
+      
+      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
+      legend.SetTextFont(42)
+      legend.SetTextSize(0.02)
+      legend.SetBorderSize(1);
+      legend.SetBorderSize(0);
+      legend.SetLineColor(1);
+      legend.SetLineStyle(1);
+      legend.SetLineWidth(1);
+      legend.SetFillColor(0);
+      legend.SetFillStyle(1001);
+      legend.AddEntry(EffForData,"DATA (2018C)","LP")
+      
+
+      EffForBcg = ROOT.TH1F("EffForBcgN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
+      EffForBcg.Draw("SAMEHISTOTEXT00")
+      EffForBcg.SetLineColor(3)
+      EffForBcg.SetMarkerColor(3)
+      EffForBcg.SetBinContent(1,N1effForMiniRelTkIsoBcg)
+      EffForBcg.SetBinContent(2,N1effForMiniRelTkIsoPUABcg)
+      EffForBcg.SetBinContent(3,N1effForMiniRelTkIsoPUBBcg)
+      EffForBcg.SetBinContent(4,N1effForMiniRelTkIsoPUCBcg)
+      EffForBcg.SetBinContent(5,N1effForMiniTkIsoBcg)
+      EffForBcg.SetBinContent(6,N1effForMiniTkIsoPUABcg)
+      EffForBcg.SetBinContent(7,N1effForMiniTkIsoPUBBcg)
+      EffForBcg.SetBinContent(8,N1effForMiniTkIsoPUCBcg)
+      EffForBcg.SetBinContent(9,N1effForMiniIsoBcg)
+      EffForBcg.SetBinContent(10,N1effForTIsolBcg)
+      EffForBcg.SetBinContent(14,N1effForpTErrOverPt2Bcg)
+      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
+      
+      EffForSignal = ROOT.TH1F("EffForSignalN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
+      EffForSignal.Draw("SAMEHISTOTEXT00")
+      EffForSignal.SetLineColor(6)
+      EffForSignal.SetMarkerColor(6)
+      EffForSignal.SetBinContent(1,N1effForMiniRelTkIsoSignal)
+      EffForSignal.SetBinContent(2,N1effForMiniRelTkIsoPUASignal)
+      EffForSignal.SetBinContent(3,N1effForMiniRelTkIsoPUBSignal)
+      EffForSignal.SetBinContent(4,N1effForMiniRelTkIsoPUCSignal)
+      EffForSignal.SetBinContent(5,N1effForMiniTkIsoSignal)
+      EffForSignal.SetBinContent(6,N1effForMiniTkIsoPUASignal)
+      EffForSignal.SetBinContent(7,N1effForMiniTkIsoPUBSignal)
+      EffForSignal.SetBinContent(8,N1effForMiniTkIsoPUCSignal)
+      EffForSignal.SetBinContent(9,N1effForMiniIsoSignal)
+      EffForSignal.SetBinContent(10,N1effForTIsolSignal)
+      EffForSignal.SetBinContent(14,N1effForpTErrOverPt2Signal)
+      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      legend.Draw("SAME")
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1.png")
+
+####################################################################################################################
+      # Punzi for N-1 (EffsInCutflowN1Punzi.png)
+      
+      ROOT.gStyle.SetPaintTextFormat(".4f");
+      cstackedSummedBackgroundStringN1Punzi = "cstackedSummedBackgroundStringN1Punzi"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1Punzi, cstackedSummedBackgroundStringN1Punzi, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForDataPunzi",";;Punzi-significance",10,0.,10.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForMiniRelTkIsoPunzi)
+      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUAPunzi)
+      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUBPunzi)
+      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUCPunzi)
+      EffForData.SetBinContent(5,N1effForMiniTkIsoPunzi)
+      EffForData.SetBinContent(6,N1effForMiniTkIsoPUAPunzi)
+      EffForData.SetBinContent(7,N1effForMiniTkIsoPUBPunzi)
+      EffForData.SetBinContent(8,N1effForMiniTkIsoPUCPunzi)
+      EffForData.SetBinContent(9,N1effForMiniIsoPunzi)
+      EffForData.SetBinContent(10,N1effForTIsolPunzi)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
+      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
+      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetTitle("")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1Punzi.png")
+
+os.system("cp forWebpage/* Effs_CodeV"+codeVersion+"/.")
+os.system("cp forWebpage/.htaccess Effs_CodeV"+codeVersion+"/.")
+print("scp -r Effs_CodeV"+ codeVersion + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v4.py b/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v4.py
new file mode 100644
index 0000000..b87e7b4
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createEffsSept_v4.py
@@ -0,0 +1,532 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+ROOT.gStyle.SetPaintTextFormat("4.2f");
+
+SingleMuonSample = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_CodeV"+codeVersion+"_v1.root")
+AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
+Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root")
+
+cutValues = {
+'BefPreS_Pt' : 55.,
+'N1_Pt' : 55.,
+'BefPreS_Eta' : 1.0,
+'N1_Eta' : 1.0,
+'BefPreS_TNOPH' : 1., # after 29p2 should be 1
+'N1_TNOPH' : 1., # after 29p2 should be 1
+'BefPreS_TNOHFraction' : .8,
+'N1_TNOHFraction' : .8,
+'BefPreS_TNOM' : 9.,
+'N1_TNOM' : 9.,
+'BefPreS_Chi2oNdof' : 5.,
+'N1_Chi2oNdof' : 5.,
+'BefPreS_Dz' : 0.1,
+'N1_Dz' : 0.1,
+'BefPreS_Dxy' : 0.02,
+'N1_Dxy' : 0.02,
+'BefPreS_PtErrOverPt2' : 0.001,
+'PostPreS_PtErrOverPt2' : 0.001,
+'N1_EoP' : 0.3,
+'BefPreS_EoP' : 0.3,
+'BefPreS_Ih' : 3.47,
+'N1_Ih' : 3.47,
+'BefPreS_ProbXY' : 0.01,
+'N1_ProbXY' : 0.01,
+'BefPreS_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'BefPreS_P' : 3000,
+'PostPreS_P' : 3000,
+'BefPreS_TIsol' : 10,
+'PostPreS_TIsol' : 10,
+'BefPreS_MiniTkIso' : 10,
+'N1_MiniTkIso' : 10,
+'BefPreS_MiniTkIso_PUA' : 10,
+'N1_MiniTkIso_PUA' : 10,
+'BefPreS_MiniTkIso_PUB' : 10,
+'N1_MiniTkIso_PUB' : 10,
+'BefPreS_MiniTkIso_PUC' : 10,
+'N1_MiniTkIso_PUC' : 10,
+}
+
+
+sigma = 3
+
+if not os.path.exists(os.path.dirname("Effs_CodeV"+codeVersion+"/a.png")):
+  print("Create dir")
+  os.makedirs(os.path.dirname("Effs_CodeV"+codeVersion+"/"))
+
+for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
+  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
+  curr_dir = SingleMuonSample.GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  N1eff = N1effForP = N1effForPPunzi = N1effForPBcg = N1effForPSignal = 0
+  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
+  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
+  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          if not ("N1_Eta" in keyname2) : continue
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
+          histo = SingleMuonSample.Get(newname)
+          histoAllBcg = AllBcgSample.Get(newname)
+          histoSignal = Rhadron1800GeV.Get(newname)
+#          histoDenomAllBcg = AllBcgSample.Get(dirname + "/" + keyname + "/N1_Eta")
+#          histoDenomAllBcg = AllBcgSample.Get(dirname + "/" + keyname + "/BefPreS_Eta")
+
+          if not (cutValues.get(keyname2)) : continue
+          Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
+          NumAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(cutValues[keyname2]))
+          NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(cutValues[keyname2]))
+          Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()+1))
+          DenomAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(histoAllBcg.GetXaxis().GetXmax()+1))
+#          DenomAllBcg = histoDenomAllBcg.Integral(histoDenomAllBcg.GetXaxis().FindBin(0),histoDenomAllBcg.GetXaxis().FindBin(histoDenomAllBcg.GetXaxis().GetXmax()+1))
+#          DenomAllBcg = histoDenomAllBcg.Integral(histoDenomAllBcg.GetXaxis().FindBin(0),histoDenomAllBcg.GetXaxis().FindBin(histoDenomAllBcg.GetXaxis().GetXmax()+1))
+#
+#          print(keyname2 + ": " + str(DenomAllBcg))
+          DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()+1))
+          if (Denom>0) :  Eff = Num / Denom
+          else : Eff = 0
+          if (DenomAllBcg>0) : EffAllBcg = NumAllBcg / DenomAllBcg
+          else : EffAllBcg = 0
+          if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
+          else : EffSignal = 0
+         
+          if ("BefPreS_Eta" in keyname2) :
+            BefPreSeffForEta = Eff
+            BefPreSeffForEtaBcg = EffAllBcg
+            BefPreSeffForEtaSignal = EffSignal
+            BefPreSeffForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_P") :
+            BefPreSeffForP = Eff
+            BefPreSeffForPBcg = EffAllBcg
+            BefPreSeffForPSignal = EffSignal
+            BefPreSeffForPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Pt" in keyname2) :
+            BefPreSeffForpT = 1-Eff
+            BefPreSeffForpTBcg = 1-EffAllBcg
+            BefPreSeffForpTSignal = 1-EffSignal
+            BefPreSeffForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_PtErrOverPt2" in keyname2) :
+            BefPreSeffForpTErrOverPt2 = Eff
+            BefPreSeffForpTErrOverPt2Bcg = EffAllBcg
+            BefPreSeffForpTErrOverPt2Signal = EffSignal
+            BefPreSeffForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_TNOPH" in keyname2) :
+            BefPreSeffForNumPixHits = 1-Eff
+            BefPreSeffForNumPixHitsBcg = 1-EffAllBcg
+            BefPreSeffForNumPixHitsSignal = 1-EffSignal
+            BefPreSeffForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_TNOHFraction" in keyname2) :
+            BefPreSeffForValidFract = 1-Eff
+            BefPreSeffForValidFractBcg = 1-EffAllBcg
+            BefPreSeffForValidFractSignal = 1-EffSignal
+            BefPreSeffForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_TNOM" in keyname2) :
+            BefPreSeffForNumDeDx = 1-Eff
+            BefPreSeffForNumDeDxBcg = 1-EffAllBcg
+            BefPreSeffForNumDeDxSignal = 1-EffSignal
+            BefPreSeffForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Chi2oNdof" in keyname2) :
+            BefPreSeffForChi2oDOF = Eff
+            BefPreSeffForChi2oDOFBcg = EffAllBcg
+            BefPreSeffForChi2oDOFSignal = EffSignal
+            BefPreSeffForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_EoP" in keyname2) :
+            BefPreSeffForEoP = Eff
+            BefPreSeffForEoPBcg = EffAllBcg
+            BefPreSeffForEoPSignal = EffSignal
+            BefPreSeffForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Dz" in keyname2) :
+            BefPreSeffFordz = Eff
+            BefPreSeffFordzBcg = EffAllBcg
+            BefPreSeffFordzSignal = EffSignal
+            BefPreSeffFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Dxy" in keyname2) :
+            BefPreSeffFordxy = Eff
+            BefPreSeffFordxyBcg = EffAllBcg
+            BefPreSeffFordxySignal = EffSignal
+            BefPreSeffFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_MiniRelIsoAll_lowMiniRelIso" in keyname2) :
+            BefPreSeffForMiniIso = Eff
+            BefPreSeffForMiniIsoBcg = EffAllBcg
+            BefPreSeffForMiniIsoSignal = EffSignal
+            BefPreSeffForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_Ih" in keyname2) :
+            BefPreSeffForIh = 1-Eff
+            BefPreSeffForIhBcg = 1-EffAllBcg
+            BefPreSeffForIhSignal = 1-EffSignal
+            BefPreSeffForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("BefPreS_ProbXY" in keyname2) :
+            BefPreSeffForProbXY = 1-Eff
+            BefPreSeffForProbXYBcg = 1-EffAllBcg
+            BefPreSeffForProbXYSignal = 1-EffSignal
+            BefPreSeffForProbXYPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_TIsol") :
+            BefPreSeffForTIsol = Eff
+            BefPreSeffForTIsolBcg = EffAllBcg
+            BefPreSeffForTIsolSignal = EffSignal
+            BefPreSeffForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso") :
+            BefPreSeffForMiniRelTkIso = Eff
+            BefPreSeffForMiniRelTkIsoBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUA") :
+            BefPreSeffForMiniRelTkIsoPUA = Eff
+            BefPreSeffForMiniRelTkIsoPUABcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUASignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUB") :
+            BefPreSeffForMiniRelTkIsoPUB = Eff
+            BefPreSeffForMiniRelTkIsoPUBBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUBSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUC") :
+            BefPreSeffForMiniRelTkIsoPUC = Eff
+            BefPreSeffForMiniRelTkIsoPUCBcg = EffAllBcg
+            BefPreSeffForMiniRelTkIsoPUCSignal = EffSignal
+            BefPreSeffForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniTkIso") :
+            BefPreSeffForMiniTkIso = Eff
+            BefPreSeffForMiniTkIsoBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoSignal = EffSignal
+            BefPreSeffForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniTkIso_PUA") :
+            BefPreSeffForMiniTkIsoPUA = Eff
+            BefPreSeffForMiniTkIsoPUABcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUASignal = EffSignal
+            BefPreSeffForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniTkIso_PUB") :
+            BefPreSeffForMiniTkIsoPUB = Eff
+            BefPreSeffForMiniTkIsoPUBBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUBSignal = EffSignal
+            BefPreSeffForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "BefPreS_MiniTkIso_PUC") :
+            BefPreSeffForMiniTkIsoPUC = Eff
+            BefPreSeffForMiniTkIsoPUCBcg = EffAllBcg
+            BefPreSeffForMiniTkIsoPUCSignal = EffSignal
+            BefPreSeffForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+            
+            
+          if ("N1_Eta" in keyname2) :
+            N1effForEta = Eff
+            N1effForEtaBcg = EffAllBcg
+            N1effForEtaSignal = EffSignal
+            N1effForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Pt" in keyname2) :
+            N1effForpT = 1-Eff
+            N1effForpTBcg = 1-EffAllBcg
+            N1effForpTSignal = 1-EffSignal
+            N1effForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("PostPreS_PtErrOverPt2" in keyname2) :
+            N1effForpTErrOverPt2 = Eff
+            N1effForpTErrOverPt2Bcg = EffAllBcg
+            N1effForpTErrOverPt2Signal = EffSignal
+            N1effForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_TNOPH" in keyname2) :
+            N1effForNumPixHits = 1-Eff
+            N1effForNumPixHitsBcg = 1-EffAllBcg
+            N1effForNumPixHitsSignal = 1-EffSignal
+            N1effForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_TNOHFraction" in keyname2) :
+            N1effForValidFract = 1-Eff
+            N1effForValidFractBcg = 1-EffAllBcg
+            N1effForValidFractSignal = 1-EffSignal
+            N1effForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_TNOM" in keyname2) :
+            N1effForNumDeDx = 1-Eff
+            N1effForNumDeDxBcg = 1-EffAllBcg
+            N1effForNumDeDxSignal = 1-EffSignal
+            N1effForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Chi2oNdof" in keyname2) :
+            N1effForChi2oDOF = Eff
+            N1effForChi2oDOFBcg = EffAllBcg
+            N1effForChi2oDOFSignal = EffSignal
+            N1effForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_EoP" in keyname2) :
+            N1effForEoP = Eff
+            N1effForEoPBcg = EffAllBcg
+            N1effForEoPSignal = EffSignal
+            N1effForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Dz" in keyname2) :
+            N1effFordz = Eff
+            N1effFordzBcg = EffAllBcg
+            N1effFordzSignal = EffSignal
+            N1effFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Dxy" in keyname2) :
+            N1effFordxy = Eff
+            N1effFordxyBcg = EffAllBcg
+            N1effFordxySignal = EffSignal
+            N1effFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_MiniRelIsoAll_lowMiniRelIso" in keyname2) :
+            N1effForMiniIso = Eff
+            N1effForMiniIsoBcg = EffAllBcg
+            N1effForMiniIsoSignal = EffSignal
+            print("MiniRelIsoAll EffSignal: "+str(EffSignal))
+            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_Ih" in keyname2) :
+            N1effForIh = 1-Eff
+            N1effForIhBcg = 1-EffAllBcg
+            N1effForIhSignal = 1-EffSignal
+            N1effForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if ("N1_ProbXY" in keyname2) :
+            N1effForProbXY = 1-Eff
+            N1effForProbXYBcg = 1-EffAllBcg
+            N1effForProbXYSignal = 1-EffSignal
+            N1effForProbXYPunzi= (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "PostPreS_P" ) :
+            N1effForP = Eff
+            N1effForPBcg = EffAllBcg
+            N1effForPSignal = EffSignal
+            N1effForPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "PostPreS_TIsol") :
+            N1effForTIsol = Eff
+            N1effForTIsolBcg = EffAllBcg
+            N1effForTIsolSignal = EffSignal
+            N1effForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso") :
+            N1effForMiniRelTkIso = Eff
+            N1effForMiniRelTkIsoBcg = EffAllBcg
+            N1effForMiniRelTkIsoSignal = EffSignal
+            print("MiniRelTkIso EffSignal: "+str(EffSignal))
+            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUA") :
+            N1effForMiniRelTkIsoPUA = Eff
+            N1effForMiniRelTkIsoPUABcg = EffAllBcg
+            N1effForMiniRelTkIsoPUASignal = EffSignal
+#            print("PUA EffSignal: "+str(EffSignal))
+#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUB") :
+            N1effForMiniRelTkIsoPUB = Eff
+            N1effForMiniRelTkIsoPUBBcg = EffAllBcg
+            N1effForMiniRelTkIsoPUBSignal = EffSignal
+#            print("PUB EffSignal: "+str(EffSignal))
+#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUC") :
+            N1effForMiniRelTkIsoPUC = Eff
+            N1effForMiniRelTkIsoPUCBcg = EffAllBcg
+            N1effForMiniRelTkIsoPUCSignal = EffSignal
+#            print("PUC EffSignal: "+str(EffSignal))
+#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
+            N1effForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniTkIso") :
+            N1effForMiniTkIso = Eff
+            N1effForMiniTkIsoBcg = EffAllBcg
+            N1effForMiniTkIsoSignal = EffSignal
+            N1effForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniTkIso_PUA") :
+            N1effForMiniTkIsoPUA = Eff
+            N1effForMiniTkIsoPUABcg = EffAllBcg
+            N1effForMiniTkIsoPUASignal = EffSignal
+            N1effForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniTkIso_PUB") :
+            N1effForMiniTkIsoPUB = Eff
+            N1effForMiniTkIsoPUBBcg = EffAllBcg
+            N1effForMiniTkIsoPUBSignal = EffSignal
+            N1effForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          if (keyname2 == "N1_MiniTkIso_PUC") :
+            N1effForMiniTkIsoPUC = Eff
+            N1effForMiniTkIsoPUCBcg = EffAllBcg
+            N1effForMiniTkIsoPUCSignal = EffSignal
+            N1effForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
+          
+      tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+      tex2.SetNDC();
+      tex2.SetTextFont(61);
+      tex2.SetTextSize(0.0675);
+      tex2.SetLineWidth(2);
+
+      tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+      tex3.SetNDC();
+      tex3.SetTextFont(52);
+      tex3.SetTextSize(0.0485);
+      tex3.SetLineWidth(2);
+      
+      tex4 = ROOT.TLatex()
+
+      tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+      tex5.SetNDC();
+      tex5.SetTextFont(52);
+      tex5.SetTextSize(0.0185);
+      tex5.SetLineWidth(2);
+      
+####################################################################################
+      # EffsInCutflowN1.png
+      cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForMiniRelTkIso)
+      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUA)
+      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUB)
+      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUC)
+      EffForData.SetBinContent(5,N1effForMiniTkIso)
+      EffForData.SetBinContent(6,N1effForMiniTkIsoPUA)
+      EffForData.SetBinContent(7,N1effForMiniTkIsoPUB)
+      EffForData.SetBinContent(8,N1effForMiniTkIsoPUC)
+      EffForData.SetBinContent(9,N1effForMiniIso)
+      EffForData.SetBinContent(10,N1effForTIsol)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+#      EffForData.SetMarkerStyle(20)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetYaxis().SetRangeUser(0.,1.3)
+      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
+      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
+      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetTitle("")
+      
+      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
+      legend.SetTextFont(42)
+      legend.SetTextSize(0.02)
+      legend.SetBorderSize(1);
+      legend.SetBorderSize(0);
+      legend.SetLineColor(1);
+      legend.SetLineStyle(1);
+      legend.SetLineWidth(1);
+      legend.SetFillColor(0);
+      legend.SetFillStyle(1001);
+      legend.AddEntry(EffForData,"DATA (2018C)","LP")
+      
+
+      EffForBcg = ROOT.TH1F("EffForBcgN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
+      EffForBcg.Draw("SAMEHISTOTEXT00")
+      EffForBcg.SetLineColor(3)
+      EffForBcg.SetMarkerColor(3)
+      EffForBcg.SetBinContent(1,N1effForMiniRelTkIsoBcg)
+      EffForBcg.SetBinContent(2,N1effForMiniRelTkIsoPUABcg)
+      EffForBcg.SetBinContent(3,N1effForMiniRelTkIsoPUBBcg)
+      EffForBcg.SetBinContent(4,N1effForMiniRelTkIsoPUCBcg)
+      EffForBcg.SetBinContent(5,N1effForMiniTkIsoBcg)
+      EffForBcg.SetBinContent(6,N1effForMiniTkIsoPUABcg)
+      EffForBcg.SetBinContent(7,N1effForMiniTkIsoPUBBcg)
+      EffForBcg.SetBinContent(8,N1effForMiniTkIsoPUCBcg)
+      EffForBcg.SetBinContent(9,N1effForMiniIsoBcg)
+      EffForBcg.SetBinContent(10,N1effForTIsolBcg)
+      EffForBcg.SetBinContent(14,N1effForpTErrOverPt2Bcg)
+      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
+      
+      EffForSignal = ROOT.TH1F("EffForSignalN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
+      EffForSignal.Draw("SAMEHISTOTEXT00")
+      EffForSignal.SetLineColor(6)
+      EffForSignal.SetMarkerColor(6)
+      EffForSignal.SetBinContent(1,N1effForMiniRelTkIsoSignal)
+      EffForSignal.SetBinContent(2,N1effForMiniRelTkIsoPUASignal)
+      EffForSignal.SetBinContent(3,N1effForMiniRelTkIsoPUBSignal)
+      EffForSignal.SetBinContent(4,N1effForMiniRelTkIsoPUCSignal)
+      EffForSignal.SetBinContent(5,N1effForMiniTkIsoSignal)
+      EffForSignal.SetBinContent(6,N1effForMiniTkIsoPUASignal)
+      EffForSignal.SetBinContent(7,N1effForMiniTkIsoPUBSignal)
+      EffForSignal.SetBinContent(8,N1effForMiniTkIsoPUCSignal)
+      EffForSignal.SetBinContent(9,N1effForMiniIsoSignal)
+      EffForSignal.SetBinContent(10,N1effForTIsolSignal)
+      EffForSignal.SetBinContent(14,N1effForpTErrOverPt2Signal)
+      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      legend.Draw("SAME")
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1.png")
+
+####################################################################################################################
+      # Punzi for N-1 (EffsInCutflowN1Punzi.png)
+      
+      ROOT.gStyle.SetPaintTextFormat(".4f");
+      cstackedSummedBackgroundStringN1Punzi = "cstackedSummedBackgroundStringN1Punzi"+str(keyname2)
+      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1Punzi, cstackedSummedBackgroundStringN1Punzi, 800,800)
+      
+      EffForData = ROOT.TH1F("EffForDataPunzi",";;Punzi-significance",10,0.,10.)
+      EffForData.Draw("HISTTEXT00")
+      EffForData.SetBinContent(1,N1effForMiniRelTkIsoPunzi)
+      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUAPunzi)
+      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUBPunzi)
+      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUCPunzi)
+      EffForData.SetBinContent(5,N1effForMiniTkIsoPunzi)
+      EffForData.SetBinContent(6,N1effForMiniTkIsoPUAPunzi)
+      EffForData.SetBinContent(7,N1effForMiniTkIsoPUBPunzi)
+      EffForData.SetBinContent(8,N1effForMiniTkIsoPUCPunzi)
+      EffForData.SetBinContent(9,N1effForMiniIsoPunzi)
+      EffForData.SetBinContent(10,N1effForTIsolPunzi)
+
+      
+      EffForData.SetLineColor(1)
+      EffForData.SetMarkerColor(1)
+      EffForData.SetStats(0)
+      EffForData.GetXaxis().SetTitle("")
+      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
+      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
+      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
+      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
+      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
+      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
+      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
+      EffForData.GetXaxis().SetTitle("")
+      
+      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
+      tex4.SetNDC();
+      tex4.SetTextFont(52);
+      tex4.SetTextSize(0.045);
+      tex4.SetLineWidth(2);
+      
+      tex2.Draw("SAME")
+      tex3.Draw("SAME")
+      tex4.Draw("SAME")
+      tex5.Draw("SAME")
+      
+      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1Punzi.png")
+
+os.system("cp forWebpage/* Effs_CodeV"+codeVersion+"/.")
+os.system("cp forWebpage/.htaccess Effs_CodeV"+codeVersion+"/.")
+print("scp -r Effs_CodeV"+ codeVersion + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createPunziScan_v2.py b/Analyzer/test/Tamas/PostProcScripts/createPunziScan_v2.py
new file mode 100644
index 0000000..6f941e6
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createPunziScan_v2.py
@@ -0,0 +1,178 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+ROOT.gStyle.SetPaintTextFormat("4.2f");
+
+SingleMuonSample = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_CodeV"+codeVersion+"_v1.root")
+AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
+Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root")
+
+cutValues = {
+'BefPreS_Pt' : 55.,
+'N1_Pt' : 55.,
+'N1_Pt_lowPt' : 55.,
+'BefPreS_Eta' : 1.0,
+'N1_Eta' : 1.0,
+'BefPreS_TNOPH' : 1., # after 29p2 should be 1
+'N1_TNOPH' : 1., # after 29p2 should be 1
+'BefPreS_TNOHFraction' : .8,
+'N1_TNOHFraction' : .8,
+'BefPreS_TNOM' : 9.,
+'N1_TNOM' : 9.,
+'BefPreS_Chi2oNdof' : 5.,
+'N1_Chi2oNdof' : 5.,
+'BefPreS_Dz' : 0.1,
+'N1_Dz' : 0.1,
+'BefPreS_Dxy' : 0.02,
+'N1_Dxy' : 0.02,
+'BefPreS_PtErrOverPt2' : 0.001,
+'PostPreS_PtErrOverPt2' : 0.001,
+'N1_EoP' : 0.3,
+'BefPreS_EoP' : 0.3,
+'BefPreS_Ih' : 3.47,
+'N1_Ih' : 3.47,
+'BefPreS_ProbXY' : 0.01,
+'N1_ProbXY' : 0.01,
+'BefPreS_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'BefPreS_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'BefPreS_P' : 3000,
+'PostPreS_P' : 3000,
+'BefPreS_TIsol' : 15,
+'PostPreS_TIsol' : 15,
+'BefPreS_MiniTkIso' : 15,
+'N1_MiniTkIso' : 15,
+'BefPreS_MiniTkIso_PUA' : 15,
+'N1_MiniTkIso_PUA' : 15,
+'BefPreS_MiniTkIso_PUB' : 15,
+'N1_MiniTkIso_PUB' : 15,
+'BefPreS_MiniTkIso_PUC' : 15,
+'N1_MiniTkIso_PUC' : 15,
+}
+
+
+sigma = 3
+
+if not os.path.exists(os.path.dirname("ComparePunzi_CodeV"+codeVersion+"/a.png")):
+  print("Create dir")
+  os.makedirs(os.path.dirname("ComparePunzi_CodeV"+codeVersion+"/"))
+
+for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
+  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
+  curr_dir = SingleMuonSample.GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  N1eff = N1effForP = N1effForPPunzi = N1effForPBcg = N1effForPSignal = 0
+  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
+  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
+  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          if not ("N1" in keyname2) : continue
+          if ("Qual" in keyname2) : continue
+          
+          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(keyname2)
+          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+          
+          histo = SingleMuonSample.Get(newname)
+          histoAllBcg = AllBcgSample.Get(newname)
+          histoSignal = Rhadron1800GeV.Get(newname)
+          
+          if not (histo.ClassName() == "TH1F") : continue
+          
+          numBins = histo.GetNbinsX()
+          maxXaxis = histo.GetXaxis().GetXmax()
+          minXaxis = histo.GetXaxis().GetXmin()
+          stepSize = (maxXaxis-minXaxis)/numBins
+          
+          SoBstring = "Punzi"+str(j)
+
+          PunziHisto = ROOT.TH1F(SoBstring,SoBstring,numBins,minXaxis,maxXaxis)
+          PunziHisto.SetStats(0)
+          PunziHisto.SetMarkerStyle(20)
+          
+          for x in numpy.arange(0,maxXaxis,stepSize):
+            NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(x))
+            DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()+1))
+            NumBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(x))
+            DenomBcg = histoAllBcg.Integral()
+
+            
+            if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
+            else : EffSignal = 0
+            
+#            print("EffSignal" + ": " + str(EffSignal))
+#            print("sqrt(B)" + ": " + str(numpy.sqrt(NumBcg)))
+            Bcg = NumBcg
+            if ((keyname2 == "N1_TNOM") or (keyname2 == "N1_Pt") or (keyname2 == "N1_Pt_lowPt") or (keyname2 == "N1_TNOPH") or (keyname2 == "N1_TNOHFraction")) :
+              EffSignal = 1-EffSignal
+              Bcg = DenomBcg - NumBcg
+            PunziForX = (EffSignal) / (sigma + numpy.sqrt(Bcg))
+
+            
+            PunziHisto.SetBinContent(histo.GetXaxis().FindBin(x),PunziForX)
+          PunziHisto.Draw() #HISTTEXT00
+          PunziHisto.SetTitle("")
+          PunziHisto.GetYaxis().SetTitle("Punzi-significance")
+          axisTitle = keyname2[3:]
+          PunziHisto.GetXaxis().SetTitle(axisTitle)
+            
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex4 = ROOT.TLatex()
+
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+                
+          tex4 = ROOT.TLatex(0.5,0.95,"After (N-1)+1 selection")
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.045);
+          tex4.SetLineWidth(2);
+
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+    
+          canvas.SaveAs("ComparePunzi_CodeV"+codeVersion+"/"+keyname2+".png")
+
+os.system("cp forWebpage/* ComparePunzi_CodeV"+codeVersion+"/.")
+os.system("cp forWebpage/.htaccess ComparePunzi_CodeV"+codeVersion+"/.")
+print("scp -r ComparePunzi_CodeV"+ codeVersion + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createROCPlots.py b/Analyzer/test/Tamas/PostProcScripts/createROCPlots.py
new file mode 100644
index 0000000..c31c3c5
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createROCPlots.py
@@ -0,0 +1,248 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+from ctypes import c_double as double
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BkgSamples = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
+
+InputListSamples = [
+"HSCPgluinoSamples_CodeV"+codeVersion+".txt",
+#"HSCPAllSamples_CodeV"+codeVersion+".txt",
+#"BackgroundSamplesCode"+codeVersion+".txt",
+"HSCPgluinoOnlyNeutralSamples_CodeV"+codeVersion+".txt",
+"HSCPgmsbStauSamples_CodeV"+codeVersion+".txt",
+"HSCPpairStauSamples_CodeV"+codeVersion+".txt",
+"HSCPstopOnlyNeutralSamples_CodeV"+codeVersion+".txt",
+"HSCPstopSamples_CodeV"+codeVersion+".txt",
+"HSCPtauPrime1Samples_CodeV"+codeVersion+".txt",
+"HSCPtauPrime2Samples_CodeV"+codeVersion+".txt",
+]
+
+OpenedSamples = []
+for list in InputListSamples:
+  MassPointSamples = []
+  with open(list, "r") as a_file:
+    for line in a_file:
+      stripped_line = line.strip()
+      MassPointSamples.append(ROOT.TFile.Open(stripped_line))
+    OpenedSamples.append(MassPointSamples)
+
+if os.path.exists(os.path.dirname("ROC_CodeV"+codeVersion)):
+  os.makedirs("ROC_CodeV"+codeVersion)
+  
+cutValues = {
+'N1_Eta' : 1.,
+'N1_Pt' : 55.,
+'N1_Pt_lowPt' : 55.,
+'N1_Dxy' : 0.02,
+'N1_Dz' : 0.1,
+'N1_dRMinPfJet' : 1000.,
+'N1_Chi2oNdof' : 5.,
+'N1_Qual' : 2.,
+'N1_TNOH' : 10.,
+'N1_TNOM' : 6.,
+'N1_Qual' : 2.,
+'N1_TNOPH' : 2.,
+'N1_TNOHFraction' : .8,
+'N1_EoP' : .3,
+'N1_SumpTOverpT' : 1000.,
+'N1_Ih' : 3.2,
+'N1_ProbQ' : 0.85,
+'PostPreS_ProbQNoL1' : 0.85,
+'N1_Stations' : 9.,
+'N1_PtErrOverPt' : .25,
+'N1_SegSep' : 25,
+'N1_ProbXY' : 1.0,
+'N1_MiniRelIsoAll' : 0.02,
+'N1_MiniRelTkIso' : 0.02,
+'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'N1_MiniTkIso' : 15.,
+'N1_MiniTkIso_PUA' : 15.,
+'N1_MiniTkIso_PUB' : 15.,
+'N1_MiniTkIso_PUC' : 15.,
+'N1_MiniTkIso_lowMiniRelIso' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUA' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUB' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUC' : 15.,
+'N1_MTOF' : 1000.,
+'N1_I' : 1000.,
+'N1_PtErrOverPt2' : 0.0007,
+'PostPreS_Ias' : 0.3,
+'PostPreS_Ias_NoEventWeight' : 0.3,
+'PostPreS_IasForStatus91' : 0.3,
+'PostPreS_IasForStatusNot91' : 0.3,
+'N1_DrMinPfJet': 10000,
+'N1_PfType': 10000,
+'N1_ProbQNoLayer1': 0.85,
+
+}
+
+
+for i in range(0, MassPointSamples[0].GetListOfKeys().GetEntries()):
+  dirname = MassPointSamples[0].GetListOfKeys().At(i).GetName()
+  curr_dir = MassPointSamples[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = MassPointSamples[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          if not ("N1_Eta" in keyname2) : continue
+          if not ("N1" in keyname2 or "PostPreS_ProbQNoL1" in keyname2 or "PostPreS_Ias"  in keyname2): continue
+          if ("Vs" in keyname2 or "N1_pfType" in keyname2) : continue
+          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(j)
+          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          
+          
+          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+        
+          # array to contain a specific (keyname2) histogram for all samples
+          histoArray = []
+          maxNumBins = 0.0
+          for i in range(0,len(OpenedSamples)) :
+            maxNumBins = numpy.maximum(maxNumBins,len(OpenedSamples[i]))
+ 
+          for indexOnSamples in range(0,len(OpenedSamples)) :
+            singleROCcurveString = 'singleROCcurve'+str(indexOnSamples)+str(j)
+            axisXTitle = keyname2[keyname2.find("N1_")+3:]
+            singleROCcurve = ROOT.TH1F(singleROCcurveString,";Mass index;Efficiency for "+axisXTitle,int(maxNumBins),0.,maxNumBins)
+            singleROCcurve.SetStats(0)
+            singleROCcurve.SetMarkerColor(indexOnSamples+1)
+            singleROCcurve.SetMarkerStyle(20)
+            singleROCcurve.SetLineColor(indexOnSamples+1)
+#            singleROCcurve.SetMaximum(1.5)
+            
+            for indexOnBins in range(0,len(OpenedSamples[indexOnSamples])) :
+              givenSampleWmassPoint = OpenedSamples[indexOnSamples][indexOnBins]
+              givenSampleWmassPointStr = str(givenSampleWmassPoint)
+              stringIndexWhere2018 = givenSampleWmassPointStr.find("2018_")+5
+              stringIndexWhereM = givenSampleWmassPointStr.find("_M")
+              stringIndexWhereW = givenSampleWmassPointStr.find("_w")
+              if (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW].find("_M")>0) :
+                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereM])
+              else:
+                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW])
+              histo = givenSampleWmassPoint.Get(newname)
+              histoBkg = BkgSamples.Get(newname)
+              
+              
+              if not (cutValues.get(keyname2)) :
+                print("No cut value for " + str(keyname2))
+                continue
+              DenomBkgErr = NumErr = NumBkgErr = DenomErr = double(0.0)
+
+              Num = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]),NumErr,"width")
+              NumBkg = histoBkg.IntegralAndError(histoBkg.GetXaxis().FindBin(0),histoBkg.GetXaxis().FindBin(cutValues[keyname2]),NumBkgErr,"width")
+              Denom = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()),DenomErr,"width")
+              DenomBkg = histoBkg.IntegralAndError(histoBkg.GetXaxis().FindBin(0),histoBkg.GetXaxis().FindBin(histoBkg.GetXaxis().GetXmax()),DenomBkgErr,"width")
+              
+              if (Denom>0) :
+                Eff = Num / Denom
+              else : Eff = -1
+              
+              if (DenomBkg>0 and NumBkg>0) :
+                EffErr =  Eff * numpy.sqrt( ((NumBkgErr.value / NumBkg) * (NumBkgErr.value / NumBkg)) + ((DenomBkgErr.value / DenomBkg) * (DenomBkgErr.value / DenomBkg) ))
+              else :
+                EffErr = 0.
+              
+              if (DenomBkg>0) :
+                EffBkg = NumBkg / DenomBkg
+              else : EffBkg = 0
+              
+              if ("N1_Pt" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_Pt_lowPt" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_TNOPH" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_TNOHFraction" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_TNOM" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_Ih" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_ProbXY" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("PostPreS_Ias" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("ProbQNoL1" in keyname2 or "ProbQNoLayer1" in keyname2 ) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+                
+          
+#              print("For j-th: "+str(indexOnBins)+" Eff: "+str(Eff))
+              singleROCcurve.SetBinContent(indexOnBins+1,Eff)
+              singleROCcurve.SetBinError(indexOnBins+1,EffErr)
+#              singleROCcurve.SetBinContent(8,EffBkg)
+            histoArray.append(singleROCcurve)
+            legend.AddEntry(singleROCcurve,sampleName,"LP")
+     
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+          for finalHisto in histoArray :
+            finalHisto.Draw("SAMEPE")
+#            finalHisto.GetXaxis().SetBinLabel(1,"1000")
+#            finalHisto.GetXaxis().SetBinLabel(2,"1400")
+#            finalHisto.GetXaxis().SetBinLabel(3,"1600")
+#            finalHisto.GetXaxis().SetBinLabel(4,"1800")
+#            finalHisto.GetXaxis().SetBinLabel(5,"2000")
+#            finalHisto.GetXaxis().SetBinLabel(6,"2200")
+#            finalHisto.GetXaxis().SetBinLabel(7,"2400")
+#            finalHisto.GetXaxis().SetBinLabel(8,"2600")
+            finalHisto.GetYaxis().SetRangeUser(0.,1.4)
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex5.Draw("SAME")
+
+          canvas.SaveAs("ROC_CodeV"+codeVersion+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createROCPlots_SystStudy.py b/Analyzer/test/Tamas/PostProcScripts/createROCPlots_SystStudy.py
new file mode 100644
index 0000000..b69dc8c
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createROCPlots_SystStudy.py
@@ -0,0 +1,226 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+from ctypes import c_double as double
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+InputListSamples = [
+"HSCPgluinoSamplesSyst_CodeV"+codeVersion+".txt"
+]
+
+OpenedSamples = []
+for list in InputListSamples:
+  MassPointSamples = []
+  with open(list, "r") as a_file:
+    for line in a_file:
+      stripped_line = line.strip()
+      MassPointSamples.append(ROOT.TFile.Open(stripped_line))
+    OpenedSamples.append(MassPointSamples)
+
+if os.path.exists(os.path.dirname("ROC_CodeV"+codeVersion)):
+  os.makedirs("ROC_CodeV"+codeVersion)
+  
+cutValues = {
+'N1_Eta' : 1.,
+'N1_Pt' : 55.,
+'N1_Pt_lowPt' : 55.,
+'N1_Dxy' : 0.02,
+'N1_Dz' : 0.1,
+'N1_dRMinPfJet' : 1000.,
+'N1_Chi2oNdof' : 5.,
+'N1_Qual' : 2.,
+'N1_TNOH' : 10.,
+'N1_TNOM' : 6.,
+'N1_Qual' : 2.,
+'N1_TNOPH' : 2.,
+'N1_TNOHFraction' : .8,
+'N1_EoP' : .3,
+'N1_SumpTOverpT' : 1000.,
+'N1_Ih' : 3.2,
+'N1_ProbQ' : 0.85,
+'PostPreS_ProbQNoL1' : 0.85,
+'N1_Stations' : 9.,
+'N1_PtErrOverPt' : .25,
+'N1_SegSep' : 25,
+'N1_ProbXY' : 1.0,
+'N1_MiniRelIsoAll' : 0.02,
+'N1_MiniRelTkIso' : 0.02,
+'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'N1_MiniTkIso' : 15.,
+'N1_MiniTkIso_PUA' : 15.,
+'N1_MiniTkIso_PUB' : 15.,
+'N1_MiniTkIso_PUC' : 15.,
+'N1_MiniTkIso_lowMiniRelIso' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUA' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUB' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUC' : 15.,
+'N1_MTOF' : 1000.,
+'N1_I' : 1000.,
+'N1_PtErrOverPt2' : 0.0007,
+'PostPreS_Ias' : 0.3,
+'PostPreS_Ias_NoEventWeight' : 0.3,
+'PostPreS_IasForStatus91' : 0.3,
+'PostPreS_IasForStatusNot91' : 0.3,
+'N1_DrMinPfJet': 10000,
+'N1_PfType': 10000,
+'N1_ProbQNoLayer1': 0.85,
+
+}
+
+
+for i in range(0, MassPointSamples[0].GetListOfKeys().GetEntries()):
+  dirname = MassPointSamples[0].GetListOfKeys().At(i).GetName()
+  curr_dir = MassPointSamples[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = MassPointSamples[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          if not ("N1_Eta" in keyname2) : continue
+          if not ("N1" in keyname2 or "PostPreS_ProbQNoL1" in keyname2 or "PostPreS_Ias"  in keyname2): continue
+          if ("Vs" in keyname2 or "N1_pfType" in keyname2) : continue
+          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(j)
+          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          
+          
+          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+        
+          # array to contain a specific (keyname2) histogram for all samples
+          histoArray = []
+          maxNumBins = 0.0
+          for i in range(0,len(OpenedSamples)) :
+            maxNumBins = numpy.maximum(maxNumBins,len(OpenedSamples[i]))
+ 
+          for indexOnSamples in range(0,len(OpenedSamples)) :
+            singleROCcurveString = 'singleROCcurve'+str(indexOnSamples)+str(j)
+            if ("N1" in keyname2) : axisXTitle = keyname2[keyname2.find("N1_")+3:]
+            if ("PostPreS" in keyname2) : axisXTitle = keyname2[keyname2.find("PostPreS_")+9:]
+            singleROCcurve = ROOT.TH1F(singleROCcurveString,";;Efficiency for "+axisXTitle,int(maxNumBins),0.,maxNumBins)
+            singleROCcurve.SetStats(0)
+            singleROCcurve.SetMarkerColor(indexOnSamples+1)
+            singleROCcurve.SetMarkerStyle(20)
+            singleROCcurve.SetLineColor(indexOnSamples+1)
+#            singleROCcurve.SetMaximum(1.5)
+            
+            for indexOnBins in range(0,len(OpenedSamples[indexOnSamples])) :
+              givenSampleWmassPoint = OpenedSamples[indexOnSamples][indexOnBins]
+              givenSampleWmassPointStr = str(givenSampleWmassPoint)
+              stringIndexWhere2018 = givenSampleWmassPointStr.find("2018_")+5
+              stringIndexWhereM = givenSampleWmassPointStr.find("_M")
+              stringIndexWhereW = givenSampleWmassPointStr.find("_w")
+              if (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW].find("_M")>0) :
+                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereM])
+              else:
+                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW])
+              histo = givenSampleWmassPoint.Get(newname)
+              
+              
+              if not (cutValues.get(keyname2)) :
+                print("No cut value for " + str(keyname2))
+                continue
+              DenomBkgErr = NumErr = NumBkgErr = DenomErr = double(0.0)
+
+              Num = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]),NumErr,"width")
+              Denom = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()),DenomErr,"width")
+              
+              if (Denom>0) :
+                Eff = Num / Denom
+              else : Eff = -1
+              
+              if (Denom>0 and Num>0) :
+                EffErr =  Eff * numpy.sqrt( ((NumErr.value / Num) * (NumErr.value / Num)) + ((DenomErr.value / Denom) * (DenomErr.value / Denom) ))
+              else :
+                EffErr = 0.
+      
+              
+              if ("N1_Pt" in keyname2) :
+                Eff = 1-Eff
+              if ("N1_Pt_lowPt" in keyname2) :
+                Eff = 1-Eff
+#                EffBkg = 1-EffBkg
+              if ("N1_TNOPH" in keyname2) :
+                Eff = 1-Eff
+#                EffBkg = 1-EffBkg
+              if ("N1_TNOHFraction" in keyname2) :
+                Eff = 1-Eff
+#                EffBkg = 1-EffBkg
+              if ("N1_TNOM" in keyname2) :
+                Eff = 1-Eff
+#                EffBkg = 1-EffBkg
+              if ("N1_Ih" in keyname2) :
+                Eff = 1-Eff
+#                EffBkg = 1-EffBkg
+              if ("N1_ProbXY" in keyname2) :
+                Eff = 1-Eff
+#                EffBkg = 1-EffBkg
+              if ("PostPreS_Ias" in keyname2) :
+                Eff = 1-Eff
+#                EffBkg = 1-EffBkg
+              if ("ProbQNoL1" in keyname2 or "ProbQNoLayer1" in keyname2 ) :
+                Eff = 1-Eff
+#                EffBkg = 1-EffBkg
+                
+          
+#              print("For j-th: "+str(indexOnBins)+" Eff: "+str(Eff))
+              singleROCcurve.SetBinContent(indexOnBins+1,Eff)
+              singleROCcurve.SetBinError(indexOnBins+1,EffErr)
+#              singleROCcurve.SetBinContent(8,EffBkg)
+            histoArray.append(singleROCcurve)
+            legend.AddEntry(singleROCcurve,sampleName,"LP")
+     
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+          for finalHisto in histoArray :
+            finalHisto.Draw("SAMEHISTOTEXT00")
+            finalHisto.GetXaxis().SetBinLabel(1,"Syst down")
+            finalHisto.GetXaxis().SetBinLabel(2,"Syst nominal")
+            finalHisto.GetXaxis().SetBinLabel(3,"Syst up")
+            finalHisto.GetYaxis().SetRangeUser(0.,1.4)
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex5.Draw("SAME")
+
+          canvas.SaveAs("ROC_CodeV"+codeVersion+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createROCPlots_bckIOVs.py b/Analyzer/test/Tamas/PostProcScripts/createROCPlots_bckIOVs.py
new file mode 100644
index 0000000..347f428
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createROCPlots_bckIOVs.py
@@ -0,0 +1,255 @@
+import ROOT, sys, os, time, re, numpy, random
+from optparse import OptionParser
+from ctypes import c_double as double
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BkgSamples = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
+
+InputListSamples = [
+#"BackgroundSamplesCode"+codeVersion+".txt",
+#"HSCPgluinoOnlyNeutralSamples_Code"+codeVersion+".txt",
+"SingleMuonSamples_CodeV"+codeVersion+".txt",
+#"HSCPgmsbStauSamples_Code"+codeVersion+".txt",
+#"HSCPpairStauSamples_Code"+codeVersion+".txt",
+#"HSCPstopOnlyNeutralSamples_Code"+codeVersion+".txt",
+#"HSCPstopSamples_Code"+codeVersion+".txt",
+#"HSCPtauPrime1Samples_Code"+codeVersion+".txt",
+#"HSCPtauPrime2Samples_Code"+codeVersion+".txt",
+]
+
+OpenedSamples = []
+for list in InputListSamples:
+  MassPointSamples = []
+  with open(list, "r") as a_file:
+    for line in a_file:
+      stripped_line = line.strip()
+      MassPointSamples.append(ROOT.TFile.Open(stripped_line))
+    OpenedSamples.append(MassPointSamples)
+
+if os.path.exists(os.path.dirname("ROC_CodeV"+codeVersion)):
+  os.makedirs("ROC_CodeV"+codeVersion)
+  
+cutValues = {
+'N1_Eta' : 1.,
+'N1_Pt' : 55.,
+'N1_Pt_lowPt' : 55.,
+'N1_Dxy' : 0.02,
+'N1_Dz' : 0.1,
+'N1_dRMinPfJet' : 1000.,
+'N1_Chi2oNdof' : 5.,
+'N1_Qual' : 2.,
+'N1_TNOH' : 10.,
+'N1_TNOM' : 6.,
+'N1_Qual' : 2.,
+'N1_TNOPH' : 2.,
+'N1_TNOHFraction' : .8,
+'N1_EoP' : .3,
+'N1_SumpTOverpT' : 1000.,
+'N1_Ih' : 3.2,
+'N1_ProbQ' : 0.1,
+'PostPreS_ProbQNoL1' : 0.9,
+'N1_Stations' : 9.,
+'N1_PtErrOverPt' : .25,
+'N1_SegSep' : 25,
+'N1_ProbXY' : 1.0,
+'N1_MiniRelIsoAll' : 0.02,
+'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso' : 0.02,
+'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
+'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
+'N1_MiniTkIso' : 15.,
+'N1_MiniTkIso_PUA' : 15.,
+'N1_MiniTkIso_PUB' : 15.,
+'N1_MiniTkIso_PUC' : 15.,
+'N1_MiniTkIso_lowMiniRelIso' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUA' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUB' : 15.,
+'N1_MiniTkIso_lowMiniRelIso_PUC' : 15.,
+'N1_MTOF' : 1000.,
+'N1_I' : 1000.,
+'N1_PtErrOverPt2' : 0.0008,
+'PostPreS_Ias' : 0.1,
+'PostPreS_Ias_NoEventWeight' : 0.2,
+'PostPreS_IasForStatus91' : 0.2,
+'PostPreS_IasForStatusNot91' : 0.2,
+}
+
+for i in range(0, MassPointSamples[0].GetListOfKeys().GetEntries()):
+  dirname = MassPointSamples[0].GetListOfKeys().At(i).GetName()
+  curr_dir = MassPointSamples[0].GetDirectory(dirname)
+
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = MassPointSamples[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+
+#          if not ("N1_Eta" in keyname2) : continue
+          if not ("N1" in keyname2 or "PostPreS_ProbQNoL1" in keyname2 or "PostPreS_Ias"  in keyname2): continue
+          if ("Vs" in keyname2 or "N1_pfType" in keyname2) : continue
+
+          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(j)
+          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          
+          
+          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+        
+          # array to contain a specific (keyname2) histogram for all samples
+          histoArray = []
+          maxNumBins = 0.0
+          for i in range(0,len(OpenedSamples)) :
+            maxNumBins = numpy.maximum(maxNumBins,len(OpenedSamples[i]))
+ 
+          for indexOnSamples in range(0,len(OpenedSamples)) :
+            singleROCcurveString = 'singleROCcurve'+str(indexOnSamples)+str(j)
+            axisXTitle = keyname2[keyname2.find("N1_")+3:]
+            singleROCcurve = ROOT.TH1F(singleROCcurveString,";;Efficiency for "+axisXTitle,int(maxNumBins),0.,maxNumBins)
+            singleROCcurve.SetStats(0)
+            singleROCcurve.SetMarkerColor(indexOnSamples+1)
+            singleROCcurve.SetMarkerStyle(20)
+            singleROCcurve.SetLineColor(indexOnSamples+1)
+#            singleROCcurve.SetMaximum(1.5)
+            
+            for indexOnBins in range(0,len(OpenedSamples[indexOnSamples])) :
+              givenSampleWmassPoint = OpenedSamples[indexOnSamples][indexOnBins]
+              givenSampleWmassPointStr = str(givenSampleWmassPoint)
+              stringIndexWhere2018 = givenSampleWmassPointStr.find("2018_")+5
+              stringIndexWhereM = givenSampleWmassPointStr.find("_M")
+              stringIndexWhereW = givenSampleWmassPointStr.find("_w")
+              if (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW].find("_M")>0) :
+                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereM])
+              else:
+                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW])
+              histo = givenSampleWmassPoint.Get(newname)
+              histoBkg = BkgSamples.Get(newname)
+              
+              
+              if not (cutValues.get(keyname2)) :
+                print("No cut value for " + str(keyname2))
+                continue
+              DenomBkgErr = NumErr = NumBkgErr = DenomErr = double(0.0)
+
+              Num = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]),NumErr,"width")
+              NumBkg = histoBkg.IntegralAndError(histoBkg.GetXaxis().FindBin(0),histoBkg.GetXaxis().FindBin(cutValues[keyname2]),NumBkgErr,"width")
+              Denom = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()),DenomErr,"width")
+              DenomBkg = histoBkg.IntegralAndError(histoBkg.GetXaxis().FindBin(0),histoBkg.GetXaxis().FindBin(histoBkg.GetXaxis().GetXmax()),DenomBkgErr,"width")
+              if (Denom>0) :
+                Eff = Num / Denom
+              else : Eff = 0
+              
+              if (DenomBkg>0 and NumBkg>0) :
+                EffErr =  Eff * numpy.sqrt( ((NumBkgErr.value / NumBkg) * (NumBkgErr.value / NumBkg)) + ((DenomBkgErr.value / DenomBkg) * (DenomBkgErr.value / DenomBkg) ))
+              else :
+                EffErr = 0.
+              
+              if (DenomBkg>0) :
+                EffBkg = NumBkg / DenomBkg
+              else : EffBkg = 0
+              
+              if ("N1_Pt" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_Pt_lowPt" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_TNOPH" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_TNOHFraction" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_TNOM" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_Ih" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("N1_ProbXY" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("PostPreS_Ias" in keyname2) :
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+              if ("PostPreS_ProbQNoL1" in keyname2) :
+                print(Eff)
+                Eff = 1-Eff
+                EffBkg = 1-EffBkg
+                
+          
+#              print("For j-th: "+str(indexOnBins)+" Eff: "+str(Eff))
+              singleROCcurve.SetBinContent(indexOnBins+1,Eff)
+              singleROCcurve.SetBinError(indexOnBins+1,EffErr)
+#              singleROCcurve.SetBinContent(8,EffBkg)
+            histoArray.append(singleROCcurve)
+            legend.AddEntry(singleROCcurve,"SingleMuon","LP")
+     
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+          for finalHisto in histoArray :
+            finalHisto.Draw("SAMEPE")
+            finalHisto.GetXaxis().SetBinLabel(1,"IOV1")
+            finalHisto.GetXaxis().SetBinLabel(2,"IOV2")
+            finalHisto.GetXaxis().SetBinLabel(3,"IOV3")
+            finalHisto.GetXaxis().SetBinLabel(4,"IOV4")
+            finalHisto.GetXaxis().SetBinLabel(5,"IOV5")
+            finalHisto.GetXaxis().SetBinLabel(6,"IOV6")
+            finalHisto.GetXaxis().SetBinLabel(7,"IOV7")
+            finalHisto.GetXaxis().SetBinLabel(8,"IOV8")
+            finalHisto.GetXaxis().SetBinLabel(9,"IOV9")
+            finalHisto.GetXaxis().SetBinLabel(10,"IOV10")
+            finalHisto.GetXaxis().SetBinLabel(11,"IOV11")
+            finalHisto.GetXaxis().SetBinLabel(12,"IOV12")
+            finalHisto.GetXaxis().SetBinLabel(13,"IOV13")
+            finalHisto.GetXaxis().SetBinLabel(14,"IOV14")
+            finalHisto.GetXaxis().SetBinLabel(15,"IOV15")
+            finalHisto.GetXaxis().SetBinLabel(16,"IOV16")
+            
+            finalHisto.GetYaxis().SetRangeUser(0.,1.4)
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex5.Draw("SAME")
+
+          canvas.SaveAs("ROC_CodeV"+codeVersion+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/createSpO.py b/Analyzer/test/Tamas/PostProcScripts/createSpO.py
new file mode 100644
index 0000000..2c4f20d
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/createSpO.py
@@ -0,0 +1,88 @@
+import ROOT, sys, os, time, re
+import numpy as np
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileNameSignal.root")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetStyle("Plain")
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+fileNameSignal = sys.argv[1]
+
+f1 = ROOT.TFile.Open(fileNameSignal)
+f2 = ROOT.TFile.Open("crab_Analysis_2018_TTToSemiLeptonic_wProbQ_CodeV17p9_v1.root")
+f3 = ROOT.TFile.Open("crab_Analysis_2018_TTTo2L2Nu_wProbQ_CodeV17p9_v1.root")
+f4 = ROOT.TFile.Open("crab_Analysis_2018_TTToHadronic_wProbQ_CodeV17p9_v1.root")
+f5 = ROOT.TFile.Open("crab_Analysis_2018_QCDwPt1000_wProbQ_wIhCut_CodeV17p9_v1.root")
+
+obj1 = f1.Get("analyzer/BaseName/BS_MiniRelIsoAll")
+#obj1 = f1.Get("analyzer/BaseName/BS_EIsol")
+obj2 = f2.Get("analyzer/BaseName/BS_MiniRelIsoAll")
+obj3 = f3.Get("analyzer/BaseName/BS_MiniRelIsoAll")
+obj4 = f4.Get("analyzer/BaseName/BS_MiniRelIsoAll")
+obj5 = f5.Get("analyzer/BaseName/BS_MiniRelIsoAll")
+
+can = ROOT.TCanvas("CutEffs")
+SignalOverNoise = ROOT.TH1F("SignalOverNoise","SignalOverNoise",50,0.0,1.0)
+#SignalOverNoise = ROOT.TH1F("SignalOverNoise","SignalOverNoise",25,0.0,1.5)
+SignalOverNoiseTTto2L2N = ROOT.TH1F("SignalOverNoiseTTto2L2N","SignalOverNoiseTTto2L2N",50,0.0,1.0)
+SignalOverNoiseTTtHadronic = ROOT.TH1F("SignalOverNoiseTTto2L2N","SignalOverNoiseTTto2L2N",50,0.0,1.0)
+SignalOverNoiseQCD = ROOT.TH1F("SignalOverNoiseQCD","SignalOverNoiseQCD",50,0.0,1.0)
+
+#for x in np.arange(0,1.5,0.05):
+for x in np.arange(0,1.0,0.02):
+  Signal = obj1.Integral(obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(x))
+  BackgroundTTtoSemileptonic = obj2.Integral(obj1.GetXaxis().FindBin(0),obj2.GetXaxis().FindBin(x))
+  BackgroundTTto2L2N = obj3.Integral(obj1.GetXaxis().FindBin(0),obj3.GetXaxis().FindBin(x))
+  BackgroundTTtoHadronic = obj4.Integral(obj1.GetXaxis().FindBin(0),obj4.GetXaxis().FindBin(x))
+  BackgroundQCD = obj5.Integral(obj1.GetXaxis().FindBin(0),obj5.GetXaxis().FindBin(x))
+#  print("For ",x," the S = ",Signal," and B = ",Background, " and the S/sqrt(S+B)",Signal/np.sqrt(Signal+Background))
+  SignalOverNoise.SetBinContent(obj1.GetXaxis().FindBin(x),(Signal/np.sqrt(Signal+BackgroundTTtoSemileptonic)))
+  SignalOverNoiseTTto2L2N.SetBinContent(obj1.GetXaxis().FindBin(x),(Signal/np.sqrt(Signal+BackgroundTTto2L2N)))
+  SignalOverNoiseTTtHadronic.SetBinContent(obj1.GetXaxis().FindBin(x),(Signal/np.sqrt(Signal+BackgroundTTtoHadronic)))
+  SignalOverNoiseQCD.SetBinContent(obj1.GetXaxis().FindBin(x),(Signal/np.sqrt(Signal+BackgroundQCD)))
+  # s / sqrt(s+b)
+
+max1 = np.maximum(SignalOverNoise.GetMaximum(),SignalOverNoiseTTto2L2N.GetMaximum())
+max2 = np.maximum(SignalOverNoiseTTtHadronic.GetMaximum(),SignalOverNoiseQCD.GetMaximum())
+max = np.maximum(max1,max2)
+SignalOverNoise.SetMaximum(max*1.4)
+SignalOverNoise.SetLineColor(2)
+SignalOverNoise.SetMarkerColor(2)
+SignalOverNoise.SetMarkerStyle(20)
+SignalOverNoise.GetYaxis().SetTitle("S/#sqrt{S+B}")
+SignalOverNoise.GetYaxis().SetTitleOffset(1.1)
+#SignalOverNoise.GetXaxis().SetTitle("(E_{HCAL} + E_{ECAL})/p")
+SignalOverNoise.GetXaxis().SetTitle("BS_MiniRelIsoAll")
+SignalOverNoise.SetStats(0)
+
+SignalOverNoiseTTto2L2N.SetMarkerStyle(20)
+SignalOverNoiseTTtHadronic.SetMarkerStyle(20)
+SignalOverNoiseQCD.SetMarkerStyle(20)
+
+SignalOverNoiseTTto2L2N.SetMarkerColor(3)
+SignalOverNoiseTTtHadronic.SetMarkerColor(4)
+SignalOverNoiseQCD.SetMarkerColor(5)
+
+legend =  ROOT.TLegend(.11,.75,.35,.89,"","brNDC")
+legend.SetTextFont(42)
+#legend.SetTextSize(0.035)
+legend.SetTextSize(0.025)
+legend.SetBorderSize(1);
+legend.SetLineColor(0);
+legend.SetLineStyle(1);
+legend.SetLineWidth(1);
+legend.SetFillColor(0);
+legend.SetFillStyle(1001);
+legend.AddEntry(SignalOverNoise,"S="+fileNameSignal[14:-5]+" B=TTtoSemiLeptonic","LP")
+legend.AddEntry(SignalOverNoiseTTto2L2N,"S="+fileNameSignal[14:-5]+" B=TTto2L2N","LP")
+legend.AddEntry(SignalOverNoiseTTtHadronic,"S="+fileNameSignal[14:-5]+" B=TTtoHadronic","LP")
+legend.AddEntry(SignalOverNoiseQCD,"S="+fileNameSignal[14:-5]+" B=QCD","LP")
+
+SignalOverNoise.Draw("P")
+SignalOverNoiseTTto2L2N.Draw("SAMEP")
+SignalOverNoiseTTtHadronic.Draw("SAMEP")
+SignalOverNoiseQCD.Draw("SAMEP")
+legend.Draw("SAME")
+can.SaveAs("SignalOverNoise_MiniRelIso_"+fileNameSignal[14:-5]+".png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/doAllPlots.py b/Analyzer/test/Tamas/PostProcScripts/doAllPlots.py
new file mode 100644
index 0000000..7efc162
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/doAllPlots.py
@@ -0,0 +1,95 @@
+import sys, os
+from optparse import OptionParser
+from threading import Thread
+
+parser = OptionParser(usage="Usage: python3 %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = []
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+for fname in os.listdir(".") :
+  if (codeVersion in fname and "root" in fname) :
+    if ("_All" in fname):
+      if not os.path.exists("BackgroundSamples_CodeV"+codeVersion+".txt"):
+        os.system("cp BackgroundSamples_CodeV40p9.txt BackgroundSamples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' BackgroundSamples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    elif ("gluino_" in fname):
+      if not os.path.exists("HSCPgluinoSamples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPgluinoSamples_CodeV40p9.txt HSCPgluinoSamples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPgluinoSamples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    elif ("gluinoOnlyNeutral_" in fname):
+      if not os.path.exists("HSCPgluinoOnlyNeutralSamples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPgluinoOnlyNeutralSamples_CodeV40p9.txt HSCPgluinoOnlyNeutralSamples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPgluinoOnlyNeutralSamples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    elif ("stop_" in fname):
+      if not os.path.exists("HSCPstopSamples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPstopSamples_CodeV40p9.txt HSCPstopSamples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPstopSamples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    elif ("stopOnlyNeutral_" in fname):
+      if not os.path.exists("HSCPstopOnlyNeutralSamples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPstopOnlyNeutralSamples_CodeV40p9.txt HSCPstopOnlyNeutralSamples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPstopOnlyNeutralSamples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    elif ("pairStau_" in fname):
+      if not os.path.exists("HSCPpairStauSamples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPpairStauSamples_CodeV40p9.txt HSCPpairStauSamples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPpairStauSamples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    elif ("gmsbStau_" in fname):
+      if not os.path.exists("HSCPgmsbStauSamples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPgmsbStauSamples_CodeV40p9.txt HSCPgmsbStauSamples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPgmsbStauSamples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    elif ("tauPrimeCharge1e_" in fname):
+      if not os.path.exists("HSCPtauPrime1Samples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPtauPrime1Samples_CodeV40p9.txt HSCPtauPrime1Samples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPtauPrime1Samples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    elif ("tauPrimeCharge2e_" in fname):
+      if not os.path.exists("HSCPtauPrime2Samples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPtauPrime2Samples_CodeV40p9.txt HSCPtauPrime2Samples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPtauPrime2Samples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    if ("tauPrimeCharge1e_" in fname and not "ZPrimeMass" in fname):
+      if not os.path.exists("HSCPtauPrimeCharge1e_TuneCP2_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPtauPrimeCharge1e_TuneCP2_Samples_CodeV46p3.txt HSCPtauPrimeCharge1e_TuneCP2_Samples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/46p3/"+codeVersion+"/g' HSCPtauPrimeCharge1e_TuneCP2_Samples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    if ("tauPrimeCharge2e_" in fname and not "ZPrimeMass" in fname):
+      if not os.path.exists("HSCPtauPrimeCharge2e_TuneCP2_Samples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPtauPrimeCharge2e_TuneCP2_Samples_CodeV46p3.txt HSCPtauPrimeCharge2e_TuneCP2_Samples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/46p3/"+codeVersion+"/g' HSCPtauPrimeCharge2e_TuneCP2_Samples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+    if ("tauPrimeCharge2e_" in fname and "ZPrimeMass" in fname):
+      if not os.path.exists("HSCPtauPrimeCharge2eVsZPrime_TuneCP2_Samples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPtauPrimeCharge2eVsZPrime_TuneCP2_Samples_CodeV46p8.txt HSCPtauPrimeCharge2eVsZPrime_TuneCP2_Samples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/46p3/"+codeVersion+"/g' HSCPtauPrimeCharge2eVsZPrime_TuneCP2_Samples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+      if not os.path.exists("HSCPtauPrimeCharge2Fix1000eVsZPrime_TuneCP2_Samples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPtauPrimeCharge2Fix1000eVsZPrime_TuneCP2_CodeV46p8.txt HSCPtauPrimeCharge2Fix1000eVsZPrime_TuneCP2_Samples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/46p3/"+codeVersion+"/g' HSCPtauPrimeCharge2Fix1000eVsZPrime_TuneCP2_Samples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+      if not os.path.exists("HSCPtauPrimeCharge2eVsZPrimeFix3000_TuneCP2_Samples_CodeV"+codeVersion+".txt"):
+        os.system("cp HSCPtauPrimeCharge2eVsZPrimeFix3000_TuneCP2_CodeV46p8.txt HSCPtauPrimeCharge2eVsZPrimeFix3000_TuneCP2_Samples_CodeV"+codeVersion+".txt")
+        replaceMINTA = "sed -i '' 's/46p3/"+codeVersion+"/g' HSCPtauPrimeCharge2eVsZPrimeFix3000_TuneCP2_Samples_CodeV"+codeVersion+".txt"
+        os.system(replaceMINTA)
+      
+
+for fname in os.listdir(".") :
+  if (codeVersion in fname and "txt" in fname and "Samples_" in fname) :
+    datasetList.append(fname)
+
+for dataset in datasetList:
+  outTask = "python3 compareWithArguementList.py "+dataset
+  print(outTask)
+  
+print("python3 pngsFromRootFilesJustHistos.py crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root 3")
+print("python3 pngsFromRootFilesJustHistos.py crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root 3")
+print("python3 pngsFromRootFilesJustHistos.py crab_Analysis_SingleMuon_RunPhase1_CodeV"+codeVersion+"_v1.root 3")
diff --git a/Analyzer/test/Tamas/PostProcScripts/downloadCrabJobs.py b/Analyzer/test/Tamas/PostProcScripts/downloadCrabJobs.py
new file mode 100644
index 0000000..ed8392e
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/downloadCrabJobs.py
@@ -0,0 +1,33 @@
+import sys, os
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python3 %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = []
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+ 
+for fname in os.listdir("crab_projects") :
+  if (fname.find(codeVersion)>0) :
+    datasetList.append("crab_projects/"+fname)
+
+for i in datasetList:
+  print("Download for sample "+i)
+#  createTask = "crab remake --task="+i
+#  os.system(createTask)
+#  outTask = "crab out -d "+i[(i.find('crab')):]+" --checksum=no --jobids 12"
+  outTask = "crab out -d "+i+" --checksum=no --jobids 12"
+  os.system(outTask)
+#  print(outTask)
+  haddTask = "hadd "+i[(i.find('crab_projects'))+14:]+".root "+i[(i.find('crab_projects')):]+"/results/*root"
+#  os.system(haddTask)
+#  print(haddTask)
+  backgroundPred = "BackgroundPrediction -f "+i[(i.find('crab_projects'))+14:]+".root"
+#  os.system(backgroundPred)
+#  print(backgroundPred)
diff --git a/Analyzer/test/Tamas/PostProcScripts/downloadCrabJobsMT.py b/Analyzer/test/Tamas/PostProcScripts/downloadCrabJobsMT.py
new file mode 100644
index 0000000..ca9cdf4
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/downloadCrabJobsMT.py
@@ -0,0 +1,33 @@
+import sys, os
+from optparse import OptionParser
+from threading import Thread
+
+parser = OptionParser(usage="Usage: python3 %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = []
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+ 
+for fname in os.listdir("crab_projects") :
+  if (codeVersion in fname) :
+    datasetList.append("crab_projects/"+fname)
+
+def task(i):
+  print("Download for sample "+i)
+  outTask = "crab out -d "+i+" --checksum=no --jobids 12"
+  os.system(outTask)
+  haddTask = "hadd "+i[(i.find('crab_projects'))+14:]+".root "+i[(i.find('crab_projects')):]+"/results/*root"
+#  os.system(haddTask)
+  backgroundPred = "BackgroundPrediction -f "+i[(i.find('crab_projects'))+14:]+".root"
+#  os.system(backgroundPred)
+  print("Done for sample "+i)
+
+for dataset in datasetList:
+  t = Thread(target=task, args=(dataset,))
+  t.start()
diff --git a/Analyzer/test/Tamas/PostProcScripts/explore3Dplot.py b/Analyzer/test/Tamas/PostProcScripts/explore3Dplot.py
new file mode 100644
index 0000000..8d9ef91
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/explore3Dplot.py
@@ -0,0 +1,210 @@
+import ROOT
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+ROOT.gStyle.SetPadTopMargin(0.07);
+ROOT.gStyle.SetPadBottomMargin(0.1);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+ROOT.gStyle.SetPadRightMargin(0.13);
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV42p8_v1.root")
+
+# Signal fail
+Histo3Dfail = f.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
+Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
+projFail = Histo3Dfail.Project3D("YZ")
+#proj.GetZaxis().SetLabelOffset(.7)
+#proj.GetYaxis().SetRangeUser(0.3,1.0)
+projFail.Draw("COLZ")
+projFail.SetTitle("FAIL region (F < 0.9)")
+projFail.SetStats(0)
+can.SaveAs("HSCPgluino_GiVsPt_FAIL.png")
+
+# Signal pass
+Histo3Dpass = f.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
+Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
+projPass = Histo3Dpass.Project3D("YZ")
+#proj.GetXaxis().SetRangeUser(1,300)
+#proj.GetYaxis().SetRangeUser(0.3,1.0)
+#proj.Draw("COLZTEXT")
+projPass.Draw("COLZ")
+projPass.SetTitle("PASS region (F > 0.9)")
+projPass.SetStats(0)
+can.SaveAs("HSCPgluino_GiVsPt_PASS.png")
+
+# Signal fail log Gi
+canLog = ROOT.TCanvas("newname2","newname2",800,800)
+legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
+legProjXInRegions.SetTextFont(42)
+legProjXInRegions.SetTextSize(0.035)
+legProjXInRegions.SetBorderSize(1);
+legProjXInRegions.SetLineColor(0);
+legProjXInRegions.SetLineStyle(1);
+legProjXInRegions.SetLineWidth(1);
+legProjXInRegions.SetFillColor(0);
+legProjXInRegions.SetFillStyle(1001);
+canLog.SetLogy()
+
+Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
+projFail = Histo3Dfail.Project3D("YZ")
+projFail.SetTitle("FAIL region (F < 0.9)")
+projFail.GetXaxis().SetRangeUser(1,500)
+projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
+projFailPt1.SetStats(0)
+projFailPt1.SetMarkerStyle(20)
+projFailPt1.SetLineColor(1)
+projFailPt1.SetMarkerColor(1)
+projFailPt1.SetMaximum(2)
+projFailPt1.DrawClone("SAMEP")
+
+legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 1 - 500 GeV","LP")
+
+projFail.GetXaxis().SetRangeUser(500,1000)
+projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
+projFailPt2.SetStats(0)
+projFailPt2.SetMarkerStyle(20)
+projFailPt2.SetLineColor(2)
+projFailPt2.SetMarkerColor(2)
+projFailPt2.DrawClone("SAMEP")
+legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 500 - 1000  GeV","LP")
+
+projFail.GetXaxis().SetRangeUser(1000,4000)
+projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
+projFailPt3.SetStats(0)
+projFailPt3.SetMarkerStyle(20)
+projFailPt3.SetLineColor(3)
+projFailPt3.SetMarkerColor(3)
+projFailPt3.DrawClone("SAMEP")
+
+legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 1000 - inf GeV","LP")
+legProjXInRegions.Draw("SAMEP")
+canLog.SaveAs("HSCPgluino_Gi_PtBins_FAIL.png")
+
+# Signal PASS log Gi
+canLog2 = ROOT.TCanvas("newname2-pass","newname2-pass",800,800)
+canLog2.SetLogy()
+Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
+projPass = Histo3Dpass.Project3D("YZ")
+projPass.SetTitle("PASS region (F > 0.9)")
+
+projPass.GetXaxis().SetRangeUser(1,500)
+projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
+projPassPt1.SetStats(0)
+projPassPt1.SetMarkerStyle(20)
+projPassPt1.SetLineColor(1)
+projPassPt1.SetMarkerColor(1)
+projPassPt1.SetMaximum(200)
+projPassPt1.DrawClone("SAMEP")
+
+projPass.GetXaxis().SetRangeUser(500,1000)
+projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
+projPassPt2.SetStats(0)
+projPassPt2.SetMarkerStyle(20)
+projPassPt2.SetLineColor(2)
+projPassPt2.SetMarkerColor(2)
+projPassPt2.DrawClone("SAMEP")
+
+projPass.GetXaxis().SetRangeUser(1000,4000)
+projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
+projPassPt3.SetStats(0)
+projPassPt3.SetMarkerStyle(20)
+projPassPt3.SetLineColor(3)
+projPassPt3.SetMarkerColor(3)
+projPassPt3.DrawClone("SAMEP")
+
+legProjXInRegions.Draw("SAMEP")
+canLog2.SaveAs("HSCPgluino_Gi_PtBins_PASS.png")
+
+
+
+# Now repeat everything for the background
+f2 = ROOT.TFile.Open("crab_Analysis_SingleMuon_RunPhase1_CodeV42p8_v1.root")
+Histo3Dfail = f2.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
+# Signal fail log Gi
+canLog3 = ROOT.TCanvas("canLog3anewname2","canLog3anewname2",800,800)
+canLog3.SetLogy()
+legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
+legProjXInRegions.SetTextFont(42)
+legProjXInRegions.SetTextSize(0.035)
+legProjXInRegions.SetBorderSize(1);
+legProjXInRegions.SetLineColor(0);
+legProjXInRegions.SetLineStyle(1);
+legProjXInRegions.SetLineWidth(1);
+legProjXInRegions.SetFillColor(0);
+legProjXInRegions.SetFillStyle(1001);
+canLog3.SetLogy()
+
+Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
+projFail = Histo3Dfail.Project3D("YZ")
+projFail.SetTitle("FAIL region (F < 0.9)")
+projFail.GetXaxis().SetRangeUser(1,500)
+projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
+projFailPt1.SetStats(0)
+projFailPt1.SetMarkerStyle(20)
+projFailPt1.SetLineColor(1)
+projFailPt1.SetMarkerColor(1)
+projFailPt1.SetMaximum(20000000)
+projFailPt1.DrawClone("SAMEP")
+
+legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 1 - 500 GeV","LP")
+
+projFail.GetXaxis().SetRangeUser(500,1000)
+projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
+projFailPt2.SetStats(0)
+projFailPt2.SetMarkerStyle(20)
+projFailPt2.SetLineColor(2)
+projFailPt2.SetMarkerColor(2)
+projFailPt2.DrawClone("SAMEP")
+legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 500 - 1000  GeV","LP")
+
+projFail.GetXaxis().SetRangeUser(1000,4000)
+projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
+projFailPt3.SetStats(0)
+projFailPt3.SetMarkerStyle(20)
+projFailPt3.SetLineColor(3)
+projFailPt3.SetMarkerColor(3)
+projFailPt3.DrawClone("SAMEP")
+
+legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 1000 - inf GeV","LP")
+legProjXInRegions.Draw("SAMEP")
+canLog3.SaveAs("AllBkg_data_Gi_PtBins_FAIL.png")
+
+# Signal PASS log Gi
+Histo3Dpass = f2.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
+canLog32 = ROOT.TCanvas("canLog3anewname2-pass","canLog3anewname2-pass",800,800)
+canLog32.SetLogy()
+Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
+projPass = Histo3Dpass.Project3D("YZ")
+projPass.SetTitle("PASS region (F > 0.9)")
+
+projPass.GetXaxis().SetRangeUser(1,500)
+projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
+projPassPt1.SetStats(0)
+projPassPt1.SetMarkerStyle(20)
+projPassPt1.SetLineColor(1)
+projPassPt1.SetMarkerColor(1)
+projPassPt1.SetMaximum(20000000)
+projPassPt1.DrawClone("SAMEP")
+
+projPass.GetXaxis().SetRangeUser(500,1000)
+projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
+projPassPt2.SetStats(0)
+projPassPt2.SetMarkerStyle(20)
+projPassPt2.SetLineColor(2)
+projPassPt2.SetMarkerColor(2)
+projPassPt2.DrawClone("SAMEP")
+
+projPass.GetXaxis().SetRangeUser(1000,4000)
+projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
+projPassPt3.SetStats(0)
+projPassPt3.SetMarkerStyle(20)
+projPassPt3.SetLineColor(3)
+projPassPt3.SetMarkerColor(3)
+projPassPt3.DrawClone("SAMEP")
+
+legProjXInRegions.Draw("SAMEP")
+canLog32.SaveAs("AllBkg_data_Gi_PtBins_PASS.png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/explore3Dplot_InclusiveOverlayed.py b/Analyzer/test/Tamas/PostProcScripts/explore3Dplot_InclusiveOverlayed.py
new file mode 100644
index 0000000..7b3f4c5
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/explore3Dplot_InclusiveOverlayed.py
@@ -0,0 +1,211 @@
+import ROOT
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+ROOT.gStyle.SetPadTopMargin(0.07);
+ROOT.gStyle.SetPadBottomMargin(0.1);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+ROOT.gStyle.SetPadRightMargin(0.13);
+
+can = ROOT.TCanvas("newname","newname",800,800)
+f = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV42p8_v1.root")
+
+# Signal fail
+Histo3Dfail = f.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
+Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
+projFail = Histo3Dfail.Project3D("YZ")
+#proj.GetZaxis().SetLabelOffset(.7)
+#proj.GetYaxis().SetRangeUser(0.3,1.0)
+projFail.Draw("COLZ")
+projFail.SetTitle("FAIL region (F < 0.9)")
+projFail.SetStats(0)
+can.SaveAs("HSCPgluino_GiVsPt_FAIL.png")
+
+# Signal pass
+Histo3Dpass = f.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
+Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
+projPass = Histo3Dpass.Project3D("YZ")
+#proj.GetXaxis().SetRangeUser(1,300)
+#proj.GetYaxis().SetRangeUser(0.3,1.0)
+#proj.Draw("COLZTEXT")
+projPass.Draw("COLZ")
+projPass.SetTitle("PASS region (F > 0.9)")
+projPass.SetStats(0)
+can.SaveAs("HSCPgluino_GiVsPt_PASS.png")
+
+# Signal fail log Gi
+canLog = ROOT.TCanvas("newname2","newname2",800,800)
+canLog.SetLogy()
+legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
+legProjXInRegions.SetTextFont(42)
+legProjXInRegions.SetTextSize(0.035)
+legProjXInRegions.SetBorderSize(1);
+legProjXInRegions.SetLineColor(0);
+legProjXInRegions.SetLineStyle(1);
+legProjXInRegions.SetLineWidth(1);
+legProjXInRegions.SetFillColor(0);
+legProjXInRegions.SetFillStyle(1001);
+
+
+Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
+projFail = Histo3Dfail.Project3D("YZ")
+projFail.SetTitle("FAIL region (F < 0.9)")
+projFail.GetXaxis().SetRangeUser(200,4000)
+projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
+projFailPt1.SetStats(0)
+projFailPt1.SetMarkerStyle(20)
+projFailPt1.SetLineColor(1)
+projFailPt1.SetMarkerColor(1)
+projFailPt1.SetMaximum(2)
+projFailPt1.DrawClone("SAMEP")
+
+legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 200 - inf GeV","LP")
+
+projFail.GetXaxis().SetRangeUser(300,4000)
+projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
+projFailPt2.SetStats(0)
+projFailPt2.SetMarkerStyle(20)
+projFailPt2.SetLineColor(2)
+projFailPt2.SetMarkerColor(2)
+projFailPt2.DrawClone("SAMEP")
+legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 300 - inf  GeV","LP")
+
+projFail.GetXaxis().SetRangeUser(400,4000)
+projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
+projFailPt3.SetStats(0)
+projFailPt3.SetMarkerStyle(20)
+projFailPt3.SetLineColor(3)
+projFailPt3.SetMarkerColor(3)
+projFailPt3.DrawClone("SAMEP")
+
+legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 400 - inf GeV","LP")
+legProjXInRegions.Draw("SAMEP")
+canLog.SaveAs("HSCPgluino_Gi_PtBins_FAIL.png")
+
+# Signal PASS log Gi
+canLog2 = ROOT.TCanvas("newname2-pass","newname2-pass",800,800)
+canLog2.SetLogy()
+Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
+projPass = Histo3Dpass.Project3D("YZ")
+projPass.SetTitle("PASS region (F > 0.9)")
+
+projPass.GetXaxis().SetRangeUser(240,4000)
+projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
+projPassPt1.SetStats(0)
+projPassPt1.SetMarkerStyle(20)
+projPassPt1.SetLineColor(1)
+projPassPt1.SetMarkerColor(1)
+projPassPt1.SetMaximum(200)
+projPassPt1.DrawClone("SAMEP")
+
+projPass.GetXaxis().SetRangeUser(320,4000)
+projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
+projPassPt2.SetStats(0)
+projPassPt2.SetMarkerStyle(20)
+projPassPt2.SetLineColor(2)
+projPassPt2.SetMarkerColor(2)
+projPassPt2.DrawClone("SAMEP")
+
+projPass.GetXaxis().SetRangeUser(400,4000)
+projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
+projPassPt3.SetStats(0)
+projPassPt3.SetMarkerStyle(20)
+projPassPt3.SetLineColor(3)
+projPassPt3.SetMarkerColor(3)
+projPassPt3.DrawClone("SAMEP")
+
+legProjXInRegions.Draw("SAMEP")
+canLog2.SaveAs("HSCPgluino_Gi_PtBins_PASS.png")
+
+
+
+# Now repeat everything for the background
+f2 = ROOT.TFile.Open("crab_Analysis_SingleMuon_RunPhase1_CodeV42p8_v1.root")
+Histo3Dfail = f2.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
+# Signal fail log Gi
+canLog3 = ROOT.TCanvas("canLog3anewname2","canLog3anewname2",800,800)
+canLog3.SetLogy()
+legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
+legProjXInRegions.SetTextFont(42)
+legProjXInRegions.SetTextSize(0.035)
+legProjXInRegions.SetBorderSize(1);
+legProjXInRegions.SetLineColor(0);
+legProjXInRegions.SetLineStyle(1);
+legProjXInRegions.SetLineWidth(1);
+legProjXInRegions.SetFillColor(0);
+legProjXInRegions.SetFillStyle(1001);
+canLog3.SetLogy()
+
+Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
+projFail = Histo3Dfail.Project3D("YZ")
+projFail.SetTitle("FAIL region (F < 0.9)")
+projFail.GetXaxis().SetRangeUser(240,4000)
+projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
+projFailPt1.SetStats(0)
+projFailPt1.SetMarkerStyle(20)
+projFailPt1.SetLineColor(1)
+projFailPt1.SetMarkerColor(1)
+projFailPt1.SetMaximum(20000000)
+projFailPt1.DrawClone("SAMEP")
+
+legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 240 - inf GeV","LP")
+
+projFail.GetXaxis().SetRangeUser(320,4000)
+projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
+projFailPt2.SetStats(0)
+projFailPt2.SetMarkerStyle(20)
+projFailPt2.SetLineColor(2)
+projFailPt2.SetMarkerColor(2)
+projFailPt2.DrawClone("SAMEP")
+legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 320 - inf  GeV","LP")
+
+projFail.GetXaxis().SetRangeUser(400,4000)
+projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
+projFailPt3.SetStats(0)
+projFailPt3.SetMarkerStyle(20)
+projFailPt3.SetLineColor(3)
+projFailPt3.SetMarkerColor(3)
+projFailPt3.DrawClone("SAMEP")
+
+legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 400 - inf GeV","LP")
+legProjXInRegions.Draw("SAMEP")
+canLog3.SaveAs("AllBkg_data_Gi_PtBinsIncl_FAIL.png")
+
+# Signal PASS log Gi
+Histo3Dpass = f2.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
+canLog32 = ROOT.TCanvas("canLog3anewname2-pass","canLog3anewname2-pass",800,800)
+canLog32.SetLogy()
+Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
+projPass = Histo3Dpass.Project3D("YZ")
+projPass.SetTitle("PASS region (F > 0.9)")
+
+projPass.GetXaxis().SetRangeUser(240,4000)
+projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
+projPassPt1.SetStats(0)
+projPassPt1.SetMarkerStyle(20)
+projPassPt1.SetLineColor(1)
+projPassPt1.SetMarkerColor(1)
+projPassPt1.SetMaximum(20000000)
+projPassPt1.DrawClone("SAMEP")
+
+projPass.GetXaxis().SetRangeUser(320,4000)
+projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
+projPassPt2.SetStats(0)
+projPassPt2.SetMarkerStyle(20)
+projPassPt2.SetLineColor(2)
+projPassPt2.SetMarkerColor(2)
+projPassPt2.DrawClone("SAMEP")
+
+projPass.GetXaxis().SetRangeUser(400,4000)
+projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
+projPassPt3.SetStats(0)
+projPassPt3.SetMarkerStyle(20)
+projPassPt3.SetLineColor(3)
+projPassPt3.SetMarkerColor(3)
+projPassPt3.DrawClone("SAMEP")
+
+legProjXInRegions.Draw("SAMEP")
+canLog32.SaveAs("AllBkg_data_Gi_PtBinsIncl_PASS.png")
diff --git a/Analyzer/test/Tamas/PostProcScripts/extrackTemplateFromFramework.py b/Analyzer/test/Tamas/PostProcScripts/extrackTemplateFromFramework.py
new file mode 100644
index 0000000..ef87713
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/extrackTemplateFromFramework.py
@@ -0,0 +1,218 @@
+import ROOT, sys, os, time, re
+import numpy as np
+from ctypes import c_double as double
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileName.root")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+ROOT.gStyle.SetPadTopMargin(0.07);
+ROOT.gStyle.SetPadBottomMargin(0.1);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+ROOT.gStyle.SetPadRightMargin(0.13);
+
+fileName = sys.argv[1]
+bin = 3
+# bin 3: pt>60 and I_as > 0.05
+# bin 25: pt>65 and I_as > 0.175
+# bin 28: pt>65 and I_as > 0.3
+
+blind = True
+#blind = False
+
+print("Filename: "+fileName)
+input_file = fileName
+
+ProjBin = 3
+newFileDir = fileName[0:-5] + "_Bin" + str(ProjBin)
+
+
+f = ROOT.TFile.Open(input_file)
+fileOut = open("SignalBackgroundEff.txt", "a")
+
+isData = False
+if ("SingleMuon" in fileName) : isData = True
+
+iDontWannaRunPlots = False
+#iDontWannaRunPlots = True
+
+
+dirs = []
+for i in range(0, f.GetListOfKeys().GetEntries()):
+  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
+  dirname = f.GetListOfKeys().At(i).GetName()
+  curr_dir = f.GetDirectory(dirname)
+# print("dirname: "+dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      # Match the plot of interest
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = f.GetDirectory(dirname+"/"+keyname)
+#                    print("keyname: "+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          if ("__" in keyname2) : continue
+          # The plot should be TCanvas
+          newname = dirname + "/" + keyname+ "/" + keyname2
+#          print("newname: "+newname)
+          obj = f.Get(newname)
+          
+          
+#          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          tex2 = ROOT.TLatex(0.23,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+          tex3 = ROOT.TLatex(0.37,0.94,"Internal"); #if there is 10^x
+#          tex3 = ROOT.TLatex(0.27,0.94,"Internal");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+
+
+          tex4 = ROOT.TLatex()
+          if ("BefPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
+#            if ("BefPreS_Eta" in keyname2) :
+#              print("BefPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
+#            if ("N1_Eta" in keyname2) :
+#              print("N-1 number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
+          elif ("PostPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
+          elif ("PostS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After selection")
+          elif ("Calibration" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After calibration cuts")
+#            if ("PostPreS_Eta" in keyname2) :
+#              print("PostPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.045);
+          tex4.SetLineWidth(2);
+          
+          codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+          fileVersion = fileName[fileName.find("2018")+5:fileName.find("CodeV")+9]
+          tex5 = ROOT.TLatex(0.07,0.03,fileVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if not (obj) : continue
+          if obj.InheritsFrom("TObject"):
+              can = obj
+              obj.SetStats(0)
+              can = ROOT.TCanvas(newname,newname,800,800)
+              # Name of the png to be saved
+              name = fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png"
+              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+              if (obj.GetEntries() == 0 ) :
+                continue
+                
+#             when I dont want to plot everything
+              if (iDontWannaRunPlots) : continue
+              if not ("GiTemplate" in keyname2) : continue
+              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
+                obj.SetTitle("")
+                if ("Calibration_GiTemplate" in keyname2) :
+                  projX = obj.ProjectionX()
+                  projX.SetTitle("")
+                  projX.SetStats(0)
+                  projX.SetMarkerStyle(20)
+                  projX.GetYaxis().SetTitle("Clusters")
+                  projX.GetYaxis().SetTitleOffset(1.9)
+                  projX.GetXaxis().SetRange(1,15)
+                  projX.Draw("COLZ")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjX.png")
+                  
+                  legGiCalib =  ROOT.TLegend(.6,.55,.80,.9,"","brNDC")
+                  legGiCalib.SetTextFont(42)
+                  legGiCalib.SetTextSize(0.03)
+                  legGiCalib.SetBorderSize(1);
+                  legGiCalib.SetLineColor(0);
+                  legGiCalib.SetLineStyle(1);
+                  legGiCalib.SetLineWidth(1);
+                  legGiCalib.SetFillColor(0);
+                  legGiCalib.SetFillStyle(1001);
+                  
+                  can3 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
+                  can3.SetLogy()
+                  for x in range(1,obj.GetNbinsX()+1) :
+                    projY = obj.ProjectionY(keyname2 +  "_ProjY"+str(x),x,x+1,1,obj.GetNbinsZ()+1,"e")
+                    projY.SetTitle("")
+                    projY.SetStats(0)
+                    projY.SetMarkerStyle(20)
+                    projY.SetLineColor(x)
+                    projY.SetMarkerColor(x)
+                    projY.GetYaxis().SetTitle("Clusters")
+                    projY.GetYaxis().SetTitleOffset(1.4)
+                    legGiCalib.AddEntry(projY, "Module index: " + str(x),"LP")
+                    projY.Draw("SAME")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legGiCalib.Draw("SAME")
+                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjY.png")
+                  
+                  can4 = ROOT.TCanvas(newname+"4",newname+"4",800,800)
+                  can4.SetLogy()
+                  for x in range(1,obj.GetNbinsX()+2) :
+                    projZ = obj.ProjectionZ(keyname2 + "_ProjZ"+str(x),x,x+1,1,obj.GetNbinsY()+1,"e").Rebin(10)
+                    projZ.SetTitle("")
+                    projZ.SetStats(0)
+                    projZ.SetMarkerStyle(20)
+                    projZ.SetLineColor(x)
+                    projZ.SetMarkerColor(x)
+                    projZ.GetYaxis().SetTitle("Clusters")
+                    projZ.GetYaxis().SetTitleOffset(1.4)
+                    projZ.Draw("SAME")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legGiCalib.Draw("SAME")
+                  can4.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjZ.png")
+              
+name = fileName[fileName.find("Run")+3:fileName.find("_CodeV")]
+version = "v5"
+outFileName = str('template_{}_{}.root'.format(name,version))
+fOut = ROOT.TFile.Open(outFileName,'UPDATE')
+templ0 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate')
+templ1 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_1')
+templ2 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_2')
+templ3 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_3')
+templ4 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_4')
+templ5 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_5')
+
+templ0.Write()
+templ1.Write()
+templ2.Write()
+templ3.Write()
+templ4.Write()
+templ5.Write()
+fOut.Close()
+
+os.system("mv " + outFileName + " " + fileName[0:-5] + "_Bin" + str(bin))
+
+print("scp "+fileName[0:-5] + "_Bin" + str(bin)+"/"+outFileName + " vami@ui3.kfki.hu:/data/vami/projects/HSCP/v1/CMSSW_10_6_30/src/SUSYBSMAnalysis/HSCP/data/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/extrackTemplateFromNtuple.py b/Analyzer/test/Tamas/PostProcScripts/extrackTemplateFromNtuple.py
new file mode 100644
index 0000000..9bd3c35
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/extrackTemplateFromNtuple.py
@@ -0,0 +1,1036 @@
+import ROOT, sys, os, time, re
+import numpy as np
+from ctypes import c_double as double
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+ROOT.gStyle.SetPadTopMargin(0.07);
+ROOT.gStyle.SetPadBottomMargin(0.1);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+ROOT.gStyle.SetPadRightMargin(0.13);
+
+fileName = sys.argv[1]
+BinNumber = sys.argv[2]
+
+bin = int(BinNumber)
+# bin 3: pt>60 and I_as > 0.05
+# bin 25: pt>65 and I_as > 0.175
+# bin 28: pt>65 and I_as > 0.3
+
+blind = True
+#blind = False
+
+print("Filename: "+fileName)
+input_file = fileName
+
+ProjBin = int(BinNumber)
+newFileDir = fileName[0:-5] + "_Bin" + str(ProjBin)
+
+
+f = ROOT.TFile.Open(input_file)
+fileOut = open("SignalBackgroundEff.txt", "a")
+
+isData = False
+if ("SingleMuon" in fileName) : isData = True
+
+iDontWannaRunPlots = False
+#iDontWannaRunPlots = True
+
+
+dirs = []
+for i in range(0, f.GetListOfKeys().GetEntries()):
+  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
+  dirname = f.GetListOfKeys().At(i).GetName()
+  curr_dir = f.GetDirectory(dirname)
+#  print("dirname: "+dirname)
+  if (True):
+      # Match the plot of interest
+      keyname = f.GetListOfKeys().At(i).GetName()
+      keyname2 = f.GetListOfKeys().At(i).GetName()
+      curr_dir2 = f.GetDirectory(dirname)
+#      print("keyname: "+keyname)
+      if (True):
+#          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          if ("__" in keyname2) : continue
+          # The plot should be TCanvas
+          newname = dirname
+#          print("newname: "+newname)
+          obj = f.Get(newname)
+          
+          
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
+          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+
+
+          tex4 = ROOT.TLatex()
+          if ("BefPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
+#            if ("BefPreS_Eta" in keyname2) :
+#              print("BefPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
+#            if ("N1_Eta" in keyname2) :
+#              print("N-1 number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
+          elif ("PostPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
+          elif ("PostS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.95,"After selection")
+#            if ("PostPreS_Eta" in keyname2) :
+#              print("PostPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.045);
+          tex4.SetLineWidth(2);
+          
+          codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+          fileVersion = fileName[fileName.find("2018")+5:fileName.find("CodeV")+9]
+          tex5 = ROOT.TLatex(0.07,0.03,fileVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if not (obj) : continue
+          if obj.InheritsFrom("TObject"):
+              can = obj
+              obj.SetStats(0)
+              can = ROOT.TCanvas(newname,newname,800,800)
+              # Name of the png to be saved
+              name = fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png"
+              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+              if (obj.GetEntries() == 0 ) :
+                continue
+                
+#             when I dont want to plot everything
+              if (iDontWannaRunPlots) : continue
+              if ("_region" in keyname2 or "CtrlPt_" in keyname2 or "Pred_" in keyname2 or "PDF" in keyname2 or "Hist_" in keyname2) : continue
+#              if not ("Trigger" in keyname2 and obj.ClassName() == "TH3F") : continue
+              if not ("GiTemplate" in keyname2) : continue
+
+              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
+                obj.SetTitle("")
+                if ("VsProbQVsIas" in keyname2) :
+                  can2 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
+                  can2.SetLogy()
+                  
+                  projA = obj.ProjectionX(newname+"_RegionA",obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1),obj.GetZaxis().FindBin(0.0),obj.GetZaxis().FindBin(0.1),"e")
+                  projB = obj.ProjectionX(newname+"_RegionB",obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1),obj.GetZaxis().FindBin(0.1),obj.GetZaxis().FindBin(1.0),"e")
+                  projC = obj.ProjectionX(newname+"_RegionC",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),obj.GetZaxis().FindBin(0.0),obj.GetZaxis().FindBin(0.1),"e")
+                  projD = obj.ProjectionX(newname+"_RegionD",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),obj.GetZaxis().FindBin(0.1),obj.GetZaxis().FindBin(1.0),"e")
+                  projA.SetMarkerColor(1)
+                  projA.SetTitle("")
+                  projB.SetMarkerColor(2)
+                  projC.SetMarkerColor(3)
+                  projD.SetMarkerColor(4)
+                  projA.SetMarkerStyle(20)
+                  projB.SetMarkerStyle(20)
+                  projC.SetMarkerStyle(20)
+                  projD.SetMarkerStyle(20)
+                  projA.SetLineColor(1)
+                  projB.SetLineColor(2)
+                  projC.SetLineColor(3)
+                  projD.SetLineColor(4)
+                  
+                  max1 = np.maximum(projA.GetMaximum(),projB.GetMaximum())
+                  max2 = np.maximum(projC.GetMaximum(),projD.GetMaximum())
+                  max = np.maximum(max1,max2)
+                  
+                  legProjXInRegions =  ROOT.TLegend(.4,.65,.80,.9,"","brNDC")
+                  legProjXInRegions.SetTextFont(42)
+                  legProjXInRegions.SetTextSize(0.035)
+                  legProjXInRegions.SetBorderSize(1);
+                  legProjXInRegions.SetLineColor(0);
+                  legProjXInRegions.SetLineStyle(1);
+                  legProjXInRegions.SetLineWidth(1);
+                  legProjXInRegions.SetFillColor(0);
+                  legProjXInRegions.SetFillStyle(1001);
+                  
+                  Err = double(0.0)
+                  legProjXInRegions.AddEntry(projA,"Region A: " +str(int(projA.IntegralAndError(1,projA.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
+                  legProjXInRegions.AddEntry(projB,"Region B: " +str(int(projB.IntegralAndError(1,projB.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
+                  legProjXInRegions.AddEntry(projC,"Region C: " +str(int(projC.IntegralAndError(1,projC.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
+                  legProjXInRegions.AddEntry(projD,"Region D: " +str(int(projD.IntegralAndError(1,projD.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
+                  
+                  projA.SetStats(0)
+                  projA.SetMinimum(0.0001)
+                  if (projA.Integral() == 0) : continue
+                  if (projB.Integral() == 0) : continue
+                  if (projC.Integral() == 0) : continue
+                  if (projD.Integral() == 0) : continue
+                  projA.Scale(1/projA.Integral())
+                  newMax = projA.GetMaximum()
+                  projB.Scale(1/projB.Integral())
+                  projC.Scale(1/projC.Integral())
+                  projD.Scale(1/projD.Integral())
+                  projA.Draw("SAME")
+                  projA.GetYaxis().SetRangeUser(0.00000001, newMax*10)
+                  projA.GetYaxis().SetTitle("Norm tracks / bin")
+                  projA.GetYaxis().SetTitleOffset(1.7)
+                  projB.Draw("SAME")
+                  projC.Draw("SAME")
+                  projD.Draw("SAME")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legProjXInRegions.Draw("SAME")
+
+                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjXInRegions.png")
+                
+                if ("ProbQVsProbXY" in keyname2) :
+                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(3.22),-1)
+                  obj.GetYaxis().SetRange(obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1))
+                  obj.Project3D("YZ").Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIh.png")
+                  obj.GetXaxis().UnZoom()
+                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(3.22))
+                  obj.GetYaxis().SetRange(obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1))
+                  obj.Project3D("YZ").Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIh.png")
+                  obj.GetXaxis().UnZoom()
+                  obj.Project3D("YZ").Draw("COLZ")
+                  can.SaveAs(name)
+                if ("GiTemplate" in keyname2) :
+                  projX = obj.ProjectionX()
+                  projX.SetTitle("")
+                  projX.SetStats(0)
+                  projX.SetMarkerStyle(20)
+                  projX.GetYaxis().SetTitle("Clusters")
+                  projX.GetYaxis().SetTitleOffset(1.9)
+                  projX.Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjX.png")
+                  
+                  legGiCalib =  ROOT.TLegend(.6,.55,.80,.9,"","brNDC")
+                  legGiCalib.SetTextFont(42)
+                  legGiCalib.SetTextSize(0.03)
+                  legGiCalib.SetBorderSize(1);
+                  legGiCalib.SetLineColor(0);
+                  legGiCalib.SetLineStyle(1);
+                  legGiCalib.SetLineWidth(1);
+                  legGiCalib.SetFillColor(0);
+                  legGiCalib.SetFillStyle(1001);
+                  
+                  can3 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
+                  can3.SetLogy()
+                  for x in range(1,obj.GetNbinsX()+1) :
+                    projY = obj.ProjectionY(keyname2 +  "_ProjY"+str(x),x,x+1,1,obj.GetNbinsZ()+1,"e")
+                    projY.SetTitle("")
+                    projY.SetStats(0)
+                    projY.SetMarkerStyle(20)
+                    projY.SetLineColor(x)
+                    projY.SetMarkerColor(x)
+                    projY.GetYaxis().SetTitle("Clusters")
+                    projY.GetYaxis().SetTitleOffset(1.4)
+                    legGiCalib.AddEntry(projY, "Module index: " + str(x),"LP")
+                    projY.Draw("SAME")
+                  legGiCalib.Draw("SAME")
+                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjY.png")
+                  can4 = ROOT.TCanvas(newname+"4",newname+"4",800,800)
+                  can4.SetLogy()
+                  for x in range(1,obj.GetNbinsX()+2) :
+                    projZ = obj.ProjectionZ(keyname2 + "_ProjZ"+str(x),x,x+1,1,obj.GetNbinsY()+1,"e").Rebin(10)
+                    projZ.SetTitle("")
+                    projZ.SetStats(0)
+                    projZ.SetMarkerStyle(20)
+                    projZ.SetLineColor(x)
+                    projZ.SetMarkerColor(x)
+                    projZ.GetYaxis().SetTitle("Clusters")
+                    projZ.GetYaxis().SetTitleOffset(1.4)
+                    projZ.Draw("SAME")
+                  legGiCalib.Draw("SAME")
+                  can4.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjZ.png")
+                  continue
+                else :
+                  print("Following plot was skipped: "+str(keyname2))
+                  continue
+              if ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "GenPtVsRecoPt" or "PreS_" in keyname2 or "CutFlow" in keyname2 or "N1_" in keyname2 or "_p_" in keyname2 or "_pterr" in keyname2 )):
+                obj.SetTitle("")
+                obj.SetMarkerStyle(20)
+                projOb = obj.ProjectionY(newname,bin,bin,"e")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                projOb.Draw("COLZ L")
+                can.SaveAs(name)
+
+              if ((obj.ClassName() == "TH2F") and "VsPixelLayer" in keyname2) :
+                for i in range(4) :
+                  obj.SetTitle("")
+                  obj.SetMarkerStyle(20)
+                  obj.SetStats(0)
+                  obj.ProjectionX(newname+"_PixLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").Draw()
+                  obj.ProjectionX(newname+"_PixLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").SetStats(0)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PixLayer"+str(i+1)+".png")
+              if ((obj.ClassName() == "TH2F") and "VsStripLayer" in keyname2) :
+                obj.GetYaxis().SetBinLabel(1,"TIB L1")
+                obj.GetYaxis().SetBinLabel(2,"TIB L2")
+                obj.GetYaxis().SetBinLabel(3,"TIB L3")
+                obj.GetYaxis().SetBinLabel(4,"TIB L4")
+                obj.GetYaxis().SetBinLabel(5,"TOB L1")
+                obj.GetYaxis().SetBinLabel(6,"TOB L2")
+                obj.GetYaxis().SetBinLabel(7,"TOB L3")
+                obj.GetYaxis().SetBinLabel(8,"TOB L4")
+                obj.GetYaxis().SetBinLabel(9,"TOB L5")
+                obj.GetYaxis().SetBinLabel(10,"TOB L6")
+                obj.GetYaxis().SetBinLabel(11,"TID D1")
+                obj.GetYaxis().SetBinLabel(12,"TID D2")
+                obj.GetYaxis().SetBinLabel(13,"TID D3")
+                obj.GetYaxis().SetBinLabel(14,"TEC D1")
+                obj.GetYaxis().SetBinLabel(15,"TEC D2")
+                obj.GetYaxis().SetBinLabel(16,"TEC D3")
+                obj.GetYaxis().SetBinLabel(17,"TEC D4")
+                obj.GetYaxis().SetBinLabel(18,"TEC D5")
+                obj.GetYaxis().SetBinLabel(19,"TEC D6")
+                obj.GetYaxis().SetBinLabel(20,"TEC D7")
+                obj.GetYaxis().SetBinLabel(21,"TEC D8")
+                obj.GetYaxis().SetBinLabel(22,"TEC D9")
+                obj.GetYaxis().SetBinLabel(23,"TEC D10")
+                for i in range(20) :
+                  obj.SetTitle("")
+                  obj.SetMarkerStyle(20)
+                  obj.SetStats(0)
+                  obj.ProjectionX(newname+"_StripLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").Draw()
+                  obj.ProjectionX(newname+"_StripLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").SetStats(0)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_StripLayer"+str(i+1)+".png")
+              if ((obj.ClassName() == "TH2F") and ("Clu" in keyname2)) :
+                profYobj = obj.ProfileY()
+#                profYobj.GetYaxis().SetTitle(axisXTitle)
+                profYobj.GetYaxis().SetTitleOffset(1.5)
+                profYobj.GetYaxis().SetLabelSize(0.03)
+                profYobj.SetStats(0)
+                if ("CluNormChargeVsStripLayer" in keyname2) :
+                  profYobj.GetXaxis().SetBinLabel(1,"TIB L1")
+                  profYobj.GetXaxis().SetBinLabel(2,"TIB L2")
+                  profYobj.GetXaxis().SetBinLabel(3,"TIB L3")
+                  profYobj.GetXaxis().SetBinLabel(4,"TIB L4")
+                  profYobj.GetXaxis().SetBinLabel(5,"TOB L1")
+                  profYobj.GetXaxis().SetBinLabel(6,"TOB L2")
+                  profYobj.GetXaxis().SetBinLabel(7,"TOB L3")
+                  profYobj.GetXaxis().SetBinLabel(8,"TOB L4")
+                  profYobj.GetXaxis().SetBinLabel(9,"TOB L5")
+                  profYobj.GetXaxis().SetBinLabel(10,"TOB L6")
+                  profYobj.GetXaxis().SetBinLabel(11,"TID D1")
+                  profYobj.GetXaxis().SetBinLabel(12,"TID D2")
+                  profYobj.GetXaxis().SetBinLabel(13,"TID D3")
+                  profYobj.GetXaxis().SetBinLabel(14,"TEC D1")
+                  profYobj.GetXaxis().SetBinLabel(15,"TEC D2")
+                  profYobj.GetXaxis().SetBinLabel(16,"TEC D3")
+                  profYobj.GetXaxis().SetBinLabel(17,"TEC D4")
+                  profYobj.GetXaxis().SetBinLabel(18,"TEC D5")
+                  profYobj.GetXaxis().SetBinLabel(19,"TEC D6")
+                  profYobj.GetXaxis().SetBinLabel(20,"TEC D7")
+                  profYobj.GetXaxis().SetBinLabel(21,"TEC D8")
+                  profYobj.GetXaxis().SetBinLabel(22,"TEC D9")
+                  profYobj.GetXaxis().SetBinLabel(23,"TEC D10")
+                profYobj.DrawClone("COLZ")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileY.png")
+                
+                if ("CluSpecInCPE" in keyname2) :
+                  obj.SetStats(0)
+                  obj.GetXaxis().SetTitle("")
+                  obj.GetXaxis().SetBinLabel(1,"isOnEdge")
+                  obj.GetXaxis().SetBinLabel(2,"hasBadPixels")
+                  obj.GetXaxis().SetBinLabel(3,"spansTwoROCs")
+                  obj.GetXaxis().SetBinLabel(4,"AllClusters")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  obj.Draw("COLZ L")
+#                  obj.GetXaxis().SetTitle(axisXTitle)
+                obj.DrawClone("COLZ L")
+#                obj.GetYaxis().SetTitle(axisYTitle)
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(name)
+              elif ("GenPtVsRecoPt" in keyname2) :
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.Draw("COLZ")
+                print(str(keyname2) + ": " + str(round(obj.GetCorrelationFactor(),2)))
+              elif ("Stab" in keyname2) :
+                profXobj = ROOT.TH1F(keyname2+"profX" , keyname2+"profX" , 545, 271000,325500)
+                profXobj = obj.ProfileX()
+#                profYobj.GetYaxis().SetTitle(axisXTitle)
+#                profYobj.GetYaxis().SetTitleOffset(1.5)
+#                profYobj.GetYaxis().SetLabelSize(0.03)
+                profXobj.SetStats(0)
+                profXobj.DrawClone("COLZ")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileX.png")
+              elif ("IasVs" in keyname2 and not obj.ClassName() == "TH3F") :
+                obj.SetMarkerStyle(20)
+                if ("Angle" in keyname2 or "NumSibling" in keyname2) :
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  obj.ProjectionY(newname,obj.GetXaxis().FindBin(0.7),obj.GetNbinsX()+1,"e").Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
+                  projObjs = obj.ProjectionY(newname,1,obj.GetXaxis().FindBin(0.7),"e")
+                  if (projObjs.GetEntries()==0) : continue
+                  projObjs.Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
+                  obj.ProjectionY(newname,1,obj.GetNbinsX()+1,"e").Draw("COLZ")
+                else :
+                  projObject = obj.ProjectionY(newname+"_lowIas",1,obj.GetXaxis().FindBin(0.7),"e")
+                  if (projObject.GetEntries()==0) : continue
+                  myPie = ROOT.TPie(projObject)
+                  myPie.SetLabelFormat("%txt (%perc)")
+                  myPie.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
+                  
+                  objProj = obj.ProjectionY(newname+"_highIas",obj.GetXaxis().FindBin(0.7),obj.GetNbinsX()+1,"e")
+                  if (objProj.GetEntries()==0) : continue
+                  myPie2 = ROOT.TPie(objProj)
+                  myPie2.SetLabelFormat("%txt (%perc)")
+                  myPie2.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie2.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
+                  
+                  myPie3 = ROOT.TPie(obj.ProjectionY(newname,1,obj.GetNbinsX()+1,"e"))
+                  myPie3.SetLabelFormat("%txt (%perc)")
+                  myPie3.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie3.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png")
+              elif ("Trigger" in keyname2 and obj.ClassName() == "TH3F") :
+                profZobj = obj.Project3DProfile("zy")
+                profZobj.SetStats(0)
+                profZobj.GetZaxis().SetTitle("Efficiency")
+                profZobj.SetTitle("")
+                profZobj.GetXaxis().SetTitle("MET (GeV)")
+                profZobj.GetYaxis().SetTitle("H_{T} (GeV)")
+                profZobj.GetYaxis().SetTitleOffset(1.7)
+                profZobj.Rebin2D(2)
+                profZobj.DrawClone("COLZ")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileZ.png")
+              elif ("EoPVs" in keyname2) :
+                obj.SetMarkerStyle(20)
+                if ("Angle" in keyname2) :
+                  obj.ProjectionY(newname+"_lowEoP",1,obj.GetXaxis().FindBin(0.85),"e").Draw("COLZ")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowEoP.png")
+#                  obj.ProjectionY(newname+"_highEoP",obj.GetXaxis().FindBin(0.85),obj.GetNbinsX()+1,"e").Draw("COLZ")
+#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highEoP.png")
+                elif ("EoPVsPfType" in keyname2) :
+                  obj.SetMarkerColor(1)
+                  obj.SetLineColor(1)
+                  obj.SetMarkerStyle(20)
+                  obj.SetStats(0)
+#                  obj.Scale(1/obj.GetMaximum())
+                  obj.GetYaxis().SetBinLabel(1,"AllTracks")
+                  obj.GetYaxis().SetBinLabel(2,"PFtracks")
+                  obj.GetYaxis().SetBinLabel(3,"isElectron")
+                  obj.GetYaxis().SetBinLabel(4,"isMuon")
+                  obj.GetYaxis().SetBinLabel(5,"isPhoton")
+                  obj.GetYaxis().SetBinLabel(6,"isChHadron")
+                  obj.GetYaxis().SetBinLabel(7,"isNeutHadron")
+                  obj.GetYaxis().SetBinLabel(8,"isUndefined")
+                  obj.GetYaxis().SetBinLabel(9,"notPFtrack")
+                  obj.GetXaxis().SetTitle("EoP")
+                  obj.Draw("COLZ")
+                else :
+                  projObj = obj.ProjectionY(newname+"_lowEoP",1,obj.GetXaxis().FindBin(0.85),"e")
+                  if (projObj.GetEntries() == 0) : continue
+                  myPie = ROOT.TPie(projObj)
+                  myPie.SetLabelFormat("%txt (%perc)")
+                  myPie.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowEoP.png")
+                  
+                  projObj2 = obj.ProjectionY(newname+"_highEoP",obj.GetXaxis().FindBin(0.85),obj.GetNbinsX()+1,"e")
+                  if (projObj2.GetEntries() == 0) : continue
+                  myPie2 = ROOT.TPie(projObj2)
+                  myPie2.SetLabelFormat("%txt (%perc)")
+                  myPie2.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie2.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highEoP.png")
+              elif (obj.ClassName() == "TH2F" and  (("ProbQVsIas" in keyname2) or ( "ProbQNoL1VsIas" in keyname2))) :
+#                obj.GetXaxis().SetTitle(axisXTitle)
+#                obj.GetYaxis().SetTitle(axisYTitle)
+                obj.GetYaxis().SetTitleOffset(1.3)
+                obj.GetYaxis().SetLabelSize(0.03)
+                obj.GetYaxis().SetTitle("G_{i}^{Strips}")
+                obj.GetXaxis().SetTitle("F_{i}^{Pixels}")
+                obj.SetStats(0)
+                obj.DrawClone("COLZ")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                print(str(keyname2) + ": " + str(round(obj.GetCorrelationFactor(),5)))
+                can.SaveAs(name)
+                if ("ProbQNoL1VsIas" in keyname2) :
+                  can2 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
+                  can2.SetLogy()
+                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
+                  projY1 = obj.ProjectionY("IasForProbQSlice_Slice1",obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0),"e")
+                  projY1.SetStats(0)
+                  projY1.SetMarkerColor(1)
+                  projY1.SetLineColor(1)
+                  projY1.SetMarkerStyle(20)
+                  projY1.Draw("SAME")
+                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
+                  projY1.GetYaxis().SetTitleOffset(1.5)
+                  
+                  projY2 = obj.ProjectionY("IasForProbQSlice_Slice2",obj.GetXaxis().FindBin(0.3),obj.GetXaxis().FindBin(0.9),"e")
+                  projY2.SetMarkerStyle(20)
+                  projY2.SetMarkerColor(2)
+                  projY2.SetLineColor(2)
+                  projY2.Draw("SAME")
+                  
+                  numTracks1 = projY1.Integral()
+                  numTracks2 = projY2.Integral()
+                  
+                  if (numTracks1>0) : projY1.Scale(1/projY1.Integral())
+                  if (numTracks2>0) : projY2.Scale(1/projY2.Integral())
+                  
+                  blind = True
+#                  blind = False
+
+                  if (blind and not "CR" in keyname2 and isData) :
+                    projY1.SetBinContent(7,0)
+                    projY1.SetBinContent(8,0)
+                    projY1.SetBinContent(9,0)
+                    projY1.SetBinContent(10,0)
+                  projY1.SetMaximum(projY1.GetMaximum()*100)
+                  
+                  rp2 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
+
+                  rp2.SetH1DrawOpt("P");
+                  rp2.SetH2DrawOpt("P");
+
+                  rp2.Draw()
+                  
+                  rp2.SetLeftMargin(0.13);
+                  rp2.SetRightMargin(0.05);
+                  rp2.SetUpTopMargin(0.1);
+                  rp2.SetLowTopMargin(0.02);
+                  rp2.SetLowBottomMargin(0.35);
+
+
+                  rp2.GetLowerRefGraph().SetMinimum(0)
+                  rp2.GetLowerRefGraph().SetMaximum(3.5);
+                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+                  #rp.GetLowerRefGraph().SetLineColor(0) #0
+                  rp2.GetLowerRefGraph().SetMarkerStyle(20)
+                  rp2.GetLowerRefGraph().SetMarkerSize(1);
+                  rp2.GetLowYaxis().SetNdivisions(505);
+                  rp2.GetLowerRefYaxis().SetTitle("Ratio");
+                  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
+                  rp2.GetLowerRefYaxis().SetTitleOffset(1);
+                  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+                  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
+                  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
+                  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
+                  legIasForProbQSlice.SetTextFont(42)
+                  legIasForProbQSlice.SetTextSize(0.035)
+                  legIasForProbQSlice.SetBorderSize(1);
+                  legIasForProbQSlice.SetLineColor(0);
+                  legIasForProbQSlice.SetLineStyle(1);
+                  legIasForProbQSlice.SetLineWidth(1);
+                  legIasForProbQSlice.SetFillColor(0);
+                  legIasForProbQSlice.SetFillStyle(1001);
+                  legIasForProbQSlice.AddEntry(projY1,"F_{i}^{Pixels} (0.9-1.0), #Tracks: " +str(round(numTracks1)),"LP")
+                  legIasForProbQSlice.AddEntry(projY2,"F_{i}^{Pixels}  (0.3-0.9), #Tracks: " +str(round(numTracks2)),"LP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legIasForProbQSlice.Draw("SAME")
+                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_Norm_ProbQSlice.png")
+                  
+                  can3 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
+                  can3.SetLogy()
+                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
+                  projY1 = obj.ProjectionX("IasForProbQSlice_Slice1",1,obj.GetYaxis().FindBin(0.1),"e")
+                  projY1.SetStats(0)
+                  projY1.SetMarkerColor(1)
+                  projY1.SetLineColor(1)
+                  projY1.SetMarkerStyle(20)
+                  projY1.Draw("SAME")
+                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
+                  projY1.GetYaxis().SetTitleOffset(1.5)
+
+                  projY2 = obj.ProjectionX("IasForProbQSlice_Slice2",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),"e")
+                  projY2.SetMarkerStyle(20)
+                  projY2.SetMarkerColor(2)
+                  projY2.SetLineColor(2)
+                  projY2.Draw("SAME")
+                  
+                  numTracks3 = projY1.Integral()
+                  numTracks4 = projY2.Integral()
+                  if (numTracks3>0) : projY1.Scale(1/projY1.Integral())
+                  if (numTracks4>0) : projY2.Scale(1/projY2.Integral())
+                
+                  if (blind and not "CR" in keyname2 and isData) :
+                    projY1.SetBinContent(19,0)
+                    projY1.SetBinContent(20,0)
+                  
+                  projY1.SetMaximum(projY1.GetMaximum()*100)
+                  
+                  rp3 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
+
+                  rp3.SetH1DrawOpt("P");
+                  rp3.SetH2DrawOpt("P");
+
+                  rp3.Draw()
+                  
+                  rp3.SetLeftMargin(0.13);
+                  rp3.SetRightMargin(0.05);
+                  rp3.SetUpTopMargin(0.1);
+                  rp3.SetLowTopMargin(0.02);
+                  rp3.SetLowBottomMargin(0.35);
+
+
+                  rp3.GetLowerRefGraph().SetMinimum(0)
+                  rp3.GetLowerRefGraph().SetMaximum(3.5)
+                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+                  #rp.GetLowerRefGraph().SetLineColor(0) #0
+                  rp3.GetLowerRefGraph().SetMarkerStyle(20)
+                  rp3.GetLowerRefGraph().SetMarkerSize(1);
+                  rp3.GetLowYaxis().SetNdivisions(505);
+                  rp3.GetLowerRefYaxis().SetTitle("Ratio");
+                  rp3.GetLowerRefYaxis().SetTitleSize(0.05);
+                  rp3.GetLowerRefYaxis().SetTitleOffset(1);
+                  rp3.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+                  rp3.GetLowerRefXaxis().SetTitleSize(0.05);
+                  rp3.GetLowerRefXaxis().SetTitleOffset(0.8);
+                  rp3.GetLowerRefXaxis().SetLabelSize(0.035);
+                  legIasForProbQSlice.SetTextFont(42)
+                  legIasForProbQSlice.SetTextSize(0.035)
+                  legIasForProbQSlice.SetBorderSize(1);
+                  legIasForProbQSlice.SetLineColor(0);
+                  legIasForProbQSlice.SetLineStyle(1);
+                  legIasForProbQSlice.SetLineWidth(1);
+                  legIasForProbQSlice.SetFillColor(0);
+                  legIasForProbQSlice.SetFillStyle(1001);
+                  legIasForProbQSlice.AddEntry(projY1,"G_{i}^{Strips} (0.0-0.1), #Tracks: "+str(round(numTracks3)),"LP")
+                  legIasForProbQSlice.AddEntry(projY2,"G_{i}^{Strips} (0.1-1.0), #Tracks: "+str(round(numTracks4)),"LP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legIasForProbQSlice.Draw("SAME")
+                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_Norm_IasSlice.png")
+
+                if ("ProbQNoL1VsIas" in keyname2) :
+                  can2 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
+                  can2.SetLogy()
+                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
+                  projY1 = obj.ProjectionY("IasForProbQSlice_Slice1",obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0),"e")
+                  projY1.SetStats(0)
+                  projY1.SetMarkerColor(1)
+                  projY1.SetLineColor(1)
+                  projY1.SetMarkerStyle(20)
+                  projY1.Draw("SAME")
+                  projY1.GetYaxis().SetTitle("Tracks / 0.05")
+                  projY1.GetYaxis().SetTitleOffset(1.5)
+                  
+                  projY2 = obj.ProjectionY("IasForProbQSlice_Slice2",obj.GetXaxis().FindBin(0.3),obj.GetXaxis().FindBin(0.9),"e")
+                  projY2.SetMarkerStyle(20)
+                  projY2.SetMarkerColor(2)
+                  projY2.SetLineColor(2)
+                  projY2.Draw("SAME")
+                  
+                  numTracks1 = projY1.Integral()
+                  numTracks2 = projY2.Integral()
+
+                  if (blind and not "CR" in keyname2 and isData) :
+                    projY1.SetBinContent(7,0)
+                    projY1.SetBinContent(8,0)
+                    projY1.SetBinContent(9,0)
+                    projY1.SetBinContent(10,0)
+                  projY1.SetMaximum(projY2.GetMaximum()*100)
+                  projY1.SetMinimum(0.1)
+                  
+                  rp2 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
+
+                  rp2.SetH1DrawOpt("P");
+                  rp2.SetH2DrawOpt("P");
+
+                  rp2.Draw()
+                  
+                  rp2.SetLeftMargin(0.13);
+                  rp2.SetRightMargin(0.05);
+                  rp2.SetUpTopMargin(0.1);
+                  rp2.SetLowTopMargin(0.02);
+                  rp2.SetLowBottomMargin(0.35);
+
+
+                  rp2.GetLowerRefGraph().SetMinimum(0)
+                  rp2.GetLowerRefGraph().SetMaximum(3.5);
+                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+                  #rp.GetLowerRefGraph().SetLineColor(0) #0
+                  rp2.GetLowerRefGraph().SetMarkerStyle(20)
+                  rp2.GetLowerRefGraph().SetMarkerSize(1);
+                  rp2.GetLowYaxis().SetNdivisions(505);
+                  rp2.GetLowerRefYaxis().SetTitle("Ratio");
+                  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
+                  rp2.GetLowerRefYaxis().SetTitleOffset(1);
+                  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+                  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
+                  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
+                  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
+                  legIasForProbQSlice.SetTextFont(42)
+                  legIasForProbQSlice.SetTextSize(0.035)
+                  legIasForProbQSlice.SetBorderSize(1);
+                  legIasForProbQSlice.SetLineColor(0);
+                  legIasForProbQSlice.SetLineStyle(1);
+                  legIasForProbQSlice.SetLineWidth(1);
+                  legIasForProbQSlice.SetFillColor(0);
+                  legIasForProbQSlice.SetFillStyle(1001);
+                  legIasForProbQSlice.AddEntry(projY1,"F_{i}^{Pixels} (0.9-1.0), #Tracks: " +str(round(numTracks1)),"LP")
+                  legIasForProbQSlice.AddEntry(projY2,"F_{i}^{Pixels}  (0.3-0.9), #Tracks: " +str(round(numTracks2)),"LP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legIasForProbQSlice.Draw("SAME")
+                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_NotNorm_ProbQSlice.png")
+                  
+                  can3 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
+                  can3.SetLogy()
+                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
+                  projY1 = obj.ProjectionX("IasForProbQSlice_Slice1",1,obj.GetYaxis().FindBin(0.1),"e")
+                  projY1.SetStats(0)
+                  projY1.SetMarkerColor(1)
+                  projY1.SetLineColor(1)
+                  projY1.SetMarkerStyle(20)
+                  projY1.Draw("SAME")
+                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
+                  projY1.GetYaxis().SetTitleOffset(1.5)
+
+                  projY2 = obj.ProjectionX("IasForProbQSlice_Slice2",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),"e")
+                  projY2.SetMarkerStyle(20)
+                  projY2.SetMarkerColor(2)
+                  projY2.SetLineColor(2)
+                  projY2.Draw("SAME")
+                  
+                  numTracks3 = projY1.Integral()
+                  numTracks4 = projY2.Integral()
+                
+                  if (blind and not "CR" in keyname2 and isData) :
+                    projY1.SetBinContent(19,0)
+                    projY1.SetBinContent(20,0)
+                  
+                  projY1.SetMaximum(projY1.GetMaximum()*100)
+                  
+                  rp3 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
+
+                  rp3.SetH1DrawOpt("P");
+                  rp3.SetH2DrawOpt("P");
+
+                  rp3.Draw()
+                  
+                  rp3.SetLeftMargin(0.13);
+                  rp3.SetRightMargin(0.05);
+                  rp3.SetUpTopMargin(0.1);
+                  rp3.SetLowTopMargin(0.02);
+                  rp3.SetLowBottomMargin(0.35);
+
+
+                  rp3.GetLowerRefGraph().SetMinimum(0)
+                  rp3.GetLowerRefGraph().SetMaximum(3.5)
+                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+                  #rp.GetLowerRefGraph().SetLineColor(0) #0
+                  rp3.GetLowerRefGraph().SetMarkerStyle(20)
+                  rp3.GetLowerRefGraph().SetMarkerSize(1);
+                  rp3.GetLowYaxis().SetNdivisions(505);
+                  rp3.GetLowerRefYaxis().SetTitle("Ratio");
+                  rp3.GetLowerRefYaxis().SetTitleSize(0.05);
+                  rp3.GetLowerRefYaxis().SetTitleOffset(1);
+                  rp3.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+                  rp3.GetLowerRefXaxis().SetTitleSize(0.05);
+                  rp3.GetLowerRefXaxis().SetTitleOffset(0.8);
+                  rp3.GetLowerRefXaxis().SetLabelSize(0.035);
+                  legIasForProbQSlice.SetTextFont(42)
+                  legIasForProbQSlice.SetTextSize(0.035)
+                  legIasForProbQSlice.SetBorderSize(1);
+                  legIasForProbQSlice.SetLineColor(0);
+                  legIasForProbQSlice.SetLineStyle(1);
+                  legIasForProbQSlice.SetLineWidth(1);
+                  legIasForProbQSlice.SetFillColor(0);
+                  legIasForProbQSlice.SetFillStyle(1001);
+                  legIasForProbQSlice.AddEntry(projY1,"G_{i}^{Strips} (0.0-0.1), #Tracks: "+str(round(numTracks3)),"LP")
+                  legIasForProbQSlice.AddEntry(projY2,"G_{i}^{Strips} (0.1-1.0), #Tracks: "+str(round(numTracks4)),"LP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legIasForProbQSlice.Draw("SAME")
+                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_NotNorm_IasSlice.png")
+
+              elif (obj.ClassName() == "TH2F" and  (("Trigger" in keyname2) and ( "Vs" in keyname2))) :
+                profYobj = obj.ProfileY()
+                profYobj.SetStats(0)
+                profYobj.GetYaxis().SetTitle("Efficiency")
+                profYobj.DrawClone("COLZ")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileY.png")
+              
+              if (keyname2== "CutFlow" or keyname2== "EventCutFlow") :
+                if (blind and isData) :
+                  obj.SetBinContent(18,0)
+                  obj.SetBinContent(19,0)
+                  obj.SetBinContent(20,0)
+                obj.SetMarkerColor(1)
+                obj.SetLineColor(1)
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.GetXaxis().SetTitle("")
+                obj.GetXaxis().SetTitle("")
+                ROOT.gStyle.SetPaintTextFormat(".2g");
+                obj.Draw("HISTOTEXT00")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+#                obj.GetYaxis().SetRangeUser(0.,1.3)
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_withNumbersNotNorm.png")
+              if (keyname2== "CutFlow" or keyname2== "EventCutFlow") :
+                if (blind and isData) :
+                  obj.SetBinContent(18,0)
+                  obj.SetBinContent(19,0)
+                  obj.SetBinContent(20,0)
+                obj.SetMarkerColor(1)
+                obj.SetLineColor(1)
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.GetMaximum())
+                obj.GetXaxis().SetTitle("")
+                if (keyname2== "CutFlow") :  obj.GetYaxis().SetTitle("Track efficiency")
+                if (keyname2== "EventCutFlow") : obj.GetYaxis().SetTitle("Event efficiency")
+                obj.GetXaxis().SetTitle("")
+                ROOT.gStyle.SetPaintTextFormat(".2g");
+                obj.Draw("HISTOTEXT00")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.GetYaxis().SetRangeUser(0.,1.3)
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_withNumbers.png")
+              elif (keyname2== "CutFlowReverse") :
+                obj.SetMarkerColor(1)
+                obj.SetLineColor(1)
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.GetMaximum())
+#                obj.GetXaxis().SetBinLabel(1,"Trigger")
+#                obj.GetXaxis().SetBinLabel(2,"pT")
+#                obj.GetXaxis().SetBinLabel(3,"Eta")
+#                obj.GetXaxis().SetBinLabel(4,"NumPixHits")
+#                obj.GetXaxis().SetBinLabel(5,"ValidFract")
+#                obj.GetXaxis().SetBinLabel(6,"NumDeDx")
+#                obj.GetXaxis().SetBinLabel(7,"HighPurity")
+#                obj.GetXaxis().SetBinLabel(8,"Chi2oDOF")
+#                obj.GetXaxis().SetBinLabel(9,"dz")
+#                obj.GetXaxis().SetBinLabel(10,"dxy")
+#                obj.GetXaxis().SetBinLabel(11,"EoP")
+#                obj.GetXaxis().SetBinLabel(12,"")
+#                obj.GetXaxis().SetBinLabel(13,"dRminCaloJet")
+#                obj.GetXaxis().SetBinLabel(14,"MiniIso")
+#                obj.GetXaxis().SetBinLabel(15,"PFid")
+#                obj.GetXaxis().SetBinLabel(16,"Ih")
+#                obj.GetXaxis().SetBinLabel(17,"")
+                obj.GetXaxis().SetTitle("")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.Draw("COLZ L")
+              if (keyname2 == "ErrorHisto") :
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.GetMaximum())
+#                obj.GetXaxis().SetBinLabel(1,"All tracks")
+#                obj.GetXaxis().SetBinLabel(2,"No track/glob muon")
+#                obj.GetXaxis().SetBinLabel(3,"Track is null")
+#                obj.GetXaxis().SetBinLabel(4,"No PV")
+#                obj.GetXaxis().SetBinLabel(5,"No gen match")
+#                obj.GetXaxis().SetBinLabel(6,"Gen match too far")
+#                obj.GetXaxis().SetBinLabel(7,"No dEdx")
+#                obj.GetXaxis().SetBinLabel(8,"Cosmic track")
+#                obj.GetXaxis().SetBinLabel(9,"Has91 status")
+                obj.GetXaxis().SetTitle("")
+                obj.GetYaxis().SetTitle("")
+                obj.SetMaximum(1.4)
+                obj.GetXaxis().SetTitle("")
+                obj.SetTitle("")
+                obj.Draw("COLZ L")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(name)
+              if ("TriggerType" in keyname2) :
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.GetYaxis().SetTitle("Events / category")
+                ROOT.gStyle.SetPaintTextFormat(".2g");
+                obj.Draw("SAMEHISTOTEXT00")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(name)
+              if ("TriggerType" in keyname2) :
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.Integral(1,3))
+                obj.GetYaxis().SetTitle("Norm events / category")
+                ROOT.gStyle.SetPaintTextFormat(".2g");
+                obj.Draw("SAMEHISTOTEXT00")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_Normalized.png")
+              elif ("_pfType" in keyname2) :
+                obj.SetMarkerColor(1)
+                obj.SetLineColor(1)
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.GetMaximum())
+                obj.GetYaxis().SetTitle("Efficiency")
+#                obj.GetXaxis().SetBinLabel(1,"AllTracks")
+#                obj.GetXaxis().SetBinLabel(2,"PFtracks")
+#                obj.GetXaxis().SetBinLabel(3,"isElectron")
+#                obj.GetXaxis().SetBinLabel(4,"isMuon")
+#                obj.GetXaxis().SetBinLabel(5,"isPhoton")
+#                obj.GetXaxis().SetBinLabel(6,"isChHadron")
+#                obj.GetXaxis().SetBinLabel(7,"isNeutHadron")
+#                obj.GetXaxis().SetBinLabel(8,"isUndefined")
+#                obj.GetXaxis().SetBinLabel(9,"notPFtrack")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.Draw("COLZ L")
+
+              elif ((keyname2 == "CutFlowEta") or (keyname2 == "CutFlowProbQ") or (keyname2 == "CutFlowPfType") or (keyname2 == "CutFlowProbQ")) :
+                obj.SetStats(0)
+                obj.GetYaxis().SetTitle("Efficiency")
+                obj.GetYaxis().SetTitle("")
+                obj.GetYaxis().SetTitle("")
+                if (keyname2 == "CutFlowPfType"):
+                  obj.Scale(1/obj.GetMaximum())
+                  for x in range(1,obj.GetNbinsX()+1) :
+                    localMax = obj.GetBinContent(x,1)
+                    for y in range(1,obj.GetNbinsY()+1) :
+                      value = obj.GetBinContent(x,y)
+                      if (value <= 0 or localMax <= 0) : continue
+                      obj.SetBinContent(x,y, value/localMax)
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.Draw("COLZ")
+                can.SaveAs(name)
+              #and ("Mass" not in keyname2)
+              #and ("PostS" not in keyname2)
+              elif ("Max" not in keyname2) and ("Pred" not in keyname2) and ("PDF" not in keyname2):
+                obj.SetMarkerStyle(20)
+                obj.SetTitle("")
+#                obj.GetXaxis().SetTitle(axisXTitle)
+#                obj.GetYaxis().SetTitle(axisYTitle)
+                obj.Draw("COLZ")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(name)
+              
+              if ("Angle" in keyname2 and obj.ClassName() == "TH2F" ) :
+                obj.Draw("COLZ")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_2d.png")
+              
+              ## ----------------------------------------------------------------------------------------------
+              # now let's plot everything in a logy scale
+              obj.SetMarkerStyle(20)
+              obj.SetMinimum(0.000001)
+#              obj.SetMaximum(10000)
+              if ("GenID" in keyname2 or "GenEnviromentID" in keyname2) :
+                continue
+                
+              if (keyname2=="CutFlowProbQ" or keyname2=="CutFlowPfType" or keyname2=="CutFlowEta" or "Vs" in keyname2) :
+#              or "PostPreS_IasPixelIhVsLayer" in keyname2 or "PostPreS_IasStripIhVsLayer" in keyname2
+                obj.SetMaximum(obj.GetMaximum())
+                obj.SetMinimum(0.000001)
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SetLogz()
+
+              else :
+                obj.SetMaximum(obj.GetMaximum()*100)
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+#                obj.SetMinimum(0.0001)
+                can.SetLogy()
+
+                obj.SetTitle("")
+              can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_logy.png")
+              #can.SaveAs(name.replace(".png",".pdf"))
+              #can.SaveAs(name.replace(".png",".C"))
+              can.Close()
+
+          else:
+              print(keyname+"   "+newname + " does not inherit from TObject" )
+
+##template_2018A_v2.root
+#name = "2017A"
+#version = "v4"
+#fOut = ROOT.TFile.Open('template_{}_{}.root'.format(name,version),'UPDATE')
+#fIn = ROOT.TFile.Open("Histos_numEvent2000.root")
+#templ1 = fIn.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_1')
+#
+#templ1.Write()
+#fOut.Close()
diff --git a/Analyzer/test/Tamas/PostProcScripts/makeRegions.py b/Analyzer/test/Tamas/PostProcScripts/makeRegions.py
new file mode 100644
index 0000000..3636514
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/makeRegions.py
@@ -0,0 +1,63 @@
+import ROOT
+import numpy as np
+
+def makeRegion(name, iHist, syst):
+    '''
+    takes in a 20x20 HSCP ProbQvsIas histogram and returns the 20x1 Pass and Fail histos
+    '''
+    # first do Pass
+    hPassTempName = 'hpass{}_temp'.format(syst)
+    hPassTemp = ROOT.TH2F(hPassTempName,'ProbQvsIas;ProbQ;Ias',1,0.0,1.0,20,0.0,1.0) # need to change x [0,0.1]?
+    # loop over 
+    for yBin in range(1,21):
+        ySum = 0.0
+        for xBin in range(18,21):
+            print('Getting bin content: ({},{})'.format(xBin,yBin))
+            ySum += iHist.GetBinContent(xBin,yBin)
+        hPassTemp.SetBinContent(1,yBin,ySum)
+#    hPassTemp.SetBinContent(1,21,10)
+#    hPassTemp.SetBinContent(1,22,10)
+
+    # now do Fail
+    hFailTempName = 'hfail{}_temp'.format(syst)
+    hFailTemp = ROOT.TH2F(hFailTempName,'ProbQvsIas;ProbQ;Ias',1,0.0,1.0,20,0.0,1.0) # need to change x [0.1,0.7]?
+    for yBin in range(1,21):
+        ySum = 0.0
+        for xBin in range(3,18):
+            print('Getting bin content: ({},{})'.format(xBin,yBin))
+            ySum += iHist.GetBinContent(xBin,yBin)
+        hFailTemp.SetBinContent(1,yBin,ySum)
+#    hFailTemp.SetBinContent(1,21,10)
+#    hFailTemp.SetBinContent(1,22,10)
+
+    f = ROOT.TFile.Open('HSCP_{}.root'.format(name),'UPDATE')
+    hPassName = 'hpass{}'.format(syst)
+    hFailName = 'hfail{}'.format(syst)
+    # 2DAlphabet expects signal/blinding to be on X axis only.. So need to invert
+    hPass = ROOT.TH2F(hPassName,'IasVsProbQ;Ias;ProbQ',20,0.0,1.0,1,0.0,1.0) # need to change y [0.0, 0.1]?
+    hFail = ROOT.TH2F(hFailName,'IasVsProbQ;Ias;ProbQ',20,0.0,1.0,1,0.0,1.0) # need to change y [0.1, 0.7]?
+    for yBin in range(1,21):
+      hPNew = hPassTemp.GetBinContent(1,yBin)
+      hPass.SetBinContent(yBin,1,hPNew)
+      hFNew = hFailTemp.GetBinContent(1,yBin)
+      hFail.SetBinContent(yBin,1,hFNew)
+
+    hFail.Write()
+    hPass.Write()
+    f.Close()
+    
+#f = ROOT.TFile.Open('crab_Analysis_2018_HSCPgluino_M-1800_CodeV40p4_v1.root')
+#h = f.Get('HSCParticleAnalyzer/BaseName/PostPreS_ProbQNoL1VsIas')
+
+d = {'Signal': 'crab_Analysis_2018_HSCPgluino_M-1800_CodeV40p9_v1.root',
+ 'Data': 'crab_Analysis_SingleMuon_Run2018C_CodeV40p9_v1.root'}
+
+for name, fName in d.items():
+    fTemp = ROOT.TFile.Open(fName)
+    makeRegion(name, fTemp.Get('HSCParticleAnalyzer/BaseName/PostPreS_ProbQNoL1VsIas'),'')
+    if("Signal" in name) :
+      makeRegion(name, fTemp.Get('HSCParticleAnalyzer/BaseName/PostPreS_ProbQNoL1VsIas__Pileup_down'),'_PUsyst_down')
+      makeRegion(name, fTemp.Get('HSCParticleAnalyzer/BaseName/PostPreS_ProbQNoL1VsIas__Pileup_up'),'_PUsyst_up')
+    fTemp.Close()
+
+print("scp HSCP_*root vami@ui3.kfki.hu:/data/vami/CMSSW_10_6_14/src/DataStudies/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/plotHistosMT.py b/Analyzer/test/Tamas/PostProcScripts/plotHistosMT.py
new file mode 100644
index 0000000..e53ce85
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/plotHistosMT.py
@@ -0,0 +1,37 @@
+import sys, os
+from optparse import OptionParser
+from threading import Thread
+
+parser = OptionParser(usage="Usage: python3 %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+didConda = input("Push enter if you alread did conda activate withRoot or say no and do it\n")
+if(didConda):
+ sys.exit()
+
+datasetList = []
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+ 
+for fname in os.listdir(".") :
+  if (codeVersion in fname) and (".root" in fname) :
+    datasetList.append(fname)
+
+def task(i):
+  runPngFromRoot3 = "python3 pngsFromRootFilesJustHistos.py "+i+" 3"
+  os.system(runPngFromRoot3)
+  os.system("cp forWebpage/* "+i[0:-5]+"_Bin3/.")
+  runPngFromRoot25 = "python3 pngsFromRootFilesJustHistos.py "+i+" 25"
+#  os.system(runPngFromRoot25)
+#  os.system("cp forWebpage/* "+i[0:-5]+"_Bin25/.")
+  
+  scpBin3 = "scp -r "+i[0:-5]+"_Bin3 tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/."
+#  os.system(scpBin3)
+  scpBin25 = "scp -r "+i[0:-5]+"_Bin25 tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/."
+#  os.system(scpBin25)
+  print("Done for sample "+i)
+
+for dataset in datasetList:
+  t = Thread(target=task, args=(dataset,))
+  t.start()
diff --git a/Analyzer/test/Tamas/PostProcScripts/pngsFromRootFilesJustHistos.py b/Analyzer/test/Tamas/PostProcScripts/pngsFromRootFilesJustHistos.py
new file mode 100644
index 0000000..906e928
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/pngsFromRootFilesJustHistos.py
@@ -0,0 +1,1950 @@
+import ROOT, sys, os, time, re, array
+import numpy as np
+from ctypes import c_double as double
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
+(opt,args) = parser.parse_args()
+
+ROOT.gROOT.SetStyle("Plain")
+#ROOT.gStyle.SetOptStat(0)
+ROOT.gStyle.SetPalette(1)
+ROOT.gROOT.SetBatch(True)
+
+ROOT.gStyle.SetPadTopMargin(0.07);
+ROOT.gStyle.SetPadBottomMargin(0.1);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+ROOT.gStyle.SetPadRightMargin(0.13);
+
+fileName = sys.argv[1]
+BinNumber = sys.argv[2] if (len(sys.argv)==1) else 3
+
+bin = int(BinNumber)
+# bin 3: pt>60 and I_as > 0.05
+# bin 25: pt>65 and I_as > 0.175
+# bin 28: pt>65 and I_as > 0.3
+
+#blind = True
+blind = False
+
+print("Filename: "+fileName)
+input_file = fileName
+
+ProjBin = int(BinNumber)
+newFileDir = fileName[0:-5] + "_Bin" + str(ProjBin)
+
+
+f = ROOT.TFile.Open(input_file)
+fileOut = open("SignalBackgroundEff.txt", "a")
+
+isData = False
+if ("SingleMuon" in fileName) : isData = True
+
+iDontWannaRunPlots = False
+#iDontWannaRunPlots = True
+
+class Vavilov_Func:
+    def __init__(self):
+        self.pdf = ROOT.Math.VavilovAccurate()
+    
+    def __call__(self, x, p):
+        kappa = p[0]
+        beta2 = p[1]
+        return p[4] * (self.pdf.Pdf((x[0] - p[2]) / p[3], kappa, beta2))
+
+def GaussWithLandau(x, par):
+    landau = ROOT.TMath.Landau(x[0], par[0], par[1])
+    gauss = ROOT.TMath.Gaus(x[0], 0, par[2], 1)
+    dx = x[1] - x[0]
+    conv = np.convolve(landau, gauss, mode='same') * dx
+    return par[3] * conv
+    
+dirs = []
+for i in range(0, f.GetListOfKeys().GetEntries()):
+  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
+  dirname = f.GetListOfKeys().At(i).GetName()
+  curr_dir = f.GetDirectory(dirname)
+# print("dirname: "+dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      # Match the plot of interest
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = f.GetDirectory(dirname+"/"+keyname)
+#                    print("keyname: "+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          if ("__" in keyname2) : continue
+          # The plot should be TCanvas
+          newname = dirname + "/" + keyname+ "/" + keyname2
+#          print("newname: "+newname)
+          obj = f.Get(newname)
+          
+          
+          tex2 = ROOT.TLatex(0.15,0.94,"CMS");
+          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+#          tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
+#          tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+          tex3 = ROOT.TLatex(0.29,0.94,"Internal");
+#          tex3 = ROOT.TLatex(0.27,0.94,"");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+
+
+          tex4 = ROOT.TLatex()
+          if ("BefPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.94,"Before preselection")
+#            if ("BefPreS_Eta" in keyname2) :
+#              print("BefPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.94,"After N-1 selection")
+#            if ("N1_Eta" in keyname2) :
+#              print("N-1 number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
+          elif ("PostPreS" in keyname2 or "Stab" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.94,"After preselection")
+          elif ("PostS" in keyname2) :
+            tex4 = ROOT.TLatex(0.6,0.94,"After selection")
+          elif ("K_and_C" in keyname2) :
+            tex4 = ROOT.TLatex(0.5,0.94,"After calibration selection")
+
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.045);
+          tex4.SetLineWidth(2);
+          
+          codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
+          beginFileVersion = fileName.find("2018")+5 if (fileName.find("2018") > 0) else fileName.find("SingleMuon")
+          fileVersion = fileName[beginFileVersion:fileName.find("CodeV")+9]
+          tex5 = ROOT.TLatex(0.07,0.03,fileVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          
+
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if not (obj) : continue
+          if obj.InheritsFrom("TObject"):
+              can = obj
+              obj.SetStats(0)
+              can = ROOT.TCanvas(newname,newname,800,800)
+              # Name of the png to be saved
+              name = fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png"
+              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+              if (obj.GetEntries() == 0 ) :
+                continue
+                
+#             when I dont want to plot everything
+              if (iDontWannaRunPlots) : continue
+              if ("_region" in keyname2 or "CtrlPt_" in keyname2 or "Pred_" in keyname2 or "PDF" in keyname2 or "Hist_" in keyname2) : continue
+#              if not ("Trigger" in keyname2 and obj.ClassName() == "TH3F") : continue
+#              if not ("RunNumVsPixCluChargeAfter" in keyname2) : continue
+#              if not ("PostS_SR2PASS" in keyname2) : continue
+
+              if ("PostS_SR2PASS_RunVsLs" in keyname2) and not blind :
+                  for ix in range(1, obj.GetNbinsX() + 1):
+                    for iy in range(1, obj.GetNbinsY() + 1):
+                        content = obj.GetBinContent(ix, iy)
+                        if content != 0.0:
+                            x = obj.GetXaxis().GetBinCenter(ix)
+                            y = obj.GetYaxis().GetBinCenter(iy)
+                            print(f"Non-zero yield at ({x}, {y}): {content}")
+
+#              if not ((obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D") and "VsProbQVsIas" in keyname2) : continue
+              if ("Gen" in keyname2 and isData) : continue
+#                 print(obj.ClassName())
+              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
+                obj.SetTitle("")
+                if ("VsProbQVsIas" in keyname2) :
+                  can2 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
+                  can2.SetLogy()
+                  
+                  projA = obj.ProjectionX(newname+"_RegionA",obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1),obj.GetZaxis().FindBin(0.0),obj.GetZaxis().FindBin(0.1),"e")
+                  projB = obj.ProjectionX(newname+"_RegionB",obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1),obj.GetZaxis().FindBin(0.1),obj.GetZaxis().FindBin(1.0),"e")
+                  projC = obj.ProjectionX(newname+"_RegionC",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),obj.GetZaxis().FindBin(0.0),obj.GetZaxis().FindBin(0.1),"e")
+                  projD = obj.ProjectionX(newname+"_RegionD",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),obj.GetZaxis().FindBin(0.1),obj.GetZaxis().FindBin(1.0),"e")
+                  projA.SetMarkerColor(1)
+                  projA.SetTitle("")
+                  projB.SetMarkerColor(2)
+                  projC.SetMarkerColor(3)
+                  projD.SetMarkerColor(4)
+                  projA.SetMarkerStyle(20)
+                  projB.SetMarkerStyle(20)
+                  projC.SetMarkerStyle(20)
+                  projD.SetMarkerStyle(20)
+                  projA.SetLineColor(1)
+                  projB.SetLineColor(2)
+                  projC.SetLineColor(3)
+                  projD.SetLineColor(4)
+                  
+                  max1 = np.maximum(projA.GetMaximum(),projB.GetMaximum())
+                  max2 = np.maximum(projC.GetMaximum(),projD.GetMaximum())
+                  max = np.maximum(max1,max2)
+                  
+                  legProjXInRegions =  ROOT.TLegend(.4,.65,.80,.9,"","brNDC")
+                  legProjXInRegions.SetTextFont(42)
+                  legProjXInRegions.SetTextSize(0.035)
+                  legProjXInRegions.SetBorderSize(1);
+                  legProjXInRegions.SetLineColor(0);
+                  legProjXInRegions.SetLineStyle(1);
+                  legProjXInRegions.SetLineWidth(1);
+                  legProjXInRegions.SetFillColor(0);
+                  legProjXInRegions.SetFillStyle(1001);
+                  
+                  Err = double(0.0)
+                  legProjXInRegions.AddEntry(projA,"Region A: " +str(int(projA.IntegralAndError(1,projA.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
+                  legProjXInRegions.AddEntry(projB,"Region B: " +str(int(projB.IntegralAndError(1,projB.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
+                  legProjXInRegions.AddEntry(projC,"Region C: " +str(int(projC.IntegralAndError(1,projC.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
+                  legProjXInRegions.AddEntry(projD,"Region D: " +str(int(projD.IntegralAndError(1,projD.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
+                  
+                  projA.SetStats(0)
+                  projA.SetMinimum(0.0001)
+                  if (projA.Integral() == 0) : continue
+                  if (projB.Integral() == 0) : continue
+                  if (projC.Integral() == 0) : continue
+                  if (projD.Integral() == 0) : continue
+                  projA.Scale(1/projA.Integral())
+                  newMax = projA.GetMaximum()
+                  projB.Scale(1/projB.Integral())
+                  projC.Scale(1/projC.Integral())
+                  projD.Scale(1/projD.Integral())
+                  projA.Draw("SAME")
+                  projA.GetYaxis().SetRangeUser(0.00000001, newMax*10)
+                  projA.GetYaxis().SetTitle("Norm tracks / bin")
+                  projA.GetYaxis().SetTitleOffset(1.7)
+                  projB.Draw("SAME")
+                  projC.Draw("SAME")
+                  projD.Draw("SAME")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legProjXInRegions.Draw("SAME")
+
+                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjXInRegions.png")
+                if ("ProbQNoL1VsIasVsPt" in keyname2) :
+                  canLog = ROOT.TCanvas("newname"+keyname2,"newname"+keyname2,800,800)
+                  canLog.SetLogy()
+                  legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
+                  legProjXInRegions.SetHeader("FAIL region (F_{i}^{pixels} < 0.9)","C")
+                  legProjXInRegions.SetTextFont(42)
+                  legProjXInRegions.SetTextSize(0.035)
+                  legProjXInRegions.SetBorderSize(1);
+                  legProjXInRegions.SetLineColor(0);
+                  legProjXInRegions.SetLineStyle(1);
+                  legProjXInRegions.SetLineWidth(1);
+                  legProjXInRegions.SetFillColor(0);
+                  legProjXInRegions.SetFillStyle(1001);
+                  obj.GetXaxis().SetRange(1,obj.GetXaxis().FindBin(0.9)-1)
+                 
+                  projFail = obj.Project3D("YZ")
+                  projFail.SetTitle("")
+                  projFail.GetXaxis().SetRangeUser(200,4000)
+                  projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
+                  projFailPt1.SetStats(0)
+                  projFailPt1.SetMarkerStyle(20)
+                  projFailPt1.SetLineColor(1)
+                  projFailPt1.SetMarkerColor(1)
+                  projFailPt1.SetMaximum(projFailPt1.GetMaximum()*100)
+                  projFailPt1.DrawClone("SAMEP")
+                  legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 200 - inf GeV","LP")
+
+                  projFail.GetXaxis().SetRangeUser(300,4000)
+                  projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
+                  projFailPt2.SetStats(0)
+                  projFailPt2.SetMarkerStyle(20)
+                  projFailPt2.SetLineColor(2)
+                  projFailPt2.SetMarkerColor(2)
+                  projFailPt2.DrawClone("SAMEP")
+                  legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 300 - inf  GeV","LP")
+
+                  projFail.GetXaxis().SetRangeUser(400,4000)
+                  projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
+                  projFailPt3.SetStats(0)
+                  projFailPt3.SetMarkerStyle(20)
+                  projFailPt3.SetLineColor(3)
+                  projFailPt3.SetMarkerColor(3)
+                  projFailPt3.DrawClone("SAMEP")
+
+                  legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 400 - inf GeV","LP")
+                  legProjXInRegions.Draw("SAMEP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  canLog.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_FAIL_PtBins.png")
+                  
+                  # repeat the same for PASS now
+                  canLog2 = ROOT.TCanvas("newname2-pass"+keyname2,"newname2-pass"+keyname2,800,800)
+                  canLog2.SetLogy()
+                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0)+1) # makes it the PASS region
+                  projPass = obj.Project3D("YZ")
+                  projPass.SetTitle("")
+                  
+                  legProjXInRegions.SetHeader("PASS region (F_{i}^{pixels} > 0.9)","C")
+
+                  projPass.GetXaxis().SetRangeUser(240,4000)
+                  projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
+                  
+                  projPassPt1.SetStats(0)
+                  projPassPt1.SetMarkerStyle(20)
+                  projPassPt1.SetLineColor(1)
+                  projPassPt1.SetMarkerColor(1)
+                  projPassPt1.SetMaximum(projPassPt1.GetMaximum()*100)
+                  projPassPt1.DrawClone("SAMEP")
+
+                  projPass.GetXaxis().SetRangeUser(320,4000)
+                  projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
+                  projPassPt2.SetStats(0)
+                  projPassPt2.SetMarkerStyle(20)
+                  projPassPt2.SetLineColor(2)
+                  projPassPt2.SetMarkerColor(2)
+                  projPassPt2.DrawClone("SAMEP")
+
+                  projPass.GetXaxis().SetRangeUser(400,4000)
+                  projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
+                  projPassPt3.SetStats(0)
+                  projPassPt3.SetMarkerStyle(20)
+                  projPassPt3.SetLineColor(3)
+                  projPassPt3.SetMarkerColor(3)
+                  projPassPt3.DrawClone("SAMEP")
+
+                  legProjXInRegions.Draw("SAMEP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  canLog2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PASS_PtBins.png")
+
+                if ("PostS_ProbQNoL1VsFiStripsVsPt" in keyname2) :
+                  canLog = ROOT.TCanvas("newnameF"+keyname2,"newnameF"+keyname2,800,800)
+                  canLog.SetLogy()
+                  legProjXInRegions =  ROOT.TLegend(.2,.75,.7,.9,"","brNDC")
+                  legProjXInRegions.SetHeader("FAIL region (F_{i}^{pixels} < 0.9)","C")
+                  legProjXInRegions.SetTextFont(42)
+                  legProjXInRegions.SetTextSize(0.035)
+                  legProjXInRegions.SetBorderSize(1);
+                  legProjXInRegions.SetLineColor(0);
+                  legProjXInRegions.SetLineStyle(1);
+                  legProjXInRegions.SetLineWidth(1);
+                  legProjXInRegions.SetFillColor(0);
+                  legProjXInRegions.SetFillStyle(1001);
+                  obj.GetXaxis().SetRange(1,obj.GetXaxis().FindBin(0.9)-1)
+                 
+                  projFail = obj.Project3D("YZ")
+                  projFail.SetTitle("")
+                  projFail.GetXaxis().SetRangeUser(100,4000)
+                  projFailPt1 = projFail.ProjectionY("name1F").Rebin(2)
+                  projFailPt1.GetYaxis().SetTitle("Normalized events")
+                  numEvents1 = projFailPt1.Integral()
+                  projFailPt1.SetStats(0)
+                  projFailPt1.SetMarkerStyle(20)
+                  projFailPt1.SetLineColor(1)
+                  projFailPt1.SetMarkerColor(1)
+                  if (numEvents1 > 0) : projFailPt1.Scale(1/numEvents1)
+                  projFailPt1.SetMaximum(projFailPt1.GetMaximum()*50)
+                  projFailPt1.DrawClone("SAMEP")
+                  legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 100 - inf GeV, #Events: " +str(round(numEvents1)),"LP")
+
+                  projFail.GetXaxis().SetRangeUser(200,4000)
+                  projFailPt2 = projFail.ProjectionY("name2F").Rebin(2)
+                  numEvents2 = projFailPt2.Integral()
+                  projFailPt2.SetStats(0)
+                  projFailPt2.SetMarkerStyle(20)
+                  projFailPt2.SetLineColor(2)
+                  projFailPt2.SetMarkerColor(2)
+                  if (numEvents2 > 0) : projFailPt2.Scale(1/numEvents2)
+                  projFailPt2.DrawClone("SAMEP")
+                  legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 200 - inf GeV, #Events: " +str(round(numEvents2)),"LP")
+
+                  projFail.GetXaxis().SetRangeUser(300,4000)
+                  projFailPt3 = projFail.ProjectionY("name3F").Rebin(2)
+                  numEvents3 = projFailPt3.Integral()
+                  projFailPt3.SetStats(0)
+                  projFailPt3.SetMarkerStyle(20)
+                  projFailPt3.SetLineColor(3)
+                  projFailPt3.SetMarkerColor(3)
+                  if (numEvents3 > 0) : projFailPt3.Scale(1/numEvents3)
+                  projFailPt3.DrawClone("SAMEP")
+
+                  legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 300 - inf GeV, #Events: " +str(round(numEvents3)),"LP")
+                  legProjXInRegions.Draw("SAMEP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  canLog.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_FAIL_PtBins.png")
+                  
+                  # repeat the same for PASS now
+                  legProjXInRegionsPass =  ROOT.TLegend(.2,.75,.7,.9,"","brNDC")
+                  legProjXInRegionsPass.SetHeader("FAIL region (F_{i}^{pixels} < 0.9)","C")
+                  legProjXInRegionsPass.SetTextFont(42)
+                  legProjXInRegionsPass.SetTextSize(0.035)
+                  legProjXInRegionsPass.SetBorderSize(1);
+                  legProjXInRegionsPass.SetLineColor(0);
+                  legProjXInRegionsPass.SetLineStyle(1);
+                  legProjXInRegionsPass.SetLineWidth(1);
+                  legProjXInRegionsPass.SetFillColor(0);
+                  legProjXInRegionsPass.SetFillStyle(1001);
+                  canLog2 = ROOT.TCanvas("newname2-passF"+keyname2,"newname2-passF"+keyname2,800,800)
+                  canLog2.SetLogy()
+                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0)+1) # makes it the PASS region
+                  projPass = obj.Project3D("YZ")
+                  projPass.SetTitle("")
+                  
+                  legProjXInRegionsPass.SetHeader("PASS region (F_{i}^{pixels} > 0.9)","C")
+
+                  projPass.GetXaxis().SetRangeUser(100,4000)
+                  projPassPt1 = projPass.ProjectionY("name1-passF").Rebin(2)
+                  projPassPt1.GetYaxis().SetTitle("Normalized events")
+                  numEvents1 = projPassPt1.Integral()
+                  legProjXInRegionsPass.AddEntry(projPassPt1, "p_{T} = 100 - inf GeV, #Events: " +str(round(numEvents1)),"LP")
+                  
+                  projPassPt1.SetStats(0)
+                  projPassPt1.SetMarkerStyle(20)
+                  projPassPt1.SetLineColor(1)
+                  projPassPt1.SetMarkerColor(1)
+                  if (numEvents1 > 0) : projPassPt1.Scale(1/numEvents1)
+                  projPassPt1.SetMaximum(projPassPt1.GetMaximum()*50)
+                  projPassPt1.DrawClone("SAMEP")
+
+                  projPass.GetXaxis().SetRangeUser(200,4000)
+                  projPassPt2 = projPass.ProjectionY("name2-passF").Rebin(2)
+                  numEvents2 = projPassPt2.Integral()
+                  legProjXInRegionsPass.AddEntry(projPassPt2, "p_{T} = 200 - inf GeV, #Events: " +str(round(numEvents2)),"LP")
+                  projPassPt2.SetStats(0)
+                  projPassPt2.SetMarkerStyle(20)
+                  projPassPt2.SetLineColor(2)
+                  projPassPt2.SetMarkerColor(2)
+                  if (numEvents2 > 0) : projPassPt2.Scale(1/numEvents2)
+                  projPassPt2.DrawClone("SAMEP")
+
+                  projPass.GetXaxis().SetRangeUser(300,4000)
+                  projPassPt3 = projPass.ProjectionY("name3-passF").Rebin(2)
+                  numEvents3 = projPassPt3.Integral()
+                  legProjXInRegionsPass.AddEntry(projPassPt3, "p_{T} = 300 - inf GeV, #Events: " +str(round(numEvents3)),"LP")
+                  projPassPt3.SetStats(0)
+                  projPassPt3.SetMarkerStyle(20)
+                  projPassPt3.SetLineColor(3)
+                  projPassPt3.SetMarkerColor(3)
+                  if (numEvents3 > 0) : projPassPt3.Scale(1/numEvents3)
+                  projPassPt3.DrawClone("SAMEP")
+
+                  legProjXInRegionsPass.Draw("SAMEP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  canLog2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PASS_PtBins.png")
+
+
+                if ("ProbQVsProbXY" in keyname2) :
+                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(3.22),-1)
+                  obj.GetYaxis().SetRange(obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1))
+                  obj.Project3D("YZ").Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIh.png")
+                  obj.GetXaxis().UnZoom()
+                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(3.22))
+                  obj.GetYaxis().SetRange(obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1))
+                  obj.Project3D("YZ").Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIh.png")
+                  obj.GetXaxis().UnZoom()
+                  obj.Project3D("YZ").Draw("COLZ")
+                  can.SaveAs(name)
+                if ("Calibration_GiTemplate" in keyname2) :
+                  projX = obj.ProjectionX()
+                  projX.SetTitle("")
+                  projX.SetStats(0)
+                  projX.SetMarkerStyle(20)
+                  projX.GetYaxis().SetTitle("Clusters")
+                  projX.GetYaxis().SetTitleOffset(1.9)
+                  projX.Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjX.png")
+                  
+                  legGiCalib =  ROOT.TLegend(.6,.55,.80,.9,"","brNDC")
+                  legGiCalib.SetTextFont(42)
+                  legGiCalib.SetTextSize(0.03)
+                  legGiCalib.SetBorderSize(1);
+                  legGiCalib.SetLineColor(0);
+                  legGiCalib.SetLineStyle(1);
+                  legGiCalib.SetLineWidth(1);
+                  legGiCalib.SetFillColor(0);
+                  legGiCalib.SetFillStyle(1001);
+                  
+                  can3 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
+                  can3.SetLogy()
+                  for x in range(1,obj.GetNbinsX()+1) :
+                    projY = obj.ProjectionY(keyname2 +  "_ProjY"+str(x),x,x+1,1,obj.GetNbinsZ()+1,"e")
+                    projY.SetTitle("")
+                    projY.SetStats(0)
+                    projY.SetMarkerStyle(20)
+                    projY.SetLineColor(x)
+                    projY.SetMarkerColor(x)
+                    projY.GetYaxis().SetTitle("Clusters")
+                    projY.GetYaxis().SetTitleOffset(1.4)
+                    legGiCalib.AddEntry(projY, "Module index: " + str(x),"LP")
+                    projY.Draw("SAME")
+                  legGiCalib.Draw("SAME")
+                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjY.png")
+                  can4 = ROOT.TCanvas(newname+"4",newname+"4",800,800)
+                  can4.SetLogy()
+                  for x in range(1,obj.GetNbinsX()+2) :
+                    projZ = obj.ProjectionZ(keyname2 + "_ProjZ"+str(x),x,x+1,1,obj.GetNbinsY()+1,"e").Rebin(10)
+                    projZ.SetTitle("")
+                    projZ.SetStats(0)
+                    projZ.SetMarkerStyle(20)
+                    projZ.SetLineColor(x)
+                    projZ.SetMarkerColor(x)
+                    projZ.GetYaxis().SetTitle("Clusters")
+                    projZ.GetYaxis().SetTitleOffset(1.4)
+                    projZ.Draw("SAME")
+                  legGiCalib.Draw("SAME")
+                  can4.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjZ.png")
+                  continue
+                else :
+                  print("Following plot was skipped: "+str(keyname2))
+                  continue
+                # this maybe should go from bin to bin+1 ?
+#                if ("IhVsLayer" in keyname2 or "IhVsLayer" in keyname2) :
+#                  obj.SetMarkerStyle(20)
+#                  if ("PostPreS_IasPixelIhVsLayer" in keyname2) :
+#                      ratioOfhighIhPartOlowIh = ROOT.TH1F("RatioOfHighIhOverLowIh",";;Ratio of Ih>5 over Ih<5",7,0.,7.)
+#                      for x in range(1,obj.GetNbinsX()) :
+#                        lowIhPart = obj.Project3D("YZ").Integral(x,x,1,obj.Project3D("YZ").GetYaxis().FindBin(5.0))
+#                        highIhPart = obj.Project3D("YZ").Integral(x,x,obj.Project3D("YZ").GetYaxis().FindBin(5.0),obj.Project3D("YZ").GetNbinsY())
+#                        ratio = 0
+#                        if (lowIhPart>0) :
+#                          ratio = highIhPart/lowIhPart
+#                        ratioOfhighIhPartOlowIh.SetBinContent(x,ratio)
+#                      ratioOfhighIhPartOlowIh.Draw("COLZ")
+#                      ratioOfhighIhPartOlowIh.SetStats(0)
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(1,"BPix L1")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(2,"BPix L2")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(3,"BPix L3")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(4,"BPix L4")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(5,"FPix D1")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(6,"FPix D2")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(7,"FPix D3")
+#                      ratioOfhighIhPartOlowIh.GetYaxis().SetTitleOffset(1.5)
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(1,"BPix L1")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(2,"BPix L2")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(3,"BPix L3")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(4,"BPix L4")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(5,"FPix D1")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(6,"FPix D2")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(7,"FPix D3")
+#                      obj.Project3D("YZ").GetYaxis().SetTitleOffset(0.8)
+#                      obj.Project3D("YZ").GetYaxis().SetTitle("Ih")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(1,"BPix L1")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(2,"BPix L2")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(3,"BPix L3")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(4,"BPix L4")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(5,"FPix D1")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(6,"FPix D2")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(7,"FPix D3")
+#                      obj.Project3D("XZ").GetYaxis().SetTitle("Ias")
+#                      obj.Project3D("XZ").GetYaxis().SetTitleOffset(0.8)
+#                  elif ("PostPreS_IasStripIhVsLayer" in keyname2) :
+#                      ratioOfhighIhPartOlowIh = ROOT.TH1F("RatioOfHighIhOverLowIh",";;Ratio of Ih>5 over Ih<5",23,0.,23.)
+#                      for x in range(1,obj.GetNbinsX()) :
+#                        lowIhPart = obj.Project3D("YZ").Integral(x,x,1,obj.Project3D("YZ").GetYaxis().FindBin(5.0))
+#                        highIhPart = obj.Project3D("YZ").Integral(x,x,obj.Project3D("YZ").GetYaxis().FindBin(5.0),obj.Project3D("YZ").GetNbinsY())
+#                        ratio = 0
+#                        if (lowIhPart>0) :
+#                          ratio = highIhPart/lowIhPart
+#                        ratioOfhighIhPartOlowIh.SetBinContent(x,ratio)
+#                      ratioOfhighIhPartOlowIh.Draw("COLZ")
+#                      ratioOfhighIhPartOlowIh.SetStats(0)
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(1,"TIB L1")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(2,"TIB L2")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(3,"TIB L3")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(4,"TIB L4")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(5,"TOB L1")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(6,"TOB L2")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(7,"TOB L3")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(8,"TOB L4")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(9,"TOB L5")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(10,"TOB L6")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(11,"TID D1")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(12,"TID D2")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(13,"TID D3")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(14,"TEC D1")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(15,"TEC D2")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(16,"TEC D3")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(17,"TEC D4")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(18,"TEC D5")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(19,"TEC D6")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(20,"TEC D7")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(21,"TEC D8")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(22,"TEC D9")
+#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(23,"TEC D10")
+#                      ratioOfhighIhPartOlowIh.GetYaxis().SetTitleOffset(1.5)
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(1,"TIB L1")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(2,"TIB L2")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(3,"TIB L3")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(4,"TIB L4")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(5,"TOB L1")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(6,"TOB L2")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(7,"TOB L3")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(8,"TOB L4")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(9,"TOB L5")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(10,"TOB L6")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(11,"TID D1")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(12,"TID D2")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(13,"TID D3")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(14,"TEC D1")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(15,"TEC D2")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(16,"TEC D3")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(17,"TEC D4")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(18,"TEC D5")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(19,"TEC D6")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(20,"TEC D7")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(21,"TEC D8")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(22,"TEC D9")
+#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(23,"TEC D10")
+#                      obj.Project3D("YZ").GetYaxis().SetTitleOffset(0.8)
+#                      obj.Project3D("YZ").GetYaxis().SetTitle("I_{h} (MeV/cm)")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(1,"TIB L1")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(2,"TIB L2")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(3,"TIB L3")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(4,"TIB L4")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(5,"TOB L1")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(6,"TOB L2")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(7,"TOB L3")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(8,"TOB L4")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(9,"TOB L5")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(10,"TOB L6")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(11,"TID D1")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(12,"TID D2")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(13,"TID D3")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(14,"TEC D1")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(15,"TEC D2")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(16,"TEC D3")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(17,"TEC D4")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(18,"TEC D5")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(19,"TEC D6")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(20,"TEC D7")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(21,"TEC D8")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(22,"TEC D9")
+#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(23,"TEC D10")
+#                      obj.Project3D("XZ").GetYaxis().SetTitle("G_{i}^{Strips}")
+#                      obj.Project3D("XZ").GetYaxis().SetTitleOffset(0.8)
+##                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(1.0))
+#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_RatioOfLowIasHighIas.png")
+#                  obj.Project3D("YZ").SetStats(0)
+#                  obj.Project3D("YZ").Draw("COLZ")
+#                  obj.Project3D("YZ").SetTitle("")
+#                  tex4.Draw("SAME")
+#                  tex5.Draw("SAME")
+#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_allIas.png")
+#                  obj.Project3D("XZ").SetStats(0)
+#                  obj.Project3D("XZ").Draw("COLZ")
+#                  obj.Project3D("XZ").SetTitle("")
+#                  tex4.Draw("SAME")
+#                  tex5.Draw("SAME")
+#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_allIh.png")
+#
+#                  obj.Project3D("YZ").GetYaxis().UnZoom()
+#                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.7),obj.GetXaxis().FindBin(1.0))
+#                  obj.Project3D("YZ").Draw("COLZ")
+#                  tex4.Draw("SAME")
+#                  tex5.Draw("SAME")
+#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
+#
+#                  obj.GetXaxis().UnZoom()
+#                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(0.7))
+#                  projObj = obj.Project3D("YZ")
+#                  if (projObj.GetEntries()==0) : continue
+#                  projObj.Draw("COLZ")
+#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
+#                  if ("PostPreS_IasPixelIhVsLayer" in keyname2):
+#                    for i in range(7) :
+#                      obj.Project3D("YZ").ProjectionY(newname,i,i+1,"e").Draw()
+#                      can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PixLayer"+str(i)+".png")
+#                  elif ("PostPreS_IasStripIhVsLayer" in keyname2):
+#                    for i in range(23) :
+#                      obj.Project3D("YZ").ProjectionY(newname,i,i+1,"e").Draw()
+#                      can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_StripLayer"+str(i)+".png")
+#                else :
+#                  obj.SetMarkerStyle(20)
+#                  obj.GetXaxis().SetRange(bin,bin)
+#                  obj.Project3D("ZY").Draw("COLZ")
+              if ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "GenPtVsRecoPt" or "PreS_" in keyname2 or "CutFlow" in keyname2 or "N1_" in keyname2 or "_p_" in keyname2 or "_pterr" in keyname2 )):
+                obj.SetTitle("")
+                obj.SetMarkerStyle(20)
+                projOb = obj.ProjectionY(newname,bin,bin,"e")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                projOb.Draw("COLZ L")
+                can.SaveAs(name)
+
+              elif ("Layer_CR_veryLowPt" in keyname2) :
+                for x in range(1,obj.GetNbinsY()) :
+                  CluDeDxForLayerX =  obj.ProjectionX(newname+"_Layer"+str(x),x,x,"e")
+                  CluDeDxForLayerX.GetYaxis().SetTitle("Clusters")
+                  CluDeDxForLayerX.Draw()
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_Layer"+str(x)+".png")
+                  #.Rebin(3)
+              if (isData and (obj.ClassName() == "TH2F") and ("RunNumVsPixCluChargeAfter" in keyname2)) :
+                x_values = []
+                y_values = []
+                for i in range(obj.GetNbinsX()+1) :
+#                  if not (i==302): continue
+
+                  chargeForRunI = obj.ProjectionY(newname+"_RunBin"+str(i),i,i,"e").Rebin(3)
+                  if (chargeForRunI.Integral() > 10 and chargeForRunI.GetMean() > 10) :
+                    
+                    vf = Vavilov_Func()
+                    fitForI = ROOT.TF1("fitForI"+str(i), vf, 0, 300, 5)
+#                    fitForI = ROOT.TF1("fitForI", GaussWithLandau, 30, 300, 4)
+#                    fitForI.SetParameters(100,20,20,100000) #,chargeForRunI.GetRMS(),chargeForRunI.GetRMS(),chargeForRunI.GetMaximum())
+                    fitForI.SetParameters(
+                        0.001*chargeForRunI.GetMean(),   # p[0]: kappa [0.01:10]
+                        1.0,                                # p[1]: beta^2
+                        0.9*chargeForRunI.GetMean(),      # p[2]: mpv
+                        0.4*chargeForRunI.GetRMS(),       # p[3]: sigmaQ
+                        0.5*chargeForRunI.GetEntries()    # p[4]: norm
+                    )
+                    fitForI.SetParLimits(0, 0.01, 10.0)
+                    fitForI.SetParLimits(1, 0.9, 1)
+                    fitForI.SetParLimits(2, 75, 100.);
+                    fitForI.SetParLimits(3, 0, 10000.)
+#                    fitForI.SetParLimits(4, 0.0, 100000.0)
+#                    chargeForRunI.Fit("landau")
+  
+                    chargeForRunI.Fit(fitForI,"Q")
+                    chargeForRunI.Draw()
+                    fitForI.Draw("SAME")
+                    fitForI.SetLineColor(ROOT.kRed)
+                    fitForI.SetLineWidth(2)
+                    if (fitForI.GetChisquare() / fitForI.GetNDF() < 100 ) :
+                      x_values.append(obj.GetXaxis().GetBinCenter(i))
+                      y_values.append(fitForI.GetParameter(2))
+                    can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_RunNumber"+str(i)+".png")
+                
+                g_mpv = ROOT.TGraph(len(x_values), array.array('d', x_values), array.array('d', y_values))
+                g_mpv.Draw("AP")
+                g_mpv.SetMarkerStyle(20)
+                g_mpv.SetMarkerColor(4)
+                g_mpv.SetTitle("")
+                g_mpv.SetMinimum(0.)
+                g_mpv.GetYaxis().SetRangeUser(0.,200.)
+                g_mpv.GetXaxis().SetTitleOffset(1)
+                g_mpv.GetXaxis().SetTitle("Run number")
+                g_mpv.GetXaxis().SetLabelSize(0.035)
+                g_mpv.GetYaxis().SetTitle("MPV of norm cluster charge (e/um)")
+                g_mpv.GetYaxis().SetTitleOffset(1.5)
+                
+                nPoints = g_mpv.GetN()
+                yVals = g_mpv.GetY()
+                mean = np.mean(yVals)
+                variance = 0
+
+                for i in range(nPoints):
+                    diff = yVals[i] - mean
+                    variance += diff * diff
+
+                variance /= nPoints
+                stdDev = ROOT.TMath.Sqrt(variance)
+                stdDevOMean = round(stdDev / mean, 4)
+                print("Standard deviation of y-axis values: ", stdDevOMean)
+                
+                yearSepLine = ROOT.TLine();
+                yearSepLine.SetLineWidth(2);
+                yearSepLine.SetLineStyle(ROOT.kDashed);
+                yearSepLine.DrawLine(296500,g_mpv.GetMinimum(),296500,200)
+                yearSepLine.DrawLine(307000,g_mpv.GetMinimum(),307000,200)
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex5.Draw("SAME")
+                tex2017 = ROOT.TLatex(0.225,0.8,"2017");
+                tex2017.SetNDC();
+                tex2017.SetTextFont(52)
+                tex2017.SetTextSize(0.0485)
+                tex2017.SetLineWidth(2)
+                tex2017.Draw("SAME")
+                yearSepLine.DrawLine(314500,g_mpv.GetMinimum(),314500,200)
+                yearSepLine.DrawLine(325500,g_mpv.GetMinimum(),325500,200)
+                tex2018 = ROOT.TLatex(0.65,0.8,"2018");
+                tex2018.SetNDC();
+                tex2018.SetTextFont(52)
+                tex2018.SetTextSize(0.0485)
+                tex2018.SetLineWidth(2)
+                tex2018.Draw("SAME")
+                meanLine = ROOT.TLine();
+                meanLine.SetLineWidth(2);
+                meanLine.SetLineColor(ROOT.kGreen)
+#                meanLine.SetLineStyle(ROOT.kDashed);
+                meanLine.DrawLine(295000,mean,327000,mean)
+                texStdOverMean = ROOT.TLatex(0.5,0.94,"L"+str(keyname2[keyname2.find("SFsL")+4:keyname2.find("SFsL")+5]) + ": std / mean = " + str(round(100*stdDevOMean,2)) + "%");
+                texStdOverMean.SetNDC();
+                texStdOverMean.SetTextFont(52)
+                texStdOverMean.SetTextSize(0.0485)
+                texStdOverMean.SetLineWidth(2)
+                texStdOverMean.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_MPVtrend.png")
+                
+                obj.GetXaxis().SetRangeUser(298000,324000)
+                obj.ProfileX().Draw()
+                obj.ProfileX().GetYaxis().SetRangeUser(0,200)
+                obj.ProfileX().GetYaxis().SetTitle("Avg norm clu charge")
+                obj.ProfileX().GetYaxis().SetTitleOffset(1.5)
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileX.png")
+                
+              if (isData and (obj.ClassName() == "TH2F") and ("Stab_CluDeDx" in keyname2)) :
+                # ---------------------------- now the avg trend ------------------------------------
+                obj.GetXaxis().SetRangeUser(298000,324000)
+                obj.ProfileX().Draw()
+                obj.ProfileX().SetStats(0)
+                obj.ProfileX().GetYaxis().SetRangeUser(0,10)
+                obj.ProfileX().GetYaxis().SetTitle("Avg dE/dx [MeV/cm]")
+                obj.ProfileX().GetYaxis().SetTitleOffset(1.5)
+                yearSepLine = ROOT.TLine();
+                yearSepLine.SetLineWidth(2);
+                yearSepLine.SetLineStyle(ROOT.kDashed);
+                yearSepLine.DrawLine(307000,obj.ProfileX().GetMinimum(),307000,10)
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex5.Draw("SAME")
+                tex2017 = ROOT.TLatex(0.225,0.8,"2017");
+                tex2017.SetNDC();
+                tex2017.SetTextFont(52)
+                tex2017.SetTextSize(0.0485)
+                tex2017.SetLineWidth(2)
+                tex2017.Draw("SAME")
+                yearSepLine.DrawLine(314500,obj.ProfileX().GetMinimum(),314500,10)
+                tex2018 = ROOT.TLatex(0.65,0.8,"2018");
+                tex2018.SetNDC();
+                tex2018.SetTextFont(52)
+                tex2018.SetTextSize(0.0485)
+                tex2018.SetLineWidth(2)
+                tex2018.Draw("SAME")
+                meanLine = ROOT.TLine();
+                meanLine.SetLineWidth(2);
+                meanLine.SetLineColor(ROOT.kGreen)
+                meanLine.DrawLine(298000,obj.GetMean(2),324000,obj.GetMean(2))
+                axisYTitle = obj.GetYaxis().GetTitle()
+                legendText = str(axisYTitle[0:axisYTitle.find(" Cluster")])
+                if (keyname2 == "Stab_CluDeDxStripsLayer10_VsRun_CR_veryLowPt") : legendText = "TOB6"
+                texStdOverMean = ROOT.TLatex(0.5,0.94,legendText + ": Mean = " + str(round(obj.GetMean(2),2)))
+                texStdOverMean.SetNDC();
+                texStdOverMean.SetTextFont(52)
+                texStdOverMean.SetTextSize(0.0485)
+                texStdOverMean.SetLineWidth(2)
+                texStdOverMean.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileX.png")
+                
+              if (isData and (obj.ClassName() == "TH2F") and ("Stab_" in keyname2 and not "Clu" in keyname2)) :
+                # ---------------------------- now the avg trend ------------------------------------
+                axisYTitle = obj.GetYaxis().GetTitle()
+                obj.GetXaxis().SetRangeUser(298000,324000)
+                obj.ProfileX().Draw()
+                obj.ProfileX().SetStats(0)
+                maxi = 10 if "Ih" in keyname2 else 1.0
+                if "Gi" in keyname2  : maxi = 0.1
+                obj.ProfileX().GetYaxis().SetRangeUser(0,maxi)
+                
+                obj.ProfileX().GetYaxis().SetTitle("Avg " + axisYTitle)
+                obj.ProfileX().GetYaxis().SetTitleOffset(1.5)
+                yearSepLine = ROOT.TLine();
+                yearSepLine.SetLineWidth(2);
+                yearSepLine.SetLineStyle(ROOT.kDashed);
+                yearSepLine.DrawLine(307000,obj.ProfileX().GetMinimum(),307000,obj.ProfileX().GetMaximum())
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex5.Draw("SAME")
+                tex2017 = ROOT.TLatex(0.225,0.8,"2017");
+                tex2017.SetNDC();
+                tex2017.SetTextFont(52)
+                tex2017.SetTextSize(0.0485)
+                tex2017.SetLineWidth(2)
+                tex2017.Draw("SAME")
+                yearSepLine.DrawLine(314500,obj.ProfileX().GetMinimum(),314500,obj.ProfileX().GetMaximum())
+                tex2018 = ROOT.TLatex(0.65,0.8,"2018");
+                tex2018.SetNDC();
+                tex2018.SetTextFont(52)
+                tex2018.SetTextSize(0.0485)
+                tex2018.SetLineWidth(2)
+                tex2018.Draw("SAME")
+                meanLine = ROOT.TLine();
+                meanLine.SetLineWidth(2);
+                meanLine.SetLineColor(ROOT.kGreen)
+                meanLine.DrawLine(298000,obj.GetMean(2),324000,obj.GetMean(2))
+                
+                legendText = str(axisYTitle)
+                texStdOverMean = ROOT.TLatex(0.5,0.94,legendText + ": Mean = " + str(round(obj.GetMean(2),2)))
+                texStdOverMean.SetNDC();
+                texStdOverMean.SetTextFont(52)
+                texStdOverMean.SetTextSize(0.0485)
+                texStdOverMean.SetLineWidth(2)
+                texStdOverMean.Draw("SAME")
+                tex2.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_avgX.png")
+                  
+                  
+              if ((obj.ClassName() == "TH2F") and "VsPixelLayer" in keyname2) :
+                for i in range(4) :
+                  obj.SetTitle("")
+                  obj.SetMarkerStyle(20)
+                  obj.SetStats(0)
+                  obj.ProjectionX(newname+"_PixLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").Draw()
+                  obj.ProjectionX(newname+"_PixLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").SetStats(0)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PixLayer"+str(i+1)+".png")
+              if ((obj.ClassName() == "TH2F") and "VsStripLayer" in keyname2) :
+                obj.GetYaxis().SetBinLabel(1,"TIB L1")
+                obj.GetYaxis().SetBinLabel(2,"TIB L2")
+                obj.GetYaxis().SetBinLabel(3,"TIB L3")
+                obj.GetYaxis().SetBinLabel(4,"TIB L4")
+                obj.GetYaxis().SetBinLabel(5,"TOB L1")
+                obj.GetYaxis().SetBinLabel(6,"TOB L2")
+                obj.GetYaxis().SetBinLabel(7,"TOB L3")
+                obj.GetYaxis().SetBinLabel(8,"TOB L4")
+                obj.GetYaxis().SetBinLabel(9,"TOB L5")
+                obj.GetYaxis().SetBinLabel(10,"TOB L6")
+                obj.GetYaxis().SetBinLabel(11,"TID D1")
+                obj.GetYaxis().SetBinLabel(12,"TID D2")
+                obj.GetYaxis().SetBinLabel(13,"TID D3")
+                obj.GetYaxis().SetBinLabel(14,"TEC D1")
+                obj.GetYaxis().SetBinLabel(15,"TEC D2")
+                obj.GetYaxis().SetBinLabel(16,"TEC D3")
+                obj.GetYaxis().SetBinLabel(17,"TEC D4")
+                obj.GetYaxis().SetBinLabel(18,"TEC D5")
+                obj.GetYaxis().SetBinLabel(19,"TEC D6")
+                obj.GetYaxis().SetBinLabel(20,"TEC D7")
+                obj.GetYaxis().SetBinLabel(21,"TEC D8")
+                obj.GetYaxis().SetBinLabel(22,"TEC D9")
+                obj.GetYaxis().SetBinLabel(23,"TEC D10")
+                for i in range(20) :
+                  obj.SetTitle("")
+                  obj.SetMarkerStyle(20)
+                  obj.SetStats(0)
+                  obj.ProjectionX(newname+"_StripLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").Draw()
+                  obj.ProjectionX(newname+"_StripLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").SetStats(0)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_StripLayer"+str(i+1)+".png")
+              if ((obj.ClassName() == "TH2F") and ("Clu" in keyname2)) :
+                profYobj = obj.ProfileY()
+#                profYobj.GetYaxis().SetTitle(axisXTitle)
+                profYobj.GetYaxis().SetTitleOffset(1.5)
+                profYobj.GetYaxis().SetLabelSize(0.03)
+                profYobj.SetStats(0)
+                if ("CluNormChargeVsStripLayer" in keyname2) :
+                  profYobj.GetXaxis().SetBinLabel(1,"TIB L1")
+                  profYobj.GetXaxis().SetBinLabel(2,"TIB L2")
+                  profYobj.GetXaxis().SetBinLabel(3,"TIB L3")
+                  profYobj.GetXaxis().SetBinLabel(4,"TIB L4")
+                  profYobj.GetXaxis().SetBinLabel(5,"TOB L1")
+                  profYobj.GetXaxis().SetBinLabel(6,"TOB L2")
+                  profYobj.GetXaxis().SetBinLabel(7,"TOB L3")
+                  profYobj.GetXaxis().SetBinLabel(8,"TOB L4")
+                  profYobj.GetXaxis().SetBinLabel(9,"TOB L5")
+                  profYobj.GetXaxis().SetBinLabel(10,"TOB L6")
+                  profYobj.GetXaxis().SetBinLabel(11,"TID D1")
+                  profYobj.GetXaxis().SetBinLabel(12,"TID D2")
+                  profYobj.GetXaxis().SetBinLabel(13,"TID D3")
+                  profYobj.GetXaxis().SetBinLabel(14,"TEC D1")
+                  profYobj.GetXaxis().SetBinLabel(15,"TEC D2")
+                  profYobj.GetXaxis().SetBinLabel(16,"TEC D3")
+                  profYobj.GetXaxis().SetBinLabel(17,"TEC D4")
+                  profYobj.GetXaxis().SetBinLabel(18,"TEC D5")
+                  profYobj.GetXaxis().SetBinLabel(19,"TEC D6")
+                  profYobj.GetXaxis().SetBinLabel(20,"TEC D7")
+                  profYobj.GetXaxis().SetBinLabel(21,"TEC D8")
+                  profYobj.GetXaxis().SetBinLabel(22,"TEC D9")
+                  profYobj.GetXaxis().SetBinLabel(23,"TEC D10")
+                profYobj.DrawClone("COLZ")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileY.png")
+                
+                if ("CluSpecInCPE" in keyname2) :
+                  obj.SetStats(0)
+                  obj.GetXaxis().SetTitle("")
+                  obj.GetXaxis().SetBinLabel(1,"isOnEdge")
+                  obj.GetXaxis().SetBinLabel(2,"hasBadPixels")
+                  obj.GetXaxis().SetBinLabel(3,"spansTwoROCs")
+                  obj.GetXaxis().SetBinLabel(4,"AllClusters")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  obj.Draw("COLZ L")
+#                  obj.GetXaxis().SetTitle(axisXTitle)
+                obj.DrawClone("COLZ L")
+#                obj.GetYaxis().SetTitle(axisYTitle)
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(name)
+              elif ("GenPtVsRecoPt" in keyname2) :
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.Draw("COLZ")
+                print(str(keyname2) + ": " + str(round(obj.GetCorrelationFactor(),2)))
+              elif ("Stab" in keyname2) :
+                profXobj = ROOT.TH1F(keyname2+"profX" , keyname2+"profX" , 545, 271000,325500)
+                profXobj = obj.ProfileX()
+#                profYobj.GetYaxis().SetTitle(axisXTitle)
+#                profYobj.GetYaxis().SetTitleOffset(1.5)
+#                profYobj.GetYaxis().SetLabelSize(0.03)
+                profXobj.SetStats(0)
+                profXobj.DrawClone("COLZ")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileX.png")
+              elif ("IasVs" in keyname2 and not obj.ClassName() == "TH3F") :
+                obj.SetMarkerStyle(20)
+                if ("Angle" in keyname2 or "NumSibling" in keyname2) :
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  obj.ProjectionY(newname,obj.GetXaxis().FindBin(0.7),obj.GetNbinsX()+1,"e").Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
+                  projObjs = obj.ProjectionY(newname,1,obj.GetXaxis().FindBin(0.7),"e")
+                  if (projObjs.GetEntries()==0) : continue
+                  projObjs.Draw("COLZ")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
+                  obj.ProjectionY(newname,1,obj.GetNbinsX()+1,"e").Draw("COLZ")
+                else :
+                  projObject = obj.ProjectionY(newname+"_lowIas",1,obj.GetXaxis().FindBin(0.7),"e")
+                  if (projObject.GetEntries()==0) : continue
+                  myPie = ROOT.TPie(projObject)
+                  myPie.SetLabelFormat("%txt (%perc)")
+                  myPie.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
+                  
+                  objProj = obj.ProjectionY(newname+"_highIas",obj.GetXaxis().FindBin(0.7),obj.GetNbinsX()+1,"e")
+                  if (objProj.GetEntries()==0) : continue
+                  myPie2 = ROOT.TPie(objProj)
+                  myPie2.SetLabelFormat("%txt (%perc)")
+                  myPie2.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie2.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
+                  
+                  myPie3 = ROOT.TPie(obj.ProjectionY(newname,1,obj.GetNbinsX()+1,"e"))
+                  myPie3.SetLabelFormat("%txt (%perc)")
+                  myPie3.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie3.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png")
+              elif ("Trigger" in keyname2 and obj.ClassName() == "TH3F") :
+                profZobj = obj.Project3DProfile("zy")
+                profZobj.SetStats(0)
+                profZobj.GetZaxis().SetTitle("Efficiency")
+                profZobj.SetTitle("")
+                profZobj.GetXaxis().SetTitle("MET (GeV)")
+                profZobj.GetYaxis().SetTitle("H_{T} (GeV)")
+                profZobj.GetYaxis().SetTitleOffset(1.7)
+                profZobj.Rebin2D(2)
+                profZobj.DrawClone("COLZ")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileZ.png")
+              elif ("EoPVs" in keyname2) :
+                obj.SetMarkerStyle(20)
+                if ("Angle" in keyname2) :
+                  obj.ProjectionY(newname+"_lowEoP",1,obj.GetXaxis().FindBin(0.85),"e").Draw("COLZ")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowEoP.png")
+#                  obj.ProjectionY(newname+"_highEoP",obj.GetXaxis().FindBin(0.85),obj.GetNbinsX()+1,"e").Draw("COLZ")
+#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highEoP.png")
+                elif ("EoPVsPfType" in keyname2) :
+                  obj.SetMarkerColor(1)
+                  obj.SetLineColor(1)
+                  obj.SetMarkerStyle(20)
+                  obj.SetStats(0)
+#                  obj.Scale(1/obj.GetMaximum())
+                  obj.GetYaxis().SetBinLabel(1,"AllTracks")
+                  obj.GetYaxis().SetBinLabel(2,"PFtracks")
+                  obj.GetYaxis().SetBinLabel(3,"isElectron")
+                  obj.GetYaxis().SetBinLabel(4,"isMuon")
+                  obj.GetYaxis().SetBinLabel(5,"isPhoton")
+                  obj.GetYaxis().SetBinLabel(6,"isChHadron")
+                  obj.GetYaxis().SetBinLabel(7,"isNeutHadron")
+                  obj.GetYaxis().SetBinLabel(8,"isUndefined")
+                  obj.GetYaxis().SetBinLabel(9,"notPFtrack")
+                  obj.GetXaxis().SetTitle("EoP")
+                  obj.Draw("COLZ")
+                else :
+                  projObj = obj.ProjectionY(newname+"_lowEoP",1,obj.GetXaxis().FindBin(0.85),"e")
+                  if (projObj.GetEntries() == 0) : continue
+                  myPie = ROOT.TPie(projObj)
+                  myPie.SetLabelFormat("%txt (%perc)")
+                  myPie.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowEoP.png")
+                  
+                  projObj2 = obj.ProjectionY(newname+"_highEoP",obj.GetXaxis().FindBin(0.85),obj.GetNbinsX()+1,"e")
+                  if (projObj2.GetEntries() == 0) : continue
+                  myPie2 = ROOT.TPie(projObj2)
+                  myPie2.SetLabelFormat("%txt (%perc)")
+                  myPie2.SetLabelsOffset(-.27)
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  myPie2.Draw("R<")
+                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highEoP.png")
+              elif (obj.ClassName() == "TH2F" and  (("ProbQVsIas" in keyname2) or ( "ProbQNoL1VsIas" in keyname2))) :
+#                obj.GetXaxis().SetTitle(axisXTitle)
+#                obj.GetYaxis().SetTitle(axisYTitle)
+                obj.GetYaxis().SetTitleOffset(1.3)
+                obj.GetYaxis().SetLabelSize(0.03)
+                obj.GetYaxis().SetTitle("G_{i}^{Strips}")
+                obj.GetXaxis().SetTitle("F_{i}^{Pixels}")
+                obj.SetStats(0)
+                obj.DrawClone("COLZ")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                print(str(keyname2) + ": " + str(round(obj.GetCorrelationFactor(),5)))
+                can.SaveAs(name)
+                if ("ProbQNoL1VsIas" in keyname2) :
+                  can2 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
+                  can2.SetLogy()
+                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
+                  projY1 = obj.ProjectionY("IasForProbQSlice_Slice1",obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0),"e")
+                  projY1.SetStats(0)
+                  projY1.SetMarkerColor(1)
+                  projY1.SetLineColor(1)
+                  projY1.SetMarkerStyle(20)
+                  projY1.Draw("SAME")
+                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
+                  projY1.GetYaxis().SetTitleOffset(1.5)
+                  
+                  projY2 = obj.ProjectionY("IasForProbQSlice_Slice2",obj.GetXaxis().FindBin(0.3),obj.GetXaxis().FindBin(0.9),"e")
+                  projY2.SetMarkerStyle(20)
+                  projY2.SetMarkerColor(2)
+                  projY2.SetLineColor(2)
+                  projY2.Draw("SAME")
+                  
+                  numTracks1 = projY1.Integral()
+                  numTracks2 = projY2.Integral()
+                  
+                  if (numTracks1>0) : projY1.Scale(1/projY1.Integral())
+                  if (numTracks2>0) : projY2.Scale(1/projY2.Integral())
+                  
+                  if (blind and not "CR" in keyname2 and isData) :
+                    for binIndex in range(16,50) :
+                      projY1.SetBinContent(binIndex,0)
+                  projY1.SetMaximum(projY1.GetMaximum()*100)
+                  
+                  rp2 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
+
+                  rp2.SetH1DrawOpt("P");
+                  rp2.SetH2DrawOpt("P");
+
+                  rp2.Draw()
+                  
+                  rp2.SetLeftMargin(0.13);
+                  rp2.SetRightMargin(0.05);
+                  rp2.SetUpTopMargin(0.1);
+                  rp2.SetLowTopMargin(0.02);
+                  rp2.SetLowBottomMargin(0.35);
+
+
+                  rp2.GetLowerRefGraph().SetMinimum(0)
+                  rp2.GetLowerRefGraph().SetMaximum(3.5);
+                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+                  #rp.GetLowerRefGraph().SetLineColor(0) #0
+                  rp2.GetLowerRefGraph().SetMarkerStyle(20)
+                  rp2.GetLowerRefGraph().SetMarkerSize(1);
+                  rp2.GetLowYaxis().SetNdivisions(505);
+                  rp2.GetLowerRefYaxis().SetTitle("Ratio");
+                  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
+                  rp2.GetLowerRefYaxis().SetTitleOffset(1);
+                  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+                  rp2.GetLowerRefXaxis().SetTitleSize(0.05)
+                  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
+                  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
+                  legIasForProbQSlice.SetTextFont(42)
+                  legIasForProbQSlice.SetTextSize(0.035)
+                  legIasForProbQSlice.SetBorderSize(1);
+                  legIasForProbQSlice.SetLineColor(0);
+                  legIasForProbQSlice.SetLineStyle(1);
+                  legIasForProbQSlice.SetLineWidth(1);
+                  legIasForProbQSlice.SetFillColor(0);
+                  legIasForProbQSlice.SetFillStyle(1001);
+                  legIasForProbQSlice.AddEntry(projY1,"F_{i}^{Pixels} (0.9-1.0), #Tracks: " +str(round(numTracks1)),"LP")
+                  legIasForProbQSlice.AddEntry(projY2,"F_{i}^{Pixels}  (0.3-0.9), #Tracks: " +str(round(numTracks2)),"LP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legIasForProbQSlice.Draw("SAME")
+                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_Norm_ProbQSlice.png")
+                  
+                  can3 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
+                  can3.SetLogy()
+                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
+                  projY1 = obj.ProjectionX("IasForProbQSlice_Slice1",1,obj.GetYaxis().FindBin(0.1),"e")
+                  projY1.SetStats(0)
+                  projY1.SetMarkerColor(1)
+                  projY1.SetLineColor(1)
+                  projY1.SetMarkerStyle(20)
+                  projY1.Draw("SAME")
+                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
+                  projY1.GetYaxis().SetTitleOffset(1.5)
+
+                  projY2 = obj.ProjectionX("IasForProbQSlice_Slice2",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),"e")
+                  projY2.SetMarkerStyle(20)
+                  projY2.SetMarkerColor(2)
+                  projY2.SetLineColor(2)
+                  projY2.Draw("SAME")
+                  
+                  numTracks3 = projY1.Integral()
+                  numTracks4 = projY2.Integral()
+                  if (numTracks3>0) : projY1.Scale(1/projY1.Integral())
+                  if (numTracks4>0) : projY2.Scale(1/projY2.Integral())
+                
+                  if (blind and not "CR" in keyname2 and isData) :
+                    projY1.SetBinContent(19,0)
+                    projY1.SetBinContent(20,0)
+                  
+                  projY1.SetMaximum(projY1.GetMaximum()*100)
+                  
+                  rp3 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
+
+                  rp3.SetH1DrawOpt("P");
+                  rp3.SetH2DrawOpt("P");
+
+                  rp3.Draw()
+                  
+                  rp3.SetLeftMargin(0.13);
+                  rp3.SetRightMargin(0.05);
+                  rp3.SetUpTopMargin(0.1);
+                  rp3.SetLowTopMargin(0.02);
+                  rp3.SetLowBottomMargin(0.35);
+
+
+                  rp3.GetLowerRefGraph().SetMinimum(0)
+                  rp3.GetLowerRefGraph().SetMaximum(3.5)
+                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+                  #rp.GetLowerRefGraph().SetLineColor(0) #0
+                  rp3.GetLowerRefGraph().SetMarkerStyle(20)
+                  rp3.GetLowerRefGraph().SetMarkerSize(1);
+                  rp3.GetLowYaxis().SetNdivisions(505);
+                  rp3.GetLowerRefYaxis().SetTitle("Ratio");
+                  rp3.GetLowerRefYaxis().SetTitleSize(0.05);
+                  rp3.GetLowerRefYaxis().SetTitleOffset(1);
+                  rp3.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+                  rp3.GetLowerRefXaxis().SetTitleSize(0.05);
+                  rp3.GetLowerRefXaxis().SetTitleOffset(0.8);
+                  rp3.GetLowerRefXaxis().SetLabelSize(0.035);
+                  legIasForProbQSlice.SetTextFont(42)
+                  legIasForProbQSlice.SetTextSize(0.035)
+                  legIasForProbQSlice.SetBorderSize(1);
+                  legIasForProbQSlice.SetLineColor(0);
+                  legIasForProbQSlice.SetLineStyle(1);
+                  legIasForProbQSlice.SetLineWidth(1);
+                  legIasForProbQSlice.SetFillColor(0);
+                  legIasForProbQSlice.SetFillStyle(1001);
+                  legIasForProbQSlice.AddEntry(projY1,"G_{i}^{Strips} (0.0-0.1), #Tracks: "+str(round(numTracks3)),"LP")
+                  legIasForProbQSlice.AddEntry(projY2,"G_{i}^{Strips} (0.1-1.0), #Tracks: "+str(round(numTracks4)),"LP")
+                  tex2.Draw("SAME")
+                  tex3.Draw("SAME")
+                  tex4.Draw("SAME")
+                  tex5.Draw("SAME")
+                  legIasForProbQSlice.Draw("SAME")
+                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_Norm_IasSlice.png")
+
+#                if ("ProbQNoL1VsIas" in keyname2) :
+#                  can2 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
+#                  can2.SetLogy()
+#                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
+#                  projY1 = obj.ProjectionY("IasForProbQSlice_Slice1",obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0),"e")
+#                  projY1.SetStats(0)
+#                  projY1.SetMarkerColor(1)
+#                  projY1.SetLineColor(1)
+#                  projY1.SetMarkerStyle(20)
+#                  projY1.Draw("SAME")
+#                  projY1.GetYaxis().SetTitle("Tracks / 0.05")
+#                  projY1.GetYaxis().SetTitleOffset(1.5)
+#
+#                  projY2 = obj.ProjectionY("IasForProbQSlice_Slice2",obj.GetXaxis().FindBin(0.3),obj.GetXaxis().FindBin(0.9),"e")
+#                  projY2.SetMarkerStyle(20)
+#                  projY2.SetMarkerColor(2)
+#                  projY2.SetLineColor(2)
+#                  projY2.Draw("SAME")
+#
+#                  numTracks1 = projY1.Integral()
+#                  numTracks2 = projY2.Integral()
+#
+#                  if (blind and not "CR" in keyname2 and isData) :
+#                    for binIndex in range(1,50) :
+#                      projY1.SetBinContent(binIndex,0)
+#                  projY1.SetMaximum(projY2.GetMaximum()*100)
+#                  projY1.SetMinimum(0.1)
+#
+#                  rp2 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
+#
+#                  rp2.SetH1DrawOpt("P");
+#                  rp2.SetH2DrawOpt("P");
+#
+#                  rp2.Draw()
+#
+#                  rp2.SetLeftMargin(0.13);
+#                  rp2.SetRightMargin(0.05);
+#                  rp2.SetUpTopMargin(0.1);
+#                  rp2.SetLowTopMargin(0.02);
+#                  rp2.SetLowBottomMargin(0.35);
+#
+#
+#                  rp2.GetLowerRefGraph().SetMinimum(0)
+#                  rp2.GetLowerRefGraph().SetMaximum(3.5);
+#                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+#                  #rp.GetLowerRefGraph().SetLineColor(0) #0
+#                  rp2.GetLowerRefGraph().SetMarkerStyle(20)
+#                  rp2.GetLowerRefGraph().SetMarkerSize(1);
+#                  rp2.GetLowYaxis().SetNdivisions(505);
+#                  rp2.GetLowerRefYaxis().SetTitle("Ratio");
+#                  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
+#                  rp2.GetLowerRefYaxis().SetTitleOffset(1);
+#                  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
+#
+#
+#                  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
+#                  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
+#                  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
+#                  legIasForProbQSlice.SetTextFont(42)
+#                  legIasForProbQSlice.SetTextSize(0.035)
+#                  legIasForProbQSlice.SetBorderSize(1);
+#                  legIasForProbQSlice.SetLineColor(0);
+#                  legIasForProbQSlice.SetLineStyle(1);
+#                  legIasForProbQSlice.SetLineWidth(1);
+#                  legIasForProbQSlice.SetFillColor(0);
+#                  legIasForProbQSlice.SetFillStyle(1001);
+#                  legIasForProbQSlice.AddEntry(projY1,"F_{i}^{Pixels} (0.9-1.0), #Tracks: " +str(round(numTracks1)),"LP")
+#                  legIasForProbQSlice.AddEntry(projY2,"F_{i}^{Pixels}  (0.3-0.9), #Tracks: " +str(round(numTracks2)),"LP")
+#                  tex2.Draw("SAME")
+#                  tex3.Draw("SAME")
+#                  tex4.Draw("SAME")
+#                  tex5.Draw("SAME")
+#                  legIasForProbQSlice.Draw("SAME")
+#                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_NotNorm_ProbQSlice.png")
+#
+#                  can3 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
+#                  can3.SetLogy()
+#                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
+#                  projY1 = obj.ProjectionX("IasForProbQSlice_Slice1",1,obj.GetYaxis().FindBin(0.1),"e")
+#                  projY1.SetStats(0)
+#                  projY1.SetMarkerColor(1)
+#                  projY1.SetLineColor(1)
+#                  projY1.SetMarkerStyle(20)
+#                  projY1.Draw("SAME")
+#                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
+#                  projY1.GetYaxis().SetTitleOffset(1.5)
+#
+#                  projY2 = obj.ProjectionX("IasForProbQSlice_Slice2",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),"e")
+#                  projY2.SetMarkerStyle(20)
+#                  projY2.SetMarkerColor(2)
+#                  projY2.SetLineColor(2)
+#                  projY2.Draw("SAME")
+#
+#                  numTracks3 = projY1.Integral()
+#                  numTracks4 = projY2.Integral()
+#
+#                  if (blind and not "CR" in keyname2 and isData) :
+#                    projY1.SetBinContent(19,0)
+#                    projY1.SetBinContent(20,0)
+#
+#                  projY1.SetMaximum(projY1.GetMaximum()*100)
+#
+#                  rp3 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
+#
+#                  rp3.SetH1DrawOpt("P");
+#                  rp3.SetH2DrawOpt("P");
+#
+#                  rp3.Draw()
+#
+#                  rp3.SetLeftMargin(0.13);
+#                  rp3.SetRightMargin(0.05);
+#                  rp3.SetUpTopMargin(0.1);
+#                  rp3.SetLowTopMargin(0.02);
+#                  rp3.SetLowBottomMargin(0.35);
+#
+#
+#                  rp3.GetLowerRefGraph().SetMinimum(0)
+#                  rp3.GetLowerRefGraph().SetMaximum(3.5)
+#                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+#                  #rp.GetLowerRefGraph().SetLineColor(0) #0
+#                  rp3.GetLowerRefGraph().SetMarkerStyle(20)
+#                  rp3.GetLowerRefGraph().SetMarkerSize(1);
+#                  rp3.GetLowYaxis().SetNdivisions(505);
+#                  rp3.GetLowerRefYaxis().SetTitle("Ratio");
+#                  rp3.GetLowerRefYaxis().SetTitleSize(0.05);
+#                  rp3.GetLowerRefYaxis().SetTitleOffset(1);
+#                  rp3.GetLowerRefYaxis().SetLabelSize(0.035);
+#
+#
+#                  rp3.GetLowerRefXaxis().SetTitleSize(0.05);
+#                  rp3.GetLowerRefXaxis().SetTitleOffset(0.8);
+#                  rp3.GetLowerRefXaxis().SetLabelSize(0.035);
+#                  legIasForProbQSlice.SetTextFont(42)
+#                  legIasForProbQSlice.SetTextSize(0.035)
+#                  legIasForProbQSlice.SetBorderSize(1);
+#                  legIasForProbQSlice.SetLineColor(0);
+#                  legIasForProbQSlice.SetLineStyle(1);
+#                  legIasForProbQSlice.SetLineWidth(1);
+#                  legIasForProbQSlice.SetFillColor(0);
+#                  legIasForProbQSlice.SetFillStyle(1001);
+#                  legIasForProbQSlice.AddEntry(projY1,"G_{i}^{Strips} (0.0-0.1), #Tracks: "+str(round(numTracks3)),"LP")
+#                  legIasForProbQSlice.AddEntry(projY2,"G_{i}^{Strips} (0.1-1.0), #Tracks: "+str(round(numTracks4)),"LP")
+#                  tex2.Draw("SAME")
+#                  tex3.Draw("SAME")
+#                  tex4.Draw("SAME")
+#                  tex5.Draw("SAME")
+#                  legIasForProbQSlice.Draw("SAME")
+#                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_NotNorm_IasSlice.png")
+              elif (obj.ClassName() == "TH2F" and  (("Trigger" in keyname2) and ( "Vs" in keyname2))) :
+                profYobj = obj.ProfileY()
+                profYobj.SetStats(0)
+                profYobj.GetYaxis().SetTitle("Efficiency")
+                profYobj.DrawClone("COLZ")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileY.png")
+              
+              if ("FracSat" in keyname2) :
+                print("Mean: ",obj.GetMean())
+              if (keyname2== "CutFlow" or keyname2== "EventCutFlow") :
+                if (blind and isData) :
+                  obj.SetBinContent(18,0)
+                  obj.SetBinContent(19,0)
+                  obj.SetBinContent(20,0)
+                obj.SetMarkerColor(1)
+                obj.SetLineColor(1)
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.GetXaxis().SetTitle("")
+                obj.GetXaxis().SetTitle("")
+                ROOT.gStyle.SetPaintTextFormat(".2g");
+                obj.Draw("HISTOTEXT00")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+#                obj.GetYaxis().SetRangeUser(0.,1.3)
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_withNumbersNotNorm.png")
+              if (keyname2== "CutFlow" or keyname2== "EventCutFlow") :
+                if (blind and isData) :
+                  obj.SetBinContent(18,0)
+                  obj.SetBinContent(19,0)
+                  obj.SetBinContent(20,0)
+                obj.SetMarkerColor(1)
+                obj.SetLineColor(1)
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.GetMaximum())
+                obj.GetXaxis().SetTitle("")
+                if (keyname2== "CutFlow") :  obj.GetYaxis().SetTitle("Track efficiency")
+                if (keyname2== "EventCutFlow") : obj.GetYaxis().SetTitle("Event efficiency")
+                obj.GetXaxis().SetTitle("")
+                ROOT.gStyle.SetPaintTextFormat(".2g");
+                obj.Draw("HISTOTEXT00")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.GetYaxis().SetRangeUser(0.,1.3)
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_withNumbers.png")
+              elif (keyname2== "CutFlowReverse") :
+                obj.SetMarkerColor(1)
+                obj.SetLineColor(1)
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.GetMaximum())
+#                obj.GetXaxis().SetBinLabel(1,"Trigger")
+#                obj.GetXaxis().SetBinLabel(2,"pT")
+#                obj.GetXaxis().SetBinLabel(3,"Eta")
+#                obj.GetXaxis().SetBinLabel(4,"NumPixHits")
+#                obj.GetXaxis().SetBinLabel(5,"ValidFract")
+#                obj.GetXaxis().SetBinLabel(6,"NumDeDx")
+#                obj.GetXaxis().SetBinLabel(7,"HighPurity")
+#                obj.GetXaxis().SetBinLabel(8,"Chi2oDOF")
+#                obj.GetXaxis().SetBinLabel(9,"dz")
+#                obj.GetXaxis().SetBinLabel(10,"dxy")
+#                obj.GetXaxis().SetBinLabel(11,"EoP")
+#                obj.GetXaxis().SetBinLabel(12,"")
+#                obj.GetXaxis().SetBinLabel(13,"dRminCaloJet")
+#                obj.GetXaxis().SetBinLabel(14,"MiniIso")
+#                obj.GetXaxis().SetBinLabel(15,"PFid")
+#                obj.GetXaxis().SetBinLabel(16,"Ih")
+#                obj.GetXaxis().SetBinLabel(17,"")
+                obj.GetXaxis().SetTitle("")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.Draw("COLZ L")
+              if (keyname2 == "ErrorHisto") :
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.GetMaximum())
+#                obj.GetXaxis().SetBinLabel(1,"All tracks")
+#                obj.GetXaxis().SetBinLabel(2,"No track/glob muon")
+#                obj.GetXaxis().SetBinLabel(3,"Track is null")
+#                obj.GetXaxis().SetBinLabel(4,"No PV")
+#                obj.GetXaxis().SetBinLabel(5,"No gen match")
+#                obj.GetXaxis().SetBinLabel(6,"Gen match too far")
+#                obj.GetXaxis().SetBinLabel(7,"No dEdx")
+#                obj.GetXaxis().SetBinLabel(8,"Cosmic track")
+#                obj.GetXaxis().SetBinLabel(9,"Has91 status")
+                obj.GetXaxis().SetTitle("")
+                obj.GetYaxis().SetTitle("")
+                obj.SetMaximum(1.4)
+                obj.GetXaxis().SetTitle("")
+                obj.SetTitle("")
+                obj.Draw("COLZ L")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(name)
+              if ("TriggerType" in keyname2) :
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.GetYaxis().SetTitle("Events / category")
+                ROOT.gStyle.SetPaintTextFormat(".2g");
+                obj.Draw("SAMEHISTOTEXT00")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(name)
+              if ("TriggerType" in keyname2) :
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                normFactor = obj.GetBinContent(1) + obj.GetBinContent(4)
+                obj.Scale(1/normFactor)
+                obj.GetYaxis().SetTitle("Norm events / category")
+                ROOT.gStyle.SetPaintTextFormat(".2g");
+                obj.Draw("SAMEHISTOTEXT00")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_Normalized.png")
+              elif ("_pfType" in keyname2) :
+                obj.SetMarkerColor(1)
+                obj.SetLineColor(1)
+                obj.SetMarkerStyle(20)
+                obj.SetStats(0)
+                obj.Scale(1/obj.GetMaximum())
+                obj.GetYaxis().SetTitle("Efficiency")
+#                obj.GetXaxis().SetBinLabel(1,"AllTracks")
+#                obj.GetXaxis().SetBinLabel(2,"PFtracks")
+#                obj.GetXaxis().SetBinLabel(3,"isElectron")
+#                obj.GetXaxis().SetBinLabel(4,"isMuon")
+#                obj.GetXaxis().SetBinLabel(5,"isPhoton")
+#                obj.GetXaxis().SetBinLabel(6,"isChHadron")
+#                obj.GetXaxis().SetBinLabel(7,"isNeutHadron")
+#                obj.GetXaxis().SetBinLabel(8,"isUndefined")
+#                obj.GetXaxis().SetBinLabel(9,"notPFtrack")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.Draw("COLZ L")
+
+              elif ((keyname2 == "CutFlowEta") or (keyname2 == "CutFlowProbQ") or (keyname2 == "CutFlowPfType") or (keyname2 == "CutFlowProbQ")) :
+                obj.SetStats(0)
+                obj.GetYaxis().SetTitle("Efficiency")
+                obj.GetYaxis().SetTitle("")
+                obj.GetYaxis().SetTitle("")
+                if (keyname2 == "CutFlowPfType"):
+                  obj.Scale(1/obj.GetMaximum())
+                  for x in range(1,obj.GetNbinsX()+1) :
+                    localMax = obj.GetBinContent(x,1)
+                    for y in range(1,obj.GetNbinsY()+1) :
+                      value = obj.GetBinContent(x,y)
+                      if (value <= 0 or localMax <= 0) : continue
+                      obj.SetBinContent(x,y, value/localMax)
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                obj.Draw("COLZ")
+                can.SaveAs(name)
+              elif ("K_and_C_Kin_Mass" in keyname2) :
+                print("TADA")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                tex3.Draw("SAME")
+                obj.GetYaxis().SetTitle("Track / 0.05 GeV")
+                
+                g1 = ROOT.TF1( 'g1', 'gaus',  0.3,  0.7 )
+                g2 = ROOT.TF1( 'g2', 'gaus',  0.7, 1.5 )
+                g3 = ROOT.TF1( 'g3', 'gaus', 1.5, 2.5 )
+                g1.SetLineColor(ROOT.kBlue)
+                g2.SetLineColor(ROOT.kRed)
+                g3.SetLineColor(ROOT.kGreen)
+                obj.Fit(g1, "R")
+                obj.Fit(g2, "R+")
+                obj.Fit(g3, "R+")
+                
+                legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
+                legMass.SetTextFont(42)
+                legMass.SetTextSize(0.035)
+                legMass.SetBorderSize(1);
+                legMass.SetLineColor(1);
+                legMass.SetLineStyle(1);
+                legMass.SetLineWidth(1);
+                legMass.SetFillColor(0);
+                legMass.SetFillStyle(1001);
+                legMass.AddEntry(g1,"#mu = "+str(round(g1.GetParameter(1),2)) + " #pm "+str(round(g1.GetParameter(2),2)),"LP")
+                legMass.AddEntry(g2,"#mu = "+str(round(g2.GetParameter(1),2)) + " #pm "+str(round(g2.GetParameter(2),2)),"LP")
+                legMass.AddEntry(g3,"#mu = "+str(round(g3.GetParameter(1),2)) + " #pm "+str(round(g3.GetParameter(2),2)),"LP")
+                legMass.Draw("SAME")
+              #and ("PostS" not in keyname2)
+              elif ("Max" not in keyname2) and ("Pred" not in keyname2) and ("PDF" not in keyname2):
+                obj.SetMarkerStyle(20)
+                obj.SetTitle("")
+#                obj.GetXaxis().SetTitle(axisXTitle)
+#                obj.GetYaxis().SetTitle(axisYTitle)
+                obj.Draw("COLZ")
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(name)
+              
+              if ("Angle" in keyname2 and obj.ClassName() == "TH2F" ) :
+                obj.Draw("COLZ")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_2d.png")
+              
+              ## ----------------------------------------------------------------------------------------------
+              # now let's plot everything in a logy scale
+              obj.SetMarkerStyle(20)
+              obj.SetMinimum(0.000001)
+#              obj.SetMaximum(10000)
+              if ("GenID" in keyname2 or "GenEnviromentID" in keyname2) :
+                continue
+                
+              if (keyname2=="CutFlowProbQ" or keyname2=="CutFlowPfType" or keyname2=="CutFlowEta" or keyname2=="CutFlowEoP" or "Vs" in keyname2) :
+#              or "PostPreS_IasPixelIhVsLayer" in keyname2 or "PostPreS_IasStripIhVsLayer" in keyname2
+                obj.SetMaximum(obj.GetMaximum())
+                obj.SetMinimum(0.000001)
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+                can.SetLogz()
+
+              else :
+                obj.SetMaximum(obj.GetMaximum()*100)
+                tex2.Draw("SAME")
+                tex3.Draw("SAME")
+                tex4.Draw("SAME")
+                tex5.Draw("SAME")
+#                obj.SetMinimum(0.0001)
+                can.SetLogy()
+
+                obj.SetTitle("")
+              can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_logy.png")
+              #can.SaveAs(name.replace(".png",".pdf"))
+              #can.SaveAs(name.replace(".png",".C"))
+              can.Close()
+
+          else:
+              print(keyname+"   "+newname + " does not inherit from TObject" )
+
+Mass = f.Get("/analyzer/BaseName/Mass")
+Mass_wPred = f.Get("/analyzer/BaseName/Pred_Mass_CB")
+if Mass_wPred :
+  tex5m = ROOT.TLatex(0.07,0.01,fileVersion)
+  tex5m.SetNDC();
+  tex5m.SetTextFont(52);
+  tex5m.SetTextSize(0.0185);
+  tex5m.SetLineWidth(2);
+  name = fileName[0:-5] + "_Bin" + str(bin)+ "/"
+  if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+  massBins = [10.,50.,100.,200.,300.,500.,1000.,4000.]
+  massBinsArray = np.array(massBins)
+  Mass_projY_NotRebinned = Mass.ProjectionY("Mass_projY_NotRebinned",ProjBin,ProjBin,"e")
+  Mass_wPred_projY_NotRebinned = Mass_wPred.ProjectionY("Mass_wPred_projY_NotRebinned",ProjBin,ProjBin,"e")
+
+  Mass_projY = ROOT.TH1F("Mass_projY" , "Mass_projY" , len(massBinsArray)-1, massBinsArray)
+  Mass_wPred_projY = ROOT.TH1F("Mass_wPred_projY" , "Mass_wPred_projY" , len(massBinsArray)-1, massBinsArray)
+
+  print("Mass_projY_NotRebinned.Integral(): ",Mass_projY_NotRebinned.Integral())
+  print("Mass_wPred_projY_NotRebinned.Integral(): ",Mass_wPred_projY_NotRebinned.Integral())
+
+  KSvalue = Mass_projY_NotRebinned.KolmogorovTest(Mass_wPred_projY_NotRebinned,"XD")
+  print("KS-test: "+str(KSvalue))
+
+  for i in range(1,len(massBinsArray)) :
+    voltBin = Mass_projY_NotRebinned.FindBin(massBinsArray[i-1])+1
+    currentBin = Mass_projY_NotRebinned.FindBin(massBinsArray[i])
+    Mass_projYCont = 0.0
+    Mass_wPred_projYCont = 0.0
+    Mass_projYCont_err2 = 0.0
+    Mass_wPred_projYCont_err2 = 0.0
+    for j in range(voltBin,currentBin) :
+      Mass_projYCont += Mass_projY_NotRebinned.GetBinContent(j)
+      Mass_projYCont_err2 += (Mass_projY_NotRebinned.GetBinError(j) * Mass_projY_NotRebinned.GetBinError(j))
+      
+      Mass_wPred_projYCont += Mass_wPred_projY_NotRebinned.GetBinContent(j)
+      Mass_wPred_projYCont_err2 += (Mass_wPred_projY_NotRebinned.GetBinError(j)*Mass_wPred_projY_NotRebinned.GetBinError(j))
+    Mass_projY.SetBinContent(i,Mass_projYCont)
+    Mass_projY.SetBinError(i,np.sqrt(Mass_projYCont_err2))
+    Mass_wPred_projY.SetBinContent(i,Mass_wPred_projYCont)
+    Mass_wPred_projY.SetBinError(i,np.sqrt(Mass_wPred_projYCont_err2))
+    
+
+  print("----------------------------------------------")
+  KSvalue2 = Mass_projY.KolmogorovTest(Mass_wPred_projY,"XD")
+  print("KS-test after rebinning: "+str(KSvalue2))
+
+  Mass_projY.SetMarkerColor(1)
+  Mass_projY.SetLineColor(1)
+  Mass_projY.SetMarkerStyle(20)
+  Mass_projY.SetTitle("")
+  Mass_projY.GetXaxis().SetTitleSize(0.05)
+  Mass_projY.GetXaxis().SetTitleOffset(1)
+  Mass_projY.GetXaxis().SetTitle("Mass [GeV]")
+  Mass_projY.GetYaxis().SetTitle("Tracks/bin")
+  Mass_projY.GetYaxis().SetTitleSize(0.05)
+  Mass_projY.GetYaxis().SetLabelSize(0.03)
+  Mass_projY.GetYaxis().SetTitleOffset(1)
+  Mass_projY.SetStats(0)
+#  Mass_projY.GetYaxis().SetRangeUser(0.001,Mass_projY.GetMaximum())
+
+
+  Mass_wPred_projY.SetMarkerColor(2)
+  Mass_wPred_projY.SetLineColor(2)
+  Mass_wPred_projY.SetMarkerStyle(20)
+  Mass_wPred_projY.SetTitle("")
+  Mass_wPred_projY.GetXaxis().SetTitleSize(0.05)
+  Mass_wPred_projY.GetXaxis().SetTitleOffset(1)
+  Mass_wPred_projY.GetXaxis().SetTitle("Mass [GeV]")
+  Mass_wPred_projY.GetYaxis().SetTitle("Tracks/bin")
+  Mass_wPred_projY.GetYaxis().SetTitleSize(0.05)
+  Mass_wPred_projY.GetYaxis().SetTitleOffset(1)
+  Mass_wPred_projY.GetYaxis().SetLabelSize(0.03)
+  Mass_wPred_projY.SetStats(0)
+  
+  Mass_projY_NotRebinned.SetMarkerColor(1)
+  Mass_projY_NotRebinned.SetLineColor(1)
+  Mass_projY_NotRebinned.SetMarkerStyle(20)
+  Mass_projY_NotRebinned.SetTitle("")
+  Mass_projY_NotRebinned.GetXaxis().SetTitleSize(0.05)
+  Mass_projY_NotRebinned.GetXaxis().SetTitleOffset(1)
+  Mass_projY_NotRebinned.GetXaxis().SetTitle("Mass [GeV]")
+  Mass_projY_NotRebinned.GetYaxis().SetTitle("Tracks/bin")
+  Mass_projY_NotRebinned.GetYaxis().SetTitleSize(0.05)
+  Mass_projY_NotRebinned.GetYaxis().SetTitleOffset(1)
+  Mass_projY_NotRebinned.SetStats(0)
+#  Mass_projY_NotRebinned.GetYaxis().SetRangeUser(0.001,Mass_projY_NotRebinned.GetMaximum())
+
+
+  Mass_wPred_projY_NotRebinned.SetMarkerColor(2)
+  Mass_wPred_projY_NotRebinned.SetLineColor(2)
+  Mass_wPred_projY_NotRebinned.SetMarkerStyle(20)
+  Mass_wPred_projY_NotRebinned.SetTitle("")
+  Mass_wPred_projY_NotRebinned.GetXaxis().SetTitleSize(0.05)
+  Mass_wPred_projY_NotRebinned.GetXaxis().SetTitleOffset(1)
+  Mass_wPred_projY_NotRebinned.GetXaxis().SetTitle("Mass [GeV]")
+  Mass_wPred_projY_NotRebinned.GetYaxis().SetTitle("Tracks/bin")
+  Mass_wPred_projY_NotRebinned.GetYaxis().SetTitleSize(0.05)
+  Mass_wPred_projY_NotRebinned.GetYaxis().SetTitleOffset(1)
+  Mass_wPred_projY_NotRebinned.SetStats(0)
+
+
+  print("Mass_projY.Integral(): ",Mass_projY.Integral())
+  print("Mass_wPred_projY.Integral(): ",Mass_wPred_projY.Integral())
+
+  legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
+  legMass.SetTextFont(42)
+  legMass.SetTextSize(0.035)
+  legMass.SetBorderSize(1);
+  legMass.SetLineColor(1);
+  legMass.SetLineStyle(1);
+  legMass.SetLineWidth(1);
+  legMass.SetFillColor(0);
+  legMass.SetFillStyle(1001);
+  legMass.AddEntry(Mass_wPred_projY,"Prediction","LP")
+  legMass.AddEntry(Mass_projY,"Observation","LP")
+
+  tex4 = ROOT.TLatex(0.7,0.93,"K-S test v2: "+str(round(KSvalue2,4)));
+  tex4.SetNDC();
+  tex4.SetTextFont(52);
+  tex4.SetTextSize(0.0485);
+  tex4.SetLineWidth(2);
+
+  cMass_projY = ROOT.TCanvas('cMass_projY', 'cMass_projY',800,800)
+
+  rp = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY, "diffsigerrasym")
+
+  rp.SetH1DrawOpt("P");
+  rp.SetH2DrawOpt("P");
+
+  rp.Draw()
+  #rp.GetUpperPad().BuildLegend()
+  rp.SetLeftMargin(0.13);
+  rp.SetRightMargin(0.05);
+  rp.SetUpTopMargin(0.1);
+  rp.SetLowTopMargin(0.02);
+  rp.SetLowBottomMargin(0.35);
+
+  max = Mass_projY.GetMaximum()*1.2
+  Mass_projY.SetMaximum(max);
+  rp.GetLowerRefGraph().SetMinimum(-4);
+  rp.GetLowerRefGraph().SetMaximum(4);
+  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+  #rp.GetLowerRefGraph().SetLineColor(0) #0
+  rp.GetLowerRefGraph().SetMarkerStyle(20)
+  rp.GetLowerRefGraph().SetMarkerSize(1);
+  rp.GetLowYaxis().SetNdivisions(505);
+  rp.GetLowerRefYaxis().SetTitle("Pull");
+  rp.GetLowerRefYaxis().SetTitleSize(0.05);
+  rp.GetLowerRefYaxis().SetTitleOffset(1);
+  rp.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+  rp.GetLowerRefXaxis().SetTitleSize(0.05);
+  rp.GetLowerRefXaxis().SetTitleOffset(0.8);
+  rp.GetLowerRefXaxis().SetLabelSize(0.035);
+  cMass_projY.Modified()
+  cMass_projY.Update()
+  #Mass_projY.Draw()
+  #Mass_wPred_projY.Draw("SAME")
+  #rp.Draw("X")
+
+  rp.GetUpperPad().cd();
+  legMass.Draw("SAME")
+  tex2.Draw("SAME")
+  tex3.Draw("SAME")
+  tex4.Draw("SAME")
+  tex5m.Draw("SAME")
+  
+  name = newFileDir + "/cMass.png"
+  cMass_projY.SaveAs(name)
+  
+  
+  #############################################################################
+  cMass_projY_log = ROOT.TCanvas('cMass_projY_log', 'cMass_projY_log',800,800)
+  cMass_projY_log.SetLogy()
+
+  rp2 = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY, "diffsigerrasym")
+
+  rp2.SetH1DrawOpt("P");
+  rp2.SetH2DrawOpt("P");
+
+  rp2.Draw()
+  #rp2.GetUpperPad().BuildLegend()
+  rp2.SetLeftMargin(0.13);
+  rp2.SetRightMargin(0.05);
+  rp2.SetUpTopMargin(0.1);
+  rp2.SetLowTopMargin(0.02);
+  rp2.SetLowBottomMargin(0.35);
+
+  max2 = np.maximum(Mass_projY.GetMaximum()*10,10000)
+  Mass_projY.SetMaximum(max2);
+  Mass_projY.SetMinimum(0.000001);
+#  Mass_projY.GetYaxis().SetRangeUser(0.1,100)
+  rp2.GetLowerRefGraph().SetMinimum(-4);
+  rp2.GetLowerRefGraph().SetMaximum(4);
+  #rp2.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+  #rp2.GetLowerRefGraph().SetLineColor(0) #0
+  rp2.GetLowerRefGraph().SetMarkerStyle(20)
+  rp2.GetLowerRefGraph().SetMarkerSize(1);
+  rp2.GetLowYaxis().SetNdivisions(505);
+  rp2.GetLowerRefYaxis().SetTitle("Pull");
+  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
+  rp2.GetLowerRefYaxis().SetTitleOffset(1);
+  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
+  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
+  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
+  cMass_projY_log.Modified()
+  cMass_projY_log.Update()
+  #Mass_projY.Draw()
+  #Mass_wPred_projY.Draw("SAME")
+  #rp2.Draw("X")
+
+  rp2.GetUpperPad().cd();
+  legMass.Draw("SAME")
+  tex2.Draw("SAME")
+  tex3.Draw("SAME")
+  tex4.Draw("SAME")
+  tex5m.Draw("SAME")
+  
+  name = newFileDir + "/cMass_log.png"
+  cMass_projY_log.SaveAs(name)
+  
+  cMassOrig_projY = ROOT.TCanvas('cMassOrig_projY', 'cMassOrig_projY',800,800)
+  rp0 = ROOT.TRatioPlot(Mass_projY_NotRebinned,Mass_wPred_projY_NotRebinned, "diffsigerrasym")
+  rp0.Draw()
+  rp0.SetH1DrawOpt("P");
+  rp0.SetH2DrawOpt("P");
+  rp0.SetLeftMargin(0.13);
+  rp0.SetRightMargin(0.05);
+  rp0.SetUpTopMargin(0.1);
+  rp0.SetLowTopMargin(0.02);
+  rp0.SetLowBottomMargin(0.35);
+  rp0.GetLowerRefGraph().SetMinimum(-4);
+  rp0.GetLowerRefGraph().SetMaximum(4);
+  #rp0.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
+  #rp0.GetLowerRefGraph().SetLineColor(0) #0
+  rp0.GetLowerRefGraph().SetMarkerStyle(20)
+  rp0.GetLowerRefGraph().SetMarkerSize(1);
+  rp0.GetLowYaxis().SetNdivisions(505);
+  rp0.GetLowerRefYaxis().SetTitle("Pull");
+  rp0.GetLowerRefYaxis().SetTitleSize(0.05);
+  rp0.GetLowerRefYaxis().SetTitleOffset(1);
+  rp0.GetLowerRefYaxis().SetLabelSize(0.035);
+
+
+  rp0.GetLowerRefXaxis().SetTitleSize(0.05);
+  rp0.GetLowerRefXaxis().SetTitleOffset(0.8);
+  rp0.GetLowerRefXaxis().SetLabelSize(0.035);
+  cMassOrig_projY.Modified()
+  cMassOrig_projY.Update()
+
+  rp0.GetUpperPad().cd();
+  legMass.Draw("SAME")
+  tex2.Draw("SAME")
+  tex3.Draw("SAME")
+  tex4.Draw("SAME")
+  tex5m.Draw("SAME")
+  cMassOrig_projY.SaveAs(newFileDir + "/cMass_NotRebinned.png")
+  
+  cMassOrig_projY_log = ROOT.TCanvas('cMassOrig_projY_log', 'cMassOrig_projY_log',800,800)
+  cMassOrig_projY_log.SetLogy()
+  rp0.Draw()
+  legMass.Draw("SAME")
+  tex2.Draw("SAME")
+  tex3.Draw("SAME")
+  tex4.Draw("SAME")
+  tex5m.Draw("SAME")
+  cMassOrig_projY_log.SaveAs(newFileDir + "/cMass_logy_NotRebinned.png")
+  
+
+
+os.system("cp forWebpage/* "+newFileDir+"/.")
+os.system("cp forWebpage/.htaccess "+newFileDir+"/.")
+print("scp -r "+ newFileDir + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/PostProcScripts/r2.py b/Analyzer/test/Tamas/PostProcScripts/r2.py
new file mode 100644
index 0000000..2a9f6e5
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/r2.py
@@ -0,0 +1,169 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+#"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+##"crab_Analysis_2018_WJetsToLNu_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_WJetsToLNu_0J_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_WJetsToLNu_1J_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_WJetsToLNu_2J_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-500_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_HSCPgluino_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root",
+]
+
+#intLumi = 4598.37 #10.0 #
+intLumi = 2000.0
+#intLumi = 30000.0
+
+crossSectionArray = {
+'crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_CodeV'+codeVersion+'_v1.root' : 239000, #+-755.0,
+'crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2797000, #+-8800.0,
+'crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2518000, #+-7940.0,
+'crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 1361000, #+-4263.0,
+'crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 377800.0, #+-1184.0,
+'crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 88620.0, #+-275.1
+'crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 21070.0, #+-65.28
+'crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 7019.0, #+-21.61
+'crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  622.4, #+-1.891
+'crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  58.86, #+-0.1776
+'crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  18.22, #+-0.05471
+'crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  3.25, #+-0.0148
+'crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  1.61, #+-
+# 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
+'crab_Analysis_2018_WJetsToLNu_0J_CodeV'+codeVersion+'_v1.root' :  53330.0,#	+-90.89
+'crab_Analysis_2018_WJetsToLNu_1J_CodeV'+codeVersion+'_v1.root' : 8875.0, #	+-55.31
+'crab_Analysis_2018_WJetsToLNu_2J_CodeV'+codeVersion+'_v1.root' :  3338.0, #	+-34.64
+'crab_Analysis_2018_TTToHadronic_CodeV'+codeVersion+'_v1.root' : 377.96, # or 377.96,
+'crab_Analysis_2018_TTToSemiLeptonic_CodeV'+codeVersion+'_v1.root' : 365.35, # or 65.34
+'crab_Analysis_2018_TTTo2L2Nu_CodeV'+codeVersion+'_v1.root' :  88.29, # or 687.1 or 91.47600
+'crab_Analysis_2018_HSCPgluino_M-500_CodeV'+codeVersion+'_v1.root' :   33800,
+'crab_Analysis_2018_HSCPgluino_M-800_CodeV'+codeVersion+'_v1.root' :   1810,
+'crab_Analysis_2018_HSCPgluino_M-1000_CodeV'+codeVersion+'_v1.root' :  385 ,
+'crab_Analysis_2018_HSCPgluino_M-1400_CodeV'+codeVersion+'_v1.root' :  28.4 ,
+'crab_Analysis_2018_HSCPgluino_M-1600_CodeV'+codeVersion+'_v1.root' :  8.87 ,
+'crab_Analysis_2018_HSCPgluino_M-1800_CodeV'+codeVersion+'_v1.root' :  2.93 ,
+'crab_Analysis_2018_HSCPgluino_M-2000_CodeV'+codeVersion+'_v1.root' :  1.01 ,
+'crab_Analysis_2018_HSCPgluino_M-2200_CodeV'+codeVersion+'_v1.root' :  0.356 ,
+'crab_Analysis_2018_HSCPgluino_M-2400_CodeV'+codeVersion+'_v1.root' :  0.128 ,
+'crab_Analysis_2018_HSCPgluino_M-2600_CodeV'+codeVersion+'_v1.root' :  0.0462 ,
+'crab_Analysis_2018_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 0.001,
+'crab_Analysis_2018_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.001,
+'crab_Analysis_2018_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.001,
+'crab_Analysis_2018_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.001,
+'crab_Analysis_2018_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.001  ,
+'crab_Analysis_2018_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.001,
+'crab_Analysis_2018_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 0.001,
+'crab_Analysis_2018_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 0.001,
+'crab_Analysis_2018_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 0.001,
+'crab_Analysis_2018_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' : 0.001, #fake
+'crab_Analysis_2018_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' : 0.001, #fake
+'crab_Analysis_2018_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' : 0.001  ,
+}
+
+## TTBar is 832 pb (NNLO)
+# gluino x-sections from
+# https://github.com/fuenfundachtzig/xsec/blob/master/json/pp13_gluino_NNLO%2BNNLL.json#L1820
+
+fileInArray = []
+for sample in BackgroundSamples:
+  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
+
+for fileIn in fileInArray:
+  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
+    print("NumEvents not found, exit")
+    continue
+  
+  nEvetsPreTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(1)
+  nEvetsPostTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(2)
+  if (nEvetsPreTrig == 0):
+    print("nEvetsPreTrig is zero, exiting")
+    continue
+  nameFromTFile = str(fileIn)[str(fileIn).find("Name")+6:str(fileIn).find("Title")-1]
+  weight = intLumi*crossSectionArray.get(nameFromTFile)/nEvetsPreTrig
+  
+  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
+    dirname = fileIn.GetListOfKeys().At(i).GetName()
+    curr_dir = fileIn.GetDirectory(dirname)
+#    print("dirname: "+dirname)
+    if not (curr_dir) :
+      continue
+    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+        keyname = curr_dir.GetListOfKeys().At(i).GetName()
+        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
+        if not (curr_dir2) :
+          continue
+        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          print("keyname2: "+keyname2)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileIn.Get(newname)
+          if not (obj) : continue
+          if (obj.GetEntries() == 0 ) :
+#            print("obj.GetEntries() == 0")
+            continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if obj.InheritsFrom("TObject"):
+            obj.Scale(weight)
+  fileIn.Write("",ROOT.TObject.kOverwrite)
+  fileIn.Close()
+
+print("hadd crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu_*J_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root")
+
+#os.system
+print("hadd crab_Analysis_2018_AllQCD_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root")
+
+print("hadd crab_Analysis_2018_AllTTbar_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root")
+
+print("hadd crab_Analysis_2018_AllWJets_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu*J_CodeV"+codeVersion+"_v1.root ")
+
+#if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
+#
+#os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_SingleMuon_Run2018C_CodeV*"+codeVersion+"_v1.root .")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-*_CodeV*"+codeVersion+"_v1.root .")
+#os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/PostProcScripts/rescaleAndPrintHadd.py b/Analyzer/test/Tamas/PostProcScripts/rescaleAndPrintHadd.py
new file mode 100644
index 0000000..7ead5ff
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/rescaleAndPrintHadd.py
@@ -0,0 +1,405 @@
+import ROOT, sys, os, time, re, numpy
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2018_WJetsToLNu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_0J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_1J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_2J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-50To120_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-120To200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-200To400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-400To800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-800To1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-1400To2300_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-2300To3500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-3500To4500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-4500To6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_ZToMuMu_M-6000ToInf_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluino_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-1599_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPgmsbStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstopOnlyNeutral_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPstop_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+]
+
+#intLumi = 4598.37 #10.0 #
+intLumi = 100000.0 #100/fb
+#intLumi = 30000.0
+
+crossSectionArray = {
+'crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_CodeV'+codeVersion+'_v1.root' : 239000, #+-755.0,
+'crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2797000, #+-8800.0,
+'crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2518000, #+-7940.0,
+'crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 1361000, #+-4263.0,
+'crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 377800.0, #+-1184.0,
+'crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 88620.0, #+-275.1
+'crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 21070.0, #+-65.28
+'crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 7019.0, #+-21.61
+'crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  622.4, #+-1.891
+'crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  58.86, #+-0.1776
+'crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  18.22, #+-0.05471
+'crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  3.25, #+-0.0148
+'crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  1.61, #+-
+# 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
+'crab_Analysis_2018_WJetsToLNu_0J_CodeV'+codeVersion+'_v1.root' :  53330.0,#	+-90.89
+'crab_Analysis_2018_WJetsToLNu_1J_CodeV'+codeVersion+'_v1.root' : 8875.0, #	+-55.31
+'crab_Analysis_2018_WJetsToLNu_2J_CodeV'+codeVersion+'_v1.root' :  3338.0, #	+-34.64
+'crab_Analysis_2018_TTToHadronic_CodeV'+codeVersion+'_v1.root' : 377.96, # or 377.96,
+'crab_Analysis_2018_TTToSemiLeptonic_CodeV'+codeVersion+'_v1.root' : 365.35, # or 65.34
+'crab_Analysis_2018_TTTo2L2Nu_CodeV'+codeVersion+'_v1.root' :  88.29, # or 687.1 or 91.47600
+'crab_Analysis_2018_ZToMuMu_M-50To120_CodeV'+codeVersion+'_v1.root' : 2.116e+03, #+-9.883e-01
+'crab_Analysis_2018_ZToMuMu_M-120To200_CodeV'+codeVersion+'_v1.root' : 2.058e+01, # +/- 1.362e-02
+'crab_Analysis_2018_ZToMuMu_M-200To400_CodeV'+codeVersion+'_v1.root' : 2.890e+00, # +/- 1.977e-03
+'crab_Analysis_2018_ZToMuMu_M-400To800_CodeV'+codeVersion+'_v1.root' : 2.515e-01, # +/- 1.770e-04
+'crab_Analysis_2018_ZToMuMu_M-800To1400_CodeV'+codeVersion+'_v1.root' : 1.709e-02, # +/- 1.232e-05
+'crab_Analysis_2018_ZToMuMu_M-1400To2300_CodeV'+codeVersion+'_v1.root' : 1.370e-03, # +/- 9.867e-07
+'crab_Analysis_2018_ZToMuMu_M-2300To3500_CodeV'+codeVersion+'_v1.root' : 8.282e-05, #  +/- 5.740e-08
+'crab_Analysis_2018_ZToMuMu_M-3500To4500_CodeV'+codeVersion+'_v1.root' : 4.650e-06,
+'crab_Analysis_2018_ZToMuMu_M-4500To6000_CodeV'+codeVersion+'_v1.root' : 3.650e-07,# +/- 1.874e-10
+'crab_Analysis_2018_ZToMuMu_M-6000ToInf_CodeV'+codeVersion+'_v1.root' : 2.526e-08, # +/- 2.331e-11
+'crab_Analysis_2018_HSCPgluino_M-500_CodeV'+codeVersion+'_v1.root' :   33.800,
+'crab_Analysis_2018_HSCPgluino_M-800_CodeV'+codeVersion+'_v1.root' :   1.810,
+'crab_Analysis_2018_HSCPgluino_M-1000_CodeV'+codeVersion+'_v1.root' :  0.385,
+'crab_Analysis_2018_HSCPgluino_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0985,
+'crab_Analysis_2018_HSCPgluino_M-1400_CodeV'+codeVersion+'_v1.root' :  0.0284,
+'crab_Analysis_2018_HSCPgluino_M-1600_CodeV'+codeVersion+'_v1.root' :  0.00887,
+'crab_Analysis_2018_HSCPgluino_M-1800_CodeV'+codeVersion+'_v1.root' :  0.00293,
+'crab_Analysis_2018_HSCPgluino_M-2000_CodeV'+codeVersion+'_v1.root' :  0.00101,
+'crab_Analysis_2018_HSCPgluino_M-2200_CodeV'+codeVersion+'_v1.root' :  0.000356,
+'crab_Analysis_2018_HSCPgluino_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
+'crab_Analysis_2018_HSCPgluino_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-500_CodeV'+codeVersion+'_v1.root' :   33.800,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-800_CodeV'+codeVersion+'_v1.root' :   1.810,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1000_CodeV'+codeVersion+'_v1.root' :  0.385,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0985,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1400_CodeV'+codeVersion+'_v1.root' :  0.0284,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1600_CodeV'+codeVersion+'_v1.root' :  0.00887,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-1800_CodeV'+codeVersion+'_v1.root' :  0.00293,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2000_CodeV'+codeVersion+'_v1.root' :  0.00101,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  0.000356,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
+'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
+'crab_Analysis_2018_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 0.0303143567,
+'crab_Analysis_2018_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.01354210931669562,
+'crab_Analysis_2018_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.005617969677491303,
+'crab_Analysis_2018_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.0013205993021946,
+'crab_Analysis_2018_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.0003982919391389629,
+'crab_Analysis_2018_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.00018170273864904894,
+'crab_Analysis_2018_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 8.760649473515753e-5,
+'crab_Analysis_2018_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 3.548748280460506e-5,
+'crab_Analysis_2018_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 1.1684554271190975e-5,
+'crab_Analysis_2018_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
+'crab_Analysis_2018_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
+'crab_Analysis_2018_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' : 0.00057/1000.  ,
+'crab_Analysis_2018_HSCPgmsbStau_M-200_CodeV'+codeVersion+'_v1.root' :  2.8E-01,
+'crab_Analysis_2018_HSCPgmsbStau_M-247_CodeV'+codeVersion+'_v1.root' :  8.8E-02,
+'crab_Analysis_2018_HSCPgmsbStau_M-308_CodeV'+codeVersion+'_v1.root' :  2.5E-02,
+'crab_Analysis_2018_HSCPgmsbStau_M-432_CodeV'+codeVersion+'_v1.root' :  3.9E-03,
+'crab_Analysis_2018_HSCPgmsbStau_M-557_CodeV'+codeVersion+'_v1.root' :  1.9E-03,
+'crab_Analysis_2018_HSCPgmsbStau_M-651_CodeV'+codeVersion+'_v1.root' :  4.1E-04,
+'crab_Analysis_2018_HSCPgmsbStau_M-745_CodeV'+codeVersion+'_v1.root' :  1.9E-04,
+'crab_Analysis_2018_HSCPgmsbStau_M-871_CodeV'+codeVersion+'_v1.root' :  6.9E-05,
+'crab_Analysis_2018_HSCPgmsbStau_M-1029_CodeV'+codeVersion+'_v1.root' :  2.2E-05,
+'crab_Analysis_2018_HSCPgmsbStau_M-1218_CodeV'+codeVersion+'_v1.root' :  6.4E-06,
+'crab_Analysis_2018_HSCPgmsbStau_M-1409_CodeV'+codeVersion+'_v1.root' :  2.0E-06,
+'crab_Analysis_2018_HSCPgmsbStau_M-1599_CodeV'+codeVersion+'_v1.root' :  5.3E-07,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-500_CodeV'+codeVersion+'_v1.root' :  0.000257,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-800_CodeV'+codeVersion+'_v1.root' :  0.0326,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1000_CodeV'+codeVersion+'_v1.root' :  0.00683,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0017,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1400_CodeV'+codeVersion+'_v1.root' :  0.000473,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1600_CodeV'+codeVersion+'_v1.root' :  0.000142,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-1800_CodeV'+codeVersion+'_v1.root' :  4.51e-05,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2000_CodeV'+codeVersion+'_v1.root' :  1.48e-05,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
+'crab_Analysis_2018_HSCPstopOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
+'crab_Analysis_2018_HSCPstop_M-500_CodeV'+codeVersion+'_v1.root' :  0.000257,
+'crab_Analysis_2018_HSCPstop_M-800_CodeV'+codeVersion+'_v1.root' :  0.0326,
+'crab_Analysis_2018_HSCPstop_M-1000_CodeV'+codeVersion+'_v1.root' :  0.00683,
+'crab_Analysis_2018_HSCPstop_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0017,
+'crab_Analysis_2018_HSCPstop_M-1400_CodeV'+codeVersion+'_v1.root' :  0.000473,
+'crab_Analysis_2018_HSCPstop_M-1600_CodeV'+codeVersion+'_v1.root' :  0.000142,
+'crab_Analysis_2018_HSCPstop_M-1800_CodeV'+codeVersion+'_v1.root' :  4.51e-05,
+'crab_Analysis_2018_HSCPstop_M-2000_CodeV'+codeVersion+'_v1.root' :  1.48e-05,
+'crab_Analysis_2018_HSCPstop_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
+'crab_Analysis_2018_HSCPstop_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
+'crab_Analysis_2018_HSCPstop_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
+# tau-prime comming from https://gitlab.cern.ch/-/snippets/2617
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-200_CodeV'+codeVersion+'_v1.root' :  1.833e-01, # ± 6.9e-04
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV'+codeVersion+'_v1.root' :  1.361e-02, # ± 5.5e-05
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-600_CodeV'+codeVersion+'_v1.root' :  2.340e-03, # ± 8.5e-06
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV'+codeVersion+'_v1.root' :  5.697e-04, # ± 7.3e-07
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1000_CodeV'+codeVersion+'_v1.root' : 1.638e-04, # ± 2.1e-07
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1400_CodeV'+codeVersion+'_v1.root' : 1.869e-05, # ± 1.0e-07
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1800_CodeV'+codeVersion+'_v1.root' : 2.641e-06, # ± 1.5e-08
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV'+codeVersion+'_v1.root' : 4.175e-07, # ± 3.1e-09
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV'+codeVersion+'_v1.root' : 7.282e-08, # ± 3.9e-10
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV'+codeVersion+'_v1.root' :  7.332e-01, # 2.8e-03
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV'+codeVersion+'_v1.root' :  5.440e-02, # 2.2e-04
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_CodeV'+codeVersion+'_v1.root' :  9.363e-03, # 3.4e-05
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_CodeV'+codeVersion+'_v1.root' :  2.280e-03, # 7.7e-06
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV'+codeVersion+'_v1.root' : 6.553e-04, # 2.9e-06
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV'+codeVersion+'_v1.root' : 7.477e-05, # 4.1e-07
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV'+codeVersion+'_v1.root' : 1.056e-05, # 6.2e-08
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV'+codeVersion+'_v1.root' : 1.670e-06, # 1.2e-08
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV'+codeVersion+'_v1.root' : 2.913e-07, # 1.6e-09
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8, #extrapolated
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+}
+
+# ZPrime --> TauPrime with SSM
+# 0.00147992 --> 3 TeV
+# 0.000159354 --> 4 TeV
+# 1.76729E-5 --> 5 TeV
+# 1.80017E-6 --> 6 TeV
+# 1.9E-7 --> 7 TeV (extrapolated with exp(-2.23088*x + 0.155437) when x = 7)
+
+# ZPrime --> TauPrime with Z'Psi
+# exp(-2.27921x-0.809873)
+
+## TTBar is 832 pb (NNLO)
+# gluino x-sections from
+# https://github.com/fuenfundachtzig/xsec/blob/master/json/pp13_gluino_NNLO%2BNNLL.json#L1820
+
+fileInArray = []
+for sample in BackgroundSamples:
+  if not os.path.exists(sample): continue
+#  if not ("1400" in sample): continue
+#  if not ("ZPrimeMass3000" in sample): continue
+  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
+
+for fileIn in fileInArray:
+  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
+    print("NumEvents not found, exit for "+str(fileIn))
+    continue
+  
+  nEvetsPreTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(1)
+  nEvetsPostTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(2)
+  if (nEvetsPreTrig == 0):
+    print("nEvetsPreTrig is zero, exiting")
+    continue
+  nameFromTFile = str(fileIn)[str(fileIn).find("Name")+6:str(fileIn).find("Title")-1]
+  if not (crossSectionArray.get(nameFromTFile)) :
+    print("No crossSectionArray for "+str(nameFromTFile))
+    continue
+  weight = intLumi*crossSectionArray.get(nameFromTFile)/nEvetsPreTrig
+  print(nameFromTFile+" is reweighted with " + str(weight))
+  if (abs(1-weight) < 0.0001) : continue
+  
+  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
+    dirname = fileIn.GetListOfKeys().At(i).GetName()
+    curr_dir = fileIn.GetDirectory(dirname)
+#    print("dirname: "+dirname)
+    if not (curr_dir) :
+      continue
+    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+        keyname = curr_dir.GetListOfKeys().At(i).GetName()
+        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
+        if not (curr_dir2) :
+          continue
+        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          print("keyname2: "+keyname2)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileIn.Get(newname)
+          if not (obj) : continue
+          if (obj.GetEntries() == 0 ) :
+#            print("obj.GetEntries() == 0")
+            continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"): continue
+          if obj.InheritsFrom("TObject"):
+            obj.Scale(weight)
+  fileIn.Write("",ROOT.TObject.kOverwrite)
+  fileIn.Close()
+
+print("hadd crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-*_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root  crab_Analysis_2018_WJetsToLNu_*J_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo*_CodeV"+codeVersion+"_v1.root  crab_Analysis_2018_ZToMuMu*_CodeV"+codeVersion+"_v1.root")
+
+#os.system
+print("hadd crab_Analysis_2018_AllQCD_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-*_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_2018_AllTTbar_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo*_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_2018_AllWJets_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu*J_CodeV"+codeVersion+"_v1.root ")
+print("hadd crab_Analysis_2018_AllZToMuMu_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_ZToMuMu*_CodeV"+codeVersion+"_v1.root ")
+
+print("hadd crab_Analysis_SingleMuon_RunPhase1_CodeV"+codeVersion+"_v1.root *SingleMuon*_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_SingleMuon_Run2017_CodeV"+codeVersion+"_v1.root *SingleMuon_Run2017*_CodeV"+codeVersion+"_v1.root")
+print("hadd crab_Analysis_SingleMuon_Run2018_CodeV"+codeVersion+"_v1.root *SingleMuon_Run2018*_CodeV"+codeVersion+"_v1.root")
+
+#if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
+#
+#os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_SingleMuon_Run2018C_CodeV*"+codeVersion+"_v1.root .")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-*_CodeV*"+codeVersion+"_v1.root .")
+#os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/PostProcScripts/rescaleAndPrintHadd2017.py b/Analyzer/test/Tamas/PostProcScripts/rescaleAndPrintHadd2017.py
new file mode 100644
index 0000000..a75cb99
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/rescaleAndPrintHadd2017.py
@@ -0,0 +1,318 @@
+import ROOT, sys, os, time, re, numpy
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2017_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
+#"crab_Analysis_2017_WJetsToLNu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_WJetsToLNu_0J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_WJetsToLNu_1J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_WJetsToLNu_2J_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_TTToHadronic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-50To120_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-120To200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-200To400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-400To800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-800To1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-1400To2300_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-2300To3500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-3500To4500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-4500To6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_ZToMuMu_M-6000ToInf_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluino_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-1029_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-1218_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-1409_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-1599_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-247_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-308_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-432_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-557_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-651_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-745_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPgmsbStau_M-871_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstopOnlyNeutral_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-1200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-1600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-2000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-2400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPstop_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge1e_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge2e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge2e_M-1400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge2e_M-1800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge2e_M-200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge2e_M-2200_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge2e_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge2e_M-400_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2017_HSCPtauPrimeCharge2e_M-500_CodeV"+codeVersion+"_v1.root",
+]
+
+#intLumi = 4598.37 #10.0 #
+intLumi = 100000.0 #100/fb
+#intLumi = 30000.0
+
+crossSectionArray = {
+'crab_Analysis_2017_QCD_Pt-20_MuEnrichedPt15_CodeV'+codeVersion+'_v1.root' : 239000, #+-755.0,
+'crab_Analysis_2017_QCD_Pt-15To20_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2797000, #+-8800.0,
+'crab_Analysis_2017_QCD_Pt-20To30_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2518000, #+-7940.0,
+'crab_Analysis_2017_QCD_Pt-30To50_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 1361000, #+-4263.0,
+'crab_Analysis_2017_QCD_Pt-50To80_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 377800.0, #+-1184.0,
+'crab_Analysis_2017_QCD_Pt-80To120_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 88620.0, #+-275.1
+'crab_Analysis_2017_QCD_Pt-120To170_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 21070.0, #+-65.28
+'crab_Analysis_2017_QCD_Pt-170To300_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 7019.0, #+-21.61
+'crab_Analysis_2017_QCD_Pt-300To470_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  622.4, #+-1.891
+'crab_Analysis_2017_QCD_Pt-470To600_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  58.86, #+-0.1776
+'crab_Analysis_2017_QCD_Pt-600To800_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  18.22, #+-0.05471
+'crab_Analysis_2017_QCD_Pt-800To1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  3.25, #+-0.0148
+'crab_Analysis_2017_QCD_Pt-1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  1.61, #+-
+# 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
+'crab_Analysis_2017_WJetsToLNu_0J_CodeV'+codeVersion+'_v1.root' :  53330.0,#	+-90.89
+'crab_Analysis_2017_WJetsToLNu_1J_CodeV'+codeVersion+'_v1.root' : 8875.0, #	+-55.31
+'crab_Analysis_2017_WJetsToLNu_2J_CodeV'+codeVersion+'_v1.root' :  3338.0, #	+-34.64
+'crab_Analysis_2017_TTToHadronic_CodeV'+codeVersion+'_v1.root' : 377.96, # or 377.96,
+'crab_Analysis_2017_TTToSemiLeptonic_CodeV'+codeVersion+'_v1.root' : 365.35, # or 65.34
+'crab_Analysis_2017_TTTo2L2Nu_CodeV'+codeVersion+'_v1.root' :  88.29, # or 687.1 or 91.47600
+'crab_Analysis_2017_ZToMuMu_M-50To120_CodeV'+codeVersion+'_v1.root' : 2.116e+03, #+-9.883e-01
+'crab_Analysis_2017_ZToMuMu_M-120To200_CodeV'+codeVersion+'_v1.root' : 2.058e+01, # +/- 1.362e-02
+'crab_Analysis_2017_ZToMuMu_M-200To400_CodeV'+codeVersion+'_v1.root' : 2.890e+00, # +/- 1.977e-03
+'crab_Analysis_2017_ZToMuMu_M-400To800_CodeV'+codeVersion+'_v1.root' : 2.515e-01, # +/- 1.770e-04
+'crab_Analysis_2017_ZToMuMu_M-800To1400_CodeV'+codeVersion+'_v1.root' : 1.709e-02, # +/- 1.232e-05
+'crab_Analysis_2017_ZToMuMu_M-1400To2300_CodeV'+codeVersion+'_v1.root' : 1.370e-03, # +/- 9.867e-07
+'crab_Analysis_2017_ZToMuMu_M-2300To3500_CodeV'+codeVersion+'_v1.root' : 8.282e-05, #  +/- 5.740e-08
+'crab_Analysis_2017_ZToMuMu_M-3500To4500_CodeV'+codeVersion+'_v1.root' : 4.650e-06,
+'crab_Analysis_2017_ZToMuMu_M-4500To6000_CodeV'+codeVersion+'_v1.root' : 3.650e-07,# +/- 1.874e-10
+'crab_Analysis_2017_ZToMuMu_M-6000ToInf_CodeV'+codeVersion+'_v1.root' : 2.526e-08, # +/- 2.331e-11
+'crab_Analysis_2017_HSCPgluino_M-500_CodeV'+codeVersion+'_v1.root' :   33.800,
+'crab_Analysis_2017_HSCPgluino_M-800_CodeV'+codeVersion+'_v1.root' :   1.810,
+'crab_Analysis_2017_HSCPgluino_M-1000_CodeV'+codeVersion+'_v1.root' :  0.385,
+'crab_Analysis_2017_HSCPgluino_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0985,
+'crab_Analysis_2017_HSCPgluino_M-1400_CodeV'+codeVersion+'_v1.root' :  0.0284,
+'crab_Analysis_2017_HSCPgluino_M-1600_CodeV'+codeVersion+'_v1.root' :  0.00887,
+'crab_Analysis_2017_HSCPgluino_M-1800_CodeV'+codeVersion+'_v1.root' :  0.00293,
+'crab_Analysis_2017_HSCPgluino_M-2000_CodeV'+codeVersion+'_v1.root' :  0.00101,
+'crab_Analysis_2017_HSCPgluino_M-2200_CodeV'+codeVersion+'_v1.root' :  0.000356,
+'crab_Analysis_2017_HSCPgluino_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
+'crab_Analysis_2017_HSCPgluino_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-500_CodeV'+codeVersion+'_v1.root' :   33.800,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-800_CodeV'+codeVersion+'_v1.root' :   1.810,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1000_CodeV'+codeVersion+'_v1.root' :  0.385,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0985,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1400_CodeV'+codeVersion+'_v1.root' :  0.0284,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1600_CodeV'+codeVersion+'_v1.root' :  0.00887,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-1800_CodeV'+codeVersion+'_v1.root' :  0.00293,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2000_CodeV'+codeVersion+'_v1.root' :  0.00101,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  0.000356,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
+'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
+'crab_Analysis_2017_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 0.0303143567,
+'crab_Analysis_2017_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.01354210931669562,
+'crab_Analysis_2017_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.005617969677491303,
+'crab_Analysis_2017_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.0013205993021946,
+'crab_Analysis_2017_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.0003982919391389629,
+'crab_Analysis_2017_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.00018170273864904894,
+'crab_Analysis_2017_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 8.760649473515753e-5,
+'crab_Analysis_2017_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 3.548748280460506e-5,
+'crab_Analysis_2017_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 1.1684554271190975e-5,
+'crab_Analysis_2017_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
+'crab_Analysis_2017_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
+'crab_Analysis_2017_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' : 0.00057/1000.  ,
+'crab_Analysis_2017_HSCPgmsbStau_M-200_CodeV'+codeVersion+'_v1.root' :  2.8E-01,
+'crab_Analysis_2017_HSCPgmsbStau_M-247_CodeV'+codeVersion+'_v1.root' :  8.8E-02,
+'crab_Analysis_2017_HSCPgmsbStau_M-308_CodeV'+codeVersion+'_v1.root' :  2.5E-02,
+'crab_Analysis_2017_HSCPgmsbStau_M-432_CodeV'+codeVersion+'_v1.root' :  3.9E-03,
+'crab_Analysis_2017_HSCPgmsbStau_M-557_CodeV'+codeVersion+'_v1.root' :  1.9E-03,
+'crab_Analysis_2017_HSCPgmsbStau_M-651_CodeV'+codeVersion+'_v1.root' :  4.1E-04,
+'crab_Analysis_2017_HSCPgmsbStau_M-745_CodeV'+codeVersion+'_v1.root' :  1.9E-04,
+'crab_Analysis_2017_HSCPgmsbStau_M-871_CodeV'+codeVersion+'_v1.root' :  6.9E-05,
+'crab_Analysis_2017_HSCPgmsbStau_M-1029_CodeV'+codeVersion+'_v1.root' :  2.2E-05,
+'crab_Analysis_2017_HSCPgmsbStau_M-1218_CodeV'+codeVersion+'_v1.root' :  6.4E-06,
+'crab_Analysis_2017_HSCPgmsbStau_M-1409_CodeV'+codeVersion+'_v1.root' :  2.0E-06,
+'crab_Analysis_2017_HSCPgmsbStau_M-1599_CodeV'+codeVersion+'_v1.root' :  5.3E-07,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-500_CodeV'+codeVersion+'_v1.root' :  0.000257,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-800_CodeV'+codeVersion+'_v1.root' :  0.0326,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-1000_CodeV'+codeVersion+'_v1.root' :  0.00683,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0017,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-1400_CodeV'+codeVersion+'_v1.root' :  0.000473,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-1600_CodeV'+codeVersion+'_v1.root' :  0.000142,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-1800_CodeV'+codeVersion+'_v1.root' :  4.51e-05,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-2000_CodeV'+codeVersion+'_v1.root' :  1.48e-05,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
+'crab_Analysis_2017_HSCPstopOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
+'crab_Analysis_2017_HSCPstop_M-500_CodeV'+codeVersion+'_v1.root' :  0.000257,
+'crab_Analysis_2017_HSCPstop_M-800_CodeV'+codeVersion+'_v1.root' :  0.0326,
+'crab_Analysis_2017_HSCPstop_M-1000_CodeV'+codeVersion+'_v1.root' :  0.00683,
+'crab_Analysis_2017_HSCPstop_M-1200_CodeV'+codeVersion+'_v1.root' :  0.0017,
+'crab_Analysis_2017_HSCPstop_M-1400_CodeV'+codeVersion+'_v1.root' :  0.000473,
+'crab_Analysis_2017_HSCPstop_M-1600_CodeV'+codeVersion+'_v1.root' :  0.000142,
+'crab_Analysis_2017_HSCPstop_M-1800_CodeV'+codeVersion+'_v1.root' :  4.51e-05,
+'crab_Analysis_2017_HSCPstop_M-2000_CodeV'+codeVersion+'_v1.root' :  1.48e-05,
+'crab_Analysis_2017_HSCPstop_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
+'crab_Analysis_2017_HSCPstop_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
+'crab_Analysis_2017_HSCPstop_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-200_CodeV'+codeVersion+'_v1.root' :  1.1E-01,
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-400_CodeV'+codeVersion+'_v1.root' :  7.3E-02,
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-500_CodeV'+codeVersion+'_v1.root' :  1.2E-03,
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-800_CodeV'+codeVersion+'_v1.root' :  2.6E-04,
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-1000_CodeV'+codeVersion+'_v1.root' :  7.6E-05,
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-1400_CodeV'+codeVersion+'_v1.root' :  8.5E-06,
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-1800_CodeV'+codeVersion+'_v1.root' :  1.2E-06,
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-2200_CodeV'+codeVersion+'_v1.root' :  8.2E-07, #fake
+'crab_Analysis_2017_HSCPtauPrimeCharge1e_M-2600_CodeV'+codeVersion+'_v1.root' :  1.2E-07,#fake
+'crab_Analysis_2017_HSCPtauPrimeCharge2e_M-200_CodeV'+codeVersion+'_v1.root' :  3.0E-01,
+'crab_Analysis_2017_HSCPtauPrimeCharge2e_M-400_CodeV'+codeVersion+'_v1.root' :  2.3E-02,
+'crab_Analysis_2017_HSCPtauPrimeCharge2e_M-500_CodeV'+codeVersion+'_v1.root' :  3.5E-03,
+'crab_Analysis_2017_HSCPtauPrimeCharge2e_M-1000_CodeV'+codeVersion+'_v1.root' :  2.4E-04,
+'crab_Analysis_2017_HSCPtauPrimeCharge2e_M-1400_CodeV'+codeVersion+'_v1.root' :  2.7E-05,
+'crab_Analysis_2017_HSCPtauPrimeCharge2e_M-1800_CodeV'+codeVersion+'_v1.root' :  3.9E-06,
+'crab_Analysis_2017_HSCPtauPrimeCharge2e_M-2200_CodeV'+codeVersion+'_v1.root' :  8.2E-07, #fake
+'crab_Analysis_2017_HSCPtauPrimeCharge2e_M-2600_CodeV'+codeVersion+'_v1.root' :  1.2E-07,#fake
+}
+
+## TTBar is 832 pb (NNLO)
+# gluino x-sections from
+# https://github.com/fuenfundachtzig/xsec/blob/master/json/pp13_gluino_NNLO%2BNNLL.json#L1820
+
+fileInArray = []
+for sample in BackgroundSamples:
+  if not os.path.exists(sample): continue
+  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
+
+for fileIn in fileInArray:
+  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
+    print("NumEvents not found, exit for "+str(fileIn))
+    continue
+  
+  nEvetsPreTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(1)
+  nEvetsPostTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(2)
+  if (nEvetsPreTrig == 0):
+    print("nEvetsPreTrig is zero, exiting")
+    continue
+  nameFromTFile = str(fileIn)[str(fileIn).find("Name")+6:str(fileIn).find("Title")-1]
+  if not (crossSectionArray.get(nameFromTFile)) :
+    print("No crossSectionArray for "+str(nameFromTFile))
+    continue
+  weight = intLumi*crossSectionArray.get(nameFromTFile)/nEvetsPreTrig
+  
+  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
+    dirname = fileIn.GetListOfKeys().At(i).GetName()
+    curr_dir = fileIn.GetDirectory(dirname)
+#    print("dirname: "+dirname)
+    if not (curr_dir) :
+      continue
+    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+        keyname = curr_dir.GetListOfKeys().At(i).GetName()
+        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
+        if not (curr_dir2) :
+          continue
+        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+#          print("keyname2: "+keyname2)
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileIn.Get(newname)
+          if not (obj) : continue
+          if (obj.GetEntries() == 0 ) :
+#            print("obj.GetEntries() == 0")
+            continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if obj.InheritsFrom("TObject"):
+            obj.Scale(weight)
+  fileIn.Write("",ROOT.TObject.kOverwrite)
+  fileIn.Close()
+
+print("hadd crab_Analysis_2017_AllBackground_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_WJetsToLNu_*J_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_TTToHadronic_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root")
+
+#os.system
+print("hadd crab_Analysis_2017_AllQCD_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root")
+
+print("hadd crab_Analysis_2017_AllTTbar_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_TTToHadronic_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root")
+
+print("hadd crab_Analysis_2017_AllWJets_CodeV"+codeVersion+"_v1.root crab_Analysis_2017_WJetsToLNu*J_CodeV"+codeVersion+"_v1.root ")
+
+print("hadd crab_Analysis_SingleMuon_RunPhase1_CodeV"+codeVersion+"_v1.root *SingleMuon*_CodeV"+codeVersion+"_v1.root")
+
+#if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
+#
+#os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2017_SingleMuon_Run2017C_CodeV*"+codeVersion+"_v1.root .")
+#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2017_HSCPgluino_M-*_CodeV*"+codeVersion+"_v1.root .")
+#os.system("mv CodeV"+codeVersion+"/crab_Analysis_2017_All*"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/PostProcScripts/stuf.py b/Analyzer/test/Tamas/PostProcScripts/stuf.py
new file mode 100644
index 0000000..db891f9
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/stuf.py
@@ -0,0 +1,7 @@
+import datetime
+from sqlalchemy import TIMESTAMP
+
+date_str = '2022-03-15'  # Your date string
+date_obj = datetime.datetime.strptime(date_str, '%Y-%m-%d')  # Convert string to datetime object
+timestamp_obj = TIMESTAMP(date_obj)  # Convert datetime object to TIMESTAMP object
+
diff --git a/Analyzer/test/Tamas/PostProcScripts/submitCrabJobs.py b/Analyzer/test/Tamas/PostProcScripts/submitCrabJobs.py
new file mode 100644
index 0000000..a36086f
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/submitCrabJobs.py
@@ -0,0 +1,96 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/HSCPgluino_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-15to7000_TuneCP5_Flat2018_13TeV_pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_wProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_wProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.instance = 'preprod'
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_wProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['dEdxTemplate_harm2_SO_in_noC_CCC_MG_2017B.root','CMS_GeomTree.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_wProbQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_wProbQ.py 4crab_toSubmit_wProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_wProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_wProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_wProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_wProbQ.py")
+  os.system("mv 4crab_toSubmit_wProbQ.py submittedConfigs/.")
+
+
+
+
diff --git a/Analyzer/test/Tamas/PostProcScripts/tdrstyle.py b/Analyzer/test/Tamas/PostProcScripts/tdrstyle.py
new file mode 100644
index 0000000..28f0561
--- /dev/null
+++ b/Analyzer/test/Tamas/PostProcScripts/tdrstyle.py
@@ -0,0 +1,174 @@
+import ROOT
+
+# tdrGrid: Turns the grid lines on (true) or off (false)
+
+def setTDRStyle():
+    tdrStyle = ROOT.TStyle("tdrStyle","Style for P-TDR");
+
+    tdrStyle.SetPalette(1)
+
+    #    For Legend
+
+    tdrStyle.SetLegendBorderSize(0);
+    
+    # For the canvas:
+    tdrStyle.SetCanvasBorderMode(0);
+    tdrStyle.SetCanvasColor(ROOT.kWhite);
+    tdrStyle.SetCanvasDefH(600); #Height of canvas
+    tdrStyle.SetCanvasDefW(600); #Width of canvas
+    tdrStyle.SetCanvasDefX(0);   #Position on screen
+    tdrStyle.SetCanvasDefY(0);
+
+    
+    # For the Pad:
+    tdrStyle.SetPadBorderMode(0);
+    # tdrStyle.SetPadBorderSize(Width_t size = 1);
+    tdrStyle.SetPadColor(ROOT.kWhite);
+    tdrStyle.SetPadGridX(False);
+    tdrStyle.SetPadGridY(False);
+    #tdrStyle.SetPadGridX(True);
+    #tdrStyle.SetPadGridY(True);
+    tdrStyle.SetGridColor(0);
+    tdrStyle.SetGridStyle(3);
+    tdrStyle.SetGridWidth(1);
+
+    #    For the frame:
+    tdrStyle.SetFrameBorderMode(0);
+    tdrStyle.SetFrameBorderSize(1);
+    tdrStyle.SetFrameFillColor(0);
+    tdrStyle.SetFrameFillStyle(0);
+    tdrStyle.SetFrameLineColor(1);
+    tdrStyle.SetFrameLineStyle(1);
+    tdrStyle.SetFrameLineWidth(2);
+
+    # For the histo:
+    # tdrStyle->SetHistFillColor(1);
+    # tdrStyle->SetHistFillStyle(0);
+    tdrStyle.SetHistLineColor(1);
+    tdrStyle.SetHistLineStyle(0);
+    tdrStyle.SetHistLineWidth(1);
+    # tdrStyle->SetLegoInnerR(Float_t rad = 0.5);
+    # tdrStyle->SetNumberContours(Int_t number = 20);
+
+    #tdrStyle.SetEndErrorSize(1);
+    #GHM  tdrStyle->SetEndErrorSize(2);#
+    #  tdrStyle->SetErrorMarker(20);
+    #tdrStyle.SetErrorX(1.);
+    
+    tdrStyle.SetMarkerStyle(20);
+
+    #For the fit/function:
+    tdrStyle.SetOptFit(0);
+    tdrStyle.SetFitFormat("5.4g");
+    tdrStyle.SetFuncColor(2);
+    tdrStyle.SetFuncStyle(1);
+    tdrStyle.SetFuncWidth(2);
+
+    #For the date:
+    tdrStyle.SetOptDate(0);
+    # tdrStyle.SetDateX(Float_t x = 0.01);
+    # tdrStyle.SetDateY(Float_t y = 0.01);
+    
+    #For the statistics box:
+    tdrStyle.SetOptFile(0);
+    tdrStyle.SetOptStat(0)
+    #tdrStyle.SetOptStat('mr'); # To display the mean and RMS:   SetOptStat("mr");
+    tdrStyle.SetStatColor(ROOT.kWhite);
+    tdrStyle.SetStatFont(42);
+    tdrStyle.SetStatFontSize(0.025);
+    tdrStyle.SetStatTextColor(1);
+    tdrStyle.SetStatFormat("6.4g");
+    tdrStyle.SetStatBorderSize(1);
+    tdrStyle.SetStatH(0.1);
+    tdrStyle.SetStatW(0.15);
+    # tdrStyle->SetStatStyle(Style_t style = 1001);
+    
+    # tdrStyle->SetStatX(Float_t x = 0);
+    # tdrStyle->SetStatY(Float_t y = 0);
+    # Margins:
+    tdrStyle.SetPadTopMargin(0.065);
+    tdrStyle.SetPadBottomMargin(0.12);
+    tdrStyle.SetPadLeftMargin(0.15);
+    tdrStyle.SetPadRightMargin(0.05);
+    
+    # For the Global title:
+    
+    tdrStyle.SetOptTitle(1);
+    tdrStyle.SetTitleFont(42);
+    tdrStyle.SetTitleColor(1);
+    tdrStyle.SetTitleTextColor(1);
+    tdrStyle.SetTitleFillColor(10);
+    tdrStyle.SetTitleFontSize(0.0525);
+    tdrStyle.SetTitleH(0); # Set the height of the title box
+    tdrStyle.SetTitleW(0); # Set the width of the title box
+    tdrStyle.SetTitleX(0.2); # Set the position of the title box
+    tdrStyle.SetTitleY(1.0055); # Set the position of the title box
+    tdrStyle.SetTitleStyle(1001);
+    tdrStyle.SetTitleBorderSize(0);
+    #tdrStyle.SetTitleAlign(23);
+    tdrStyle.SetTitleAlign(13)
+    
+    # For the axis titles:
+
+    tdrStyle.SetTitleColor(1, "XYZ");
+    tdrStyle.SetTitleFont(42, "XY");
+    tdrStyle.SetTitleFont(42, "Z");
+    tdrStyle.SetTitleSize(0.05, "XY");
+    tdrStyle.SetTitleSize(0.035, "Z");
+    #tdrStyle.SetTitleSize(0.06, "XYZ");
+    # tdrStyle.SetTitleXSize(Float_t size = 0.02); # Another way to set the size?
+    # tdrStyle.SetTitleYSize(Float_t size = 0.02);
+    tdrStyle.SetTitleXOffset(1.0);
+    #  tdrStyle.SetTitleYOffset(1.25);
+    tdrStyle.SetTitleYOffset(1.0);
+    # tdrStyle.SetTitleOffset(1.1, "Y"); # Another way to set the Offset
+
+    # For the axis labels:
+
+    tdrStyle.SetLabelColor(1, "XYZ");
+    tdrStyle.SetLabelFont(42, "XYZ");
+    tdrStyle.SetLabelOffset(0.005, "XYZ");
+    #tdrStyle.SetLabelSize(0.04, "XYZ");
+    tdrStyle.SetLabelSize(0.03, "XYZ");
+
+    # For the axis:
+
+    tdrStyle.SetAxisColor(1, "XYZ");
+    tdrStyle.SetStripDecimals(ROOT.kTRUE);
+    tdrStyle.SetTickLength(0.01, "X");
+    tdrStyle.SetTickLength(0.01, "Y");
+    
+    tdrStyle.SetNdivisions(510, "XYZ");
+    tdrStyle.SetPadTickX(1);  # To get tick marks on the opposite side of the frame
+    tdrStyle.SetPadTickY(1);
+
+    # Change for log plots:
+    tdrStyle.SetOptLogx(0);
+    tdrStyle.SetOptLogy(0);
+    tdrStyle.SetOptLogz(0);
+    
+    # Postscript options:
+    # tdrStyle.SetPaperSize(20.,20.);
+    # tdrStyle.SetLineScalePS(Float_t scale = 3);
+    # tdrStyle.SetLineStyleString(Int_t i, const char* text);
+    # tdrStyle.SetHeaderPS(const char* header);
+    # tdrStyle.SetTitlePS(const char* pstitle);
+    
+    # tdrStyle.SetBarOffset(Float_t baroff = 0.5);
+    # tdrStyle.SetBarWidth(Float_t barwidth = 0.5);
+    # tdrStyle.SetPaintTextFormat(const char* format = "g");
+    # tdrStyle.SetPalette(Int_t ncolors = 0, Int_t* colors = 0);
+    # tdrStyle.SetTimeOffset(Double_t toffset);
+    # tdrStyle.SetHistMinimumZero(kTRUE);
+
+    tdrStyle.cd();
+    
+    ROOT.gROOT.ForceStyle() 
+  
+
+
+#void fixOverlay() {
+#  gPad.RedrawAxis();
+#}
+
+#endif
diff --git a/Analyzer/test/Tamas/ROCCurves.py b/Analyzer/test/Tamas/ROCCurves.py
deleted file mode 100644
index 89b556d..0000000
--- a/Analyzer/test/Tamas/ROCCurves.py
+++ /dev/null
@@ -1,114 +0,0 @@
-import argparse
-import ROOT
-from array import array
-import ROOT, sys, os, time, re
-import tdrstyle
-
-def draw(file_map, h_name, h_name2, layer,  outfile, fileName):
-
-#    Gain_40E14Ne_T253K = ROOT.TGraphErrors("./SignalBackgroundEff_HSCP.txt","%lg %lg")
-    Gain_40E14Ne_T253K = ROOT.TGraphErrors(fileName,"%lg %lg")
-    
-    Gain_40E14Ne_T253K.SetMarkerStyle(20)
-    Gain_40E14Ne_T253K.SetMarkerColor(1)
-    Gain_40E14Ne_T253K.SetLineColor(1)
-    Gain_40E14Ne_T253K.SetLineStyle(1)
-
-    # ------------------------------------------------------
-        
-    mgGainResult =  ROOT.TMultiGraph()
-    mgGainResult.Add(Gain_40E14Ne_T253K,"p");
-    mgGainResult.SetTitle(";HSCP mass [GeV];Signal efficiency")
-    mgGainResult.GetYaxis().SetTitleSize(.05)
-    mgGainResult.GetYaxis().SetTitleOffset(1.5)
-    mgGainResult.GetYaxis().SetLabelSize(.04)
-    mgGainResult.GetXaxis().SetTitleSize(.05)
-    mgGainResult.GetXaxis().SetLabelSize(.04)
-    mgGainResult.GetYaxis().SetRangeUser(0.,1.)
-    
-    legGainResult = ROOT.TLegend(.5,.30,.8,.545)
-    legGainResult.SetTextFont(42)
-    legGainResult.SetTextSize(0.035)
-    legGainResult.AddEntry(Gain_40E14Ne_T253K,"R-hadron with gluino","LP")
-        
-    tex2 = ROOT.TLatex(0.18,0.96,"CMS");
-    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-    tex2.SetNDC();
-    tex2.SetTextFont(61);
-    tex2.SetTextSize(0.0375);
-    tex2.SetLineWidth(2);
-
-    tex3 = ROOT.TLatex(0.27,0.96,"Simulation")
-    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-    tex3.SetNDC();
-    tex3.SetTextFont(52);
-    tex3.SetTextSize(0.0285);
-    tex3.SetLineWidth(2);
-    
-##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#frac{p1}{E}#right)}") #Morris
-#    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = exp[A#upointexp(-b/E)]") #Morris2.0
-##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#left(#frac{p1}{E}#right)^{p2}#right)}")
-##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-(p0*x/p1)^{p2}}") #Muller-Moll
-#    texFunction.SetNDC();
-#    texFunction.SetTextFont(42)
-#    texFunction.SetTextSize(0.035)
-#    texFunction.SetTextColor(2)
-    
-    #    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#left(#frac{p1}{E}#right)^{p2}#right)}")
-#    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-(p0*x/p1)^{p2}}") #Muller-Moll
-    
-    
-#    texFunctionPar0 = ROOT.TLatex(0.27,0.7,"#chi^{2}/ndf=0.3096/5")
-#    texFunctionPar0.SetNDC();
-#    texFunctionPar0.SetTextFont(42)
-#    texFunctionPar0.SetTextSize(0.035)
-##    texFunctionPar.SetTextColor(2)
-#
-#    texFunctionPar1 = ROOT.TLatex(0.27,0.65,"A=1.526x10^{9}")
-#    texFunctionPar1.SetNDC();
-#    texFunctionPar1.SetTextFont(42)
-#    texFunctionPar1.SetTextSize(0.035)
-#    texFunctionPar.SetTextColor(2)
-#
-#    texFunctionPar2 = ROOT.TLatex(0.27,0.6,"b=2.898x10^{7} V/cm")
-#    texFunctionPar2.SetNDC();
-#    texFunctionPar2.SetTextFont(42)
-#    texFunctionPar2.SetTextSize(0.035)
-    
-    cGainResult = ROOT.TCanvas('cGainResult', 'cGainResult',800,800)
-    cGainResult.SetRightMargin(0.08)
-    mgGainResult.Draw('AP')
-#    mgGainResult.Fit("expFit")
-#    expFit.Draw("SAME")
-    legGainResult.Draw("SAME")
-    tex2.Draw("SAME");
-    tex3.Draw("SAME");
-    
-#    texFunction.Draw("SAME")
-#    texFunctionPar0.Draw("SAME")
-#    texFunctionPar1.Draw("SAME")
-#    texFunctionPar2.Draw("SAME")
-    
-    cGainResult.SaveAs("SignalEffHSCPGluino_"+fileName[:-4]+".png")
-    
-if __name__ == '__main__':
-    
-    ROOT.gROOT.SetBatch(True)
-    tdrstyle.setTDRStyle()
-#    ROOT.gStyle.SetOptFit(111)
-
- #-------------------------------------------------------------------------
- #  PARSE COMMAND LINE ARGUMENT
- #-------------------------------------------------------------------------
-    
-    parser = argparse.ArgumentParser(description='Charge MPV extractor')
-    parser.add_argument('-l', action="store", dest = 'inlist', default = 'HSCP_file.list')
-    parser.add_argument('-n', action="store", dest = 'h_name', default = 'analysis/h701_n1')
-    parser.add_argument('-n2', action="store", dest = 'h_name2', default = 'analysis/h701_n1c')
-    parser.add_argument('-lay', action="store", dest = 'layer', default = 'Layer 1')
-    parser.add_argument('-o', action="store", dest = 'outfile', default = 'tmp.pdf')
-    parser.add_argument('-f', action="store", dest = 'fileName', default = 'tmp.pdf')
-
-    p = parser.parse_args()
-
-    draw(p.inlist, p.h_name, p.h_name2, p.layer, p.outfile, p.fileName)
diff --git a/Analyzer/test/Tamas/ROCCurves_Bckg.py b/Analyzer/test/Tamas/ROCCurves_Bckg.py
deleted file mode 100644
index 1898c0d..0000000
--- a/Analyzer/test/Tamas/ROCCurves_Bckg.py
+++ /dev/null
@@ -1,125 +0,0 @@
-import argparse
-import ROOT
-from array import array
-import re
-import tdrstyle
-
-
-
-def draw(file_map, h_name, h_name2, layer,  outfile):
-
-#    Gain_40E14Ne_T253K = ROOT.TGraphErrors("./Gain_PixelAV_40E14Ne_T253K_Rescaled2.txt","%lg %lg %lg")
-    Gain_40E14Ne_T253K = ROOT.TGraphErrors("./QCDBackgroundEff.txt","%lg %lg %lg %lg")
-#    Gain_40E14Ne_T253K = ROOT.TGraphErrors("./Gain_PixelAV_40E14Ne_T253K_v2.txt","%lg %lg %lg")
-    Gain_40E14Ne_T253K_Simple = ROOT.TGraphErrors("./QCDBackgroundEff.txt","%lg %lg %lg %lg")
-    # new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);
-    
-    Gain_40E14Ne_T253K.SetMarkerStyle(20)
-    Gain_40E14Ne_T253K.SetMarkerColor(1)
-    Gain_40E14Ne_T253K.SetLineColor(1)
-    Gain_40E14Ne_T253K.SetLineStyle(1)
-    
-    Gain_40E14Ne_T253K_Simple.SetMarkerStyle(20)
-    Gain_40E14Ne_T253K_Simple.SetMarkerColor(4)
-    Gain_40E14Ne_T253K_Simple.SetLineColor(4)
-    Gain_40E14Ne_T253K_Simple.SetLineStyle(1)
-
-    # ------------------------------------------------------
-        
-    mgGainResult =  ROOT.TMultiGraph()
-    mgGainResult.Add(Gain_40E14Ne_T253K,"p");
-#    mgGainResult.Add(Gain_40E14Ne_T253K_Simple,"p");
-    mgGainResult.SetTitle(";QCD p_{T} bin [GeV];Background reduction efficiency [%]")
-    mgGainResult.GetYaxis().SetTitleSize(.05)
-    mgGainResult.GetYaxis().SetTitleOffset(1.5)
-    mgGainResult.GetYaxis().SetLabelSize(.04)
-    mgGainResult.GetXaxis().SetTitleSize(.05)
-    mgGainResult.GetXaxis().SetLabelSize(.04)
-    mgGainResult.GetYaxis().SetRangeUser(0.,100.)
-    
-    legGainResult = ROOT.TLegend(.5,.80,.8,.92)
-    legGainResult.SetTextFont(42)
-    legGainResult.SetTextSize(0.035)
-#    legGainResult.AddEntry(Gain_40E14Ne_T253K_Simple,"4.0x10^{15} n_{eq}/cm^{2} ratio of data/PixelAV","LP")
-    legGainResult.AddEntry(Gain_40E14Ne_T253K,"Muon-enriched QCD","LP")
-        
-    tex2 = ROOT.TLatex(0.18,0.96,"CMS");
-    #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-    tex2.SetNDC();
-    tex2.SetTextFont(61);
-    tex2.SetTextSize(0.0375);
-    tex2.SetLineWidth(2);
-
-    tex3 = ROOT.TLatex(0.27,0.96,"Simulation")
-    #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-    tex3.SetNDC();
-    tex3.SetTextFont(52);
-    tex3.SetTextSize(0.0285);
-    tex3.SetLineWidth(2);
-    
-##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#frac{p1}{E}#right)}") #Morris
-#    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = exp[A#upointexp(-b/E)]") #Morris2.0
-##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#left(#frac{p1}{E}#right)^{p2}#right)}")
-##    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-(p0*x/p1)^{p2}}") #Muller-Moll
-#    texFunction.SetNDC();
-#    texFunction.SetTextFont(42)
-#    texFunction.SetTextSize(0.035)
-#    texFunction.SetTextColor(2)
-    
-    #    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-p0#upointexp#left(-#left(#frac{p1}{E}#right)^{p2}#right)}")
-#    texFunction = ROOT.TLatex(0.27,0.76,"g(E) = #frac{1}{1-(p0*x/p1)^{p2}}") #Muller-Moll
-    
-    
-#    texFunctionPar0 = ROOT.TLatex(0.27,0.7,"#chi^{2}/ndf=0.3096/5")
-#    texFunctionPar0.SetNDC();
-#    texFunctionPar0.SetTextFont(42)
-#    texFunctionPar0.SetTextSize(0.035)
-##    texFunctionPar.SetTextColor(2)
-#
-#    texFunctionPar1 = ROOT.TLatex(0.27,0.65,"A=1.526x10^{9}")
-#    texFunctionPar1.SetNDC();
-#    texFunctionPar1.SetTextFont(42)
-#    texFunctionPar1.SetTextSize(0.035)
-#    texFunctionPar.SetTextColor(2)
-#
-#    texFunctionPar2 = ROOT.TLatex(0.27,0.6,"b=2.898x10^{7} V/cm")
-#    texFunctionPar2.SetNDC();
-#    texFunctionPar2.SetTextFont(42)
-#    texFunctionPar2.SetTextSize(0.035)
-    
-    cGainResult = ROOT.TCanvas('cGainResult', 'cGainResult',800,800)
-    cGainResult.SetRightMargin(0.08)
-    mgGainResult.Draw('AP')
-#    mgGainResult.Fit("expFit")
-#    expFit.Draw("SAME")
-    legGainResult.Draw("SAME")
-    tex2.Draw("SAME");
-    tex3.Draw("SAME");
-    
-#    texFunction.Draw("SAME")
-#    texFunctionPar0.Draw("SAME")
-#    texFunctionPar1.Draw("SAME")
-#    texFunctionPar2.Draw("SAME")
-    
-    cGainResult.SaveAs("BackgroundEff.png")
-    
-if __name__ == '__main__':
-    
-    ROOT.gROOT.SetBatch(True)
-    tdrstyle.setTDRStyle()
-#    ROOT.gStyle.SetOptFit(111)
-
- #-------------------------------------------------------------------------
- #  PARSE COMMAND LINE ARGUMENT
- #-------------------------------------------------------------------------
-    
-    parser = argparse.ArgumentParser(description='Charge MPV extractor')
-    parser.add_argument('-l', action="store", dest = 'inlist', default = 'HSCP_file.list')
-    parser.add_argument('-n', action="store", dest = 'h_name', default = 'analysis/h701_n1')
-    parser.add_argument('-n2', action="store", dest = 'h_name2', default = 'analysis/h701_n1c')
-    parser.add_argument('-lay', action="store", dest = 'layer', default = 'Layer 1')
-    parser.add_argument('-o', action="store", dest = 'outfile', default = 'tmp.pdf')
-
-    p = parser.parse_args()
-
-    draw(p.inlist, p.h_name, p.h_name2, p.layer, p.outfile)
diff --git a/Analyzer/test/Tamas/Unused/4crab_MySignal_Template_woProbQ.py b/Analyzer/test/Tamas/Unused/4crab_MySignal_Template_woProbQ.py
new file mode 100644
index 0000000..bd587d9
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_MySignal_Template_woProbQ.py
@@ -0,0 +1,40 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+#config.General.requestName = 'Analysis_2018_MyHSCPgluino_NoRew_NoCust_M_1800_woProbQ_CodeV27p0_v1'
+config.General.requestName = 'Analysis_2018_MyHSCPgluino_NoRew_M_1800_woProbQ_CodeV27p5_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.transferLogs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDBS = 'phys03'
+#config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3-0bfbad649d32c05924b5bfd4b5874292/USER'
+config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_NoRew_v1-e88ed05559facf15902f2fe2f6141103/USER'
+#config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_NoRewGT_v1-a007e86beae864f0107e60af996b4558/USER'
+#config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3-0bfbad649d32c05924b5bfd4b5874292/USER'
+config.Data.splitting = 'LumiBased'
+#config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+#config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
diff --git a/Analyzer/test/Tamas/Unused/4crab_Signal_Template_woProbQ.py b/Analyzer/test/Tamas/Unused/4crab_Signal_Template_woProbQ.py
new file mode 100644
index 0000000..d56cd3f
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Signal_Template_woProbQ.py
@@ -0,0 +1,37 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.transferLogs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
diff --git a/Analyzer/test/Tamas/Unused/4crab_Signal_Template_woProbQ_TAPERECALL.py b/Analyzer/test/Tamas/Unused/4crab_Signal_Template_woProbQ_TAPERECALL.py
new file mode 100644
index 0000000..f8da503
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Signal_Template_woProbQ_TAPERECALL.py
@@ -0,0 +1,36 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.instance = 'preprod'
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ.py b/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ.py
new file mode 100644
index 0000000..fc3a5ae
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ.py
@@ -0,0 +1,32 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 4000
+config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2017PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2017PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+config.Data.splitting = 'LumiBased'
+config.Data.unitsPerJob = 50
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+config.Site.blacklist = ['T2_US_Nebraska']
+#config.Site.storageSite = 'T3_US_FNALLPC'
+  
diff --git a/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ_2018A.py b/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ_2018A.py
new file mode 100644
index 0000000..790384e
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ_2018A.py
@@ -0,0 +1,32 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+config.Data.splitting = 'LumiBased'
+config.Data.unitsPerJob = 50
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '315257-316380'
+#config.Data.lumiMask 
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ_2018D.py b/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ_2018D.py
new file mode 100644
index 0000000..8dca88d
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Template_Data_woProbQ_2018D.py
@@ -0,0 +1,33 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+config.Data.splitting = 'LumiBased'
+config.Data.unitsPerJob = 50
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '320500-321436'
+#config.Data.lumiMask = ?
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+#config.Site.storageSite = 'T3_US_FNALLPC'
+  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/Unused/4crab_Template_TTbar_woProbQ.py b/Analyzer/test/Tamas/Unused/4crab_Template_TTbar_woProbQ.py
new file mode 100644
index 0000000..189a5a1
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Template_TTbar_woProbQ.py
@@ -0,0 +1,37 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 800
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.blacklist = ['T2_US_Nebraska']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
diff --git a/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ.py b/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ.py
new file mode 100644
index 0000000..0f8506a
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ.py
@@ -0,0 +1,37 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_wProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.instance = 'preprod'
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['dEdxTemplate_harm2_SO_in_noC_CCC_MG_2017B.root','CMS_GeomTree.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
\ No newline at end of file
diff --git a/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ_Debug.py b/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ_Debug.py
new file mode 100644
index 0000000..e19cc65
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ_Debug.py
@@ -0,0 +1,37 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.transferLogs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 4000
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 800
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
diff --git a/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ_maxStat.py b/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ_maxStat.py
new file mode 100644
index 0000000..62a063d
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_Template_woProbQ_maxStat.py
@@ -0,0 +1,36 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 4000
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+#config.Data.totalUnits = config.Data.unitsPerJob * 2000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
diff --git a/Analyzer/test/Tamas/Unused/4crab_toSubmit_woProbQ.py b/Analyzer/test/Tamas/Unused/4crab_toSubmit_woProbQ.py
new file mode 100644
index 0000000..cea98ae
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/4crab_toSubmit_woProbQ.py
@@ -0,0 +1,36 @@
+
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_WJetsToLNu_1J_woProbQ_CodeV29p3_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 4000
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = '/WJetsToLNu_1J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+#config.Data.totalUnits = config.Data.unitsPerJob * 2000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  
diff --git a/Analyzer/test/Tamas/Unused/Compare2DPlots_woProbQ.py b/Analyzer/test/Tamas/Unused/Compare2DPlots_woProbQ.py
new file mode 100644
index 0000000..5825c1c
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/Compare2DPlots_woProbQ.py
@@ -0,0 +1,209 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+#BinNumber = sys.argv[2]
+#bin = int(BinNumber)
+bin = 3
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+SingleMuon = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+AllTTbar = ROOT.TFile.Open("crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root")
+AllWJets = ROOT.TFile.Open("crab_Analysis_2018_AllWJets_woProbQ_CodeV"+codeVersion+"_v1.root")
+AllQCD   = ROOT.TFile.Open("crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
+SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2400_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+  
+if os.path.exists(os.path.dirname("2DComparrison_CodeV"+codeVersion)):
+  os.system("mkdir 2DComparrison_woProbQ_CodeV"+codeVersion)
+
+dirs = []
+for i in range(0, AllTTbar.GetListOfKeys().GetEntries()):
+  dirname = AllTTbar.GetListOfKeys().At(i).GetName()
+  curr_dir = AllTTbar.GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = AllTTbar.GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = AllTTbar.Get(newname)
+#          print(keyname2)
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if not obj.InheritsFrom("TObject"): continue
+
+          if (obj.GetEntries() == 0 ) : continue
+          
+          if not (obj.ClassName() == "TH2F") : continue
+          
+          if ("CutFlow" in keyname2) : continue
+          if ("Gen" in keyname2) : continue
+          if not ("PostPre" in keyname2) : continue
+          
+          SingleMuonHisto = SingleMuon.Get(newname)
+          SingleMuonHisto.SetMarkerStyle(20)
+          SingleMuonHisto.SetMarkerColor(1)
+          SingleMuonHisto.SetLineColor(1)
+        
+          AllTTbarHisto = AllTTbar.Get(newname)
+          AllTTbarHisto.SetMarkerStyle(20)
+          AllTTbarHisto.SetMarkerColor(2)
+          AllTTbarHisto.SetLineColor(2)
+          
+          AllWJetsHisto = AllWJets.Get(newname)
+          AllWJetsHisto.SetMarkerStyle(20)
+          AllWJetsHisto.SetMarkerColor(3)
+          AllWJetsHisto.SetLineColor(3)
+          
+          AllQCDHisto = AllQCD.Get(newname)
+          AllQCDHisto.SetMarkerStyle(20)
+          AllQCDHisto.SetMarkerColor(4)
+          AllQCDHisto.SetLineColor(4)
+          
+          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
+          SelectedSignalSamples1Histo.SetMarkerStyle(20)
+          SelectedSignalSamples1Histo.SetMarkerColor(6)
+          SelectedSignalSamples1Histo.SetLineColor(6)
+          
+          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
+          SelectedSignalSamples2Histo.SetMarkerStyle(20)
+          SelectedSignalSamples2Histo.SetMarkerColor(7)
+          SelectedSignalSamples2Histo.SetLineColor(7)
+          
+          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+          if (keyname2.find("Vs")==-1) :
+            axisXTitle = keyname2[keyname2.find("_")+1:]
+            axisYTitle = "Tracks/bin"
+          else :
+            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Vs")]
+            axisYTitle = keyname2[keyname2.find("Vs")+2:]
+          
+          legend.AddEntry(AllTTbarHisto,"TTBar","LP")
+          legend.AddEntry(AllWJetsHisto,"WJets","LP")
+          legend.AddEntry(AllQCDHisto,"mu-QCD p_{T}={50,inf}","LP")
+#          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018C","LP")
+          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
+          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPgluino M=2400 GeV", "LP")
+
+
+          
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex4 = ROOT.TLatex()
+          if ("PrePreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"Before pre-selection")
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"After N-1 selection")
+          elif ("PostPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"After pre-selection")
+            
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.0285);
+          tex4.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+#          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
+
+          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
+          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+
+          AllTTbarHisto.Draw("P")
+          AllTTbarHisto.SetStats(0)
+          AllTTbarHisto.SetTitle("")
+          AllTTbarHisto.GetXaxis().SetTitleSize(0.05)
+          AllTTbarHisto.GetXaxis().SetTitleOffset(1)
+          AllTTbarHisto.GetXaxis().SetTitle(axisXTitle)
+          AllTTbarHisto.GetYaxis().SetTitleSize(0.05)
+#          AllTTbarHisto.GetYaxis().SetTitleOffset(1)
+          AllTTbarHisto.GetYaxis().SetTitle(axisYTitle)
+          AllWJetsHisto.Draw("SAMEP")
+          AllQCDHisto.Draw("SAMEP")
+#          SingleMuonHisto.Draw("SAMEP")
+          SelectedSignalSamples1Histo.Draw("SAMEP")
+          SelectedSignalSamples2Histo.Draw("SAMEP")
+
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+
+          cstackedSummedBackground.SaveAs("2DComparrison_CodeV"+codeVersion+"/"+keyname2+".png")
+          
+#---------------------------------------------------------------------------------------------
+#          # now let's do everything again but on a log Y scale
+#          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
+#          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
+#          cstackedSummedBackground.SetLogy()
+#
+#          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
+#            stackedSummedBackground.SetMinimum(0.0001)
+#          else:
+#            stackedSummedBackground.SetMinimum(0.000000000000000001)
+#
+#          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+#            stackedNormSummedBackground.Draw("HISTO")
+#            stackedNormSummedBackground.SetTitle("")
+#            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
+#            stackedNormSummedBackground.GetXaxis().SetTitle("")
+#            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
+#            stackedNormSummedBackground.SetMaximum(12)
+#          else :
+#            stackedSummedBackground.Draw("HISTO")
+#            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
+#            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
+#            stackedSummedBackground.SetMaximum(max*1000)
+#          SingleMuonHisto.Draw("SAMEP")
+#          SelectedSignalSamples1Histo.Draw("SAME")
+#          SelectedSignalSamples2Histo.Draw("SAME")
+#          legend.Draw("SAME")
+#          tex2.Draw("SAME")
+#          tex3.Draw("SAME")
+#          tex4.Draw("SAME")
+#          tex5.Draw("SAME")
+#
+#          cstackedSummedBackground.SaveAs("2DComparrison_CodeV"+codeVersion+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/Unused/CompareStackedBcg_woProbQ.py b/Analyzer/test/Tamas/Unused/CompareStackedBcg_woProbQ.py
new file mode 100644
index 0000000..c36c807
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/CompareStackedBcg_woProbQ.py
@@ -0,0 +1,329 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+codeVersion = sys.argv[1]
+#BinNumber = sys.argv[2]
+#bin = int(BinNumber)
+bin = 3
+
+ROOT.gROOT.SetBatch(True)
+#ROOT.gStyle.SetPalette(1)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_AllWJets_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root",
+]
+
+SingleMuon = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018C_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
+SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2400_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+bckArray = []
+for sample in BackgroundSamples:
+  bckArray.append(ROOT.TFile.Open(sample))
+
+name = "StackedComparrison_CodeV"+codeVersion +"/A.png"
+print(os.path.dirname(name))
+if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
+
+dirs = []
+for i in range(0, bckArray[0].GetListOfKeys().GetEntries()):
+  dirname = bckArray[0].GetListOfKeys().At(i).GetName()
+  curr_dir = bckArray[0].GetDirectory(dirname)
+  if not (curr_dir) :
+    continue
+  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+      keyname = curr_dir.GetListOfKeys().At(i).GetName()
+      curr_dir2 = bckArray[0].GetDirectory(dirname+"/"+keyname)
+      if not (curr_dir2) :
+        continue
+      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = bckArray[0].Get(newname)
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if not obj.InheritsFrom("TObject"): continue
+
+          if (obj.GetEntries() == 0 ) : continue
+          stackedSummedBackground = ROOT.THStack("stackedSummedBackground","")
+          stackedNormSummedBackground = ROOT.THStack("stackedNormSummedBackground","")
+          
+          SingleMuonHisto = SingleMuon.Get(newname)
+          SingleMuonHisto.SetMarkerStyle(20)
+          SingleMuonHisto.SetMarkerColor(1)
+          SingleMuonHisto.SetLineColor(1)
+          
+          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
+          SelectedSignalSamples1Histo.SetMarkerColor(6)
+          SelectedSignalSamples1Histo.SetLineColor(6)
+          
+          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
+          SelectedSignalSamples2Histo.SetMarkerColor(7)
+          SelectedSignalSamples2Histo.SetLineColor(7)
+          
+          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
+          legend.SetTextFont(42)
+          legend.SetTextSize(0.02)
+          legend.SetBorderSize(1);
+          legend.SetBorderSize(0);
+          legend.SetLineColor(1);
+          legend.SetLineStyle(1);
+          legend.SetLineWidth(1);
+          legend.SetFillColor(0);
+          legend.SetFillStyle(1001);
+          if (keyname2.find("Per")==-1) :
+            axisXTitle = keyname2[keyname2.find("_")+1:]
+            axisYTitle = "Tracks/bin"
+          else :
+            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Per")]
+            axisYTitle = keyname2[keyname2.find("Per")+3:]
+          
+#              print("------------------------------------------------------------")
+          if (obj.ClassName() == "TH1F") :
+
+            # array to contain a specific (keyname2) histogram for all samples
+            histoArray = []
+            nEventsPostTrigArray = []
+            for index,fileIn in enumerate(bckArray):
+              histo = fileIn.Get(newname)
+              histoArray.append(histo)
+              stackedSummedBackground.Add(histo)
+              histo.SetLineColor(index+2)
+              histo.SetFillColor(index+2)
+              histo.SetMarkerColor(index+2)
+              if ((index==2)) :
+                legend.AddEntry(histo,"mu-QCD p_{T}={50,inf}","LP")
+              elif ((index==1)) :
+                legend.AddEntry(histo,"WJets","LP")
+              elif ((index==0)) :
+                legend.AddEntry(histo,"TTBar","LP")
+#              elif ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "genrecopT" or "BS_" in keyname2)):
+#                histo2DArray = []
+#                nEventsPostTrig2DArray = []
+#                for fileIn in bckArray:
+#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
+#                    continue
+#                  fileIn.Get(newname).ProjectionY(newname,bin,bin,"e").Draw()
+#                for index in range(0, len(histo2DArray)):
+#                  if (index < 9) :
+#                    stackedSummedQCD.Add(histo2DArray[index])
+#                  elif (index>=9 and index<10) :
+#                    stackedSummedW.Add(histo2DArray[index])
+#                  elif (index>=10 and index<13) :
+#                    stackedSummedTT.Add(histo2DArray[index])
+            
+#              elif (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
+#                histo3DArray = []
+#                nEventsPostTrig3DArray = []
+#                for fileIn in bckArray:
+#                  if (fileIn.Get(newname).GetEntries() == 0 ) :
+#                      continue
+#                  fileIn.Get(newname).GetXaxis().SetRange(bin,bin)
+#                  fileIn.Get(newname).Project3DProfile("ZY").Draw()
+#                  histo3DArray.append(fileIn.Get(newname).Project3DProfile("ZY"))
+#                  nEvetsPostTrig3D = fileIn.Get("analyzer/BaseName/TotalTE").Integral()
+#                  nEventsPostTrig3DArray.append(nEvetsPostTrig3D)
+#                for index in range(0, len(histo3DArray)):
+          else :
+            continue
+          #          convert stacks to (summed) histos
+          stackedSummedBackground.Draw()
+          stackedSummedBackgroundTmp = stackedSummedBackground.GetStack().Last()
+          for index,fileIn in enumerate(bckArray):
+            normHisto = fileIn.Get(newname)
+            max = stackedSummedBackgroundTmp.GetMaximum()
+            if (max==0) : continue
+            normHisto.Scale(1/max)
+            stackedNormSummedBackground.Add(normHisto)
+
+          stackedNormSummedBackground.Draw()
+
+          if (keyname2== "CutFlow") :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"Trigger")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"Eta")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"pT")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"NumPixHits")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"ValidFract")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"NumDeDx")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"HighPurity")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"Chi2oDOF")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"EoP")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(10,"dz")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(11,"dxy")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(12,"pTerrOverpT")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(13,"N/A")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(14,"MiniIso")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(15,"PF ID")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(16,"Ih")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(17,"ProbXY")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(18,"ProbQ")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(19,"MuStat")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(20,"PhiTOF")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(21,"EtaTOF")
+          elif (keyname2== "CutFlowReverse") :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"Trigger")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"Eta")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"pT")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"NumPixHits")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"ValidFract")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"NumDeDx")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"HighPurity")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"Chi2oDOF")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"EoP")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(10,"dz")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(11,"dxy")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(12,"pTerrOverpT")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(13,"N/A")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(14,"MiniIso")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(15,"PF ID")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(16,"Ih")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(17,"ProbXY")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(18,"ProbQ")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(19,"MuStat")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(20,"PhiTOF")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(21,"EtaTOF")
+          elif ("pfType" in keyname2) :
+            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
+            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
+            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(1,"AllTracks")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(2,"PFtracks")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(3,"isElectron")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(4,"isMuon")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(5,"isPhoton")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(6,"isChHadron")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(7,"isNeutHadron")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(8,"isUndefined")
+            stackedNormSummedBackground.GetXaxis().SetBinLabel(9,"else")
+#          else :
+#
+#
+#
+          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018D","LP")
+          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
+          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPgluino M=2400 GeV", "LP")
+#          legend.AddEntry(METHisto,"MET-EraC","LP")
+          
+          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
+          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
+          tex2.SetNDC();
+          tex2.SetTextFont(61);
+          tex2.SetTextSize(0.0675);
+          tex2.SetLineWidth(2);
+
+          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
+          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
+          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
+          tex3.SetNDC();
+          tex3.SetTextFont(52);
+          tex3.SetTextSize(0.0485);
+          tex3.SetLineWidth(2);
+          
+          tex4 = ROOT.TLatex()
+
+          if ("PrePreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"Before pre-selection")
+          elif ("N1" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"After N-1 selection")
+          elif ("PostPreS" in keyname2) :
+            tex4 = ROOT.TLatex(0.75,0.94,"After pre-selection")
+            
+          tex4.SetNDC();
+          tex4.SetTextFont(52);
+          tex4.SetTextSize(0.0285);
+          tex4.SetLineWidth(2);
+          
+          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
+          tex5.SetNDC();
+          tex5.SetTextFont(52);
+          tex5.SetTextSize(0.0185);
+          tex5.SetLineWidth(2);
+          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
+
+          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
+          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
+          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+            stackedNormSummedBackground.Draw("HISTO")
+            stackedNormSummedBackground.SetTitle("")
+            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedNormSummedBackground.GetXaxis().SetTitle("")
+            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
+            stackedNormSummedBackground.SetMaximum(1.3)
+          else :
+            stackedSummedBackground.Draw("HISTO")
+            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
+            stackedSummedBackground.GetXaxis().SetTitle(axisXTitle)
+            stackedSummedBackground.GetYaxis().SetTitle(axisYTitle)
+            stackedSummedBackground.SetMaximum(max*1.4)
+            stackedSummedBackground.SetMinimum(0.0)
+          SingleMuonHisto.Draw("SAMEP")
+          SelectedSignalSamples1Histo.Draw("SAME")
+          SelectedSignalSamples2Histo.Draw("SAME")
+          if ("Mass" in keyname2) :
+            stackedSummedBackground.GetXaxis().SetRangeUser(0,1800)
+#                stackedSummedBackground.GetXaxis().SetTitle("Mass [GeV]")
+#                stackedSummedBackground.GetYaxis().SetTitle("Tracks/bin")
+#                stackedSummedBackground.GetYaxis().SetTitleSize(0.05)
+#                stackedSummedBackground.GetYaxis().SetTitleOffset(1)
+
+ 
+          
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+
+          cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"/"+keyname2+".png")
+          
+#---------------------------------------------------------------------------------------------
+          # now let's do everything again but on a log Y scale
+          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
+          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
+          cstackedSummedBackground.SetLogy()
+          
+          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
+            stackedSummedBackground.SetMinimum(0.0001)
+          else:
+            stackedSummedBackground.SetMinimum(0.000000000000000001)
+            
+          if ("CutFlow" in keyname2 or "pfType" in keyname2):
+            stackedNormSummedBackground.Draw("HISTO")
+            stackedNormSummedBackground.SetTitle("")
+            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedNormSummedBackground.GetXaxis().SetTitle("")
+            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
+            stackedNormSummedBackground.SetMaximum(100)
+            stackedNormSummedBackground.SetMinimum(0.00001)
+          else :
+            stackedSummedBackground.Draw("HISTO")
+            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
+            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
+            stackedSummedBackground.SetMaximum(max*1000)
+          SingleMuonHisto.Draw("SAMEP")
+          SelectedSignalSamples1Histo.Draw("SAME")
+          SelectedSignalSamples2Histo.Draw("SAME")
+          legend.Draw("SAME")
+          tex2.Draw("SAME")
+          tex3.Draw("SAME")
+          tex4.Draw("SAME")
+          tex5.Draw("SAME")
+
+          cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"/"+keyname2+"_log.png")
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py
new file mode 100644
index 0000000..6431fca
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py
@@ -0,0 +1,261 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
+#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isSignal',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/80000/EC0E5916-F488-B145-90D6-FD10CE393C3F.root"),
+#   fileNames = cms.untracked.vstring("file:88E0D231-6364-DE49-8279-A7576B7FFAAD.root"),
+   fileNames = cms.untracked.vstring("/store/user/tvami/HSCP/HSCPgluino_M_1800/crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3/220712_195931/0000/HSCP_Gluino_Mass1800_RECO_1.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0 # 0: Tracker only
+process.analyzer.SampleType = SampleType 
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.Period = "2018"
+process.analyzer.DebugLevel = 6 
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+process.analyzer.TriggerResults = cms.InputTag('TriggerResults','','RECO')
+process.analyzer.DoTriggering = False
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+###process.analyzer.OutputFile = 'Data_2017_UL'
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_Debug_NoProbXY_cfg.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_Debug_NoProbXY_cfg.py
new file mode 100644
index 0000000..1551329
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_Debug_NoProbXY_cfg.py
@@ -0,0 +1,259 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isSignal',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/80000/EC0E5916-F488-B145-90D6-FD10CE393C3F.root"),
+   fileNames = cms.untracked.vstring("file:88E0D231-6364-DE49-8279-A7576B7FFAAD.root"),
+#   fileNames = cms.untracked.vstring("file:HSCP_Gluino_Mass1800_AOD_1.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cfi")
+process.HSCParticleAnalyzer.TypeMode = 0 # 0: Tracker only
+process.HSCParticleAnalyzer.SampleType = SampleType 
+process.HSCParticleAnalyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.HSCParticleAnalyzer.SaveGenTree = 0
+process.HSCParticleAnalyzer.DeDxTemplate=IasTemplate
+process.HSCParticleAnalyzer.TimeOffset="MuonTimeOffset.txt"
+process.HSCParticleAnalyzer.Period = "2018"
+process.HSCParticleAnalyzer.DebugLevel = 0
+#process.HSCParticleAnalyzer.DebugLevel = 100
+process.HSCParticleAnalyzer.DeDxK = K
+process.HSCParticleAnalyzer.DeDxC = C
+process.HSCParticleAnalyzer.DeDxSF_0 = SF0
+process.HSCParticleAnalyzer.DeDxSF_1 = SF1
+process.HSCParticleAnalyzer.GlobalMinIh = C
+process.HSCParticleAnalyzer.GlobalMinTrackProbXYCut = -1 
+process.HSCParticleAnalyzer.GlobalMaxTrackProbXYCut = 0.000001
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+
+process.analysis = cms.Path(process.HSCParticleAnalyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.HSCParticleAnalyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py
new file mode 100644
index 0000000..a5437e5
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py
@@ -0,0 +1,261 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isSignal',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+#   fileNames = cms.untracked.vstring("file:88E0D231-6364-DE49-8279-A7576B7FFAAD.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2560000/F6D6EB63-9383-3545-8322-893B2C166861.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPpairStau_M-871_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/80000/BFEFC38B-8C17-FC4B-A410-4035CECB211E.root"),
+   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2540000/9AFD6D90-8D7F-2D45-B024-B5D728C824CE.root"),
+
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0 # 0: Tracker only
+process.analyzer.SampleType = SampleType 
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.Period = "2018"
+process.analyzer.DebugLevel = 6 
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+###process.analyzer.OutputFile = 'Data_2017_UL'
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg_debug.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg_debug.py
new file mode 100644
index 0000000..b3129ee
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg_debug.py
@@ -0,0 +1,263 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isSignal',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+#   fileNames = cms.untracked.vstring("file:88E0D231-6364-DE49-8279-A7576B7FFAAD.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2560000/F6D6EB63-9383-3545-8322-893B2C166861.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPpairStau_M-871_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/80000/BFEFC38B-8C17-FC4B-A410-4035CECB211E.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2540000/9AFD6D90-8D7F-2D45-B024-B5D728C824CE.root"),
+   fileNames = cms.untracked.vstring("file:9AFD6D90-8D7F-2D45-B024-B5D728C824CE.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:19:18081')
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0 # 0: Tracker only
+process.analyzer.SampleType = SampleType 
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.Period = "2018"
+process.analyzer.DebugLevel = 6 
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+###process.analyzer.OutputFile = 'Data_2017_UL'
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py
new file mode 100644
index 0000000..05eb9f2
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py
@@ -0,0 +1,283 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isBckg',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(False),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/230000/064A8795-8468-3849-B543-BDD6287EE510.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/280005/D8AB7663-12E6-6247-BF03-0F24B7D7D4C6.root "),
+   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/WJetsToLNu_2J_TuneCP5_13TeV-amcatnloFXFX-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v1/50001/B76388EE-EB30-FB49-87F4-B9677880B21F.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+########################################################################
+#Run the Skim sequence if necessary
+if(not options.isSkimmedSample):
+   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
+
+   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
+   process.HSCPTrigger = process.hltHighLevel.clone()
+   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
+   process.HSCPTrigger.andOr = cms.bool( True ) #OR
+   process.HSCPTrigger.throw = cms.bool( False )
+   if(options.SAMPLE=='isData'):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+      ]
+   else:
+      #do not apply trigger filter on signal
+      process.HSCPTrigger.HLTPaths = ["*"]  
+   
+   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
+
+########################################################################
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+#        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0 # 0: Tracker only
+process.analyzer.SampleType = SampleType 
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.Period = "2018"
+process.analyzer.DebugLevel = 7
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py
new file mode 100644
index 0000000..d174cb1
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py
@@ -0,0 +1,283 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isBckg',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/230000/064A8795-8468-3849-B543-BDD6287EE510.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/280005/D8AB7663-12E6-6247-BF03-0F24B7D7D4C6.root "),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+########################################################################
+#Run the Skim sequence if necessary
+if(not options.isSkimmedSample):
+   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
+
+   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
+   process.HSCPTrigger = process.hltHighLevel.clone()
+   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
+   process.HSCPTrigger.andOr = cms.bool( True ) #OR
+   process.HSCPTrigger.throw = cms.bool( False )
+   if(options.SAMPLE=='isData'):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+      ]
+   else:
+      #do not apply trigger filter on signal
+      process.HSCPTrigger.HLTPaths = ["*"]  
+   
+   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
+
+########################################################################
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+#        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0 # 0: Tracker only
+process.analyzer.SampleType = SampleType 
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.Period = "2018"
+process.analyzer.DebugLevel = 0 
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent.py
new file mode 100644
index 0000000..f77438b
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent.py
@@ -0,0 +1,290 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isBckg',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+options.register('LUMITOPROCESS', '',
+#options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(False),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2430000/E09ACB33-2178-7346-9B8F-1B2E37A01299.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/250000/0D04C22E-0391-534F-84D1-673F519CDE00.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/40004/3EA4FB46-684A-A344-B8FD-C49E604413CA.root"),
+#   fileNames = cms.untracked.vstring("file:3EA4FB46-684A-A344-B8FD-C49E604413CA.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/00002/8A680DB7-DC98-1B4C-9BE8-0BF6B95B25F5.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/240008/50D6866F-AF83-1545-BA76-D696B7B7BF6E.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/40003/12DD9D3F-118A-D044-B4A1-4EF7372EA686.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/40003/07C11DC9-2A14-6741-8F59-40E6EF7E8906.root"),
+   fileNames = cms.untracked.vstring("file:07C11DC9-2A14-6741-8F59-40E6EF7E8906.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:20417:299250484')
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:20417:299250484')
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:37737:411896098')
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:115188:115187134')
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:183264:183263902')
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:25539:278749947')
+process.source.eventsToProcess = cms.untracked.VEventRange('1:22416:244663529')
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+########################################################################
+#Run the Skim sequence if necessary
+if(not options.isSkimmedSample):
+   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
+
+   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
+   process.HSCPTrigger = process.hltHighLevel.clone()
+   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
+   process.HSCPTrigger.andOr = cms.bool( True ) #OR
+   process.HSCPTrigger.throw = cms.bool( False )
+   if(options.SAMPLE=='isData'):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+      ]
+   else:
+      #do not apply trigger filter on signal
+      process.HSCPTrigger.HLTPaths = ["*"]  
+   
+   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
+
+########################################################################
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+#        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0 # 0: Tracker only
+process.analyzer.SampleType = SampleType 
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.Period = "2018"
+process.analyzer.DebugLevel = 100 
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath) #, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent_Ntuple.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent_Ntuple.py
new file mode 100644
index 0000000..b1b187c
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent_Ntuple.py
@@ -0,0 +1,280 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isBckg',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+options.register('LUMITOPROCESS', '',
+#options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(False),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/2430000/E09ACB33-2178-7346-9B8F-1B2E37A01299.root"),
+#   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/250000/0D04C22E-0391-534F-84D1-673F519CDE00.root"),
+   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/40004/3EA4FB46-684A-A344-B8FD-C49E604413CA.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:20417:299250484')
+#process.source.eventsToProcess = cms.untracked.VEventRange('1:20417:299250484')
+process.source.eventsToProcess = cms.untracked.VEventRange('1:37737:411896098')
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+########################################################################
+#Run the Skim sequence if necessary
+if(not options.isSkimmedSample):
+   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
+
+   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
+   process.HSCPTrigger = process.hltHighLevel.clone()
+   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
+   process.HSCPTrigger.andOr = cms.bool( True ) #OR
+   process.HSCPTrigger.throw = cms.bool( False )
+   if(options.SAMPLE=='isData'):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+      ]
+   else:
+      #do not apply trigger filter on signal
+      process.HSCPTrigger.HLTPaths = ["*"]  
+   
+   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
+
+########################################################################
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+#        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0 # 0: Tracker only
+process.analyzer.SampleType = SampleType 
+process.analyzer.SaveTree = 6 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.Period = "2018"
+process.analyzer.DebugLevel = 100 
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+process.analyzer.DoTriggering = False
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath) #, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_wMCmatch_cfg.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_wMCmatch_cfg.py
new file mode 100644
index 0000000..aa19bdd
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_2018_mc_woProbQ_wMCmatch_cfg.py
@@ -0,0 +1,286 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+from Configuration.Eras.Era_Run2_2018_cff import Run2_2018
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+# -1 means all events
+options.maxEvents = -1
+
+options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isBckg',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+process = cms.Process("HSCPAnalysis")
+#process = cms.Process("HSCPAnalysis",Run2_2018)
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+## print configuration:
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+   #fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/230000/064A8795-8468-3849-B543-BDD6287EE510.root"),
+   fileNames = cms.untracked.vstring("/store/mc/RunIISummer20UL18RECO/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/AODSIM/106X_upgrade2018_realistic_v11_L1v1-v2/280005/D8AB7663-12E6-6247-BF03-0F24B7D7D4C6.root "),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path() 
+
+########################################################################
+#Run the Skim sequence if necessary
+if(not options.isSkimmedSample):
+   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
+
+   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
+   process.HSCPTrigger = process.hltHighLevel.clone()
+   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
+   process.HSCPTrigger.andOr = cms.bool( True ) #OR
+   process.HSCPTrigger.throw = cms.bool( False )
+   if(options.SAMPLE=='isData'):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+      ]
+   else:
+      #do not apply trigger filter on signal
+      process.HSCPTrigger.HLTPaths = ["*"]  
+   
+   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger 
+
+########################################################################
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff") 
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+#        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",  
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*", 
+         "keep recoPFMETs_pfMet__*",     
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",  
+         "keep *_cscSegments__*",  
+         "keep *_scalersRawToDigi_*_*", 
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+
+########################################################################
+
+# run the EDAnalyzer
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root" 
+   
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+    
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0 # 0: Tracker only
+process.analyzer.SampleType = SampleType 
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.Geometry="CMS_GeomTree.root"
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.TrackProbQCut = 1.0
+process.analyzer.Period = "2018"
+process.analyzer.DebugLevel = 3
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+process.analyzer.HasMCMatch = True
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+###process.analyzer.OutputFile = 'Data_2017_UL'
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_wProbQ_cfg.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_wProbQ_cfg.py
new file mode 100644
index 0000000..54638cf
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_wProbQ_cfg.py
@@ -0,0 +1,278 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+options.maxEvents = -1 # -1 means all events
+
+# was 106X_dataRun2_v20
+options.register('GTAG', '106X_dataRun2_v36',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isData',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2017',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+
+process = cms.Process("HSCPAnalysis")
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+   fileNames = cms.untracked.vstring("/store/data/Run2017C/SingleMuon/AOD/09Aug2019_UL2017-v1/270002/64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+#The duplicateCheckMode works only if we submit with Condor - not with Crab - checks process history, run number, lumi number
+process.source.duplicateCheckMode = cms.untracked.string("checkAllFilesOpened")
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path()
+
+########################################################################
+#Run the Skim sequence if necessary
+if(not options.isSkimmedSample):
+   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
+
+   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
+   process.HSCPTrigger = process.hltHighLevel.clone()
+   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
+   process.HSCPTrigger.andOr = cms.bool( True ) #OR
+   process.HSCPTrigger.throw = cms.bool( False )
+   if(options.SAMPLE=='isData'):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+      ]
+   else:
+      #do not apply trigger filter on signal
+      process.HSCPTrigger.HLTPaths = ["*"]
+
+   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger
+
+########################################################################
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff")
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*",
+         "keep recoPFMETs_pfMet__*",
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",
+         "keep *_cscSegments__*",
+         "keep *_scalersRawToDigi_*_*",
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root"
+
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+
+   if options.YEAR=='2017' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+
+   if options.YEAR=='2017' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0
+process.analyzer.SampleType = SampleType
+process.analyzer.SaveTree = 6 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+#process.analyzer.TrackProbQCut = 0.1
+process.analyzer.DebugLevel = 7
+process.analyzer.Period = "2017"
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+###process.analyzer.OutputFile = 'Data_2017_UL'
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_woProbQ_cfg.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_woProbQ_cfg.py
new file mode 100644
index 0000000..89324ef
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_woProbQ_cfg.py
@@ -0,0 +1,277 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+options.maxEvents = -1 # -1 means all events
+
+# was 106X_dataRun2_v20
+#options.register('GTAG', '106X_upgrade2018_realistic_v11_L1v1',
+options.register('GTAG', '106X_upgrade2018_realistic_v11BasedCandidateTmp_2022_08_09_01_32_34',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isData',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+
+process = cms.Process("HSCPAnalysis")
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+   fileNames = cms.untracked.vstring("/store/data/Run2017C/SingleMuon/AOD/09Aug2019_UL2017-v1/270002/64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+#The duplicateCheckMode works only if we submit with Condor - not with Crab - checks process history, run number, lumi number
+process.source.duplicateCheckMode = cms.untracked.string("checkAllFilesOpened")
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path()
+
+########################################################################
+#Run the Skim sequence if necessary
+if(not options.isSkimmedSample):
+   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
+
+   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
+   process.HSCPTrigger = process.hltHighLevel.clone()
+   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
+   process.HSCPTrigger.andOr = cms.bool( True ) #OR
+   process.HSCPTrigger.throw = cms.bool( False )
+   if(options.SAMPLE=='isData'):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+      ]
+   else:
+      #do not apply trigger filter on signal
+      process.HSCPTrigger.HLTPaths = ["*"]
+
+   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger
+
+########################################################################
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff")
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*",
+         "keep recoPFMETs_pfMet__*",
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",
+         "keep *_cscSegments__*",
+         "keep *_scalersRawToDigi_*_*",
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root"
+
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0
+process.analyzer.SampleType = SampleType
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.DebugLevel = 7
+process.analyzer.Period = "2018"
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
+
diff --git a/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_woProbQ_cfg_debug.py b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_woProbQ_cfg_debug.py
new file mode 100644
index 0000000..e9f9af7
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/HSCParticleProducerAnalyzer_data_woProbQ_cfg_debug.py
@@ -0,0 +1,276 @@
+import sys, os
+import FWCore.ParameterSet.Config as cms
+from FWCore.ParameterSet.VarParsing import VarParsing
+
+options = VarParsing('analysis')
+
+# defaults
+options.outputFile = 'Histos.root'
+options.maxEvents = -1 # -1 means all events
+
+# was 106X_dataRun2_v20
+options.register('GTAG', '106X_dataRun2_v36',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Global Tag"
+)
+options.register('SAMPLE', 'isData',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Sample Type. Use: isSignal or isBckg or isData"
+)
+options.register('YEAR', '2018',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Year. Use: 2017 or 2018"
+)
+options.register('isSkimmedSample', False,
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.bool,
+    "is sample Skimmed? True or False"
+)
+#options.register('LUMITOPROCESS', '',
+options.register('LUMITOPROCESS', 'Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt',
+    VarParsing.multiplicity.singleton,
+    VarParsing.varType.string,
+    "Lumi to process"
+)
+options.parseArguments()
+
+
+process = cms.Process("HSCPAnalysis")
+
+#diventano var parsing
+#The following parameters need to be provided
+#isSignal, isBckg, isData, isSkimmedSample, GTAG, InputFileList
+#isSignal = True
+#isBckg = False
+#isData = False
+#isSkimmedSample = False
+#GTAG = 'START72_V1::All'
+
+print('\nCMSSW version : {}'.format(os.environ['CMSSW_VERSION']))
+print('Global Tag    : {}'.format(options.GTAG))
+if options.SAMPLE=='isData':
+   print('Lumi File     : {}'.format(options.LUMITOPROCESS))
+print('Sample Type   : {}'.format(options.SAMPLE))
+print('is skimmed    : {}'.format(options.isSkimmedSample))
+print('Output File   : {}'.format(options.outputFile))
+print('Input Files   : {}\n'.format(options.inputFiles))
+
+process.load("FWCore.MessageService.MessageLogger_cfi")
+process.load('Configuration.StandardSequences.GeometryRecoDB_cff')
+process.load('Configuration.StandardSequences.MagneticField_cff')
+process.load('Configuration.StandardSequences.FrontierConditions_GlobalTag_cff')
+process.load("Configuration.StandardSequences.Reconstruction_cff")
+process.load('Configuration.StandardSequences.Services_cff')
+
+process.options   = cms.untracked.PSet(
+      wantSummary = cms.untracked.bool(True),
+)
+process.MessageLogger.cerr.FwkReport.reportEvery = 1000
+
+process.maxEvents = cms.untracked.PSet( input = cms.untracked.int32(options.maxEvents) )
+process.source = cms.Source("PoolSource",
+   fileNames = cms.untracked.vstring("/store/data/Run2017C/SingleMuon/AOD/09Aug2019_UL2017-v1/270002/64A91A70-C88F-FF46-B735-3E53B3FDB790.root"),
+   inputCommands = cms.untracked.vstring("keep *", "drop *_MEtoEDMConverter_*_*")
+)
+
+#The duplicateCheckMode works only if we submit with Condor - not with Crab - checks process history, run number, lumi number
+process.source.duplicateCheckMode = cms.untracked.string("checkAllFilesOpened")
+
+from Configuration.AlCa.GlobalTag import GlobalTag
+process.GlobalTag = GlobalTag(process.GlobalTag, options.GTAG, '')
+
+process.HSCPTuplePath = cms.Path()
+
+########################################################################
+#Run the Skim sequence if necessary
+if(not options.isSkimmedSample):
+   process.nEventsBefSkim  = cms.EDProducer("EventCountProducer")
+
+   process.load('HLTrigger.HLTfilters.hltHighLevel_cfi')
+   process.HSCPTrigger = process.hltHighLevel.clone()
+   process.HSCPTrigger.TriggerResultsTag = cms.InputTag( "TriggerResults", "", "HLT" )
+   process.HSCPTrigger.andOr = cms.bool( True ) #OR
+   process.HSCPTrigger.throw = cms.bool( False )
+   if(options.SAMPLE=='isData'):
+      process.HSCPTrigger.HLTPaths = [ #check triggers
+          "HLT_PFMET120_PFMHT120_IDTight_v*",
+          "HLT_Mu50_v*",
+          "HLT_PFHT500_PFMET100_PFMHT100_IDTight_v*",
+          "HLT_PFMETNoMu120_PFMHTNoMu120_IDTight_PFHT60_v*",
+          "HLT_MET105_IsoTrk50_v*",
+      ]
+   else:
+      #do not apply trigger filter on signal
+      process.HSCPTrigger.HLTPaths = ["*"]
+
+   process.HSCPTuplePath += process.nEventsBefSkim + process.HSCPTrigger
+
+########################################################################
+
+#Run the HSCP EDM-tuple Sequence on skimmed sample
+process.nEventsBefEDM   = cms.EDProducer("EventCountProducer")
+process.load("SUSYBSMAnalysis.HSCP.HSCParticleProducer_cff")
+process.HSCPTuplePath += process.nEventsBefEDM + process.HSCParticleProducerSeq
+
+########################################################################  
+# Only for MC samples, save skimmed genParticles
+
+if(options.SAMPLE=='isSignal' or options.SAMPLE=='isBckg'):
+   process.load("SimGeneral.HepPDTESSource.pythiapdt_cfi")
+   process.genParticlesSkimmed = cms.EDFilter("GenParticleSelector",
+        filter = cms.bool(False),
+        src = cms.InputTag("genParticles"),
+        cut = cms.string('pt > 5.0'),
+        stableOnly = cms.bool(True)
+   )
+
+   process.HSCPTuplePath += process.genParticlesSkimmed
+
+########################################################################
+
+#make the pool output
+process.Out = cms.OutputModule("PoolOutputModule",
+     outputCommands = cms.untracked.vstring(
+         "drop *",
+         "keep EventAux_*_*_*",
+         "keep LumiSummary_*_*_*",
+         "keep edmMergeableCounter_*_*_*",
+         "keep GenRunInfoProduct_*_*_*",
+         "keep GenEventInfoProduct_generator_*_*",
+         "keep *_genParticlesSkimmed_*_*",
+         "keep *_genParticlePlusGeant_*_*",
+         "keep *_offlinePrimaryVertices_*_*",
+         "keep recoTracks_generalTracks_*_*",
+         "keep recoTracks_standAloneMuons_*_*",
+         "keep recoTrackExtras_standAloneMuons_*_*",
+         "keep TrackingRecHitsOwned_standAloneMuons_*_*",
+         "keep recoTracks_globalMuons_*_*",
+         "keep recoTrackExtras_globalMuons_*_*",
+         "keep recoMuons_muons_*_*",
+         "keep recoMuonTimeExtraedmValueMap_muons_*_*",
+         "keep edmTriggerResults_TriggerResults_*_*",
+         "keep *_ak4PFJetsCHS__*",
+         "keep recoPFMETs_pfMet__*",
+         "keep *_HSCParticleProducer_*_*",
+         "keep *_HSCPIsolation*_*_*",
+         "keep *_dedxHitInfo*_*_*",
+         "keep triggerTriggerEvent_hltTriggerSummaryAOD_*_*",
+         "keep *_offlineBeamSpot_*_*",
+         "keep *_MuonSegmentProducer_*_*",
+         "keep *_g4SimHits_StoppedParticles*_*",
+         "keep PileupSummaryInfos_addPileupInfo_*_*",
+         "keep *_dt4DSegments__*",
+         "keep *_cscSegments__*",
+         "keep *_scalersRawToDigi_*_*",
+         "keep *_caloMet_*_*",
+    ),
+    fileName = cms.untracked.string(options.outputFile),
+    SelectEvents = cms.untracked.PSet(
+       SelectEvents = cms.vstring('*')
+    ),
+)
+
+if(options.SAMPLE=='isData' and len(options.LUMITOPROCESS)>0):
+   import FWCore.PythonUtilities.LumiList as LumiList
+   process.source.lumisToProcess = LumiList.LumiList(filename = options.LUMITOPROCESS).getVLuminosityBlockRange()
+   #process.source.lumisToProcess = LumiList.LumiList(url = https://cms-service-dqm.web.cern.ch/cms-service-dqm/CAF/certification/Collisions17/13TeV/ReReco/Cert_294927-306462_13TeV_EOY2017ReReco_Collisions17_JSON.txt).getVLuminosityBlockRange()
+
+if(options.SAMPLE=='isBckg' or options.SAMPLE=='isData'):
+   process.Out.SelectEvents.SelectEvents =  cms.vstring('HSCPTuplePath')  #take just the skimmed ones
+   process.Out.outputCommands.extend(["drop triggerTriggerEvent_hltTriggerSummaryAOD_*_*"])
+else:
+   process.Out.SelectEvents = cms.untracked.PSet()
+
+if options.SAMPLE=='isData' :
+   SampleType = 0
+   if options.YEAR=='2017' :
+       K = 2.30
+       C = 3.17
+       SF0 = 1.0
+       SF1 = 1.0325
+       IasTemplate = "template_2017C.root"
+
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.16
+       SF0 = 1.0
+       SF1 = 1.0817
+       IasTemplate = "template_2017C.root" #FIXME template 2018?
+    #HSCP_minPt = 55
+
+elif options.SAMPLE=='isBckg':
+   SampleType = 1
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+else :
+   SampleType = 2
+   if options.YEAR=='2017' :
+       K = 2.26
+       C = 3.22
+       SF0 = 1.0079
+       SF1 = 1.0875
+       IasTemplate = "templateMC.root"
+
+   if options.YEAR=='2018' :
+       K = 2.27
+       C = 3.22
+       SF0 = 1.0047
+       SF1 = 1.1429
+       IasTemplate = "templateMC.root"
+
+process.load("SUSYBSMAnalysis.Analyzer.HSCParticleAnalyzer_cff")
+### set your configirattion here (default: python/HSCParticleAnalyzer_cff.py)
+#process.analyzer.SampleTxtFile=options.sampleTxtFile
+process.analyzer.TypeMode = 0
+process.analyzer.SampleType = SampleType
+process.analyzer.SaveTree = 0 #6 is all saved, 0 is none
+process.analyzer.SaveGenTree = 0
+process.analyzer.DeDxTemplate=IasTemplate
+process.analyzer.TimeOffset="MuonTimeOffset.txt"
+process.analyzer.DebugLevel = 10 
+process.analyzer.Period = "2018"
+process.analyzer.DeDxK = K
+process.analyzer.DeDxC = C
+process.analyzer.DeDxSF_0 = SF0
+process.analyzer.DeDxSF_1 = SF1
+process.analyzer.GlobalMinIh = C
+
+process.TFileService = cms.Service("TFileService",
+                                       fileName = cms.string(options.outputFile)
+                                   )
+
+process.analysis = cms.Path(process.analyzer)
+
+process.load('Configuration.StandardSequences.EndOfProcess_cff')
+process.endjob_step = cms.EndPath(process.endOfProcess)
+
+process.HSCPTuplePath += process.analyzer
+
+########################################################################
+
+process.tsk = cms.Task()
+for mod in process.producers_().itervalues():
+    process.tsk.add(mod)
+for mod in process.filters_().itervalues():
+    process.tsk.add(mod)
+
+#schedule the sequence
+process.endPath1 = cms.EndPath(process.Out)
+process.schedule = cms.Schedule(process.HSCPTuplePath, process.endjob_step)
+
+
diff --git a/Analyzer/test/Tamas/Unused/haddWithWeight_woProbQ.py b/Analyzer/test/Tamas/Unused/haddWithWeight_woProbQ.py
new file mode 100644
index 0000000..54fab76
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/haddWithWeight_woProbQ.py
@@ -0,0 +1,111 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root",
+]
+
+#intLumi = 4598.37 #10.0 #
+intLumi = 2000.0
+
+crossSectionArray = [
+# QCD_Pt-20_MuEnrichedPt15_TuneCP5_13TeV-pythia8, 239000.0 +-	755.8
+# 2797000.0, #+-8800.0, 2018_QCD_Pt-15To20_MuEnrichedPt5
+# 2518000.0, #+-7940.0, 2018_QCD_Pt-20To30_MuEnrichedPt5
+# 1361000.0, #+-4263.0, 2018_QCD_Pt-30To50_MuEnrichedPt5
+ 377800.0, #+-1184.0, 2018_QCD_Pt-50To80_MuEnrichedPt5
+ 88620.0, #+-275.1, 2018_QCD_Pt-80To120_MuEnrichedPt5
+ 21070.0, #+-65.28, 2018_QCD_Pt-120To170_MuEnrichedPt5
+ 7019.0, #+-21.61, 2018_QCD_Pt-170To300_MuEnrichedPt5
+ 622.4, #+-1.891, 2018_QCD_Pt-300To470_MuEnrichedPt5
+ 58.86, #+-0.1776, 2018_QCD_Pt-470To600_MuEnrichedPt5
+ 18.22, #+-0.05471, 2018_QCD_Pt-600To800_MuEnrichedPt5
+ 3.25, #+-0.0148, 2018_QCD_Pt-600To800_MuEnrichedPt5
+ 1.61, #+-, 2018_QCD_Pt-1000_MuEnrichedPt5
+ 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
+ 377.96, # or 377.96, # or , TTtoHadronic or
+ 365.35, # or 65.34, TTtoSemiLeptonic or
+ 88.29, # or 687.1, TTto2L2N or 91.47600
+]
+
+## TTBar is 832 pb (NNLO)
+
+fileInArray = []
+for sample in BackgroundSamples:
+  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
+
+for index,fileIn in enumerate(fileInArray):
+  if not (fileIn.Get("analyzer/BaseName/NumEvents")):
+    continue
+  
+  nEvetsPreTrig = fileIn.Get("analyzer/BaseName/NumEvents").GetBinContent(1)
+  nEvetsPostTrig = fileIn.Get("analyzer/BaseName/NumEvents").GetBinContent(2)
+  if (nEvetsPreTrig == 0):
+    print("nEvetsPreTrig is zero, exiting")
+    continue
+  weight = intLumi*crossSectionArray[index]/nEvetsPreTrig
+  
+  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
+    dirname = fileIn.GetListOfKeys().At(i).GetName()
+    curr_dir = fileIn.GetDirectory(dirname)
+  # print("dirname: "+dirname)
+    if not (curr_dir) :
+      continue
+    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
+        keyname = curr_dir.GetListOfKeys().At(i).GetName()
+        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
+        if not (curr_dir2) :
+          continue
+        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
+          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
+          newname = dirname + "/" + keyname+ "/" + keyname2
+          obj = fileIn.Get(newname)
+          if (obj.GetEntries() == 0 ) :
+#            print("obj.GetEntries() == 0")
+            continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
+            continue
+          if obj.InheritsFrom("TObject"):
+            obj.Scale(weight)
+  fileIn.Write("",ROOT.TObject.kOverwrite)
+  fileIn.Close()
+
+os.system("hadd crab_Analysis_2018_AllBackground_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+os.system("hadd crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+os.system("hadd crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+os.system("cp crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_AllWJets_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
+
+os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
+os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_SingleMuon_Run2018_woProbQ_CodeV*"+codeVersion+"_v1.root .")
+os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV*"+codeVersion+"_v1.root .")
+os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-2400_woProbQ_CodeV*"+codeVersion+"_v1.root .")
+os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/Unused/haddWithWeight_woProbQ_nw.py b/Analyzer/test/Tamas/Unused/haddWithWeight_woProbQ_nw.py
new file mode 100644
index 0000000..5fcb029
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/haddWithWeight_woProbQ_nw.py
@@ -0,0 +1,96 @@
+import ROOT, sys, os, time, re, numpy
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+from tqdm import tqdm
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+ROOT.gROOT.SetBatch(True)
+ROOT.gStyle.SetPadRightMargin(.15)
+ROOT.gStyle.SetPadTopMargin(0.1);
+ROOT.gStyle.SetPadBottomMargin(0.14);
+ROOT.gStyle.SetPadLeftMargin(0.15);
+
+BackgroundSamples = [
+"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root",
+]
+
+
+if not os.path.exists("CodeV"+codeVersion+"_old"): os.mkdir("CodeV"+codeVersion+"_old")
+os.system("cp *"+codeVersion+"*root "+ "CodeV"+codeVersion+"_old/.")
+
+#this needs to be measured in pb
+intLumi = 4598.37 #137.0 #10.0 #
+
+#crossSections are measured in 1/pb
+crossSectionArray = [
+# QCD_Pt-20_MuEnrichedPt15_TuneCP5_13TeV-pythia8, 239000.0 +-	755.8
+# 2797000.0, #+-8800.0, 2018_QCD_Pt-15To20_MuEnrichedPt5
+# 2518000.0, #+-7940.0, 2018_QCD_Pt-20To30_MuEnrichedPt5
+# 1361000.0, #+-4263.0, 2018_QCD_Pt-30To50_MuEnrichedPt5
+ 3778000.0, #+-1184.0, 2018_QCD_Pt-50To80_MuEnrichedPt5
+ 886200.0, #+-275.1, 2018_QCD_Pt-80To120_MuEnrichedPt5
+ 210700.0, #+-65.28, 2018_QCD_Pt-120To170_MuEnrichedPt5
+ 70190.0, #+-21.61, 2018_QCD_Pt-170To300_MuEnrichedPt5
+ 6224.0, #+-1.891, 2018_QCD_Pt-300To470_MuEnrichedPt5
+ 588.6, #+-0.1776, 2018_QCD_Pt-470To600_MuEnrichedPt5
+ 182.2, #+-0.05471, 2018_QCD_Pt-600To800_MuEnrichedPt5
+ 32.5, #+-0.0148, 2018_QCD_Pt-600To800_MuEnrichedPt5
+ 16.1, #+-, 2018_QCD_Pt-1000_MuEnrichedPt5
+ 53330.0, #+-	61526.7, WJetsToLNu
+ 687.1, # or 377.96, # or , TTtoHadronic or 382.53600
+ 719.1, # or 65.34, TTtoSemiLeptonic or 365.90400
+ 88.29, # or 687.1, TTto2L2N or 91.47600
+]
+
+for sample,xsec in zip(BackgroundSamples,crossSectionArray):
+  fileIn = ROOT.TFile.Open(sample,"UPDATE")
+  print("fileIn ",fileIn)
+  fileIn.cd("analyzer/BaseName")
+  h = ROOT.gDirectory.Get("NumEvents").Clone()
+  nEventsPreTrig = h.GetBinContent(1)
+   
+  if (nEventsPreTrig == 0):
+    print("nEvetsPreTrig is zero, exiting")
+    continue
+  weight = intLumi*xsec/nEventsPreTrig
+  keys = ROOT.gDirectory.GetListOfKeys().Clone()
+  for k in tqdm(keys):
+#    print(k.GetName())
+    if ROOT.gDirectory.Get(k.GetName()) != None:
+      h = ROOT.gDirectory.Get(k.GetName()).Clone()
+#      if h.GetEntries()==0 : 
+##        print (k.GetName(), " has zero entries")
+#        continue
+      if k.GetName() != "HscpCandidates" and k.GetName() != "GenHscpCandidates":
+        h.Scale(weight)
+      h.Write("",ROOT.TObject.kOverwrite)
+#    else: print(k.GetName(), " is either a null pointer or not a histogram (likely the latter)")
+
+#os.system("hadd crab_Analysis_2018_AllBackground_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root")
+#
+#os.system("hadd crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root")
+
+#os.system("hadd crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root")
+#
+#os.system("mv crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_AllWJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root")
+#
+#if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
+#
+#os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
+#os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*_woProbQ_CodeV"+codeVersion+"_v1.root .")
+#os.system("mv CodeV"+codeVersion+"/crab_Analysis_SingleMuon_Run2018_woProbQ_CodeV"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnlyQCD170_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnlyQCD170_woProbQ.py
new file mode 100644
index 0000000..003bb83
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnlyQCD170_woProbQ.py
@@ -0,0 +1,75 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_woProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 800
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_woProbQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_woProbQ.py 4crab_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
+  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnlyQCD460to600_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnlyQCD460to600_woProbQ.py
new file mode 100644
index 0000000..5d1dd14
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnlyQCD460to600_woProbQ.py
@@ -0,0 +1,75 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_woProbQ_Debug.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 800
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_woProbQ_Debug.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_woProbQ_Debug.py 4crab_toSubmit_woProbQ_debug.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ_debug.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ_debug.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ_debug.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_woProbQ_debug.py")
+  os.system("mv 4crab_toSubmit_woProbQ_debug.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnly_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnly_woProbQ.py
new file mode 100644
index 0000000..32d606a
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnly_woProbQ.py
@@ -0,0 +1,90 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/QCD_Pt-50To80_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/QCD_Pt-80To120_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/QCD_Pt-120To170_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-600To800_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-800To1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/WJetsToLNu_1J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/WJetsToLNu_2J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_woProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 800
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_woProbQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_woProbQ.py 4crab_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
+  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnly_woProbQ_maxStat.py b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnly_woProbQ_maxStat.py
new file mode 100644
index 0000000..529e1cb
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundOnly_woProbQ_maxStat.py
@@ -0,0 +1,89 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+#"/QCD_Pt-50To80_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+#"/QCD_Pt-80To120_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+#"/QCD_Pt-120To170_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+#"/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+#"/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+#"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+#"/QCD_Pt-600To800_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+#"/QCD_Pt-800To1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+#"/QCD_Pt-1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/WJetsToLNu_1J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/WJetsToLNu_2J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+#"/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+#"/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+#"/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+#"/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_woProbQ_maxStat.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+#config.Data.totalUnits = config.Data.unitsPerJob * 2000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_woProbQ_maxStat.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_woProbQ_maxStat.py 4crab_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
+  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundQCDOnly_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundQCDOnly_woProbQ.py
new file mode 100644
index 0000000..39b2648
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundQCDOnly_woProbQ.py
@@ -0,0 +1,80 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/QCD_Pt-50To80_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/QCD_Pt-80To120_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/QCD_Pt-120To170_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-600To800_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-800To1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/QCD_Pt-1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_woProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+#config.Data.totalUnits = config.Data.unitsPerJob * 800
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.blacklist = ['T2_US_Nebraska']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_woProbQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_woProbQ.py 4crab_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
+  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundTTbarOnly_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundTTbarOnly_woProbQ.py
new file mode 100644
index 0000000..bf02641
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundTTbarOnly_woProbQ.py
@@ -0,0 +1,74 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_TTbar_woProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 800
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.blacklist = ['T2_US_Nebraska']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_TTbar_woProbQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_TTbar_woProbQ.py 4crab_toSubmit_TTbar_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_TTbar_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_TTbar_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_TTbar_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_TTbar_woProbQ.py")
+  os.system("mv 4crab_toSubmit_TTbar_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundWJetsOnly_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundWJetsOnly_woProbQ.py
new file mode 100644
index 0000000..6acc9a8
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsBackgroundWJetsOnly_woProbQ.py
@@ -0,0 +1,74 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/WJetsToLNu_1J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/WJetsToLNu_2J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+#"/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_woProbQ_maxStat.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+#config.Data.totalUnits = config.Data.unitsPerJob * 2000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.blacklist = ['T2_US_Nebraska']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_woProbQ_maxStat.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_woProbQ_maxStat.py 4crab_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
+  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ.py
new file mode 100644
index 0000000..71ef613
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ.py
@@ -0,0 +1,74 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+#"/SingleMuon/Run2017C-09Aug2019_UL2017-v1/AOD",
+#"/MET/Run2017C-09Aug2019_UL2017_rsb-v1/AOD",
+#"/SingleMuon/Run2018A-15Feb2022_UL2018-v1/AOD",
+#"/SingleMuon/Run2018B-15Feb2022_UL2018-v1/AOD",
+"/SingleMuon/Run2018C-15Feb2022_UL2018-v1/AOD",
+#"/SingleMuon/Run2018D-15Feb2022_UL2018-v1/AOD",
+#"/MET/Run2018C-15Feb2022_UL2018-v1/AOD",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_Data.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+config.Data.splitting = 'LumiBased'
+config.Data.unitsPerJob = 50
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.blacklist = ['T2_US_Nebraska']
+config.Site.storageSite = 'T2_HU_Budapest'
+#config.Site.storageSite = 'T3_US_FNALLPC'
+  '''
+
+  with open("4crab_Template_Data.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_Data.py 4crab_toSubmit_Data.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_Data.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('-'))].replace("/","_")
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_Data.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_Data.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_Data.py")
+
+  os.system("mv 4crab_toSubmit_Data.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ_2018A.py b/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ_2018A.py
new file mode 100644
index 0000000..cc15000
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ_2018A.py
@@ -0,0 +1,72 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/SingleMuon/Run2018A-15Feb2022_UL2018-v1/AOD",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_Data_woProbQ_2018A.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+config.Data.splitting = 'LumiBased'
+config.Data.unitsPerJob = 50
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '315257-316380'
+#config.Data.lumiMask 
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Template_Data_woProbQ_2018A.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_Data_woProbQ_2018A.py 4crab_toSubmit_Data_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_Data_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('-'))].replace("/","_")
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_Data_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_Data_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_Data_woProbQ.py")
+
+  os.system("mv 4crab_toSubmit_Data_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ_2018D.py b/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ_2018D.py
new file mode 100644
index 0000000..4272983
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsData_woProbQ_2018D.py
@@ -0,0 +1,73 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/SingleMuon/Run2018D-15Feb2022_UL2018-v1/AOD",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Template_Data_woProbQ_2018D.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+config.Data.splitting = 'LumiBased'
+config.Data.unitsPerJob = 50
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '320500-321436'
+#config.Data.lumiMask = ?
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+#config.Site.storageSite = 'T3_US_FNALLPC'
+  '''
+
+  with open("4crab_Template_Data_woProbQ_2018D.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Template_Data_woProbQ_2018D.py 4crab_toSubmit_Data_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_Data_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('-'))].replace("/","_")
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_Data_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_Data_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_toSubmit_Data_woProbQ.py")
+
+  os.system("mv 4crab_toSubmit_Data_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsSignalGluinoOnly1800_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsSignalGluinoOnly1800_woProbQ.py
new file mode 100644
index 0000000..2c6a73a
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsSignalGluinoOnly1800_woProbQ.py
@@ -0,0 +1,72 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+#"/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3-0bfbad649d32c05924b5bfd4b5874292/USER",
+#"/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_NoRew_v1-e88ed05559facf15902f2fe2f6141103/USER",
+"/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_NoRewGT_v1-a007e86beae864f0107e60af996b4558/USER"
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_MySignal_Template_woProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_MyHSCPgluino_M_1800_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.transferLogs = True
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDBS = 'phys03'
+config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3-0bfbad649d32c05924b5bfd4b5874292/USER'
+config.Data.splitting = 'LumiBased'
+#config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+#config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_MySignal_Template_woProbQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_MySignal_Template_woProbQ.py 4crab_MySignal_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_MySignal_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  os.system("crab submit -c 4crab_MySignal_toSubmit_woProbQ.py")
+  os.system("mv 4crab_MySignal_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsSignalGluinoOnly_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsSignalGluinoOnly_woProbQ.py
new file mode 100644
index 0000000..7af02d7
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsSignalGluinoOnly_woProbQ.py
@@ -0,0 +1,83 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/HSCPgluino_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Signal_Template_woProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.instance = 'preprod'
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Signal_Template_wPorobQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Signal_Template_woProbQ.py 4crab_Signal_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_Signal_toSubmit_woProbQ.py")
+  os.system("mv 4crab_Signal_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsSignalStauOnly1599_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsSignalStauOnly1599_woProbQ.py
new file mode 100644
index 0000000..55c8dc0
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsSignalStauOnly1599_woProbQ.py
@@ -0,0 +1,76 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/HSCPpairStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Signal_Template_woProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.instance = 'preprod'
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Signal_Template_woProbQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Signal_Template_woProbQ.py 4crab_Signal_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_Signal_toSubmit_woProbQ.py")
+  os.system("mv 4crab_Signal_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsSignals_woProbQ.py b/Analyzer/test/Tamas/Unused/submitCrabJobsSignals_woProbQ.py
new file mode 100644
index 0000000..0600bb8
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsSignals_woProbQ.py
@@ -0,0 +1,173 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/HSCPgluinoOnlyNeutral_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-1029_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-1218_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-1409_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-247_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-308_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-432_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-557_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-651_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-745_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-871_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1029_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1218_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1409_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-247_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-308_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-432_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-557_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-651_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-745_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-871_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge2e_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge2e_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Signal_Template_woProbQ.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.instance = 'preprod'
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+config.Data.runRange = '0'
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Signal_Template_woProbQ.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Signal_Template_woProbQ.py 4crab_Signal_toSubmit_woProbQ.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit_woProbQ.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_Signal_toSubmit_woProbQ.py")
+  os.system("mv 4crab_Signal_toSubmit_woProbQ.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/Unused/submitCrabJobsSignals_woProbQ_TAPERECAL.py b/Analyzer/test/Tamas/Unused/submitCrabJobsSignals_woProbQ_TAPERECAL.py
new file mode 100644
index 0000000..9c48375
--- /dev/null
+++ b/Analyzer/test/Tamas/Unused/submitCrabJobsSignals_woProbQ_TAPERECAL.py
@@ -0,0 +1,172 @@
+import sys, os, time, re
+import numpy as np
+#from common_functions import *
+from optparse import OptionParser
+parser = OptionParser(usage="Usage: python %prog codeVersion")
+(opt,args) = parser.parse_args()
+
+datasetList = [
+"/HSCPgluinoOnlyNeutral_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluinoOnlyNeutral_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgluino_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-1029_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-1218_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-1409_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-247_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-308_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-432_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-557_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-651_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-745_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPgmsbStau_M-871_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1029_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1218_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1409_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-247_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-308_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-432_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-557_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-651_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-745_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPpairStau_M-871_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstopOnlyNeutral_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPstop_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge1e_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge1e_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge2e_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
+"/HSCPtauPrimeCharge2e_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+"/HSCPtauPrimeCharge2e_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
+]
+
+codeVersion = sys.argv[1]
+#just the number, like 18p2
+
+didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
+if(didVoms):
+ sys.exit()
+
+if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
+
+if not os.path.exists("4crab_Signal_Template_woProbQ_TAPERECALL.py"):
+  TEMPLATE = '''
+from CRABClient.UserUtilities import config
+config = config()
+
+config.section_('General')
+config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
+config.General.workArea = 'crab_projects'
+config.General.transferOutputs = True
+config.General.instance = 'preprod'
+
+config.section_('JobType')
+config.JobType.pluginName = 'Analysis'
+config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
+config.JobType.allowUndistributedCMSSW = True
+#config.JobType.maxJobRuntimeMin = 3000
+config.JobType.maxMemoryMB = 3500
+config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
+
+config.section_('Data')
+config.Data.inputDataset = 'MINTA'
+#config.Data.inputDBS = 'phys03'
+#config.Data.splitting = 'Automatic'
+config.Data.splitting = 'LumiBased'
+    #config.Data.unitsPerJob = 1 #20
+#config.Data.splitting = 'FileBased'
+config.Data.unitsPerJob = 50
+config.Data.totalUnits = config.Data.unitsPerJob * 1000
+config.Data.publication = True
+config.Data.outputDatasetTag = config.General.requestName
+config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
+config.Data.ignoreLocality = True
+
+config.section_('Site')
+config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
+config.Site.storageSite = 'T2_HU_Budapest'
+  '''
+
+  with open("4crab_Signal_Template_woProbQ_TAPERECALL.py", "w") as text_file:
+      text_file.write(TEMPLATE)
+
+for i in datasetList:
+  print("Submit for sample "+i)
+  os.system("cp 4crab_Signal_Template_woProbQ_TAPERECALL.py 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py"
+  os.system(replaceVERZIO)
+  shortSampleName = i[1:(i.find('TuneCP5'))-1]
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py"
+  os.system(replaceROVIDMINTA)
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py"
+  os.system(replaceMINTA)
+  os.system("crab submit -c 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py")
+  os.system("mv 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py submittedConfigs/.")
+
+
diff --git a/Analyzer/test/Tamas/calculateGiSyst.py b/Analyzer/test/Tamas/calculateGiSyst.py
deleted file mode 100644
index 89067d1..0000000
--- a/Analyzer/test/Tamas/calculateGiSyst.py
+++ /dev/null
@@ -1,117 +0,0 @@
-import ROOT
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-ROOT.gStyle.SetPadTopMargin(0.07);
-ROOT.gStyle.SetPadBottomMargin(0.1);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-ROOT.gStyle.SetPadRightMargin(0.13);
-
-
-can = ROOT.TCanvas("newname","newname",800,800)
-can.SetLogy()
-fileName = "crab_Analysis_2018_AllBackground_CodeV42p6_v1.root"
-mc = ROOT.TFile.Open(fileName)
-data = ROOT.TFile.Open("crab_Analysis_SingleMuon_RunPhase1_CodeV42p6_v1.root")
-Gi_MC = mc.Get("HSCParticleAnalyzer/BaseName/PostPreS_Ias_CR_lowPt")
-Gi_Data = data.Get("HSCParticleAnalyzer/BaseName/PostPreS_Ias_CR_lowPt")
-
-Gi_MC.SetStats(0)
-Gi_MC.SetMarkerColor(1)
-Gi_MC.SetLineColor(1)
-Gi_MC.SetMarkerStyle(20)
-Gi_MC.Scale(1/Gi_MC.Integral())
-Gi_MC.GetYaxis().SetTitle("Normalized Tracks / 0.1")
-#Gi_MC.GetYaxis().SetTitleOffset(1.5)
-Gi_MC.Draw()
-
-Gi_Data.SetStats(0)
-Gi_Data.SetMarkerStyle(20)
-Gi_Data.SetMarkerColor(2)
-Gi_Data.SetLineColor(2)
-Gi_Data.Scale(1/Gi_Data.Integral())
-Gi_Data.Draw()
-
-legIasForCR =  ROOT.TLegend(.60,.80,.80,.90,"","brNDC")
-legIasForCR.SetTextFont(42)
-legIasForCR.SetTextSize(0.035)
-legIasForCR.SetBorderSize(1);
-legIasForCR.SetLineColor(0);
-legIasForCR.SetLineStyle(1);
-legIasForCR.SetLineWidth(1);
-legIasForCR.SetFillColor(0);
-legIasForCR.SetFillStyle(1001);
-legIasForCR.AddEntry(Gi_Data,"Data CR","LP")
-legIasForCR.AddEntry(Gi_MC,"SM MC CR","LP")
-
-tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-tex2.SetNDC();
-tex2.SetTextFont(61);
-tex2.SetTextSize(0.0675);
-tex2.SetLineWidth(2);
-
-tex3 = ROOT.TLatex(0.27,0.94,"Internal");
-tex3.SetNDC();
-tex3.SetTextFont(52);
-tex3.SetTextSize(0.0485);
-tex3.SetLineWidth(2);
-
-tex4 = ROOT.TLatex()
-tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
-tex4.SetNDC();
-tex4.SetTextFont(52);
-tex4.SetTextSize(0.045);
-tex4.SetLineWidth(2);
-
-codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
-fileVersion = fileName[fileName.find("2018")+5:fileName.find("CodeV")+9]
-tex5 = ROOT.TLatex(0.07,0.03,fileVersion);
-tex5.SetNDC();
-tex5.SetTextFont(52);
-tex5.SetTextSize(0.0185);
-tex5.SetLineWidth(2);
-
-
-rp2 = ROOT.TRatioPlot(Gi_Data,Gi_MC,"divsym") #, "diffsigerrasym"
- 
-rp2.SetH1DrawOpt("P");
-rp2.SetH2DrawOpt("P");
-
-rp2.Draw("SAME")
-
-
-rp2.SetLeftMargin(0.13);
-rp2.SetRightMargin(0.05);
-rp2.SetUpTopMargin(0.1);
-rp2.SetLowTopMargin(0.02);
-rp2.SetLowBottomMargin(0.35);
-
-
-rp2.GetLowerRefGraph().SetMinimum(0)
-rp2.GetLowerRefGraph().SetMaximum(1.05);
-rp2.GetLowerRefGraph().SetMarkerStyle(20)
-rp2.GetLowerRefGraph().SetMarkerSize(1);
-rp2.GetLowYaxis().SetNdivisions(510);
-rp2.GetLowerRefYaxis().SetTitle("Ratio");
-rp2.GetLowerRefYaxis().SetTitleSize(0.05);
-rp2.GetLowerRefYaxis().SetTitleOffset(1);
-rp2.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-rp2.GetLowerRefXaxis().SetTitleSize(0.05);
-rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
-rp2.GetLowerRefXaxis().SetLabelSize(0.035);
-
-can.Update()
-
-
-legIasForCR.Draw("SAME")
-tex2.Draw("SAME")
-tex3.Draw("SAME")
-tex4.Draw("SAME")
-tex5.Draw("SAME")
-can.SaveAs("GiSysts_DataOverMC_Norm.png")
-
diff --git a/Analyzer/test/Tamas/calculateTrigSyst.py b/Analyzer/test/Tamas/calculateTrigSyst.py
deleted file mode 100644
index 334e4a8..0000000
--- a/Analyzer/test/Tamas/calculateTrigSyst.py
+++ /dev/null
@@ -1,201 +0,0 @@
-import ROOT
-
-ROOT.gStyle.SetPaintTextFormat(".2g");
-
-can = ROOT.TCanvas("newname","newname",800,800)
-f = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-All_CodeV42p6_v1.root")
-EtaA_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA")
-EtaA_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaUp")
-EtaA_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaA_BetaDown")
-EtaB_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB")
-EtaB_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaUp")
-EtaB_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaB_BetaDown")
-EtaC_Nom = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC")
-EtaC_UP = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaUp")
-EtaC_DOWN = f.Get("HSCParticleAnalyzer/BaseName/PostPreS_TriggerMuon50VsBeta_EtaC_BetaDown")
-
-EtaA_Nom_ProfY = EtaA_Nom.RebinY(2).ProfileY().ProjectionX()
-EtaA_UP_ProfY = EtaA_UP.RebinY(2).ProfileY().ProjectionX()
-EtaA_DOWN_ProfY = EtaA_DOWN.RebinY(2).ProfileY().ProjectionX()
-EtaB_Nom_ProfY = EtaB_Nom.RebinY(2).ProfileY().ProjectionX()
-EtaB_UP_ProfY = EtaB_UP.RebinY(2).ProfileY().ProjectionX()
-EtaB_DOWN_ProfY = EtaB_DOWN.RebinY(2).ProfileY().ProjectionX()
-EtaC_Nom_ProfY = EtaC_Nom.RebinY(2).ProfileY().ProjectionX()
-EtaC_UP_ProfY = EtaC_UP.RebinY(2).ProfileY().ProjectionX()
-EtaC_DOWN_ProfY = EtaC_DOWN.RebinY(2).ProfileY().ProjectionX()
-
-# --------------------------------------------------
-EtaA_UpRatio = EtaA_UP_ProfY.Clone()
-EtaA_UpRatio.Divide(EtaA_Nom_ProfY)
-
-EtaA_DownRatio = EtaA_DOWN_ProfY.Clone()
-EtaA_DownRatio.Divide(EtaA_Nom_ProfY)
-
-EtaA_UpRatio.Draw("COLZTEXT40")
-EtaA_UpRatio.SetMarkerColor(2)
-EtaA_UpRatio.SetMarkerStyle(20)
-EtaA_UpRatio.SetStats(0)
-EtaA_UpRatio.SetLineColor(2)
-EtaA_UpRatio.GetYaxis().SetTitle("Ratio")
-EtaA_DownRatio.Draw("SAMETEXT40")
-EtaA_DownRatio.SetMarkerStyle(20)
-EtaA_DownRatio.SetMarkerColor(3)
-EtaA_DownRatio.SetLineColor(3)
-legRatiosSyst_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
-legRatiosSyst_EtaA.SetTextFont(42)
-legRatiosSyst_EtaA.SetTextSize(0.035)
-legRatiosSyst_EtaA.SetBorderSize(1);
-legRatiosSyst_EtaA.SetLineColor(0);
-legRatiosSyst_EtaA.SetLineStyle(1);
-legRatiosSyst_EtaA.SetLineWidth(1);
-legRatiosSyst_EtaA.SetFillColor(0);
-legRatiosSyst_EtaA.SetFillStyle(1001);
-legRatiosSyst_EtaA.AddEntry(EtaA_UpRatio,"Up systematics / nominal","LP")
-legRatiosSyst_EtaA.AddEntry(EtaA_DownRatio,"Down systematics / nominal","LP")
-legRatiosSyst_EtaA.Draw("SAME")
-can.SaveAs("TriggerEff_RatiosSyst_EtaA.png")
-
-EtaA_Nom_ProfY.Draw("COLZ")
-EtaA_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
-EtaA_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
-EtaA_UP_ProfY.Draw("SAME")
-EtaA_UP_ProfY.SetLineColor(2)
-EtaA_DOWN_ProfY.Draw("SAME")
-EtaA_DOWN_ProfY.SetLineColor(3)
-EtaA_Nom_ProfY.SetStats(0)
-legTriggerEff_EtaA =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
-legTriggerEff_EtaA.SetTextFont(42)
-legTriggerEff_EtaA.SetTextSize(0.035)
-legTriggerEff_EtaA.SetBorderSize(1);
-legTriggerEff_EtaA.SetLineColor(0);
-legTriggerEff_EtaA.SetLineStyle(1);
-legTriggerEff_EtaA.SetLineWidth(1);
-legTriggerEff_EtaA.SetFillColor(0);
-legTriggerEff_EtaA.SetFillStyle(1001);
-legTriggerEff_EtaA.AddEntry(EtaA_Nom_ProfY,"Nominal","LP")
-legTriggerEff_EtaA.AddEntry(EtaA_UP_ProfY,"Up systematics","LP")
-legTriggerEff_EtaA.AddEntry(EtaA_DOWN_ProfY,"Down systematics","LP")
-legTriggerEff_EtaA.Draw("SAME")
-can.SaveAs("TriggerEff_Syst_EtaA.png")
-
-can.Clear()
-
-# --------------------------------------------------
-EtaB_UpRatio = EtaB_UP_ProfY.Clone()
-EtaB_UpRatio.Divide(EtaB_Nom_ProfY)
-
-EtaB_DownRatio = EtaB_DOWN_ProfY.Clone()
-EtaB_DownRatio.Divide(EtaB_Nom_ProfY)
-
-EtaB_UpRatio.Draw("COLZTEXT40")
-EtaB_UpRatio.SetMarkerColor(2)
-EtaB_UpRatio.SetMarkerStyle(20)
-EtaB_UpRatio.SetStats(0)
-EtaB_UpRatio.SetLineColor(2)
-EtaB_UpRatio.GetYaxis().SetTitle("Ratio")
-EtaB_DownRatio.Draw("SAMETEXT40")
-EtaB_DownRatio.SetMarkerStyle(20)
-EtaB_DownRatio.SetMarkerColor(3)
-EtaB_DownRatio.SetLineColor(3)
-legRatiosSyst_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
-legRatiosSyst_EtaB.SetTextFont(42)
-legRatiosSyst_EtaB.SetTextSize(0.035)
-legRatiosSyst_EtaB.SetBorderSize(1);
-legRatiosSyst_EtaB.SetLineColor(0);
-legRatiosSyst_EtaB.SetLineStyle(1);
-legRatiosSyst_EtaB.SetLineWidth(1);
-legRatiosSyst_EtaB.SetFillColor(0);
-legRatiosSyst_EtaB.SetFillStyle(1001);
-legRatiosSyst_EtaB.AddEntry(EtaB_UpRatio,"Up systematics / nominal","LP")
-legRatiosSyst_EtaB.AddEntry(EtaB_DownRatio,"Down systematics / nominal","LP")
-legRatiosSyst_EtaB.Draw("SAME")
-can.SaveAs("TriggerEff_RatiosSyst_EtaB.png")
-#print("EtaB_DownRatio content:")
-#for xBin in range(1,EtaB_DownRatio.GetNbinsX()+1) :
-  #"" + str(round(EtaB_UpRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
-#  print(str(round(EtaB_DownRatio.GetBinContent(xBin),2))+",")
-
-EtaB_Nom_ProfY.Draw("COLZ")
-EtaB_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
-EtaB_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
-EtaB_UP_ProfY.Draw("SAME")
-EtaB_UP_ProfY.SetLineColor(2)
-EtaB_DOWN_ProfY.Draw("SAME")
-EtaB_DOWN_ProfY.SetLineColor(3)
-EtaB_Nom_ProfY.SetStats(0)
-legTriggerEff_EtaB =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
-legTriggerEff_EtaB.SetTextFont(42)
-legTriggerEff_EtaB.SetTextSize(0.035)
-legTriggerEff_EtaB.SetBorderSize(1);
-legTriggerEff_EtaB.SetLineColor(0);
-legTriggerEff_EtaB.SetLineStyle(1);
-legTriggerEff_EtaB.SetLineWidth(1);
-legTriggerEff_EtaB.SetFillColor(0);
-legTriggerEff_EtaB.SetFillStyle(1001);
-legTriggerEff_EtaB.AddEntry(EtaB_Nom_ProfY,"Nominal","LP")
-legTriggerEff_EtaB.AddEntry(EtaB_UP_ProfY,"Up systematics","LP")
-legTriggerEff_EtaB.AddEntry(EtaB_DOWN_ProfY,"Down systematics","LP")
-legTriggerEff_EtaB.Draw("SAME")
-can.SaveAs("TriggerEff_Syst_EtaB.png")
-
-can.Clear()
-
-# --------------------------------------------------
-EtaC_UpRatio = EtaC_UP_ProfY.Clone()
-EtaC_UpRatio.Divide(EtaC_Nom_ProfY)
-
-EtaC_DownRatio = EtaC_DOWN_ProfY.Clone()
-EtaC_DownRatio.Divide(EtaC_Nom_ProfY)
-
-EtaC_UpRatio.Draw("COLZTEXT40")
-EtaC_UpRatio.SetMarkerColor(2)
-EtaC_UpRatio.SetMarkerStyle(20)
-EtaC_UpRatio.SetStats(0)
-EtaC_UpRatio.SetLineColor(2)
-EtaC_UpRatio.GetYaxis().SetTitle("Ratio")
-EtaC_DownRatio.Draw("SAMETEXT40")
-EtaC_DownRatio.SetMarkerStyle(20)
-EtaC_DownRatio.SetMarkerColor(3)
-EtaC_DownRatio.SetLineColor(3)
-legRatiosSyst_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
-legRatiosSyst_EtaC.SetTextFont(42)
-legRatiosSyst_EtaC.SetTextSize(0.035)
-legRatiosSyst_EtaC.SetBorderSize(1);
-legRatiosSyst_EtaC.SetLineColor(0);
-legRatiosSyst_EtaC.SetLineStyle(1);
-legRatiosSyst_EtaC.SetLineWidth(1);
-legRatiosSyst_EtaC.SetFillColor(0);
-legRatiosSyst_EtaC.SetFillStyle(1001);
-legRatiosSyst_EtaC.AddEntry(EtaC_UpRatio,"Up systematics / nominal","LP")
-legRatiosSyst_EtaC.AddEntry(EtaC_DownRatio,"Down systematics / nominal","LP")
-legRatiosSyst_EtaC.Draw("SAME")
-can.SaveAs("TriggerEff_RatiosSyst_EtaC.png")
-#print("EtaC_DownRatio content:")
-#for xBin in range(1,EtaC_DownRatio.GetNbinsX()+1) :
-  #"" + str(round(EtaC_DownRatio.GetXaxis().GetBinUpEdge(xBin),2)) +
-#  print(str(round(EtaC_DownRatio.GetBinContent(xBin),2))+",")
-
-EtaC_Nom_ProfY.Draw("COLZ")
-EtaC_Nom_ProfY.GetYaxis().SetRangeUser(0.,1.)
-EtaC_Nom_ProfY.GetYaxis().SetTitle("Trigger efficiency")
-EtaC_UP_ProfY.Draw("SAME")
-EtaC_UP_ProfY.SetLineColor(2)
-EtaC_DOWN_ProfY.Draw("SAME")
-EtaC_DOWN_ProfY.SetLineColor(3)
-EtaC_Nom_ProfY.SetStats(0)
-legTriggerEff_EtaC =  ROOT.TLegend(.30,.80,.80,.885,"","brNDC")
-legTriggerEff_EtaC.SetTextFont(42)
-legTriggerEff_EtaC.SetTextSize(0.035)
-legTriggerEff_EtaC.SetBorderSize(1);
-legTriggerEff_EtaC.SetLineColor(0);
-legTriggerEff_EtaC.SetLineStyle(1);
-legTriggerEff_EtaC.SetLineWidth(1);
-legTriggerEff_EtaC.SetFillColor(0);
-legTriggerEff_EtaC.SetFillStyle(1001);
-legTriggerEff_EtaC.AddEntry(EtaC_Nom_ProfY,"Nominal","LP")
-legTriggerEff_EtaC.AddEntry(EtaC_UP_ProfY,"Up systematics","LP")
-legTriggerEff_EtaC.AddEntry(EtaC_DOWN_ProfY,"Down systematics","LP")
-legTriggerEff_EtaC.Draw("SAME")
-can.SaveAs("TriggerEff_Syst_EtaC.png")
-
-can.Clear()
diff --git a/Analyzer/test/Tamas/compAndRun.sh b/Analyzer/test/Tamas/compAndRun.sh
deleted file mode 100644
index 731357f..0000000
--- a/Analyzer/test/Tamas/compAndRun.sh
+++ /dev/null
@@ -1,3 +0,0 @@
-scram b -j
-#cmsRun HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg_SingleEvent.py
-cmsRun HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py
diff --git a/Analyzer/test/Tamas/compareHSCP.py b/Analyzer/test/Tamas/compareHSCP.py
deleted file mode 100644
index 9eb0739..0000000
--- a/Analyzer/test/Tamas/compareHSCP.py
+++ /dev/null
@@ -1,410 +0,0 @@
-import ROOT, sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-
-f1 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_100_CodeV17_v1.root")
-f2 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_200_CodeV17_v1.root")
-f3 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_400_CodeV17_v1.root")
-f4 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_500_CodeV17_v1.root")
-f5 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_800_CodeV17_v1.root")
-f6 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1000_CodeV17_v1.root")
-f7 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1400_CodeV17_v1.root")
-f8 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1800_CodeV17_v1.root")
-f9 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2000_CodeV17_v1.root")
-f10 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2200_CodeV17_v1.root")
-f11 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2400_CodeV17_v1.root")
-f12 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2600_CodeV17_v1.root")
-
-fileOut = open("BetaGammaValuesMPV.txt", "a")
-
-dirs = []
-for i in range(0, f1.GetListOfKeys().GetEntries()):
-  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
-  dirname = f1.GetListOfKeys().At(i).GetName()
-  curr_dir = f1.GetDirectory(dirname)
-# print("dirname: "+dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      # Match the plot of interest
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = f1.GetDirectory(dirname+"/"+keyname)
-#                    print("keyname: "+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          # The plot should be TCanvas
-          newname = dirname + "/" + keyname+ "/" + keyname2
-#         print("newname: "+newname)
-          obj1 = f1.Get(newname)
-          obj2 = f2.Get(newname)
-          obj3 = f3.Get(newname)
-          obj4 = f4.Get(newname)
-          obj5 = f5.Get(newname)
-          obj6 = f6.Get(newname)
-          obj7 = f7.Get(newname)
-          obj8 = f8.Get(newname)
-          obj9 = f9.Get(newname)
-          obj10 = f10.Get(newname)
-          obj11 = f11.Get(newname)
-          obj12 = f12.Get(newname)
-          if obj1.InheritsFrom("TObject"):
-              can = obj1
-              can = ROOT.TCanvas(newname)
-              # bin 3: pt>60 and I_as > 0.05
-              # bin 25: pt>65 and I_as > 0.175
-              # bin 28: pt>65 and I_as > 0.3
-              name = "CompareHSCP/" + keyname2 +  ".png"
-#                 print(name)
-              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-              if not (obj1.ClassName() == "TH1F"):
-                  continue
-              if ("BS_" in keyname2 or keyname2 == "genlevelbeta") :
-#                  can.SetLogy()
-                  obj1.SetMarkerColor(1)
-                  obj2.SetMarkerColor(2)
-                  obj3.SetMarkerColor(3)
-                  obj4.SetMarkerColor(4)
-                  obj5.SetMarkerColor(5)
-                  obj6.SetMarkerColor(6)
-                  obj7.SetMarkerColor(7)
-                  obj8.SetMarkerColor(8)
-                  obj9.SetMarkerColor(9)
-                  obj10.SetMarkerColor(10)
-                  obj11.SetMarkerColor(11)
-                  obj12.SetMarkerColor(12)
-                  
-                  obj1.SetLineColor(1)
-                  obj2.SetLineColor(2)
-                  obj3.SetLineColor(3)
-                  obj4.SetLineColor(4)
-                  obj5.SetLineColor(5)
-                  obj6.SetLineColor(6)
-                  obj7.SetLineColor(7)
-                  obj8.SetLineColor(8)
-                  obj9.SetLineColor(9)
-                  obj10.SetLineColor(10)
-                  obj11.SetLineColor(11)
-                  obj12.SetLineColor(12)
-                  
-                  
-                  obj1.SetMarkerStyle(20)
-                  obj2.SetMarkerStyle(20)
-                  obj3.SetMarkerStyle(20)
-                  obj4.SetMarkerStyle(20)
-                  obj5.SetMarkerStyle(20)
-                  obj6.SetMarkerStyle(20)
-                  obj7.SetMarkerStyle(20)
-                  obj8.SetMarkerStyle(20)
-                  obj9.SetMarkerStyle(20)
-                  obj10.SetMarkerStyle(20)
-                  obj11.SetMarkerStyle(20)
-                  obj12.SetMarkerStyle(20)
-                  
-#                  obj1.SetTitle("")
-#                  obj1.GetXaxis().SetTitleSize(0.05)
-#                  obj1.GetXaxis().SetTitleOffset(1)
-#                  obj1.GetYaxis().SetTitleSize(0.05)
-#                  obj1.GetYaxis().SetTitleOffset(1)
-                  obj12.SetStats(0)
-                  max = np.maximum(obj12.GetMaximum(), obj1.GetMaximum())
-                  obj12.SetMaximum(max*1.5)
-                  
-                  legMass =  ROOT.TLegend(.15,.55,.40,.9,"","brNDC")
-                  legMass.SetTextFont(42)
-                  legMass.SetTextSize(0.035)
-                  legMass.SetBorderSize(1);
-                  legMass.SetLineColor(1);
-                  legMass.SetLineStyle(1);
-                  legMass.SetLineWidth(1);
-                  legMass.SetFillColor(0);
-                  legMass.SetFillStyle(1001);
-                  legMass.AddEntry(obj12,"Mass=2600 GeV","LP")
-                  legMass.AddEntry(obj11,"Mass=2400 GeV","LP")
-                  legMass.AddEntry(obj10,"Mass=2200 GeV","LP")
-                  legMass.AddEntry(obj9,"Mass=2000 GeV","LP")
-                  legMass.AddEntry(obj8,"Mass=1800 GeV","LP")
-                  legMass.AddEntry(obj7,"Mass=1400 GeV","LP")
-                  legMass.AddEntry(obj6,"Mass=1000 GeV","LP")
-                  legMass.AddEntry(obj5,"Mass=800 GeV","LP")
-                  legMass.AddEntry(obj4,"Mass=500 GeV","LP")
-                  legMass.AddEntry(obj3,"Mass=400 GeV","LP")
-                  legMass.AddEntry(obj2,"Mass=200 GeV","LP")
-                  legMass.AddEntry(obj1,"Mass=100 GeV","LP")
-                  
-                  
-                  obj12.Draw("COLZ L")
-                  obj11.Draw("SAME")
-                  obj10.Draw("SAME")
-                  obj9.Draw("SAME")
-                  obj8.Draw("SAME")
-                  obj7.Draw("SAME")
-                  obj6.Draw("SAME")
-                  obj5.Draw("SAME")
-                  obj4.Draw("SAME")
-                  obj3.Draw("SAME")
-                  obj2.Draw("SAME")
-                  obj1.Draw("SAME")
-                  
-                  legMass.Draw("SAME")
-              else :
-                  continue
-              can.SaveAs(name)
-              if (keyname2 == "genlevelbeta") :
-                  meanValue1 = obj1.GetMean()
-                  meanValue2 = obj2.GetMean()
-                  meanValue3 = obj3.GetMean()
-                  meanValue4 = obj4.GetMean()
-                  meanValue5 = obj5.GetMean()
-                  meanValue6 = obj6.GetMean()
-                  meanValue7 = obj7.GetMean()
-                  meanValue8 = obj8.GetMean()
-                  meanValue9 = obj9.GetMean()
-                  meanValue10 = obj10.GetMean()
-                  meanValue11 = obj11.GetMean()
-                  meanValue12 = obj12.GetMean()
-                  
-#                  meanValue1 = obj1.GetBinCenter(obj1.GetMaximumBin())
-#                  meanValue2 = obj2.GetBinCenter(obj2.GetMaximumBin())
-#                  meanValue3 = obj3.GetBinCenter(obj3.GetMaximumBin())
-#                  meanValue4 = obj4.GetBinCenter(obj4.GetMaximumBin())
-#                  meanValue5 = obj5.GetBinCenter(obj5.GetMaximumBin())
-#                  meanValue6 = obj6.GetBinCenter(obj6.GetMaximumBin())
-#                  meanValue7 = obj7.GetBinCenter(obj7.GetMaximumBin())
-#                  meanValue8 = obj8.GetBinCenter(obj8.GetMaximumBin())
-#                  meanValue9 = obj9.GetBinCenter(obj9.GetMaximumBin())
-#                  meanValue10 = obj10.GetBinCenter(obj10.GetMaximumBin())
-#                  meanValue11 = obj11.GetBinCenter(obj11.GetMaximumBin())
-#                  meanValue12 = obj12.GetBinCenter(obj12.GetMaximumBin())
-                  
-                  error1 = obj1.GetStdDev()
-                  error2 = obj2.GetStdDev()
-                  error3 = obj3.GetStdDev()
-                  error4 = obj4.GetStdDev()
-                  error5 = obj5.GetStdDev()
-                  error6 = obj6.GetStdDev()
-                  error7 = obj7.GetStdDev()
-                  error8 = obj8.GetStdDev()
-                  error9 = obj9.GetStdDev()
-                  error10 = obj10.GetStdDev()
-                  error11 = obj11.GetStdDev()
-                  error12 = obj12.GetStdDev()
-                  
-                  betaGammaMPV1 = meanValue1 * (1/np.sqrt(1-meanValue1*meanValue1))
-                  betaGammaMPV2 = meanValue2 * (1/np.sqrt(1-meanValue2*meanValue2))
-                  betaGammaMPV3 = meanValue3 * (1/np.sqrt(1-meanValue3*meanValue3))
-                  betaGammaMPV4 = meanValue4 * (1/np.sqrt(1-meanValue4*meanValue4))
-                  betaGammaMPV5 = meanValue5 * (1/np.sqrt(1-meanValue5*meanValue5))
-                  betaGammaMPV6 = meanValue6 * (1/np.sqrt(1-meanValue6*meanValue6))
-                  betaGammaMPV7 = meanValue7 * (1/np.sqrt(1-meanValue7*meanValue7))
-                  betaGammaMPV8 = meanValue8 * (1/np.sqrt(1-meanValue8*meanValue8))
-                  betaGammaMPV9 = meanValue9 * (1/np.sqrt(1-meanValue9*meanValue9))
-                  betaGammaMPV10 = meanValue10 * (1/np.sqrt(1-meanValue10*meanValue10))
-                  betaGammaMPV11 = meanValue11 * (1/np.sqrt(1-meanValue11*meanValue11))
-                  betaGammaMPV12 = meanValue12 * (1/np.sqrt(1-meanValue12*meanValue12))
-                  
-                  betaGammaMPV1Up = (meanValue1+error1) * (1/np.sqrt(1-(meanValue1+error1)*(meanValue1+error1)))
-                  betaGammaMPV2Up = (meanValue2+error2) * (1/np.sqrt(1-(meanValue2+error2)*(meanValue2+error2)))
-                  betaGammaMPV3Up = (meanValue3+error3) * (1/np.sqrt(1-(meanValue3+error3)*(meanValue3+error3)))
-                  betaGammaMPV4Up = (meanValue4+error4) * (1/np.sqrt(1-(meanValue4+error4)*(meanValue4+error4)))
-                  betaGammaMPV5Up = (meanValue5+error5) * (1/np.sqrt(1-(meanValue5+error5)*(meanValue5+error5)))
-                  betaGammaMPV6Up = (meanValue6+error6) * (1/np.sqrt(1-(meanValue6+error6)*(meanValue6+error6)))
-                  betaGammaMPV7Up = (meanValue7+error7) * (1/np.sqrt(1-(meanValue7+error7)*(meanValue7+error7)))
-                  betaGammaMPV8Up = (meanValue8+error8) * (1/np.sqrt(1-(meanValue8+error8)*(meanValue8+error8)))
-                  betaGammaMPV9Up = (meanValue9+error9) * (1/np.sqrt(1-(meanValue9+error9)*(meanValue9+error9)))
-                  betaGammaMPV10Up = (meanValue10+error10) * (1/np.sqrt(1-(meanValue10+error10)*(meanValue10+error10)))
-                  betaGammaMPV11Up = (meanValue11+error11) * (1/np.sqrt(1-(meanValue11+error11)*(meanValue11+error11)))
-                  betaGammaMPV12Up = (meanValue12+error12) * (1/np.sqrt(1-(meanValue12+error12)*(meanValue12+error12)))
-                  
-#                  betaGammaErr1 = error1 * error1 / (np.sqrt((1-error1 * error1)**3))
-                  betaGammaErr1 = betaGammaMPV1Up - betaGammaMPV1
-                  betaGammaErr2 = betaGammaMPV2Up - betaGammaMPV2
-                  betaGammaErr3 = betaGammaMPV3Up - betaGammaMPV3
-                  betaGammaErr4 = betaGammaMPV4Up - betaGammaMPV4
-                  betaGammaErr5 = betaGammaMPV5Up - betaGammaMPV5
-                  betaGammaErr6 = betaGammaMPV6Up - betaGammaMPV6
-                  betaGammaErr7 = betaGammaMPV7Up - betaGammaMPV7
-                  betaGammaErr8 = betaGammaMPV8Up - betaGammaMPV8
-                  betaGammaErr9 = betaGammaMPV9Up - betaGammaMPV9
-                  betaGammaErr10 = betaGammaMPV10Up - betaGammaMPV10
-                  betaGammaErr11 = betaGammaMPV11Up - betaGammaMPV11
-                  betaGammaErr12 = betaGammaMPV12Up - betaGammaMPV12
-                  
-                  
-                  fileOut.write("100\t"+str(betaGammaMPV1)+"\t"+str(betaGammaErr1)+"\n")
-                  fileOut.write("200\t"+str(betaGammaMPV2)+"\t"+str(betaGammaErr2)+"\n")
-                  fileOut.write("400\t"+str(betaGammaMPV3)+"\t"+str(betaGammaErr3)+"\n")
-                  fileOut.write("500\t"+str(betaGammaMPV4)+"\t"+str(betaGammaErr4)+"\n")
-                  fileOut.write("800\t"+str(betaGammaMPV5)+"\t"+str(betaGammaErr5)+"\n")
-                  fileOut.write("1000\t"+str(betaGammaMPV6)+"\t"+str(betaGammaErr6)+"\n")
-                  fileOut.write("1400\t"+str(betaGammaMPV7)+"\t"+str(betaGammaErr7)+"\n")
-                  fileOut.write("1800\t"+str(betaGammaMPV8)+"\t"+str(betaGammaErr8)+"\n")
-                  fileOut.write("2000\t"+str(betaGammaMPV9)+"\t"+str(betaGammaErr9)+"\n")
-                  fileOut.write("2200\t"+str(betaGammaMPV10)+"\t"+str(betaGammaErr10)+"\n")
-                  fileOut.write("2400\t"+str(betaGammaMPV11)+"\t"+str(betaGammaErr11)+"\n")
-                  fileOut.write("2600\t"+str(betaGammaMPV12)+"\t"+str(betaGammaErr12)+"\n")
-                  fileOut.close()
-              #can.SaveAs(name.replace(".png",".pdf"))
-              #can.SaveAs(name.replace(".png",".C"))
-              can.Close()
-
-#Mass = f.Get("/analyzer/BaseName/Mass")
-#Mass_wPred = f.Get("/analyzer/BaseName/Pred_Mass_CB")
-#if Mass_wPred :
-#  massBins = [0.,50.,100.,150.,200.,250.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,4000.]
-#  massBinsArray = np.array(massBins)
-#  Mass_projY_NotRebinned = Mass.ProjectionY("Mass_projY",ProjBin,ProjBin,"e")
-#  Mass_projY = ROOT.TH1F("Mass_projY" , "Mass_projY" , len(massBinsArray)-1, massBinsArray)
-#
-#  Mass_wPred_projY_NotRebinned = Mass_wPred.ProjectionY("Mass_wPred_projY",ProjBin,ProjBin,"e")
-#  Mass_wPred_projY = ROOT.TH1F("Mass_wPred_projY" , "Mass_wPred_projY" , len(massBinsArray)-1, massBinsArray)
-#
-#  print("Mass_projY_NotRebinned.Integral(): ",Mass_projY_NotRebinned.Integral())
-#  print("Mass_wPred_projY_NotRebinned.Integral(): ",Mass_wPred_projY_NotRebinned.Integral())
-#
-#  KSvalue = Mass_projY_NotRebinned.KolmogorovTest(Mass_wPred_projY_NotRebinned,"XD")
-#  print("KS-test: "+str(KSvalue))
-#
-#  for i, bin in enumerate(massBinsArray):
-#    Mass_projYCont = Mass_projY_NotRebinned.GetBinContent(i+1)
-#    Mass_projY.SetBinContent(i+1,Mass_projYCont)
-#    Mass_projYCont_err = Mass_projY_NotRebinned.GetBinError(i+1)
-#    #Mass_projYCont_err = Mass.GetBinErrorLow(ProjBin,i+1)
-#    Mass_projY.SetBinError(i+1,Mass_projYCont_err)
-#
-#    Mass_wPred_projYCont = Mass_wPred_projY_NotRebinned.GetBinContent(i+1)
-#    Mass_wPred_projY.SetBinContent(i+1,Mass_wPred_projYCont)
-#    Mass_wPred_projYCont_err = Mass_wPred_projY_NotRebinned.GetBinError(i+1)
-#    #Mass_wPred_projYCont_err = Mass_wPred.GetBinErrorLow(ProjBin,i+1)
-#    Mass_wPred_projY.SetBinError(i+1,Mass_wPred_projYCont_err)
-#
-#  print("----------------------------------------------")
-#  KSvalue2 = Mass_projY.KolmogorovTest(Mass_wPred_projY,"XD")
-#  print("KS-test after rebinning: "+str(KSvalue2))
-#
-#  Mass_projY.SetMarkerColor(1)
-#  Mass_projY.SetLineColor(1)
-#  Mass_projY.SetMarkerStyle(20)
-#  Mass_projY.SetTitle("")
-#  Mass_projY.GetXaxis().SetTitleSize(0.05)
-#  Mass_projY.GetXaxis().SetTitleOffset(1)
-#  Mass_projY.GetXaxis().SetTitle("Mass [GeV]")
-#  Mass_projY.GetYaxis().SetTitle("Tracks/bin")
-#  Mass_projY.GetYaxis().SetTitleSize(0.05)
-#  Mass_projY.GetYaxis().SetTitleOffset(1)
-#  Mass_projY.SetStats(0)
-#  Mass_projY.GetYaxis().SetRangeUser(0.1,10000)
-#
-#
-#  Mass_wPred_projY.SetMarkerColor(2)
-#  Mass_wPred_projY.SetLineColor(2)
-#  Mass_wPred_projY.SetMarkerStyle(20)
-#  Mass_wPred_projY.SetTitle("")
-#  Mass_wPred_projY.GetXaxis().SetTitleSize(0.05)
-#  Mass_wPred_projY.GetXaxis().SetTitleOffset(1)
-#  Mass_wPred_projY.GetXaxis().SetTitle("Mass [GeV]")
-#  Mass_wPred_projY.GetYaxis().SetTitle("Tracks/bin")
-#  Mass_wPred_projY.GetYaxis().SetTitleSize(0.05)
-#  Mass_wPred_projY.GetYaxis().SetTitleOffset(1)
-#  Mass_wPred_projY.SetStats(0)
-#
-#
-#  print("Mass_projY.Integral(): ",Mass_projY.Integral())
-#  print("Mass_wPred_projY.Integral(): ",Mass_wPred_projY.Integral())
-#
-#  legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
-#  legMass.SetTextFont(42)
-#  legMass.SetTextSize(0.035)
-#  legMass.SetBorderSize(1);
-#  legMass.SetLineColor(1);
-#  legMass.SetLineStyle(1);
-#  legMass.SetLineWidth(1);
-#  legMass.SetFillColor(0);
-#  legMass.SetFillStyle(1001);
-#  legMass.AddEntry(Mass_wPred_projY,"Prediction","LP")
-#  legMass.AddEntry(Mass_projY,"Observation","LP")
-#
-#  tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-#  #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-#  tex2.SetNDC();
-#  tex2.SetTextFont(61);
-#  tex2.SetTextSize(0.0675);
-#  tex2.SetLineWidth(2);
-#
-#  #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
-#  #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-#  tex3 = ROOT.TLatex(0.24,0.94,"Internal");
-#  tex3.SetNDC();
-#  tex3.SetTextFont(52);
-#  tex3.SetTextSize(0.0485);
-#  tex3.SetLineWidth(2);
-#
-#  tex4 = ROOT.TLatex(0.7,0.93,"K-S test v2: "+str(round(KSvalue2,4)));
-#  tex4.SetNDC();
-#  tex4.SetTextFont(52);
-#  tex4.SetTextSize(0.0485);
-#  tex4.SetLineWidth(2);
-#
-#
-#
-#
-#
-#  cMass_projY = ROOT.TCanvas('cMass_projY', 'cMass_projY',800,800)
-#  cMass_projY.SetLogy()
-#
-#  rp = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY)
-#
-#  rp.SetH1DrawOpt("P");
-#  rp.SetH2DrawOpt("P");
-#
-#  rp.Draw()
-#  #rp.GetUpperPad().BuildLegend()
-#  rp.SetLeftMargin(0.13);
-#  rp.SetRightMargin(0.05);
-#  rp.SetUpTopMargin(0.1);
-#  rp.SetLowTopMargin(0.02);
-#  rp.SetLowBottomMargin(0.35);
-#
-#  rp.GetLowerRefGraph().SetMinimum(0.01);
-#  rp.GetLowerRefGraph().SetMaximum(2);
-#  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-#  #rp.GetLowerRefGraph().SetLineColor(0) #0
-#  rp.GetLowerRefGraph().SetMarkerStyle(20)
-#  rp.GetLowerRefGraph().SetMarkerSize(1);
-#  rp.GetLowYaxis().SetNdivisions(505);
-#  rp.GetLowerRefYaxis().SetTitle("Ratio");
-#  rp.GetLowerRefYaxis().SetTitleSize(0.05);
-#  rp.GetLowerRefYaxis().SetTitleOffset(1);
-#  rp.GetLowerRefYaxis().SetLabelSize(0.035);
-#
-#
-#  rp.GetLowerRefXaxis().SetTitleSize(0.05);
-#  rp.GetLowerRefXaxis().SetTitleOffset(0.8);
-#  rp.GetLowerRefXaxis().SetLabelSize(0.035);
-#  cMass_projY.Modified()
-#  cMass_projY.Update()
-#  #Mass_projY.Draw()
-#  #Mass_wPred_projY.Draw("SAME")
-#  #rp.Draw("X")
-#
-#  rp.GetUpperPad().cd();
-#  legMass.Draw("SAME")
-#  tex2.Draw("SAME")
-#  tex3.Draw("SAME")
-#  tex4.Draw("SAME")
-#
-#  name = newFileDir + "/cMass_new.png"
-#  cMass_projY.SaveAs(name)
-#
-#os.system("cp forWebpage/* "+newFileDir+"/.")
-#print("scp -r "+ newFileDir + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV8/.")
diff --git a/Analyzer/test/Tamas/compareHSCPandBckCutflow.py b/Analyzer/test/Tamas/compareHSCPandBckCutflow.py
deleted file mode 100644
index d6e77e8..0000000
--- a/Analyzer/test/Tamas/compareHSCPandBckCutflow.py
+++ /dev/null
@@ -1,249 +0,0 @@
-import ROOT, sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-
-f1 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1800_wProbQ_CodeV16p8_v1.root")
-f2 = ROOT.TFile.Open("crab_Analysis_2018_TTToHadronic_wProbQ_CodeV16p8_v1.root")
-f3 = ROOT.TFile.Open("crab_Analysis_2018_TTToSemiLeptonic_wProbQ_CodeV16p8_v1.root")
-f4 = ROOT.TFile.Open("crab_Analysis_2018_TTTo2L2Nu_wProbQ_CodeV16p8_v1.root")
-f5 = ROOT.TFile.Open("crab_Analysis_2018_QCDwPt1000_wProbQ_CodeV16p8_v1.root")
-f6 = ROOT.TFile.Open("crab_Analysis_2018_WJetsToLNu_wProbQ_CodeV16p8_v1.root")
-f7 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1400_CodeV8_v1.root")
-f8 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1800_CodeV8_v1.root")
-f9 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2000_CodeV8_v1.root")
-f10 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2200_CodeV8_v1.root")
-f11 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2400_CodeV8_v1.root")
-f12 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2600_CodeV8_v1.root")
-
-fileOut = open("BetaGammaValuesMPV.txt", "a")
-
-dirs = []
-for i in range(0, f1.GetListOfKeys().GetEntries()):
-  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
-  dirname = f1.GetListOfKeys().At(i).GetName()
-  curr_dir = f1.GetDirectory(dirname)
-# print("dirname: "+dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      # Match the plot of interest
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = f1.GetDirectory(dirname+"/"+keyname)
-#                    print("keyname: "+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          # The plot should be TCanvas
-          newname = dirname + "/" + keyname+ "/" + keyname2
-#         print("newname: "+newname)
-          obj1 = f1.Get(newname)
-          obj2 = f2.Get(newname)
-          obj3 = f3.Get(newname)
-          obj4 = f4.Get(newname)
-          obj5 = f5.Get(newname)
-          obj6 = f6.Get(newname)
-#          obj7 = f7.Get(newname)
-#          obj8 = f8.Get(newname)
-#          obj9 = f9.Get(newname)
-#          obj10 = f10.Get(newname)
-#          obj11 = f11.Get(newname)
-#          obj12 = f12.Get(newname)
-          if obj1.InheritsFrom("TObject"):
-              can = obj1
-              can = ROOT.TCanvas(newname)
-              # bin 3: pt>60 and I_as > 0.05
-              # bin 25: pt>65 and I_as > 0.175
-              # bin 28: pt>65 and I_as > 0.3
-              name = "CompareHSCPandBcg/" + keyname2 +  ".png"
-#                 print(name)
-              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-              if not (obj1.ClassName() == "TH1F"):
-                  continue
-              if not (obj1.Integral()) :
-                      continue
-              if ("BS_" in keyname2 or keyname2 == "CutFlow" or keyname2 == "CutFlowProbQLast" or keyname2 == "CutFlowProbQFirst") :
-#                  can.SetLogy()
-                  obj1.SetMarkerColor(1)
-                  obj2.SetMarkerColor(2)
-                  obj3.SetMarkerColor(3)
-                  obj4.SetMarkerColor(4)
-                  obj5.SetMarkerColor(5)
-                  obj6.SetMarkerColor(6)
-#                  obj7.SetMarkerColor(7)
-#                  obj8.SetMarkerColor(8)
-#                  obj9.SetMarkerColor(9)
-#                  obj10.SetMarkerColor(10)
-#                  obj11.SetMarkerColor(11)
-#                  obj12.SetMarkerColor(12)
-                  
-                  obj1.SetLineColor(1)
-                  obj2.SetLineColor(2)
-                  obj3.SetLineColor(3)
-                  obj4.SetLineColor(4)
-                  obj5.SetLineColor(5)
-                  obj6.SetLineColor(6)
-#                  obj7.SetLineColor(7)
-#                  obj8.SetLineColor(8)
-#                  obj9.SetLineColor(9)
-#                  obj10.SetLineColor(10)
-#                  obj11.SetLineColor(11)
-#                  obj12.SetLineColor(12)
-                  
-                  
-                  obj1.SetMarkerStyle(20)
-                  obj2.SetMarkerStyle(20)
-                  obj3.SetMarkerStyle(20)
-                  obj4.SetMarkerStyle(20)
-                  obj5.SetMarkerStyle(20)
-                  obj6.SetMarkerStyle(20)
-#                  obj7.SetMarkerStyle(20)
-#                  obj8.SetMarkerStyle(20)
-#                  obj9.SetMarkerStyle(20)
-#                  obj10.SetMarkerStyle(20)
-#                  obj11.SetMarkerStyle(20)
-#                  obj12.SetMarkerStyle(20)
-                  
-#                  obj1.SetTitle("")
-#                  obj1.GetXaxis().SetTitleSize(0.05)
-#                  obj1.GetXaxis().SetTitleOffset(1)
-#                  obj1.GetYaxis().SetTitleSize(0.05)
-#                  obj1.GetYaxis().SetTitleOffset(1)
-                  obj1.SetStats(0)
-
-
-                  if (keyname2 == "CutFlow" or keyname2 == "CutFlowProbQLast" or keyname2 == "CutFlowProbQFirst") :
-                    obj1.Scale(1/obj1.GetMaximum())
-                    obj2.Scale(1/obj2.GetMaximum())
-                    obj3.Scale(1/obj3.GetMaximum())
-                    obj4.Scale(1/obj4.GetMaximum())
-                    obj5.Scale(1/obj5.GetMaximum())
-                    obj6.Scale(1/obj6.GetMaximum())
-                  else:
-                    obj1.Scale(1/obj1.Integral(), "width")
-                    obj2.Scale(1/obj2.Integral(), "width")
-                    obj3.Scale(1/obj3.Integral(), "width")
-                    obj4.Scale(1/obj4.Integral(), "width")
-                    obj5.Scale(1/obj5.Integral(), "width")
-                    obj6.Scale(1/obj6.Integral(), "width")
-                    
-                  max = np.maximum(obj2.GetMaximum(), obj1.GetMaximum())
-                  obj1.SetMaximum(max*1.5)
-                  
-                  legMass =  ROOT.TLegend(.55,.55,.80,.9,"","brNDC")
-                  legMass.SetTextFont(42)
-                  legMass.SetTextSize(0.035)
-                  legMass.SetBorderSize(1);
-                  legMass.SetLineColor(1);
-                  legMass.SetLineStyle(1);
-                  legMass.SetLineWidth(1);
-                  legMass.SetFillColor(0);
-                  legMass.SetFillStyle(1001);
-#                  legMass.AddEntry(obj12,"Mass=2600 GeV","LP")
-#                  legMass.AddEntry(obj11,"Mass=2400 GeV","LP")
-#                  legMass.AddEntry(obj10,"Mass=2200 GeV","LP")
-#                  legMass.AddEntry(obj9,"Mass=2000 GeV","LP")
-#                  legMass.AddEntry(obj8,"Mass=1800 GeV","LP")
-#                  legMass.AddEntry(obj7,"Mass=1400 GeV","LP")
-                  legMass.AddEntry(obj1,"HSCP 1800 GeV","LP")
-                  legMass.AddEntry(obj2,"TTToHadronic","LP")
-                  legMass.AddEntry(obj3,"TTToSemiLeptonic","LP")
-                  legMass.AddEntry(obj4,"TTTo2L2N","LP")
-                  legMass.AddEntry(obj5,"QCDwPt1000","LP")
-                  legMass.AddEntry(obj6,"WJetsToLNu","LP")
-                  
-                  if (keyname2 == "CutFlow") :
-                    obj1.GetXaxis().SetBinLabel(1,"Trigger")
-                    obj1.GetXaxis().SetBinLabel(2,"Eta")
-                    obj1.GetXaxis().SetBinLabel(3,"pT")
-                    obj1.GetXaxis().SetBinLabel(4,"NumHits")
-                    obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
-                    obj1.GetXaxis().SetBinLabel(6,"ValidFract")
-                    obj1.GetXaxis().SetBinLabel(7,"NumDeDx")
-                    obj1.GetXaxis().SetBinLabel(8,"ProbQ")
-                    obj1.GetXaxis().SetBinLabel(9,"ProbXY")
-                    obj1.GetXaxis().SetBinLabel(10,"HighPurity")
-                    obj1.GetXaxis().SetBinLabel(11,"Chi2oDOF")
-                    obj1.GetXaxis().SetBinLabel(12,"EoP")
-                    obj1.GetXaxis().SetBinLabel(13,"dz")
-                    obj1.GetXaxis().SetBinLabel(14,"dxy")
-                    obj1.GetXaxis().SetBinLabel(15,"pTerrOverpT")
-                    obj1.GetXaxis().SetBinLabel(16,"TKIso")
-                    obj1.GetXaxis().SetBinLabel(17,"Ih")
-                    obj1.GetXaxis().SetBinLabel(18,"MuStat")
-                    obj1.GetXaxis().SetBinLabel(19,"PhiTOF")
-                    obj1.GetXaxis().SetBinLabel(20,"EtaTOF")
-                  
-                  if (keyname2 == "CutFlowProbQFirst") :
-                    obj1.GetXaxis().SetBinLabel(1,"Trigger")
-                    obj1.GetXaxis().SetBinLabel(2,"pT")
-                    obj1.GetXaxis().SetBinLabel(3,"ProbQ")
-                    obj1.GetXaxis().SetBinLabel(4,"Eta")
-                    obj1.GetXaxis().SetBinLabel(5,"NumHits")
-                    obj1.GetXaxis().SetBinLabel(6,"NumPixHits")
-                    obj1.GetXaxis().SetBinLabel(7,"ValidFract")
-                    obj1.GetXaxis().SetBinLabel(8,"NumDeDx")
-                    obj1.GetXaxis().SetBinLabel(9,"ProbXY")
-                    obj1.GetXaxis().SetBinLabel(10,"HighPurity")
-                    obj1.GetXaxis().SetBinLabel(11,"Chi2oDOF")
-                    obj1.GetXaxis().SetBinLabel(12,"EoP")
-                    obj1.GetXaxis().SetBinLabel(13,"dz")
-                    obj1.GetXaxis().SetBinLabel(14,"dxy")
-                    obj1.GetXaxis().SetBinLabel(15,"pTerrOverpT")
-                    obj1.GetXaxis().SetBinLabel(16,"TKIso")
-                    obj1.GetXaxis().SetBinLabel(17,"Ih")
-                    obj1.GetXaxis().SetBinLabel(18,"MuStat")
-                    obj1.GetXaxis().SetBinLabel(19,"PhiTOF")
-                    obj1.GetXaxis().SetBinLabel(20,"EtaTOF")
-                    
-                  if (keyname2 == "CutFlowProbQLast") :
-                    obj1.GetXaxis().SetBinLabel(1,"Trigger")
-                    obj1.GetXaxis().SetBinLabel(2,"Eta")
-                    obj1.GetXaxis().SetBinLabel(3,"pT")
-                    obj1.GetXaxis().SetBinLabel(4,"NumHits")
-                    obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
-                    obj1.GetXaxis().SetBinLabel(6,"ValidFract")
-                    obj1.GetXaxis().SetBinLabel(7,"NumDeDx")
-                    obj1.GetXaxis().SetBinLabel(8,"ProbXY")
-                    obj1.GetXaxis().SetBinLabel(9,"HighPurity")
-                    obj1.GetXaxis().SetBinLabel(10,"Chi2oDOF")
-                    obj1.GetXaxis().SetBinLabel(11,"EoP")
-                    obj1.GetXaxis().SetBinLabel(12,"dz")
-                    obj1.GetXaxis().SetBinLabel(13,"dxy")
-                    obj1.GetXaxis().SetBinLabel(14,"pTerrOverpT")
-                    obj1.GetXaxis().SetBinLabel(15,"TKIso")
-                    obj1.GetXaxis().SetBinLabel(16,"Ih")
-                    obj1.GetXaxis().SetBinLabel(17,"ProbQ")
-                    obj1.GetXaxis().SetBinLabel(18,"MuStat")
-                    obj1.GetXaxis().SetBinLabel(19,"PhiTOF")
-                    obj1.GetXaxis().SetBinLabel(20,"EtaTOF")
-                    
-                  obj1.Draw("COLZ L")
-                  obj2.Draw("SAME")
-                  obj3.Draw("SAME")
-                  obj4.Draw("SAME")
-                  obj5.Draw("SAME")
-                  obj6.Draw("SAME")
-#                  obj10.Draw("SAME")
-#                  obj9.Draw("SAME")
-#                  obj8.Draw("SAME")
-#                  obj7.Draw("SAME")
-                  
-
-                  
-                  legMass.Draw("SAME")
-              else :
-                  continue
-              can.SaveAs(name)
-              #can.SaveAs(name.replace(".png",".pdf"))
-              #can.SaveAs(name.replace(".png",".C"))
-              can.Close()
diff --git a/Analyzer/test/Tamas/compareHSCPandBckHighMass.py b/Analyzer/test/Tamas/compareHSCPandBckHighMass.py
deleted file mode 100644
index 3283295..0000000
--- a/Analyzer/test/Tamas/compareHSCPandBckHighMass.py
+++ /dev/null
@@ -1,531 +0,0 @@
-import ROOT, sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-f1 = ROOT.TFile.Open("crab_Analysis_2018_TTTo2L2Nu_wProbQ_CodeV18p1_v1.root")
-f2 = ROOT.TFile.Open("crab_Analysis_2018_TTToSemiLeptonic_wProbQ_CodeV18p1_v1.root")
-f3 = ROOT.TFile.Open("crab_Analysis_2018_TTToHadronic_wProbQ_CodeV18p1_v1.root")
-f4 = ROOT.TFile.Open("crab_Analysis_2018_QCDwPt1000_wProbQ_CodeV18p1_v1.root")
-f5 = ROOT.TFile.Open("crab_Analysis_2018_WJetsToLNu_wProbQ_CodeV18p1_v1.root")
-
-f6 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1000_CodeV17p8_v1.root")
-f7 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1400_CodeV17p8_v1.root")
-f8 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_1800_CodeV17p8_v1.root")
-f9 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2000_CodeV17p8_v1.root")
-f10 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2000_CodeV17p8_v1.root")
-#f10 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2200_CodeV17p8_v1.root")
-f11 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2400_CodeV17p8_v1.root")
-f12 = ROOT.TFile.Open("crab_Analysis_HSCPgluinoCentral_M_2600_CodeV17p8_v1.root")
-
-fileOut = open("BetaGammaValuesMPV.txt", "a")
-outdirName = "CompareHSCPandBcg_CodeV18p1/"
-
-dirs = []
-for i in range(0, f1.GetListOfKeys().GetEntries()):
-  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
-  dirname = f1.GetListOfKeys().At(i).GetName()
-  curr_dir = f1.GetDirectory(dirname)
-# print("dirname: "+dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      # Match the plot of interest
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = f1.GetDirectory(dirname+"/"+keyname)
-#                    print("keyname: "+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          # The plot should be TCanvas
-          newname = dirname + "/" + keyname+ "/" + keyname2
-#         print("newname: "+newname)
-          obj1 = f1.Get(newname)
-          obj2 = f2.Get(newname)
-          obj3 = f3.Get(newname)
-          obj4 = f4.Get(newname)
-          obj5 = f5.Get(newname)
-          obj6 = f6.Get(newname)
-          obj7 = f7.Get(newname)
-          obj8 = f8.Get(newname)
-          obj9 = f9.Get(newname)
-          obj10 = f10.Get(newname)
-          obj11 = f11.Get(newname)
-          obj12 = f12.Get(newname)
-          if obj1.InheritsFrom("TObject"):
-              can = obj1
-              can = ROOT.TCanvas(newname)
-              # bin 3: pt>60 and I_as > 0.05
-              # bin 25: pt>65 and I_as > 0.175
-              # bin 28: pt>65 and I_as > 0.3
-              name = outdirName + keyname2 +  ".png"
-#                 print(name)
-              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-              if not (obj1.ClassName() == "TH1F"):
-                  continue
-              legMass =  ROOT.TLegend(.55,.55,.80,.9,"","brNDC")
-              legMass.SetTextFont(42)
-              legMass.SetTextSize(0.035)
-              legMass.SetBorderSize(1);
-              legMass.SetLineColor(1);
-              legMass.SetLineStyle(1);
-              legMass.SetLineWidth(1);
-              legMass.SetFillColor(0);
-              legMass.SetFillStyle(1001);
-              legMass.AddEntry(obj6,"HSCP 1000 GeV","LP")
-              legMass.AddEntry(obj7,"HSCP 1400 GeV","LP")
-              legMass.AddEntry(obj8,"HSCP 1800 GeV","LP")
-              legMass.AddEntry(obj9,"HSCP 2000 GeV","LP")
-              legMass.AddEntry(obj10,"HSCP 2200 GeV","LP")
-              legMass.AddEntry(obj11,"HSCP 2400 GeV","LP")
-              legMass.AddEntry(obj12,"HSCP 2600 GeV","LP")
-              legMass.AddEntry(obj5,"WJetsToLNu","LP")
-              legMass.AddEntry(obj4,"QCD","LP")
-              legMass.AddEntry(obj3,"TTtoHadronic","LP")
-              legMass.AddEntry(obj2,"TTtoSemiLeptonic","LP")
-              legMass.AddEntry(obj1,"TTto2L2N","LP")
-              obj1.SetMarkerColor(38)
-              obj2.SetMarkerColor(42)
-              obj3.SetMarkerColor(41)
-              obj4.SetMarkerColor(9)
-              obj5.SetMarkerColor(8)
-              obj6.SetMarkerColor(7)
-              obj7.SetMarkerColor(6)
-              obj8.SetMarkerColor(5)
-              obj9.SetMarkerColor(4)
-              obj10.SetMarkerColor(3)
-              obj11.SetMarkerColor(2)
-              obj12.SetMarkerColor(1)
-              
-              obj1.SetLineColor(38)
-              obj2.SetLineColor(42)
-              obj3.SetLineColor(41)
-              obj4.SetLineColor(9)
-              obj5.SetLineColor(8)
-              obj6.SetLineColor(7)
-              obj7.SetLineColor(6)
-              obj8.SetLineColor(5)
-              obj9.SetLineColor(4)
-              obj10.SetLineColor(3)
-              obj11.SetLineColor(2)
-              obj12.SetLineColor(1)
-            
-              obj1.SetMarkerStyle(21)
-              obj2.SetMarkerStyle(21)
-              obj3.SetMarkerStyle(21)
-              obj4.SetMarkerStyle(21)
-              obj5.SetMarkerStyle(21)
-              obj6.SetMarkerStyle(20)
-              obj7.SetMarkerStyle(20)
-              obj8.SetMarkerStyle(20)
-              obj9.SetMarkerStyle(20)
-              obj10.SetMarkerStyle(20)
-              obj11.SetMarkerStyle(20)
-              obj12.SetMarkerStyle(20)
-              obj12.SetStats(0)
-              obj1.SetStats(0)
-              max = np.maximum(obj12.GetMaximum(), obj1.GetMaximum())
-              obj12.SetMaximum(max*1.2)
-              obj1.SetMaximum(max*1.2)
-#                  obj1.SetTitle("")
-#                  obj1.GetXaxis().SetTitleSize(0.05)
-#                  obj1.GetXaxis().SetTitleOffset(1)
-#                  obj1.GetYaxis().SetTitleSize(0.05)
-#                  obj1.GetYaxis().SetTitleOffset(1)
-              if ("BS_" in keyname2 or keyname2 == "genlevelbeta") :
-                  if not (obj1.Integral()) :
-                      continue
-#                  can.SetLogy()
-                  
-                  obj1.Scale(1/obj1.Integral(), "width")
-                  obj2.Scale(1/obj2.Integral(), "width")
-                  obj3.Scale(1/obj3.Integral(), "width")
-                  obj4.Scale(1/obj4.Integral(), "width")
-                  obj5.Scale(1/obj5.Integral(), "width")
-                  obj6.Scale(1/obj6.Integral(), "width")
-                  obj7.Scale(1/obj7.Integral(), "width")
-                  obj8.Scale(1/obj8.Integral(), "width")
-                  obj9.Scale(1/obj9.Integral(), "width")
-                  obj10.Scale(1/obj10.Integral(), "width")
-                  obj11.Scale(1/obj11.Integral(), "width")
-                  obj12.Scale(1/obj12.Integral(), "width")
-                  
-                  obj12.Draw("HIST P")
-                  obj11.Draw("SAME")
-                  obj10.Draw("SAME")
-                  obj9.Draw("SAME")
-                  obj8.Draw("SAME")
-                  obj7.Draw("SAME")
-                  obj6.Draw("SAME")
-                  obj5.Draw("SAME")
-                  obj4.Draw("SAME")
-                  obj3.Draw("SAME")
-                  obj2.Draw("SAME")
-                  obj1.Draw("SAME")
-                  
-                  legMass.Draw("SAME")
-              elif (keyname2== "CutFlow") :
-                
-                obj1.GetXaxis().SetBinLabel(1,"Trigger")
-                obj1.GetXaxis().SetBinLabel(2,"Eta")
-                obj1.GetXaxis().SetBinLabel(3,"pT")
-                obj1.GetXaxis().SetBinLabel(4,"NumHits")
-                obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
-                obj1.GetXaxis().SetBinLabel(6,"ValidFract")
-                obj1.GetXaxis().SetBinLabel(7,"NumDeDx")
-                obj1.GetXaxis().SetBinLabel(8,"ProbXY")
-                obj1.GetXaxis().SetBinLabel(9,"HighPurity")
-                obj1.GetXaxis().SetBinLabel(10,"Chi2oDOF")
-                obj1.GetXaxis().SetBinLabel(11,"EoP")
-                obj1.GetXaxis().SetBinLabel(12,"dz")
-                obj1.GetXaxis().SetBinLabel(13,"dxy")
-                obj1.GetXaxis().SetBinLabel(14,"pTerrOverpT")
-                obj1.GetXaxis().SetBinLabel(15,"TKIso")
-                obj1.GetXaxis().SetBinLabel(16,"MiniIso")
-                obj1.GetXaxis().SetBinLabel(17,"MassT")
-                obj1.GetXaxis().SetBinLabel(18,"Ih")
-                obj1.GetXaxis().SetBinLabel(19,"ProbQ")
-                obj1.GetXaxis().SetBinLabel(20,"MuStat")
-                obj1.GetXaxis().SetBinLabel(21,"PhiTOF")
-                obj1.GetXaxis().SetBinLabel(22,"EtaTOF")
-                
-                obj1.Scale(1/obj1.GetMaximum())
-                obj2.Scale(1/obj2.GetMaximum())
-                obj3.Scale(1/obj3.GetMaximum())
-                obj4.Scale(1/obj4.GetMaximum())
-                obj5.Scale(1/obj5.GetMaximum())
-                obj6.Scale(1/obj6.GetMaximum())
-                obj7.Scale(1/obj7.GetMaximum())
-                obj8.Scale(1/obj8.GetMaximum())
-                obj9.Scale(1/obj9.GetMaximum())
-                obj10.Scale(1/obj10.GetMaximum())
-                obj11.Scale(1/obj11.GetMaximum())
-                obj12.Scale(1/obj12.GetMaximum())
-                
-                obj1.GetYaxis().SetRangeUser(0,1.3)
-                obj1.Draw("L")
-                obj11.Draw("SAME")
-                obj10.Draw("SAME")
-                obj9.Draw("SAME")
-                obj8.Draw("SAME")
-                obj7.Draw("SAME")
-                obj6.Draw("SAME")
-                obj5.Draw("SAME")
-                obj4.Draw("SAME")
-                obj3.Draw("SAME")
-                obj2.Draw("SAME")
-                obj12.Draw("SAME")
-                legMass.Draw("SAME")
-              elif (keyname2== "CutFlowProbQFirst") :
-                obj1.SetMarkerColor(1)
-                obj1.SetLineColor(1)
-                obj1.SetMarkerStyle(20)
-                obj1.SetStats(0)
-                obj1.Scale(1/obj1.GetMaximum())
-                obj1.GetXaxis().SetBinLabel(1,"Trigger")
-                obj1.GetXaxis().SetBinLabel(2,"Eta")
-                obj1.GetXaxis().SetBinLabel(3,"pT")
-                obj1.GetXaxis().SetBinLabel(4,"ProbQ")
-                obj1.GetXaxis().SetBinLabel(5,"NumHits")
-                obj1.GetXaxis().SetBinLabel(6,"NumPixHits")
-                obj1.GetXaxis().SetBinLabel(7,"ValidFract")
-                obj1.GetXaxis().SetBinLabel(8,"NumDeDx")
-                obj1.GetXaxis().SetBinLabel(9,"ProbXY")
-                obj1.GetXaxis().SetBinLabel(10,"HighPurity")
-                obj1.GetXaxis().SetBinLabel(11,"Chi2oDOF")
-                obj1.GetXaxis().SetBinLabel(12,"EoP")
-                obj1.GetXaxis().SetBinLabel(13,"dz")
-                obj1.GetXaxis().SetBinLabel(14,"dxy")
-                obj1.GetXaxis().SetBinLabel(15,"pTerrOverpT")
-                obj1.GetXaxis().SetBinLabel(16,"TKIso")
-                obj1.GetXaxis().SetBinLabel(17,"MiniIso")
-                obj1.GetXaxis().SetBinLabel(18,"MassT")
-                obj1.GetXaxis().SetBinLabel(19,"Ih")
-                obj1.GetXaxis().SetBinLabel(20,"MuStat")
-                obj1.GetXaxis().SetBinLabel(21,"PhiTOF")
-                obj1.GetXaxis().SetBinLabel(22,"EtaTOF")
-                
-                obj1.Scale(1/obj1.GetMaximum())
-                obj2.Scale(1/obj2.GetMaximum())
-                obj3.Scale(1/obj3.GetMaximum())
-                obj4.Scale(1/obj4.GetMaximum())
-                obj5.Scale(1/obj5.GetMaximum())
-                obj6.Scale(1/obj6.GetMaximum())
-                obj7.Scale(1/obj7.GetMaximum())
-                obj8.Scale(1/obj8.GetMaximum())
-                obj9.Scale(1/obj9.GetMaximum())
-                obj10.Scale(1/obj10.GetMaximum())
-                obj11.Scale(1/obj11.GetMaximum())
-                obj12.Scale(1/obj12.GetMaximum())
-                obj1.Draw("COLZ L")
-                obj11.Draw("SAME")
-                obj10.Draw("SAME")
-                obj9.Draw("SAME")
-                obj8.Draw("SAME")
-                obj7.Draw("SAME")
-                obj6.Draw("SAME")
-                obj5.Draw("SAME")
-                obj4.Draw("SAME")
-                obj3.Draw("SAME")
-                obj2.Draw("SAME")
-                obj12.Draw("SAME")
-                legMass.Draw("SAME")
-              else :
-                  continue
-              can.SaveAs(name)
-              if (keyname2 == "genlevelbeta") :
-                  meanValue1 = obj1.GetMean()
-                  meanValue2 = obj2.GetMean()
-                  meanValue3 = obj3.GetMean()
-                  meanValue4 = obj4.GetMean()
-                  meanValue5 = obj5.GetMean()
-                  meanValue6 = obj6.GetMean()
-                  meanValue7 = obj7.GetMean()
-                  meanValue8 = obj8.GetMean()
-                  meanValue9 = obj9.GetMean()
-                  meanValue10 = obj10.GetMean()
-                  meanValue11 = obj11.GetMean()
-                  meanValue12 = obj12.GetMean()
-                  
-#                  meanValue1 = obj1.GetBinCenter(obj1.GetMaximumBin())
-#                  meanValue2 = obj2.GetBinCenter(obj2.GetMaximumBin())
-#                  meanValue3 = obj3.GetBinCenter(obj3.GetMaximumBin())
-#                  meanValue4 = obj4.GetBinCenter(obj4.GetMaximumBin())
-#                  meanValue5 = obj5.GetBinCenter(obj5.GetMaximumBin())
-#                  meanValue6 = obj6.GetBinCenter(obj6.GetMaximumBin())
-#                  meanValue7 = obj7.GetBinCenter(obj7.GetMaximumBin())
-#                  meanValue8 = obj8.GetBinCenter(obj8.GetMaximumBin())
-#                  meanValue9 = obj9.GetBinCenter(obj9.GetMaximumBin())
-#                  meanValue10 = obj10.GetBinCenter(obj10.GetMaximumBin())
-#                  meanValue11 = obj11.GetBinCenter(obj11.GetMaximumBin())
-#                  meanValue12 = obj12.GetBinCenter(obj12.GetMaximumBin())
-                  
-                  error1 = obj1.GetStdDev()
-                  error2 = obj2.GetStdDev()
-                  error3 = obj3.GetStdDev()
-                  error4 = obj4.GetStdDev()
-                  error5 = obj5.GetStdDev()
-                  error6 = obj6.GetStdDev()
-                  error7 = obj7.GetStdDev()
-                  error8 = obj8.GetStdDev()
-                  error9 = obj9.GetStdDev()
-                  error10 = obj10.GetStdDev()
-                  error11 = obj11.GetStdDev()
-                  error12 = obj12.GetStdDev()
-                  
-                  betaGammaMPV1 = meanValue1 * (1/np.sqrt(1-meanValue1*meanValue1))
-                  betaGammaMPV2 = meanValue2 * (1/np.sqrt(1-meanValue2*meanValue2))
-                  betaGammaMPV3 = meanValue3 * (1/np.sqrt(1-meanValue3*meanValue3))
-                  betaGammaMPV4 = meanValue4 * (1/np.sqrt(1-meanValue4*meanValue4))
-                  betaGammaMPV5 = meanValue5 * (1/np.sqrt(1-meanValue5*meanValue5))
-                  betaGammaMPV6 = meanValue6 * (1/np.sqrt(1-meanValue6*meanValue6))
-                  betaGammaMPV7 = meanValue7 * (1/np.sqrt(1-meanValue7*meanValue7))
-                  betaGammaMPV8 = meanValue8 * (1/np.sqrt(1-meanValue8*meanValue8))
-                  betaGammaMPV9 = meanValue9 * (1/np.sqrt(1-meanValue9*meanValue9))
-                  betaGammaMPV10 = meanValue10 * (1/np.sqrt(1-meanValue10*meanValue10))
-                  betaGammaMPV11 = meanValue11 * (1/np.sqrt(1-meanValue11*meanValue11))
-                  betaGammaMPV12 = meanValue12 * (1/np.sqrt(1-meanValue12*meanValue12))
-                  
-                  betaGammaMPV1Up = (meanValue1+error1) * (1/np.sqrt(1-(meanValue1+error1)*(meanValue1+error1)))
-                  betaGammaMPV2Up = (meanValue2+error2) * (1/np.sqrt(1-(meanValue2+error2)*(meanValue2+error2)))
-                  betaGammaMPV3Up = (meanValue3+error3) * (1/np.sqrt(1-(meanValue3+error3)*(meanValue3+error3)))
-                  betaGammaMPV4Up = (meanValue4+error4) * (1/np.sqrt(1-(meanValue4+error4)*(meanValue4+error4)))
-                  betaGammaMPV5Up = (meanValue5+error5) * (1/np.sqrt(1-(meanValue5+error5)*(meanValue5+error5)))
-                  betaGammaMPV6Up = (meanValue6+error6) * (1/np.sqrt(1-(meanValue6+error6)*(meanValue6+error6)))
-                  betaGammaMPV7Up = (meanValue7+error7) * (1/np.sqrt(1-(meanValue7+error7)*(meanValue7+error7)))
-                  betaGammaMPV8Up = (meanValue8+error8) * (1/np.sqrt(1-(meanValue8+error8)*(meanValue8+error8)))
-                  betaGammaMPV9Up = (meanValue9+error9) * (1/np.sqrt(1-(meanValue9+error9)*(meanValue9+error9)))
-                  betaGammaMPV10Up = (meanValue10+error10) * (1/np.sqrt(1-(meanValue10+error10)*(meanValue10+error10)))
-                  betaGammaMPV11Up = (meanValue11+error11) * (1/np.sqrt(1-(meanValue11+error11)*(meanValue11+error11)))
-                  betaGammaMPV12Up = (meanValue12+error12) * (1/np.sqrt(1-(meanValue12+error12)*(meanValue12+error12)))
-                  
-#                  betaGammaErr1 = error1 * error1 / (np.sqrt((1-error1 * error1)**3))
-                  betaGammaErr1 = betaGammaMPV1Up - betaGammaMPV1
-                  betaGammaErr2 = betaGammaMPV2Up - betaGammaMPV2
-                  betaGammaErr3 = betaGammaMPV3Up - betaGammaMPV3
-                  betaGammaErr4 = betaGammaMPV4Up - betaGammaMPV4
-                  betaGammaErr5 = betaGammaMPV5Up - betaGammaMPV5
-                  betaGammaErr6 = betaGammaMPV6Up - betaGammaMPV6
-                  betaGammaErr7 = betaGammaMPV7Up - betaGammaMPV7
-                  betaGammaErr8 = betaGammaMPV8Up - betaGammaMPV8
-                  betaGammaErr9 = betaGammaMPV9Up - betaGammaMPV9
-                  betaGammaErr10 = betaGammaMPV10Up - betaGammaMPV10
-                  betaGammaErr11 = betaGammaMPV11Up - betaGammaMPV11
-                  betaGammaErr12 = betaGammaMPV12Up - betaGammaMPV12
-                  
-                  
-#                  fileOut.write("TTto2L2N\t"+str(betaGammaMPV1)+"\t"+str(betaGammaErr1)+"\n")
-#                  fileOut.write("TTtoSemiLeptonic\t"+str(betaGammaMPV2)+"\t"+str(betaGammaErr2)+"\n")
-#                  fileOut.write("TTtoHadronic\t"+str(betaGammaMPV3)+"\t"+str(betaGammaErr3)+"\n")
-#                  fileOut.write("QCD\t"+str(betaGammaMPV4)+"\t"+str(betaGammaErr4)+"\n")
-#                  fileOut.write("WJetsToLNu\t"+str(betaGammaMPV5)+"\t"+str(betaGammaErr5)+"\n")
-#                  fileOut.write("DYJetsToLL\t"+str(betaGammaMPV6)+"\t"+str(betaGammaErr6)+"\n")
-#                  fileOut.write("1400\t"+str(betaGammaMPV7)+"\t"+str(betaGammaErr7)+"\n")
-#                  fileOut.write("1800\t"+str(betaGammaMPV8)+"\t"+str(betaGammaErr8)+"\n")
-#                  fileOut.write("2000\t"+str(betaGammaMPV9)+"\t"+str(betaGammaErr9)+"\n")
-#                  fileOut.write("2200\t"+str(betaGammaMPV10)+"\t"+str(betaGammaErr10)+"\n")
-#                  fileOut.write("2400\t"+str(betaGammaMPV11)+"\t"+str(betaGammaErr11)+"\n")
-#                  fileOut.write("2600\t"+str(betaGammaMPV12)+"\t"+str(betaGammaErr12)+"\n")
-                  fileOut.close()
-              #can.SaveAs(name.replace(".png",".pdf"))
-              #can.SaveAs(name.replace(".png",".C"))
-              can.Close()
-
-#Mass = f.Get("/analyzer/BaseName/Mass")
-#Mass_wPred = f.Get("/analyzer/BaseName/Pred_Mass_CB")
-#if Mass_wPred :
-#  massBins = [0.,50.,100.,150.,200.,250.,300.,350.,400.,500.,600.,700.,800.,900.,1000.,4000.]
-#  massBinsArray = np.array(massBins)
-#  Mass_projY_NotRebinned = Mass.ProjectionY("Mass_projY",ProjBin,ProjBin,"e")
-#  Mass_projY = ROOT.TH1F("Mass_projY" , "Mass_projY" , len(massBinsArray)-1, massBinsArray)
-#
-#  Mass_wPred_projY_NotRebinned = Mass_wPred.ProjectionY("Mass_wPred_projY",ProjBin,ProjBin,"e")
-#  Mass_wPred_projY = ROOT.TH1F("Mass_wPred_projY" , "Mass_wPred_projY" , len(massBinsArray)-1, massBinsArray)
-#
-#  print("Mass_projY_NotRebinned.Integral(): ",Mass_projY_NotRebinned.Integral())
-#  print("Mass_wPred_projY_NotRebinned.Integral(): ",Mass_wPred_projY_NotRebinned.Integral())
-#
-#  KSvalue = Mass_projY_NotRebinned.KolmogorovTest(Mass_wPred_projY_NotRebinned,"XD")
-#  print("KS-test: "+str(KSvalue))
-#
-#  for i, bin in enumerate(massBinsArray):
-#    Mass_projYCont = Mass_projY_NotRebinned.GetBinContent(i+1)
-#    Mass_projY.SetBinContent(i+1,Mass_projYCont)
-#    Mass_projYCont_err = Mass_projY_NotRebinned.GetBinError(i+1)
-#    #Mass_projYCont_err = Mass.GetBinErrorLow(ProjBin,i+1)
-#    Mass_projY.SetBinError(i+1,Mass_projYCont_err)
-#
-#    Mass_wPred_projYCont = Mass_wPred_projY_NotRebinned.GetBinContent(i+1)
-#    Mass_wPred_projY.SetBinContent(i+1,Mass_wPred_projYCont)
-#    Mass_wPred_projYCont_err = Mass_wPred_projY_NotRebinned.GetBinError(i+1)
-#    #Mass_wPred_projYCont_err = Mass_wPred.GetBinErrorLow(ProjBin,i+1)
-#    Mass_wPred_projY.SetBinError(i+1,Mass_wPred_projYCont_err)
-#
-#  print("----------------------------------------------")
-#  KSvalue2 = Mass_projY.KolmogorovTest(Mass_wPred_projY,"XD")
-#  print("KS-test after rebinning: "+str(KSvalue2))
-#
-#  Mass_projY.SetMarkerColor(1)
-#  Mass_projY.SetLineColor(1)
-#  Mass_projY.SetMarkerStyle(20)
-#  Mass_projY.SetTitle("")
-#  Mass_projY.GetXaxis().SetTitleSize(0.05)
-#  Mass_projY.GetXaxis().SetTitleOffset(1)
-#  Mass_projY.GetXaxis().SetTitle("Mass [GeV]")
-#  Mass_projY.GetYaxis().SetTitle("Tracks/bin")
-#  Mass_projY.GetYaxis().SetTitleSize(0.05)
-#  Mass_projY.GetYaxis().SetTitleOffset(1)
-#  Mass_projY.SetStats(0)
-#  Mass_projY.GetYaxis().SetRangeUser(0.1,10000)
-#
-#
-#  Mass_wPred_projY.SetMarkerColor(2)
-#  Mass_wPred_projY.SetLineColor(2)
-#  Mass_wPred_projY.SetMarkerStyle(20)
-#  Mass_wPred_projY.SetTitle("")
-#  Mass_wPred_projY.GetXaxis().SetTitleSize(0.05)
-#  Mass_wPred_projY.GetXaxis().SetTitleOffset(1)
-#  Mass_wPred_projY.GetXaxis().SetTitle("Mass [GeV]")
-#  Mass_wPred_projY.GetYaxis().SetTitle("Tracks/bin")
-#  Mass_wPred_projY.GetYaxis().SetTitleSize(0.05)
-#  Mass_wPred_projY.GetYaxis().SetTitleOffset(1)
-#  Mass_wPred_projY.SetStats(0)
-#
-#
-#  print("Mass_projY.Integral(): ",Mass_projY.Integral())
-#  print("Mass_wPred_projY.Integral(): ",Mass_wPred_projY.Integral())
-#
-#  legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
-#  legMass.SetTextFont(42)
-#  legMass.SetTextSize(0.035)
-#  legMass.SetBorderSize(1);
-#  legMass.SetLineColor(1);
-#  legMass.SetLineStyle(1);
-#  legMass.SetLineWidth(1);
-#  legMass.SetFillColor(0);
-#  legMass.SetFillStyle(1001);
-#  legMass.AddEntry(Mass_wPred_projY,"Prediction","LP")
-#  legMass.AddEntry(Mass_projY,"Observation","LP")
-#
-#  tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-#  #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-#  tex2.SetNDC();
-#  tex2.SetTextFont(61);
-#  tex2.SetTextSize(0.0675);
-#  tex2.SetLineWidth(2);
-#
-#  #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
-#  #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-#  tex3 = ROOT.TLatex(0.24,0.94,"Internal");
-#  tex3.SetNDC();
-#  tex3.SetTextFont(52);
-#  tex3.SetTextSize(0.0485);
-#  tex3.SetLineWidth(2);
-#
-#  tex4 = ROOT.TLatex(0.7,0.93,"K-S test v2: "+str(round(KSvalue2,4)));
-#  tex4.SetNDC();
-#  tex4.SetTextFont(52);
-#  tex4.SetTextSize(0.0485);
-#  tex4.SetLineWidth(2);
-#
-#
-#
-#
-#
-#  cMass_projY = ROOT.TCanvas('cMass_projY', 'cMass_projY',800,800)
-#  cMass_projY.SetLogy()
-#
-#  rp = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY)
-#
-#  rp.SetH1DrawOpt("P");
-#  rp.SetH2DrawOpt("P");
-#
-#  rp.Draw()
-#  #rp.GetUpperPad().BuildLegend()
-#  rp.SetLeftMargin(0.13);
-#  rp.SetRightMargin(0.05);
-#  rp.SetUpTopMargin(0.1);
-#  rp.SetLowTopMargin(0.02);
-#  rp.SetLowBottomMargin(0.35);
-#
-#  rp.GetLowerRefGraph().SetMinimum(0.01);
-#  rp.GetLowerRefGraph().SetMaximum(2);
-#  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-#  #rp.GetLowerRefGraph().SetLineColor(0) #0
-#  rp.GetLowerRefGraph().SetMarkerStyle(20)
-#  rp.GetLowerRefGraph().SetMarkerSize(1);
-#  rp.GetLowYaxis().SetNdivisions(505);
-#  rp.GetLowerRefYaxis().SetTitle("Ratio");
-#  rp.GetLowerRefYaxis().SetTitleSize(0.05);
-#  rp.GetLowerRefYaxis().SetTitleOffset(1);
-#  rp.GetLowerRefYaxis().SetLabelSize(0.035);
-#
-#
-#  rp.GetLowerRefXaxis().SetTitleSize(0.05);
-#  rp.GetLowerRefXaxis().SetTitleOffset(0.8);
-#  rp.GetLowerRefXaxis().SetLabelSize(0.035);
-#  cMass_projY.Modified()
-#  cMass_projY.Update()
-#  #Mass_projY.Draw()
-#  #Mass_wPred_projY.Draw("SAME")
-#  #rp.Draw("X")
-#
-#  rp.GetUpperPad().cd();
-#  legMass.Draw("SAME")
-#  tex2.Draw("SAME")
-#  tex3.Draw("SAME")
-#  tex4.Draw("SAME")
-#
-#  name = newFileDir + "/cMass_new.png"
-#  cMass_projY.SaveAs(name)
-#
-#os.system("cp forWebpage/* "+newFileDir+"/.")
-#print("scp -r "+ newFileDir + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV8/.")
diff --git a/Analyzer/test/Tamas/compareStackedBcg.py b/Analyzer/test/Tamas/compareStackedBcg.py
deleted file mode 100644
index b8a6265..0000000
--- a/Analyzer/test/Tamas/compareStackedBcg.py
+++ /dev/null
@@ -1,338 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion BinNumber")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-BinNumber = sys.argv[2]
-bin = int(BinNumber)
-# bin 3: pt>60 and I_as > 0.05
-# bin 25: pt>65 and I_as > 0.175
-# bin 28: pt>65 and I_as > 0.3
-
-blind = True
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BackgroundSamples = [
-"crab_Analysis_2018_AllTTbar_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_AllWJets_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_AllQCD_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_AllZToMuMu_CodeV"+codeVersion+"_v1.root",
-]
-
-SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_RunPhase1_CodeV"+codeVersion+"_v1.root")
-#SingleMuon = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_CodeV"+codeVersion+"_v1.root")
-
-SelectedSignalSamples1 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root")
-SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root")
-#SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root")
-#SelectedSignalSamples2 = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root")
-
-bckArray = []
-for sample in BackgroundSamples:
-  bckArray.append(ROOT.TFile.Open(sample))
-
-name = "StackedComparrison_CodeV"+codeVersion +"_Bin" + str(bin)+"/A.png"
-print(os.path.dirname(name))
-if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-
-dirs = []
-for i in range(0, bckArray[0].GetListOfKeys().GetEntries()):
-  dirname = bckArray[0].GetListOfKeys().At(i).GetName()
-  curr_dir = bckArray[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = bckArray[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = bckArray[0].Get(newname)
-          if not (obj) : continue
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if not obj.InheritsFrom("TObject"): continue
-          
-#          if not ("CutFlow" in keyname2) : continue
-
-          if (obj.GetEntries() == 0 ) : continue
-          stackedSummedBackground = ROOT.THStack("stackedSummedBackground","")
-          stackedNormSummedBackground = ROOT.THStack("stackedNormSummedBackground","")
-          
-          SingleMuonHisto = SingleMuon.Get(newname)
-          SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname)
-          SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname)
-          if (obj.ClassName() == "TH2F") :
-            xAxisTitle = SingleMuon.Get(newname).GetYaxis().GetTitle()
-            SingleMuonHisto = SingleMuon.Get(newname).ProjectionY(str(keyname2)+"Data_ProjY",bin,bin,"e")
-            SingleMuonHisto.GetXaxis().SetTitle(xAxisTitle)
-            SelectedSignalSamples1Histo = SelectedSignalSamples1.Get(newname).ProjectionY(str(keyname2)+"Signal1_ProjY",bin,bin,"e")
-            SelectedSignalSamples2Histo = SelectedSignalSamples2.Get(newname).ProjectionY(str(keyname2)+"Signal2_ProjY",bin,bin,"e")
-          
-          SingleMuonHisto.SetMarkerStyle(20)
-          SingleMuonHisto.SetMarkerColor(1)
-          SingleMuonHisto.SetLineColor(1)
-          
-          SelectedSignalSamples1Histo.SetMarkerColor(6)
-          SelectedSignalSamples1Histo.SetLineColor(6)
-          SelectedSignalSamples1Histo.SetMarkerStyle(22)
-          
-          SelectedSignalSamples2Histo.SetMarkerColor(7)
-          SelectedSignalSamples2Histo.SetLineColor(7)
-          SelectedSignalSamples2Histo.SetMarkerStyle(22)
-          
-          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-          legend.SetTextFont(42)
-          legend.SetTextSize(0.02)
-          legend.SetBorderSize(1);
-          legend.SetBorderSize(0);
-          legend.SetLineColor(1);
-          legend.SetLineStyle(1);
-          legend.SetLineWidth(1);
-          legend.SetFillColor(0);
-          legend.SetFillStyle(1001);
-#          if (keyname2.find("Per")==-1) :
-#            axisXTitle = keyname2[keyname2.find("_")+1:]
-#            axisYTitle = "Tracks/bin"
-#          else :
-#            axisXTitle = keyname2[keyname2.find("_")+1:keyname2.find("Per")]
-#            axisYTitle = keyname2[keyname2.find("Per")+3:]
-          
-#              print("------------------------------------------------------------")
-#          if (obj.ClassName() == "TH1F") : continue
-          if ((obj.ClassName() == "TH1F") or (obj.ClassName() == "TH2F" and ("PostS" in keyname2) or (("Mass" in keyname2) and not "Vs" in keyname2))) :
-            # array to contain a specific (keyname2) histogram for all samples
-            histoArray = []
-            nEventsPostTrigArray = []
-            for index,fileIn in enumerate(bckArray):
-              if (obj.ClassName() == "TH1F") :
-                histo = fileIn.Get(newname)
-                xAxisTitle = fileIn.Get(newname).GetXaxis().GetTitle()
-                yAxisTitle = fileIn.Get(newname).GetYaxis().GetTitle()
-                if (yAxisTitle == "") : yAxisTitle = "Tracks / bin"
-#                if ("MiniTkIso" in keyname2) : xAxisTitle = "MiniTkIso (GeV)"
-#                if ("Ias" in keyname2) : xAxisTitle = "G_{i}"
-              if (obj.ClassName() == "TH2F") :
-                histo = fileIn.Get(newname).ProjectionY(str(newname)+"ProjY"+str(index),bin,bin,"e")
-                xAxisTitle = fileIn.Get(newname).GetYaxis().GetTitle()
-                yAxisTitle = fileIn.Get(newname).GetZaxis().GetTitle()
-              histoArray.append(histo)
-              stackedSummedBackground.Add(histo)
-              if ((index==2)) :
-                histo.SetLineColor(2)
-                histo.SetFillColor(2)
-                histo.SetMarkerColor(2)
-                legend.AddEntry(histo,"mu-QCD p_{T}={50,inf}","LP")
-              elif ((index==1)) :
-                histo.SetLineColor(3)
-                histo.SetFillColor(3)
-                histo.SetMarkerColor(4)
-                legend.AddEntry(histo,"WJets","LP")
-              elif ((index==0)) :
-                histo.SetLineColor(4)
-                histo.SetFillColor(4)
-                histo.SetMarkerColor(4)
-                legend.AddEntry(histo,"TTBar","LP")
-              elif ((index==3)) :
-                histo.SetLineColor(28)
-                histo.SetFillColor(28)
-                histo.SetMarkerColor(28)
-                legend.AddEntry(histo,"ZToMuMu","LP")
-          else :
-            continue
-          cstackedSummedBackgroundString = 'cstackedSummedBackground'+str(j)
-          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-          #  convert stacks to (summed) histos
-          stackedSummedBackground.Draw()
-          stackedSummedBackground.GetXaxis().SetTitle(xAxisTitle)
-          stackedSummedBackground.GetYaxis().SetTitle(yAxisTitle)
-          stackedSummedBackgroundTmp = stackedSummedBackground.GetStack().Last()
-          for index,fileIn in enumerate(bckArray):
-            normHisto = fileIn.Get(newname)
-            max = stackedSummedBackgroundTmp.GetMaximum()
-            if (max==0) : continue
-            normHisto.Scale(1/max)
-            stackedNormSummedBackground.Add(normHisto)
-
-          stackedNormSummedBackground.Draw()
-          
-#          print(stackedSummedBackgroundTmp.Integral(1,stackedSummedBackgroundTmp.GetXaxis().FindBin(0.3))/stackedSummedBackgroundTmp.Integral())
-#          print(SingleMuonHisto.Integral(1,SingleMuonHisto.GetXaxis().FindBin(0.3))/SingleMuonHisto.Integral())
-          if (keyname2== "EventCutFlow") :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            if (blind) :
-              SingleMuonHisto.SetBinContent(18,0)
-              SingleMuonHisto.SetBinContent(19,0)
-              SingleMuonHisto.SetBinContent(20,0)
-            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-            obj.SetStats(0)
-            obj.GetXaxis().SetTitle("")
-            ROOT.gStyle.SetPaintTextFormat(".2g");
-            obj.Draw("HISTOTEXT00")
-            tex2.Draw("SAME")
-            tex3.Draw("SAME")
-            tex4.Draw("SAME")
-            tex5.Draw("SAME")
-#                obj.GetYaxis().SetRangeUser(0.,1.3)
-#            cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/"+keyname2+"_withNumbersNotNorm.png")
-          elif (keyname2== "CutFlow") :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            if (blind) :
-              SingleMuonHisto.SetBinContent(18,-1)
-              SingleMuonHisto.SetBinContent(19,-1)
-              SingleMuonHisto.SetBinContent(20,-1)
-            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-          elif (keyname2== "CutFlowReverse") :
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-          elif (keyname2 == "ErrorHisto") :
-            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-            stackedNormSummedBackground.GetXaxis().SetTitle("")
-            stackedNormSummedBackground.GetYaxis().SetTitle("")
-            stackedNormSummedBackground.SetMaximum(1.4)
-          elif ("pfType" in keyname2) :
-            if (SelectedSignalSamples1Histo.GetMaximum() == 0 ): continue
-            SingleMuonHisto.Scale(1/SingleMuonHisto.GetMaximum())
-            SelectedSignalSamples1Histo.Scale(1/SelectedSignalSamples1Histo.GetMaximum())
-            SelectedSignalSamples2Histo.Scale(1/SelectedSignalSamples2Histo.GetMaximum())
-          legend.AddEntry(SingleMuonHisto,"SingleMuon 2017-2018","LP")
-#          legend.AddEntry(SingleMuonHisto,"SingleMuon 2018C","LP")
-          legend.AddEntry(SelectedSignalSamples1Histo, "HSCPgluino M=1800 GeV", "LP")
-          legend.AddEntry(SelectedSignalSamples2Histo, "HSCPstau M=557 GeV", "LP")
-#          legend.AddEntry(METHisto,"MET-EraC","LP")
-          
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex4 = ROOT.TLatex()
-
-          if ("BefPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"Before pre-selection")
-          elif ("N1" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After N-1 selection")
-          elif ("PostPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After pre-selection")
-          elif ("PostS" in keyname2) :
-            tex4 = ROOT.TLatex(0.75,0.94,"After selection")
-            
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.0285);
-          tex4.SetLineWidth(2);
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          max = numpy.maximum(stackedSummedBackground.GetMaximum(),SingleMuonHisto.GetMaximum())
-
-          if ("CutFlow" in keyname2 or "pfType" in keyname2):
-            stackedNormSummedBackground.Draw("HISTO")
-            stackedNormSummedBackground.SetTitle("")
-            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedNormSummedBackground.GetXaxis().SetTitle("")
-            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
-            stackedNormSummedBackground.SetMaximum(1.3)
-          else :
-            stackedSummedBackground.Draw("HISTO")
-            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
-#            stackedSummedBackground.GetXaxis().SetTitle(axisXTitle)
-#            stackedSummedBackground.GetYaxis().SetTitle(axisYTitle)
-            stackedSummedBackground.SetMaximum(max*1.4)
-            stackedSummedBackground.SetMinimum(0.0)
-          if not ("Mass" in keyname2 or "Ias" in keyname2) :
-            SingleMuonHisto.Draw("SAMEP")
-          if ("CR" in keyname2) :
-            SingleMuonHisto.Draw("SAMEP")
-          SelectedSignalSamples1Histo.Draw("SAME")
-          SelectedSignalSamples2Histo.Draw("SAME")
-          if ("Mass" in keyname2) :
-            stackedSummedBackground.GetXaxis().SetRangeUser(0,1800)
-#                stackedSummedBackground.GetXaxis().SetTitle("Mass [GeV]")
-#                stackedSummedBackground.GetYaxis().SetTitle("Tracks/bin")
-#                stackedSummedBackground.GetYaxis().SetTitleSize(0.05)
-#                stackedSummedBackground.GetYaxis().SetTitleOffset(1)
-
- 
-          
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex4.Draw("SAME")
-          tex5.Draw("SAME")
-
-          cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/"+keyname2+".png")
-          
-#---------------------------------------------------------------------------------------------
-          # now let's do everything again but on a log Y scale
-          cstackedSummedBackgroundLogString = 'cstackedSummedBackgroundLog'+str(j)
-          cstackedSummedBackground = ROOT.TCanvas(cstackedSummedBackgroundLogString, cstackedSummedBackgroundLogString, 800,800)
-          cstackedSummedBackground.SetLogy()
-          
-          if ("PrePreS" in keyname2 or "PostPreS" in keyname2 or "N1" in keyname2) :
-            stackedSummedBackground.SetMinimum(0.0001)
-          else:
-            stackedSummedBackground.SetMinimum(0.0001)
-            
-          if ("CutFlow" in keyname2 or "pfType" in keyname2):
-            stackedNormSummedBackground.Draw("HISTO")
-            stackedNormSummedBackground.SetTitle("")
-            stackedNormSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedNormSummedBackground.GetXaxis().SetTitle("")
-            stackedNormSummedBackground.GetYaxis().SetRangeUser(0,1.5)
-            stackedNormSummedBackground.SetMaximum(200)
-            stackedNormSummedBackground.SetMinimum(0.0000001)
-          else :
-            stackedSummedBackground.Draw("HISTO")
-            stackedSummedBackground.GetXaxis().SetTitleSize(0.05)
-            stackedSummedBackground.GetXaxis().SetTitleOffset(1)
-            stackedSummedBackground.SetMaximum(max*10000)
-          if not ("Mass" in keyname2 or "Ias" in keyname2) :
-            SingleMuonHisto.Draw("SAMEP")
-          if ("CR" in keyname2) :
-            SingleMuonHisto.Draw("SAMEP")
-          SelectedSignalSamples1Histo.Draw("SAME")
-          SelectedSignalSamples2Histo.Draw("SAME")
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex4.Draw("SAME")
-          tex5.Draw("SAME")
-
-          cstackedSummedBackground.SaveAs("StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/"+keyname2+"_log.png")
-
-os.system("cp forWebpage/* StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/.")
-os.system("cp forWebpage/.htaccess StackedComparrison_CodeV"+codeVersion+"_Bin"+str(bin)+"/.")
-print("scp -r StackedComparrison_CodeV"+ codeVersion+"_Bin"+str(bin) + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/compareWithArguementList.py b/Analyzer/test/Tamas/compareWithArguementList.py
deleted file mode 100644
index a4cce30..0000000
--- a/Analyzer/test/Tamas/compareWithArguementList.py
+++ /dev/null
@@ -1,353 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python3 %prog sample.txt")
-(opt,args) = parser.parse_args()
-
-sampleInFile = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-#ROOT.gStyle.SetPalette(1)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-SamplesArray = []
-
-bin = 3
-
-codeVersion = sampleInFile[sampleInFile.find("Code")+5:sampleInFile.find("Code")+9]
-
-with open(sampleInFile, "r") as a_file:
-  for line in a_file:
-    stripped_line = line.strip()
-    SamplesArray.append(stripped_line)
-
-fileInArray = []
-for sample in SamplesArray:
-  fileInArray.append(ROOT.TFile.Open(sample))
-  
-dirs = []
-
-for i in range(0, fileInArray[0].GetListOfKeys().GetEntries()):
-  dirname = fileInArray[0].GetListOfKeys().At(i).GetName()
-  curr_dir = fileInArray[0].GetDirectory(dirname)
-
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = fileInArray[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = fileInArray[0].Get(newname)
-          obj.SetMarkerStyle(20)
-          
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Simulation"); # for square plots
-          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-          #tex3 = ROOT.TLatex(0.28,0.94,"Internal");
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex4 = ROOT.TLatex()
-          if ("PrePreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
-          elif ("N1" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
-          elif ("PostPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
-          elif ("PostS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After selection")
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.045);
-          tex4.SetLineWidth(2);
-                
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if ("Total" in keyname2 or "IntLumi" in keyname2 or "XSection" in keyname2) :
-            continue
-          if obj.InheritsFrom("TObject"):
-              if not os.path.exists(os.path.dirname("Compare"+sampleInFile[:-4]+"/a.png")):
-                print("Create dir")
-                os.makedirs(os.path.dirname("Compare"+sampleInFile[:-4]+"/"))
-#              print(keyname2)
-#              if not ("EventCutFlow" in keyname2) : continue
-
-              if (obj.GetEntries() == 0 ) : continue
-              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
-                obj.SetMarkerStyle(20)
-                obj.GetXaxis().SetRange(bin,bin)
-                obj.Project3D("ZY").Draw("COLZ")
-              if (obj.ClassName() == "TH2F" and  (("Trigger" in keyname2) and ( "Vs" in keyname2))) :
-                canvasString = 'canvas1'+str(j)
-                canvas = ROOT.TCanvas(canvasString, canvasString, 800,800)
-                legend =  ROOT.TLegend(.55,.65,.80,.89,"","brNDC")
-                legend.SetTextFont(42)
-                legend.SetTextSize(0.017)
-                legend.SetBorderSize(1);
-                legend.SetBorderSize(0);
-                legend.SetLineColor(1);
-                legend.SetLineStyle(1);
-                legend.SetLineWidth(1);
-                legend.SetFillColor(0);
-                legend.SetFillStyle(1001);
-                
-                histoArrayProfY = []
-                k = 0
-                for fileIn in fileInArray:
-                  k = k + 1
-                  projXName = keyname2 + str(k)
-                  if (fileIn.Get(newname)) : histoArrayProfY.append(fileIn.Get(newname).ProfileY().ProjectionX(projXName))
-                indexNew = -1
-                for index in range(0, len(histoArrayProfY)):
-                  histoArrayProfY[index].SetStats(0)
-                  histoArrayProfY[index].SetMarkerStyle(20)
-                  legend.AddEntry(histoArrayProfY[index],SamplesArray[index][19:SamplesArray[index].find("Code")+9],"LP")
-                  if (index>-1):
-                    indexNew = index+2
-                  if (indexNew==10) :
-                    indexNew = 40
-                  elif (indexNew==11) :
-                    indexNew = 46
-                  elif (indexNew==12) :
-                    indexNew = 41
-                  elif (indexNew==13) :
-                    indexNew = 30
-                  elif (indexNew==14) :
-                    indexNew = 42
-                  histoArrayProfY[index].SetLineColor(indexNew)
-                  histoArrayProfY[index].SetMarkerColor(indexNew)
-#                  histoArray[index].SetFillColor(indexNew)
-                  histoArrayProfY[index].SetTitle("")
-                  histoArrayProfY[index].GetYaxis().SetTitle("Efficiency")
-                  histoArrayProfY[index].SetMaximum(1.6)
-                  histoArrayProfY[index].DrawClone("SAME")
-                legend.Draw("SAME")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                canvas.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_profileY.png")
-              
-              
-              # Now do the 1D histos
-              
-              if (obj.ClassName() == "TH1F" or obj.ClassName() == "TProfile"): # and "BS_" in keyname2):
-                canvasString = 'canvas'+str(j)
-                canvas = ROOT.TCanvas(canvasString, canvasString, 800,800)
-                legend =  ROOT.TLegend(.55,.65,.80,.89,"","brNDC")
-                legend.SetTextFont(42)
-                legend.SetTextSize(0.017)
-                legend.SetBorderSize(1);
-                legend.SetBorderSize(0);
-                legend.SetLineColor(1);
-                legend.SetLineStyle(1);
-                legend.SetLineWidth(1);
-                legend.SetFillColor(0);
-                legend.SetFillStyle(1001);
-                
-                histoArray = []
-                for fileIn in fileInArray:
-                  if (fileIn.Get(newname)) : histoArray.append(fileIn.Get(newname))
-                for index in range(0, len(histoArray)):
-                  histoArray[index].SetStats(0)
-                  histoArray[index].SetMarkerStyle(20)
-                  
-                  legend.AddEntry(histoArray[index],SamplesArray[index][19:SamplesArray[index].find("Code")+9],"LP")
-                  indexNew = -1
-                  if (index>-1):
-                    indexNew = index+2
-                  if (indexNew==10) :
-                    indexNew = 40
-                  elif (indexNew==11) :
-                    indexNew = 46
-                  elif (indexNew==12) :
-                    indexNew = 41
-                  elif (indexNew==13) :
-                    indexNew = 30
-                  elif (indexNew==14) :
-                    indexNew = 42
-                  histoArray[index].SetLineColor(indexNew)
-                  histoArray[index].SetMarkerColor(indexNew)
-#                  histoArray[index].SetFillColor(indexNew)
-                  histoArray[index].SetTitle("")
-                  max = 0.0
-#                  print(keyname2)
-                  for index2 in range(0, len(histoArray)):
-                    if not (histoArray[index2]) : continue
-                    max = numpy.maximum(max,histoArray[index2].GetMaximum())
-#                  histoArray[index].GetYaxis().SetTitle("Tracks/bin")
-#                  histoArray[index].GetXaxis().SetTitle(keyname2)
-                  if (keyname2 == "pfType") :
-                    if (histoArray[index].GetMaximum() > 0 ) :  histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    histoArray[index].GetYaxis().SetRangeUser(0.,1.4)
-                    histoArray[index].GetXaxis().SetBinLabel(1,"AllTracks")
-                    histoArray[index].GetXaxis().SetBinLabel(2,"PFtracks")
-                    histoArray[index].GetXaxis().SetBinLabel(3,"isElectron")
-                    histoArray[index].GetXaxis().SetBinLabel(4,"isMuon")
-                    histoArray[index].GetXaxis().SetBinLabel(5,"isPhoton")
-                    histoArray[index].GetXaxis().SetBinLabel(6,"isChHadron")
-                    histoArray[index].GetXaxis().SetBinLabel(7,"isNeutHadron")
-                    histoArray[index].GetXaxis().SetBinLabel(8,"isUndefined")
-                    histoArray[index].GetXaxis().SetBinLabel(9,"else")
-                    histoArray[index].GetXaxis().SetTitle("")
-                    histoArray[index].GetYaxis().SetTitle("")
-                    histoArray[index].SetMaximum(1.4)
-                  elif (keyname2== "EventCutFlow") :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    SecondBinSize =  histoArray[0].GetBinContent(1) * 1.3
-                    histoArray[index].GetYaxis().SetRangeUser(0.,SecondBinSize)
-                    histoArray[index].SetMaximum(SecondBinSize)
-                    ROOT.gStyle.SetPaintTextFormat(".2g");
-                    histoArray[index].Draw("SAMEHISTOTEXT00")
-                  elif (keyname2== "CutFlow") :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    if (histoArray[index].GetMaximum() > 0 ) :  histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    SecondBinSize =  histoArray[0].GetBinContent(1) * 1.3
-                    histoArray[index].GetYaxis().SetRangeUser(0.,SecondBinSize)
-                    histoArray[index].SetMaximum(SecondBinSize)
-                  elif (keyname2== "CutFlowReverse") :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    if (histoArray[index].GetMaximum() > 0 ) :  histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    histoArray[index].GetYaxis().SetRangeUser(0.,1.6)
-                    histoArray[index].SetMaximum(1.6)
-                  elif ("TriggerType" in keyname2) :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    if (histoArray[index].Integral()>0) : histoArray[index].Scale(1/histoArray[index].Integral())
-                    histoArray[index].GetXaxis().SetTitle("")
-                    histoArray[index].GetXaxis().SetRangeUser(0.,5.)
-                    histoArray[index].GetYaxis().SetRangeUser(0.01,1.)
-                    histoArray[index].SetMaximum(1.)
-                    ROOT.gStyle.SetPaintTextFormat(".2g");
-                    histoArray[index].Draw("SAMEHISTOTEXT00")
-                  elif ("HltMatchTrackLevel" in keyname2) :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    if (histoArray[index].GetBinContent(1)>0) : histoArray[index].Scale(1/histoArray[index].GetBinContent(1))
-                    histoArray[index].SetBinError(1,0)
-                    histoArray[index].SetBinError(2,0)
-                    histoArray[index].GetYaxis().SetTitle("Norm events / category")
-                    histoArray[index].GetYaxis().SetRangeUser(0.92,1.01)
-                    ROOT.gStyle.SetPaintTextFormat(".2g");
-                    histoArray[index].Draw("SAMEHISTOTEXT00")
-                  elif ("pfType" in keyname2) :
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].SetStats(0)
-                    if (histoArray[index].GetMaximum() > 0 ) :  histoArray[index].Scale(1/histoArray[index].GetMaximum())
-                    histoArray[index].Draw("COLZ L")
-                  elif (keyname2== "CutFlowEta" or keyname2 == "CutFlowPfType") :
-                    histoArray[index].SetStats(0)
-                    histoArray[index].Draw("COLZ")
-                  elif ("IsPer" in keyname2) :
-                    histoArray[index].SetStats(0)
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].ProjectionY(newname,histoArray[index].GetXaxis().FindBin(0.7),-1,"e").Draw("COLZ")
-                  elif ("EIsolPer" in keyname2) :
-                    histoArray[index].SetStats(0)
-                    histoArray[index].SetMarkerStyle(20)
-                    histoArray[index].ProjectionY(newname,histoArray[index].GetXaxis().FindBin(0.85),-1,"e").Draw("COLZ")
-                  else :
-                    histoArray[index].SetMaximum(max*1.5)
-                  histoArray[index].Draw("SAME")
-                
-
-
-
-#                stackPlots.Draw("HIST")
-#                QCDFlatHisto.Draw("SAME")
-#                stackPlots.SetTitle("")
-#                stackPlots.GetXaxis().SetTitleSize(0.05)
-#                stackPlots.GetXaxis().SetTitleOffset(1)
-#                stackPlots.GetXaxis().SetTitle("Mass [GeV]")
-#                stackPlots.GetYaxis().SetTitle("Tracks/bin")
-#                stackPlots.GetYaxis().SetTitleSize(0.05)
-#                stackPlots.GetYaxis().SetTitleOffset(1)
-
-#                stackPlots.SetMaximum(max*1.1)
-#                stackPlots.SetMinimum(0.001)
-                legend.Draw("SAME")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-
-                canvas.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+".png")
-
-                cstackPlotsLogString = 'cstackPlotsLog'+str(j)
-                cstackPlots = ROOT.TCanvas(cstackPlotsLogString, cstackPlotsLogString, 800,800)
-                cstackPlots.SetLogy()
-                for index in range(0, len(histoArray)):
-                  histoArray[index].Draw("SAME")
-                  if ("CutFlow" in keyname2 or "pfType"  in keyname2 ) :
-                     histoArray[index].SetMaximum(100)
-                     histoArray[index].SetMinimum(0.0001)
-                  if (keyname2== "EventCutFlow") :
-                     histoArray[index].SetStats(0)
-                     if ("SingleMuon" in SamplesArray[index]) :
-                       histoArray[index].SetMinimum(300000)
-                       histoArray[index].SetMaximum(max*2)
-                       print(str(SamplesArray[index][14:SamplesArray[index].find("Code")-1])+": "+str(histoArray[index].GetBinContent(17)))
-                     else :
-                      histoArray[index].SetMinimum(max*1000000)
-                      histoArray[index].SetMinimum(0.000001)
-
-                     
-                     ROOT.gStyle.SetPaintTextFormat(".2g");
-                     histoArray[index].Draw("SAMEHISTOTEXT25")
-                  elif ("ProbQ" in keyname2) :
-                    histoArray[index].SetMaximum(max*1000000)
-                    histoArray[index].SetMinimum(0.000001)
-                  else :
-                    histoArray[index].SetMaximum(max*10000)
-                    histoArray[index].SetMinimum(0.000001)
-                legend.Draw("SAME")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-
-                cstackPlots.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_log.png")
-                
-                cstackPlotsNormString = 'cstackPlotsNorm'+str(j)
-                cstackPlotsNorm = ROOT.TCanvas(cstackPlotsNormString, cstackPlotsLogString, 800,800)
-                maxNorm = 0.
-                for index in range(0, len(histoArray)):
-                  int = histoArray[index].Integral()
-                  if ("CandidateType" in keyname2) :
-                    int = histoArray[index].GetBinContent(1)
-                  if (int>0) :
-                    histoArray[index].Scale(1/int)
-                  yAxisTitle = histoArray[index].GetYaxis().GetTitle()
-                  histoArray[index].GetYaxis().SetTitle("Normalized " + yAxisTitle)
-                  maxNorm = numpy.maximum(maxNorm,histoArray[index].GetMaximum())
-                  histoArray[index].Draw("SAME")
-                histoArray[0].SetMaximum(maxNorm*1.6)
-                canvas.SaveAs("Compare"+sampleInFile[:-4]+"/"+keyname2+"_Norm.png")
-              
-os.system("cp forWebpage/* Compare"+sampleInFile[:-4]+"/.")
-os.system("cp forWebpage/.htaccess Compare"+sampleInFile[:-4]+"/.")
-print("scp -r Compare"+sampleInFile[:-4]+" tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/createCutflow.py b/Analyzer/test/Tamas/createCutflow.py
deleted file mode 100644
index aab31ec..0000000
--- a/Analyzer/test/Tamas/createCutflow.py
+++ /dev/null
@@ -1,269 +0,0 @@
-import ROOT, sys, os, time, re
-import numpy as np
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog fileName.root")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetStyle("Plain")
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-fileName = sys.argv[1]
-
-print("Filename: "+fileName)
-
-f1 = ROOT.TFile.Open(fileName)
-
-for i in range(0, f1.GetListOfKeys().GetEntries()):
-  dirname = f1.GetListOfKeys().At(i).GetName()
-  curr_dir = f1.GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = f1.GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj1 = f1.Get(newname)
-          if obj1.InheritsFrom("TObject"):
-              can = obj1
-              can = ROOT.TCanvas(newname)
-              name = keyname2 +  ".png"
-              if (keyname2 == "CutFlow") :
-                obj1.SetMarkerColor(1)
-                obj1.SetLineColor(1)
-                obj1.SetMarkerStyle(20)
-                obj1.SetStats(0)
-
-                obj1.Scale(1/obj1.GetMaximum())
-              
-                legend =  ROOT.TLegend(.35,.85,.90,.90,"","brNDC")
-                legend.SetTextFont(42)
-                legend.SetTextSize(0.03)
-                legend.SetBorderSize(1);
-                legend.SetLineColor(1);
-                legend.SetLineStyle(1);
-                legend.SetLineWidth(1);
-                legend.SetFillColor(0);
-                legend.SetFillStyle(1001);
-                legend.AddEntry(obj1,fileName,"LP")
-                    
-                obj1.Draw("COLZ L")
-                    
-                obj1.GetXaxis().SetBinLabel(1,"Trigger")
-                obj1.GetXaxis().SetBinLabel(2,"Eta")
-                obj1.GetXaxis().SetBinLabel(3,"pT")
-                obj1.GetXaxis().SetBinLabel(4,"NumHits")
-                obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
-                obj1.GetXaxis().SetBinLabel(6,"ValidFract")
-                obj1.GetXaxis().SetBinLabel(7,"NumDeDx")
-                obj1.GetXaxis().SetBinLabel(8,"ProbXY")
-                obj1.GetXaxis().SetBinLabel(9,"HighPurity")
-                obj1.GetXaxis().SetBinLabel(10,"Chi2oDOF")
-                obj1.GetXaxis().SetBinLabel(11,"EoP")
-                obj1.GetXaxis().SetBinLabel(12,"dz")
-                obj1.GetXaxis().SetBinLabel(13,"dxy")
-                obj1.GetXaxis().SetBinLabel(14,"pTerrOverpT")
-                obj1.GetXaxis().SetBinLabel(15,"TKIso")
-                obj1.GetXaxis().SetBinLabel(16,"MiniIso")
-                obj1.GetXaxis().SetBinLabel(17,"MassT")
-                obj1.GetXaxis().SetBinLabel(18,"Ih")
-                obj1.GetXaxis().SetBinLabel(19,"ProbQ")
-                obj1.GetXaxis().SetBinLabel(20,"MuStat")
-                obj1.GetXaxis().SetBinLabel(21,"PhiTOF")
-                obj1.GetXaxis().SetBinLabel(22,"EtaTOF")
-                    
-                legend.Draw("SAME")
-                can.SaveAs("CutFlow_"+fileName[:-5]+".png")
-                #can.SaveAs(name.replace(".png",".pdf"))
-                #can.SaveAs(name.replace(".png",".C"))
-                can.Close()
-            
-              if (keyname2 == "N1Eta"):
-                N1EtaEff = obj1.Integral(obj1.GetXaxis().FindBin(-2.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral(obj1.GetXaxis().FindBin(-3),obj1.GetXaxis().FindBin(3)))
-              elif (keyname2 == "N1Chi2PerNdof"):
-                N1Chi2PerNdofEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(5))/(obj1.Integral())
-              elif (keyname2 == "N1Dxy"):
-                N1DxyEff = obj1.Integral(obj1.GetXaxis().FindBin(-0.5),obj1.GetXaxis().FindBin(0.5))/(obj1.Integral()) #obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(10))
-              elif (keyname2 == "N1Dz"):
-                N1DzEff = obj1.Integral(obj1.GetXaxis().FindBin(-0.5),obj1.GetXaxis().FindBin(0.5))/(obj1.Integral()) #obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(10))
-              elif (keyname2 == "N1EIsol"):
-                N1EIsolEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.3))/(obj1.Integral())
-              elif (keyname2 == "N1MIh"):
-                N1MIhEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(40))/(obj1.Integral())
-              elif (keyname2 == "N1MPt"):
-                N1MPtEff = obj1.Integral(obj1.GetXaxis().FindBin(55.0),obj1.GetXaxis().FindBin(4001.0))/(obj1.Integral())
-              elif (keyname2 == "N1ProbQ"):
-                N1ProbQEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.1))/(obj1.Integral())
-              elif (keyname2 == "N1ProbXY"):
-                N1ProbXYEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(1.0))/(obj1.Integral())
-              elif (keyname2 == "N1PtErrOverPt"):
-                N1PtErrOverPtEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.25))/(obj1.Integral())
-              elif (keyname2 == "N1Qual"):
-                N1QualEff = obj1.Integral(obj1.GetXaxis().FindBin(1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral())
-#              elif (keyname2 == "N1SegSep"):
-#                N1SegSepEff = obj1.Integral(obj1.GetXaxis().FindBin(-2.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral())
-              elif (keyname2 == "N1Stations"):
-                N1StationsEff = obj1.Integral(obj1.GetXaxis().FindBin(2),obj1.GetXaxis().FindBin(8))/(obj1.Integral())
-              elif (keyname2 == "N1TNOH"):
-                N1TNOHEff = obj1.Integral(obj1.GetXaxis().FindBin(9),obj1.GetXaxis().FindBin(40))/(obj1.Integral())
-              elif (keyname2 == "N1TNOHFraction"):
-                N1TNOHFractionEff = obj1.Integral(obj1.GetXaxis().FindBin(0.8),obj1.GetXaxis().FindBin(0.999))/(obj1.Integral())
-              elif (keyname2 == "N1TNOPH"):
-                N1TNOPHEff = obj1.Integral(obj1.GetXaxis().FindBin(3),obj1.GetXaxis().FindBin(8))/(obj1.Integral())
-                
-              elif (keyname2 == "BS_Eta"):
-                BSEtaEff = obj1.Integral(obj1.GetXaxis().FindBin(-2.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral(obj1.GetXaxis().FindBin(-3),obj1.GetXaxis().FindBin(3)))
-              elif (keyname2 == "BS_Chi2PerNdof"):
-                BS_Chi2PerNdofEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(5))/(obj1.Integral())
-              elif (keyname2 == "BS_dxyMinv3d"):
-                BS_DxyEff = obj1.Integral(obj1.GetXaxis().FindBin(-0.5),obj1.GetXaxis().FindBin(0.5))/(obj1.Integral()) #obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(10))
-              elif (keyname2 == "BS_dzMinv3d"):
-                BS_DzEff = obj1.Integral(obj1.GetXaxis().FindBin(-0.5),obj1.GetXaxis().FindBin(0.5))/(obj1.Integral()) #obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(10))
-              elif (keyname2 == "BS_EIsol"):
-                BS_EIsolEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.3))/(obj1.Integral())
-              elif (keyname2 == "BS_MIh"):
-                BS_MIhEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(40))/(obj1.Integral())
-              elif (keyname2 == "BS_MPt"):
-                BS_MPtEff = obj1.Integral(obj1.GetXaxis().FindBin(55),obj1.GetXaxis().FindBin(3999))/(obj1.Integral())
-              elif (keyname2 == "BS_ProbQ"):
-                BS_ProbQEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.1))/(obj1.Integral())
-              elif (keyname2 == "BS_ProbXY"):
-                BS_ProbXYEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(1.0))/(obj1.Integral())
-              elif (keyname2 == "BS_PtErrOverPt"):
-                BS_PtErrOverPtEff = obj1.Integral(obj1.GetXaxis().FindBin(0.0),obj1.GetXaxis().FindBin(0.25))/(obj1.Integral())
-              elif (keyname2 == "BS_Qual"):
-                BS_QualEff = obj1.Integral(obj1.GetXaxis().FindBin(1.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral())
-#              elif (keyname2 == "BS_SegSep"):
-#                BS_SegSepEff = obj1.Integral(obj1.GetXaxis().FindBin(-2.1),obj1.GetXaxis().FindBin(2.1))/(obj1.Integral())
-#              elif (keyname2 == "BS_Stations"):
-#                BS_StationsEff = obj1.Integral(obj1.GetXaxis().FindBin(2),obj1.GetXaxis().FindBin(8))/(obj1.Integral())
-              elif (keyname2 == "BS_TNOH"):
-                BS_TNOHEff = obj1.Integral(obj1.GetXaxis().FindBin(9),obj1.GetXaxis().FindBin(40))/(obj1.Integral())
-              elif (keyname2 == "BS_TNOHFraction"):
-                BS_TNOHFractionEff = obj1.Integral(obj1.GetXaxis().FindBin(0.8),obj1.GetXaxis().FindBin(0.999))/(obj1.Integral())
-              elif (keyname2 == "BS_TNOPH"):
-                BS_TNOPHEff = obj1.Integral(obj1.GetXaxis().FindBin(3),obj1.GetXaxis().FindBin(8))/(obj1.Integral())
-
-
-
-fileOutEtaEff = open("EtaEff.txt", "a")
-fileOutMPtEff = open("MPtEff.txt", "a")
-fileOutTNOHEff = open("TNOHEff.txt", "a")
-fileOutTNOPHEff = open("TNOPHEff.txt", "a")
-fileOutTNOHFractionEff = open("TNOHFractionEff.txt", "a")
-fileOutProbQEff = open("ProbQEff.txt", "a")
-fileOutProbXYEff = open("ProbXYEff.txt", "a")
-fileOutChi2PerNdofEff = open("Chi2PerNdofEff.txt", "a")
-fileOutEIsolEff = open("EIsolEff.txt", "a")
-fileOutMIhEff = open("MIhEff.txt", "a")
-fileOutPtErrOverPtEff = open("PtErrOverPtEff.txt", "a")
-fileOutDzEff = open("DzEff.txt", "a")
-fileOutDxyEff = open("DxyEff.txt", "a")
-
-idx = fileName.find("_M_")
-fileOutEtaEff.write(fileName[idx+3:idx+7]+"\t"+str(BSEtaEff)+"\n")
-fileOutMPtEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_MPtEff)+"\n")
-fileOutTNOHEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_TNOHEff)+"\n")
-fileOutTNOPHEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_TNOPHEff)+"\n")
-fileOutTNOHFractionEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_TNOHFractionEff)+"\n")
-fileOutProbQEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_ProbQEff)+"\n")
-fileOutProbXYEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_ProbXYEff)+"\n")
-fileOutChi2PerNdofEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_Chi2PerNdofEff)+"\n")
-fileOutEIsolEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_EIsolEff)+"\n")
-fileOutMIhEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_MIhEff)+"\n")
-fileOutPtErrOverPtEff .write(fileName[idx+3:idx+7]+"\t"+str(BS_PtErrOverPtEff)+"\n")
-fileOutDzEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_DzEff)+"\n")
-fileOutDxyEff.write(fileName[idx+3:idx+7]+"\t"+str(BS_DxyEff)+"\n")
-
-can = ROOT.TCanvas("CutEffs")
-obj1 = ROOT.TH1F("CutEffs","CutEffs",14,0.0,14.0)
-obj2 = ROOT.TH1F("CutEffsN1","CutEffsN1",14,0.0,14.0)
-obj1.SetBinContent(1,1)
-obj1.SetBinContent(2,BSEtaEff)
-obj1.SetBinContent(3,BS_MPtEff)
-obj1.SetBinContent(4,BS_TNOHEff)
-obj1.SetBinContent(5,BS_TNOPHEff)
-obj1.SetBinContent(6,BS_TNOHFractionEff)
-obj1.SetBinContent(7,BS_ProbXYEff)
-obj1.SetBinContent(8,BS_Chi2PerNdofEff)
-obj1.SetBinContent(9,BS_EIsolEff)
-obj1.SetBinContent(10,BS_DzEff)
-obj1.SetBinContent(11,BS_DxyEff)
-obj1.SetBinContent(12,BS_PtErrOverPtEff)
-obj1.SetBinContent(13,BS_MIhEff)
-obj1.SetBinContent(14,BS_ProbQEff)
-obj1.SetMaximum(1.1)
-#obj1.SetBinContent(9,1) #N1QualEff/BS_QualEff
-#obj1.SetBinContent(16,1)
-#obj1.SetBinContent(17,1)
-#obj1.SetBinContent(18,1)
-#obj1.SetBinContent(19,1)
-#obj1.SetBinContent(20,1)
-
-obj2.SetBinContent(1,1)
-obj2.SetBinContent(2,N1EtaEff)
-obj2.SetBinContent(3,N1MPtEff)
-obj2.SetBinContent(4,N1TNOHEff)
-obj2.SetBinContent(5,N1TNOPHEff)
-obj2.SetBinContent(6,N1TNOHFractionEff)
-obj2.SetBinContent(7,N1ProbXYEff)
-obj2.SetBinContent(8,N1Chi2PerNdofEff)
-obj2.SetBinContent(9,N1EIsolEff)
-obj2.SetBinContent(10,N1DzEff)
-obj2.SetBinContent(11,N1DxyEff)
-obj2.SetBinContent(12,N1PtErrOverPtEff)
-obj2.SetBinContent(13,N1MIhEff)
-obj2.SetBinContent(14,N1ProbQEff)
-#obj2.SetBinContent(9,1) #N1QualEff/BS_QualEff
-#obj2.SetBinContent(16,1)
-#obj2.SetBinContent(17,1)
-#obj2.SetBinContent(18,1)
-#obj2.SetBinContent(19,1)
-#obj2.SetBinContent(20,1)
-obj2.SetLineColor(2)
-obj2.SetMarkerColor(2)
-
-obj1.GetXaxis().SetBinLabel(1,"Trigger")
-obj1.GetXaxis().SetBinLabel(2,"Eta")
-obj1.GetXaxis().SetBinLabel(3,"pT")
-obj1.GetXaxis().SetBinLabel(4,"NumHits")
-obj1.GetXaxis().SetBinLabel(5,"NumPixHits")
-obj1.GetXaxis().SetBinLabel(6,"ValidFract")
-obj1.GetXaxis().SetBinLabel(7,"ProbXY")
-obj1.GetXaxis().SetBinLabel(8,"Chi2oDOF")
-obj1.GetXaxis().SetBinLabel(9,"EoP")
-obj1.GetXaxis().SetBinLabel(10,"dz")
-obj1.GetXaxis().SetBinLabel(11,"dxy")
-obj1.GetXaxis().SetBinLabel(12,"pTerrOverpT")
-obj1.GetXaxis().SetBinLabel(13,"Ih")
-obj1.GetXaxis().SetBinLabel(14,"ProbQ")
-#obj1.GetXaxis().SetBinLabel(15,"TKIso")
-#obj1.GetXaxis().SetBinLabel(9,"HighPurity")
-#obj1.GetXaxis().SetBinLabel(17,"MuStat")
-#obj1.GetXaxis().SetBinLabel(18,"EtaTOF")
-#obj1.GetXaxis().SetBinLabel(19,"PhiTOF")
-#obj1.GetXaxis().SetBinLabel(20,"N/A")
-obj1.GetYaxis().SetTitle("Efficiency")
-obj1.GetYaxis().SetTitleOffset(1.1)
-obj1.SetStats(0)
-
-legend =  ROOT.TLegend(.65,.75,.90,.9,"","brNDC")
-legend.SetTextFont(42)
-legend.SetTextSize(0.035)
-legend.SetBorderSize(1);
-legend.SetLineColor(1);
-legend.SetLineStyle(1);
-legend.SetLineWidth(1);
-legend.SetFillColor(0);
-legend.SetFillStyle(1001);
-legend.AddEntry(obj1,"Cut alone","LP")
-legend.AddEntry(obj2,"Cut with other cuts","LP")
-
-obj1.Draw()
-obj2.Draw("SAME")
-legend.Draw("SAME")
-can.SaveAs("CutEffs_"+fileName[:-5]+".png")
diff --git a/Analyzer/test/Tamas/createEffVsMass.py b/Analyzer/test/Tamas/createEffVsMass.py
deleted file mode 100644
index 8466636..0000000
--- a/Analyzer/test/Tamas/createEffVsMass.py
+++ /dev/null
@@ -1,92 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-from tqdm import tqdm
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BackgroundSamples = [
-"crab_Analysis_2018_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
-]
-
-fileInArray = []
-for sample in BackgroundSamples:
-  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
-  
-  
-cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"
-canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
-
-EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
-
-for fileIn in fileInArray:
-  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
-    print("NumEvents not found, exit")
-    continue
-  
-  obj = fileIn.Get("HSCParticleAnalyzer/BaseName/PostPreS_ProbQNoL1")
-
-  firstBinInt = obj.Integral(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(0.1)+1)
-  totalInt = obj.Integral()
-  efficiency = firstBinInt/float(totalInt)
-
-  
-      
-      EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForMiniRelTkIso)
-      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUA)
-      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUB)
-      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUC)
-      EffForData.SetBinContent(5,N1effForMiniTkIso)
-      EffForData.SetBinContent(6,N1effForMiniTkIsoPUA)
-      EffForData.SetBinContent(7,N1effForMiniTkIsoPUB)
-      EffForData.SetBinContent(8,N1effForMiniTkIsoPUC)
-      EffForData.SetBinContent(9,N1effForMiniIso)
-      EffForData.SetBinContent(10,N1effForTIsol)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-#      EffForData.SetMarkerStyle(20)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
-      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
-      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetTitle("")
-      
-      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
-      legend.SetTextFont(42)
-      legend.SetTextSize(0.02)
-      legend.SetBorderSize(1);
-      legend.SetBorderSize(0);
-      legend.SetLineColor(1);
-      legend.SetLineStyle(1);
-      legend.SetLineWidth(1);
-      legend.SetFillColor(0);
-      legend.SetFillStyle(1001);
-      legend.AddEntry(EffForData,"DATA (2018C)","LP")
diff --git a/Analyzer/test/Tamas/createEffsSept_v2.py b/Analyzer/test/Tamas/createEffsSept_v2.py
deleted file mode 100644
index 197d0cf..0000000
--- a/Analyzer/test/Tamas/createEffsSept_v2.py
+++ /dev/null
@@ -1,719 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-ROOT.gStyle.SetPaintTextFormat("4.2f");
-
-SingleMuonSample = ROOT.TFile.Open("crab_Analysis_2018_SingleMuon_Run2018C_woProbQ_CodeV"+codeVersion+"_v1.root")
-AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_woProbQ_CodeV"+codeVersion+"_v1.root")
-Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-cutValues = {
-'BefPreS_Pt' : 55.,
-'N1_Pt' : 55.,
-'BefPreS_Eta' : 1.0,
-'N1_Eta' : 1.0,
-'BefPreS_TNOPH' : 1., # after 29p2 should be 1
-'N1_TNOPH' : 1., # after 29p2 should be 1
-'BefPreS_TNOHFraction' : .8,
-'N1_TNOHFraction' : .8,
-'BefPreS_TNOM' : 9.,
-'N1_TNOM' : 9.,
-'BefPreS_Chi2oNdof' : 5.,
-'N1_Chi2oNdof' : 5.,
-'BefPreS_Dz' : 0.1,
-'N1_Dz' : 0.1,
-'BefPreS_Dxy' : 0.02,
-'N1_Dxy' : 0.02,
-'BefPreS_PtErrOverPt2' : 0.001,
-'PostPreS_PtErrOverPt2' : 0.001,
-'N1_EoP' : 0.3,
-'BefPreS_EoP' : 0.3,
-'BefPreS_Ih' : 3.47,
-'N1_Ih' : 3.47,
-'BefPreS_ProbXY' : 0.01,
-'N1_ProbXY' : 0.01,
-'BefPreS_MiniRelIsoAll' : 0.02,
-'N1_MiniRelIsoAll' : 0.02,
-'BefPreS_MiniRelTkIso' : 0.02,
-'N1_MiniRelTkIso' : 0.02,
-'BefPreS_MiniRelTkIso_PUA' : 0.02,
-'N1_MiniRelTkIso_PUA' : 0.02,
-'BefPreS_MiniRelTkIso_PUB' : 0.02,
-'N1_MiniRelTkIso_PUB' : 0.02,
-'BefPreS_MiniRelTkIso_PUC' : 0.02,
-'N1_MiniRelTkIso_PUC' : 0.02,
-'BefPreS_P' : 3000,
-'PostPreS_P' : 3000,
-'BefPreS_TIsol' : 15,
-'PostPreS_TIsol' : 15,
-'BefPreS_MiniTkIso' : 15,
-'N1_MiniTkIso' : 15,
-'BefPreS_MiniTkIso_PUA' : 15,
-'N1_MiniTkIso_PUA' : 15,
-'BefPreS_MiniTkIso_PUB' : 15,
-'N1_MiniTkIso_PUB' : 15,
-'BefPreS_MiniTkIso_PUC' : 15,
-'N1_MiniTkIso_PUC' : 15,
-}
-
-
-sigma = 3
-
-if not os.path.exists(os.path.dirname("Effs_CodeV"+codeVersion+"/a.png")):
-  print("Create dir")
-  os.makedirs(os.path.dirname("Effs_CodeV"+codeVersion+"/"))
-
-for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
-  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
-  curr_dir = SingleMuonSample.GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  N1eff = N1effForP = N1effForPPunzi = N1effForPBcg = N1effForPSignal = 0
-  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
-  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
-  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-#          if not ("N1_Eta" in keyname2) : continue
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
-          histo = SingleMuonSample.Get(newname)
-          histoAllBcg = AllBcgSample.Get(newname)
-          histoSignal = Rhadron1800GeV.Get(newname)
-          histoDenomAllBcgFixedN1 = AllBcgSample.Get(dirname + "/" + keyname + "/N1_Eta")
-          histoDenomAllBcgFixedBefPreS = AllBcgSample.Get(dirname + "/" + keyname + "/BefPreS_Eta")
-
-          if not (cutValues.get(keyname2)) : continue
-          Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
-          NumAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(cutValues[keyname2]))
-          NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(cutValues[keyname2]))
-          Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()+1))
-          DenomAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(histoAllBcg.GetXaxis().GetXmax()+1))
-          DenomAllBcgFixedBefPreS = histoDenomAllBcgFixedBefPreS.Integral(histoDenomAllBcgFixedBefPreS.GetXaxis().FindBin(0),histoDenomAllBcgFixedBefPreS.GetXaxis().FindBin(histoDenomAllBcgFixedBefPreS.GetXaxis().GetXmax()+1))
-          DenomAllBcgFixedN1 = histoDenomAllBcgFixedN1.Integral(histoDenomAllBcgFixedN1.GetXaxis().FindBin(0),histoDenomAllBcgFixedN1.GetXaxis().FindBin(histoDenomAllBcgFixedN1.GetXaxis().GetXmax()+1))
-          
-#          print(keyname2 + ": " + str(DenomAllBcgFixedN1))
-          DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()+1))
-          if (Denom>0) :  Eff = Num / Denom
-          else : Eff = 0
-          if (DenomAllBcg>0) : EffAllBcg = NumAllBcg / DenomAllBcg
-          else : EffAllBcg = 0
-          if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
-          else : EffSignal = 0
-         
-          if ("BefPreS_Eta" in keyname2) :
-            BefPreSeffForEta = Eff
-            BefPreSeffForEtaBcg = EffAllBcg
-            BefPreSeffForEtaSignal = EffSignal
-            BefPreSeffForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_P") :
-            BefPreSeffForP = Eff
-            BefPreSeffForPBcg = EffAllBcg
-            BefPreSeffForPSignal = EffSignal
-            BefPreSeffForPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Pt" in keyname2) :
-            BefPreSeffForpT = 1-Eff
-            BefPreSeffForpTBcg = 1-EffAllBcg
-            BefPreSeffForpTSignal = 1-EffSignal
-            BefPreSeffForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_PtErrOverPt2" in keyname2) :
-            BefPreSeffForpTErrOverPt2 = Eff
-            BefPreSeffForpTErrOverPt2Bcg = EffAllBcg
-            BefPreSeffForpTErrOverPt2Signal = EffSignal
-            BefPreSeffForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_TNOPH" in keyname2) :
-            BefPreSeffForNumPixHits = 1-Eff
-            BefPreSeffForNumPixHitsBcg = 1-EffAllBcg
-            BefPreSeffForNumPixHitsSignal = 1-EffSignal
-            BefPreSeffForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_TNOHFraction" in keyname2) :
-            BefPreSeffForValidFract = 1-Eff
-            BefPreSeffForValidFractBcg = 1-EffAllBcg
-            BefPreSeffForValidFractSignal = 1-EffSignal
-            BefPreSeffForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_TNOM" in keyname2) :
-            BefPreSeffForNumDeDx = 1-Eff
-            BefPreSeffForNumDeDxBcg = 1-EffAllBcg
-            BefPreSeffForNumDeDxSignal = 1-EffSignal
-            BefPreSeffForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Chi2oNdof" in keyname2) :
-            BefPreSeffForChi2oDOF = Eff
-            BefPreSeffForChi2oDOFBcg = EffAllBcg
-            BefPreSeffForChi2oDOFSignal = EffSignal
-            BefPreSeffForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_EoP" in keyname2) :
-            BefPreSeffForEoP = Eff
-            BefPreSeffForEoPBcg = EffAllBcg
-            BefPreSeffForEoPSignal = EffSignal
-            BefPreSeffForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Dz" in keyname2) :
-            BefPreSeffFordz = Eff
-            BefPreSeffFordzBcg = EffAllBcg
-            BefPreSeffFordzSignal = EffSignal
-            BefPreSeffFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Dxy" in keyname2) :
-            BefPreSeffFordxy = Eff
-            BefPreSeffFordxyBcg = EffAllBcg
-            BefPreSeffFordxySignal = EffSignal
-            BefPreSeffFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_MiniRelIsoAll" in keyname2) :
-            BefPreSeffForMiniIso = Eff
-            BefPreSeffForMiniIsoBcg = EffAllBcg
-            BefPreSeffForMiniIsoSignal = EffSignal
-            BefPreSeffForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_Ih" in keyname2) :
-            BefPreSeffForIh = 1-Eff
-            BefPreSeffForIhBcg = 1-EffAllBcg
-            BefPreSeffForIhSignal = 1-EffSignal
-            BefPreSeffForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if ("BefPreS_ProbXY" in keyname2) :
-            BefPreSeffForProbXY = 1-Eff
-            BefPreSeffForProbXYBcg = 1-EffAllBcg
-            BefPreSeffForProbXYSignal = 1-EffSignal
-            BefPreSeffForProbXYPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_TIsol") :
-            BefPreSeffForTIsol = Eff
-            BefPreSeffForTIsolBcg = EffAllBcg
-            BefPreSeffForTIsolSignal = EffSignal
-            BefPreSeffForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_MiniRelTkIso") :
-            BefPreSeffForMiniRelTkIso = Eff
-            BefPreSeffForMiniRelTkIsoBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_MiniRelTkIso_PUA") :
-            BefPreSeffForMiniRelTkIsoPUA = Eff
-            BefPreSeffForMiniRelTkIsoPUABcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUASignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_MiniRelTkIso_PUB") :
-            BefPreSeffForMiniRelTkIsoPUB = Eff
-            BefPreSeffForMiniRelTkIsoPUBBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUBSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_MiniRelTkIso_PUC") :
-            BefPreSeffForMiniRelTkIsoPUC = Eff
-            BefPreSeffForMiniRelTkIsoPUCBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUCSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_MiniTkIso") :
-            BefPreSeffForMiniTkIso = Eff
-            BefPreSeffForMiniTkIsoBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoSignal = EffSignal
-            BefPreSeffForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_MiniTkIso_PUA") :
-            BefPreSeffForMiniTkIsoPUA = Eff
-            BefPreSeffForMiniTkIsoPUABcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUASignal = EffSignal
-            BefPreSeffForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_MiniTkIso_PUB") :
-            BefPreSeffForMiniTkIsoPUB = Eff
-            BefPreSeffForMiniTkIsoPUBBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUBSignal = EffSignal
-            BefPreSeffForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-          if (keyname2 == "BefPreS_MiniTkIso_PUC") :
-            BefPreSeffForMiniTkIsoPUC = Eff
-            BefPreSeffForMiniTkIsoPUCBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUCSignal = EffSignal
-            BefPreSeffForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedBefPreS))
-            
-            
-          if ("N1_Eta" in keyname2) :
-            N1effForEta = Eff
-            N1effForEtaBcg = EffAllBcg
-            N1effForEtaSignal = EffSignal
-            N1effForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Pt" in keyname2) :
-            N1effForpT = 1-Eff
-            N1effForpTBcg = 1-EffAllBcg
-            N1effForpTSignal = 1-EffSignal
-            N1effForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("PostPreS_PtErrOverPt2" in keyname2) :
-            N1effForpTErrOverPt2 = Eff
-            N1effForpTErrOverPt2Bcg = EffAllBcg
-            N1effForpTErrOverPt2Signal = EffSignal
-            N1effForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_TNOPH" in keyname2) :
-            N1effForNumPixHits = 1-Eff
-            N1effForNumPixHitsBcg = 1-EffAllBcg
-            N1effForNumPixHitsSignal = 1-EffSignal
-            N1effForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_TNOHFraction" in keyname2) :
-            N1effForValidFract = 1-Eff
-            N1effForValidFractBcg = 1-EffAllBcg
-            N1effForValidFractSignal = 1-EffSignal
-            N1effForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_TNOM" in keyname2) :
-            N1effForNumDeDx = 1-Eff
-            N1effForNumDeDxBcg = 1-EffAllBcg
-            N1effForNumDeDxSignal = 1-EffSignal
-            N1effForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Chi2oNdof" in keyname2) :
-            N1effForChi2oDOF = Eff
-            N1effForChi2oDOFBcg = EffAllBcg
-            N1effForChi2oDOFSignal = EffSignal
-            N1effForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_EoP" in keyname2) :
-            N1effForEoP = Eff
-            N1effForEoPBcg = EffAllBcg
-            N1effForEoPSignal = EffSignal
-            N1effForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Dz" in keyname2) :
-            N1effFordz = Eff
-            N1effFordzBcg = EffAllBcg
-            N1effFordzSignal = EffSignal
-            N1effFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Dxy" in keyname2) :
-            N1effFordxy = Eff
-            N1effFordxyBcg = EffAllBcg
-            N1effFordxySignal = EffSignal
-            N1effFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_MiniRelIsoAll" in keyname2) :
-            N1effForMiniIso = Eff
-            N1effForMiniIsoBcg = EffAllBcg
-            N1effForMiniIsoSignal = EffSignal
-            N1effForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_Ih" in keyname2) :
-            N1effForIh = 1-Eff
-            N1effForIhBcg = 1-EffAllBcg
-            N1effForIhSignal = 1-EffSignal
-            N1effForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if ("N1_ProbXY" in keyname2) :
-            N1effForProbXY = 1-Eff
-            N1effForProbXYBcg = 1-EffAllBcg
-            N1effForProbXYSignal = 1-EffSignal
-            N1effForProbXYPunzi= (1-EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "PostPreS_P" ) :
-            N1effForP = Eff
-            N1effForPBcg = EffAllBcg
-            N1effForPSignal = EffSignal
-            N1effForPPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "PostPreS_TIsol") :
-            N1effForTIsol = Eff
-            N1effForTIsolBcg = EffAllBcg
-            N1effForTIsolSignal = EffSignal
-            N1effForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "N1_MiniRelTkIso") :
-            N1effForMiniRelTkIso = Eff
-            N1effForMiniRelTkIsoBcg = EffAllBcg
-            N1effForMiniRelTkIsoSignal = EffSignal
-            N1effForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "N1_MiniRelTkIso_PUA") :
-            N1effForMiniRelTkIsoPUA = Eff
-            N1effForMiniRelTkIsoPUABcg = EffAllBcg
-            N1effForMiniRelTkIsoPUASignal = EffSignal
-            N1effForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "N1_MiniRelTkIso_PUB") :
-            N1effForMiniRelTkIsoPUB = Eff
-            N1effForMiniRelTkIsoPUBBcg = EffAllBcg
-            N1effForMiniRelTkIsoPUBSignal = EffSignal
-            N1effForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "N1_MiniRelTkIso_PUC") :
-            N1effForMiniRelTkIsoPUC = Eff
-            N1effForMiniRelTkIsoPUCBcg = EffAllBcg
-            N1effForMiniRelTkIsoPUCSignal = EffSignal
-            N1effForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "N1_MiniTkIso") :
-            N1effForMiniTkIso = Eff
-            N1effForMiniTkIsoBcg = EffAllBcg
-            N1effForMiniTkIsoSignal = EffSignal
-            N1effForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "N1_MiniTkIso_PUA") :
-            N1effForMiniTkIsoPUA = Eff
-            N1effForMiniTkIsoPUABcg = EffAllBcg
-            N1effForMiniTkIsoPUASignal = EffSignal
-            N1effForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "N1_MiniTkIso_PUB") :
-            N1effForMiniTkIsoPUB = Eff
-            N1effForMiniTkIsoPUBBcg = EffAllBcg
-            N1effForMiniTkIsoPUBSignal = EffSignal
-            N1effForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          if (keyname2 == "N1_MiniTkIso_PUC") :
-            N1effForMiniTkIsoPUC = Eff
-            N1effForMiniTkIsoPUCBcg = EffAllBcg
-            N1effForMiniTkIsoPUCSignal = EffSignal
-            N1effForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(DenomAllBcgFixedN1))
-          
-      tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-      tex2.SetNDC();
-      tex2.SetTextFont(61);
-      tex2.SetTextSize(0.0675);
-      tex2.SetLineWidth(2);
-
-      tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-      tex3.SetNDC();
-      tex3.SetTextFont(52);
-      tex3.SetTextSize(0.0485);
-      tex3.SetLineWidth(2);
-      
-      tex4 = ROOT.TLatex()
-
-      tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-      tex5.SetNDC();
-      tex5.SetTextFont(52);
-      tex5.SetTextSize(0.0185);
-      tex5.SetLineWidth(2);
-      
-####################################################################################
-      # EffsInCutflowBefPreS.png
-      cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForData",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,BefPreSeffForpT)
-      EffForData.SetBinContent(2,BefPreSeffForEta)
-      EffForData.SetBinContent(3,BefPreSeffForNumPixHits)
-      EffForData.SetBinContent(4,BefPreSeffForValidFract)
-      EffForData.SetBinContent(5,BefPreSeffForNumDeDx)
-      EffForData.SetBinContent(6,BefPreSeffForChi2oDOF)
-      EffForData.SetBinContent(7,BefPreSeffFordz)
-      EffForData.SetBinContent(8,BefPreSeffFordxy)
-      EffForData.SetBinContent(9,BefPreSeffForEoP)
-      EffForData.SetBinContent(10,BefPreSeffForMiniIso)
-      EffForData.SetBinContent(11,BefPreSeffForIh)
-      EffForData.SetBinContent(12,BefPreSeffForP)
-      EffForData.SetBinContent(13,BefPreSeffForTIsol)
-      EffForData.SetBinContent(14,BefPreSeffForpTErrOverPt2)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-#      EffForData.SetMarkerStyle(20)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"pT > 55")
-      EffForData.GetXaxis().SetBinLabel(2,"Eta < 1.0")
-      EffForData.GetXaxis().SetBinLabel(3,"NumPixHitsNoL1 > 1")
-      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.8")
-      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 9")
-      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
-      EffForData.GetXaxis().SetBinLabel(7,"dz < 0.1")
-      EffForData.GetXaxis().SetBinLabel(8,"dxy < 0.02")
-      EffForData.GetXaxis().SetBinLabel(9,"EoP < 0.3")
-      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
-      EffForData.GetXaxis().SetBinLabel(12,"P < 3 TeV")
-      EffForData.GetXaxis().SetBinLabel(13,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetBinLabel(14,"ptErr/pt2 < 0.001")
-      EffForData.GetXaxis().SetTitle("")
-      
-      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
-      legend.SetTextFont(42)
-      legend.SetTextSize(0.02)
-      legend.SetBorderSize(1);
-      legend.SetBorderSize(0);
-      legend.SetLineColor(1);
-      legend.SetLineStyle(1);
-      legend.SetLineWidth(1);
-      legend.SetFillColor(0);
-      legend.SetFillStyle(1001);
-      legend.AddEntry(EffForData,"DATA (2018C)","LP")
-      
-
-      EffForBcg = ROOT.TH1F("EffForBcg",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
-      EffForBcg.Draw("SAMEHISTOTEXT00")
-      EffForBcg.SetLineColor(3)
-      EffForBcg.SetMarkerColor(3)
-      EffForBcg.SetBinContent(1,BefPreSeffForpTBcg)
-      EffForBcg.SetBinContent(2,BefPreSeffForEtaBcg)
-      EffForBcg.SetBinContent(3,BefPreSeffForNumPixHitsBcg)
-      EffForBcg.SetBinContent(4,BefPreSeffForValidFractBcg)
-      EffForBcg.SetBinContent(5,BefPreSeffForNumDeDxBcg)
-      EffForBcg.SetBinContent(6,BefPreSeffForChi2oDOFBcg)
-      EffForBcg.SetBinContent(7,BefPreSeffFordzBcg)
-      EffForBcg.SetBinContent(8,BefPreSeffFordxyBcg)
-      EffForBcg.SetBinContent(9,BefPreSeffForEoPBcg)
-      EffForBcg.SetBinContent(10,BefPreSeffForMiniIsoBcg)
-      EffForBcg.SetBinContent(11,BefPreSeffForIhBcg)
-      EffForBcg.SetBinContent(12,BefPreSeffForPBcg)
-      EffForBcg.SetBinContent(13,BefPreSeffForTIsolBcg)
-      EffForBcg.SetBinContent(14,BefPreSeffForpTErrOverPt2Bcg)
-      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
-      
-      EffForSignal = ROOT.TH1F("EffForSignal",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
-      EffForSignal.Draw("SAMEHISTOTEXT00")
-      EffForSignal.SetLineColor(6)
-      EffForSignal.SetMarkerColor(6)
-      EffForSignal.SetBinContent(1,BefPreSeffForpTSignal)
-      EffForSignal.SetBinContent(2,BefPreSeffForEtaSignal)
-      EffForSignal.SetBinContent(3,BefPreSeffForNumPixHitsSignal)
-      EffForSignal.SetBinContent(4,BefPreSeffForValidFractSignal)
-      EffForSignal.SetBinContent(5,BefPreSeffForNumDeDxSignal)
-      EffForSignal.SetBinContent(6,BefPreSeffForChi2oDOFSignal)
-      EffForSignal.SetBinContent(7,BefPreSeffFordzSignal)
-      EffForSignal.SetBinContent(8,BefPreSeffFordxySignal)
-      EffForSignal.SetBinContent(9,BefPreSeffForEoPSignal)
-      EffForSignal.SetBinContent(10,BefPreSeffForMiniIsoSignal)
-      EffForSignal.SetBinContent(11,BefPreSeffForIhSignal)
-      EffForSignal.SetBinContent(12,BefPreSeffForPSignal)
-      EffForSignal.SetBinContent(13,BefPreSeffForTIsolSignal)
-      EffForSignal.SetBinContent(14,BefPreSeffForpTErrOverPt2Signal)
-      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
-      
-      tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-#      tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
-      
-      legend.Draw("SAME")
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowBefPreS.png")
-####################################################################################
-      # EffsInCutflowN1.png
-      cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForpT)
-      EffForData.SetBinContent(2,N1effForEta)
-      EffForData.SetBinContent(3,N1effForNumPixHits)
-      EffForData.SetBinContent(4,N1effForValidFract)
-      EffForData.SetBinContent(5,N1effForNumDeDx)
-      EffForData.SetBinContent(6,N1effForChi2oDOF)
-      EffForData.SetBinContent(7,N1effFordz)
-      EffForData.SetBinContent(8,N1effFordxy)
-      EffForData.SetBinContent(9,N1effForEoP)
-      EffForData.SetBinContent(10,N1effForMiniIso)
-      EffForData.SetBinContent(11,N1effForIh)
-      EffForData.SetBinContent(12,N1effForP)
-      EffForData.SetBinContent(13,N1effForTIsol)
-      print(N1effForTIsol)
-      EffForData.SetBinContent(14,N1effForpTErrOverPt2)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-#      EffForData.SetMarkerStyle(20)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"pT > 55")
-      EffForData.GetXaxis().SetBinLabel(2,"Eta < 1.0")
-      EffForData.GetXaxis().SetBinLabel(3,"NumPixHitsNoL1 > 1")
-      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.8")
-      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 9")
-      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
-      EffForData.GetXaxis().SetBinLabel(7,"dz < 0.1")
-      EffForData.GetXaxis().SetBinLabel(8,"dxy < 0.02")
-      EffForData.GetXaxis().SetBinLabel(9,"EoP < 0.3")
-      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
-      EffForData.GetXaxis().SetBinLabel(12,"P < 3 TeV")
-      EffForData.GetXaxis().SetBinLabel(13,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetBinLabel(14,"ptErr/pt2 < 0.001")
-      EffForData.GetXaxis().SetTitle("")
-      
-      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
-      legend.SetTextFont(42)
-      legend.SetTextSize(0.02)
-      legend.SetBorderSize(1);
-      legend.SetBorderSize(0);
-      legend.SetLineColor(1);
-      legend.SetLineStyle(1);
-      legend.SetLineWidth(1);
-      legend.SetFillColor(0);
-      legend.SetFillStyle(1001);
-      legend.AddEntry(EffForData,"DATA (2018C)","LP")
-      
-
-      EffForBcg = ROOT.TH1F("EffForBcgN1",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
-      EffForBcg.Draw("SAMEHISTOTEXT00")
-      EffForBcg.SetLineColor(3)
-      EffForBcg.SetMarkerColor(3)
-      EffForBcg.SetBinContent(1,N1effForpTBcg)
-      EffForBcg.SetBinContent(2,N1effForEtaBcg)
-      EffForBcg.SetBinContent(3,N1effForNumPixHitsBcg)
-      EffForBcg.SetBinContent(4,N1effForValidFractBcg)
-      EffForBcg.SetBinContent(5,N1effForNumDeDxBcg)
-      EffForBcg.SetBinContent(6,N1effForChi2oDOFBcg)
-      EffForBcg.SetBinContent(7,N1effFordzBcg)
-      EffForBcg.SetBinContent(8,N1effFordxyBcg)
-      EffForBcg.SetBinContent(9,N1effForEoPBcg)
-      EffForBcg.SetBinContent(10,N1effForMiniIsoBcg)
-      EffForBcg.SetBinContent(11,N1effForIhBcg)
-      EffForBcg.SetBinContent(12,N1effForPBcg)
-      EffForBcg.SetBinContent(13,N1effForTIsolBcg)
-      print(N1effForTIsolBcg)
-      EffForBcg.SetBinContent(14,N1effForpTErrOverPt2Bcg)
-      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
-      
-      EffForSignal = ROOT.TH1F("EffForSignalN1",";;Integral to (from) max (min) cut value /  Integral to inf",14,0.,14.)
-      EffForSignal.Draw("SAMEHISTOTEXT00")
-      EffForSignal.SetLineColor(6)
-      EffForSignal.SetMarkerColor(6)
-      EffForSignal.SetBinContent(1,N1effForpTSignal)
-      EffForSignal.SetBinContent(2,N1effForEtaSignal)
-      EffForSignal.SetBinContent(3,N1effForNumPixHitsSignal)
-      EffForSignal.SetBinContent(4,N1effForValidFractSignal)
-      EffForSignal.SetBinContent(5,N1effForNumDeDxSignal)
-      EffForSignal.SetBinContent(6,N1effForChi2oDOFSignal)
-      EffForSignal.SetBinContent(7,N1effFordzSignal)
-      EffForSignal.SetBinContent(8,N1effFordxySignal)
-      EffForSignal.SetBinContent(9,N1effForEoPSignal)
-      EffForSignal.SetBinContent(10,N1effForMiniIsoSignal)
-      EffForSignal.SetBinContent(11,N1effForIhSignal)
-      EffForSignal.SetBinContent(12,N1effForPSignal)
-      EffForSignal.SetBinContent(13,N1effForTIsolSignal)
-      print(N1effForTIsolSignal)
-      EffForSignal.SetBinContent(14,N1effForpTErrOverPt2Signal)
-      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      legend.Draw("SAME")
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1.png")
-      
-####################################################################################################################
-      # Punzi for BefPreS (EffsInCutflowBefPreSPunzi.png)
-
-      ROOT.gStyle.SetPaintTextFormat(".2g");
-      cstackedSummedBackgroundStringBefPreSPunzi = "cstackedSummedBackgroundStringBefPreSPunzi"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringBefPreSPunzi, cstackedSummedBackgroundStringBefPreSPunzi, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForDataBef",";;Punzi-significance",14,0.,14.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,BefPreSeffForpTPunzi)
-      EffForData.SetBinContent(2,BefPreSeffForEtaPunzi)
-      EffForData.SetBinContent(3,BefPreSeffForNumPixHitsPunzi)
-      EffForData.SetBinContent(4,BefPreSeffForValidFractPunzi)
-      EffForData.SetBinContent(5,BefPreSeffForNumDeDxPunzi)
-      EffForData.SetBinContent(6,BefPreSeffForChi2oDOFPunzi)
-      EffForData.SetBinContent(7,BefPreSeffFordzPunzi)
-      EffForData.SetBinContent(8,BefPreSeffFordxyPunzi)
-      EffForData.SetBinContent(9,BefPreSeffForEoPPunzi)
-      EffForData.SetBinContent(10,BefPreSeffForMiniIsoPunzi)
-      EffForData.SetBinContent(11,BefPreSeffForIhPunzi)
-      EffForData.SetBinContent(12,BefPreSeffForPPunzi)
-      EffForData.SetBinContent(13,BefPreSeffForTIsolPunzi)
-      EffForData.SetBinContent(14,BefPreSeffForpTErrOverPt2Punzi)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-#      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"pT > 55")
-      EffForData.GetXaxis().SetBinLabel(2,"Eta < 1.0")
-      EffForData.GetXaxis().SetBinLabel(3,"NumPixHitsNoL1 > 1")
-      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.8")
-      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 9")
-      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
-      EffForData.GetXaxis().SetBinLabel(7,"dz < 0.1")
-      EffForData.GetXaxis().SetBinLabel(8,"dxy < 0.02")
-      EffForData.GetXaxis().SetBinLabel(9,"EoP < 0.3")
-      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
-      EffForData.GetXaxis().SetBinLabel(12,"P < 3 TeV")
-      EffForData.GetXaxis().SetBinLabel(13,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetBinLabel(14,"ptErr/pt2 < 0.001")
-      EffForData.GetXaxis().SetTitle("")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"Before pre-selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowBefPreSPunzi.png")
-      
-####################################################################################################################
-      # Punzi for N-1 (EffsInCutflowN1Punzi.png)
-      
-      ROOT.gStyle.SetPaintTextFormat(".4f");
-      cstackedSummedBackgroundStringN1Punzi = "cstackedSummedBackgroundStringN1Punzi"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1Punzi, cstackedSummedBackgroundStringN1Punzi, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForDataPunzi",";;Punzi-significance",14,0.,14.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForpTPunzi)
-      EffForData.SetBinContent(2,N1effForEtaPunzi)
-      EffForData.SetBinContent(3,N1effForNumPixHitsPunzi)
-      EffForData.SetBinContent(4,N1effForValidFractPunzi)
-      EffForData.SetBinContent(5,N1effForNumDeDxPunzi)
-      EffForData.SetBinContent(6,N1effForChi2oDOFPunzi)
-      EffForData.SetBinContent(7,N1effFordzPunzi)
-      EffForData.SetBinContent(8,N1effFordxyPunzi)
-      EffForData.SetBinContent(9,N1effForEoPPunzi)
-      EffForData.SetBinContent(10,N1effForMiniIsoPunzi)
-      EffForData.SetBinContent(11,N1effForIhPunzi)
-      EffForData.SetBinContent(12,N1effForPPunzi)
-      EffForData.SetBinContent(13,N1effForTIsolPunzi)
-      EffForData.SetBinContent(14,N1effForpTErrOverPt2Punzi)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-#      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"pT > 55")
-      EffForData.GetXaxis().SetBinLabel(2,"Eta < 1.0")
-      EffForData.GetXaxis().SetBinLabel(3,"NumPixHitsNoL1 > 1")
-      EffForData.GetXaxis().SetBinLabel(4,"ValidFract > 0.8")
-      EffForData.GetXaxis().SetBinLabel(5,"NumDeDx > 9")
-      EffForData.GetXaxis().SetBinLabel(6,"Chi2oDOF < 5")
-      EffForData.GetXaxis().SetBinLabel(7,"dz < 0.1")
-      EffForData.GetXaxis().SetBinLabel(8,"dxy < 0.02")
-      EffForData.GetXaxis().SetBinLabel(9,"EoP < 0.3")
-      EffForData.GetXaxis().SetBinLabel(10,"MiniIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(11,"Ih > 3.47")
-      EffForData.GetXaxis().SetBinLabel(12,"P < 3 TeV")
-      EffForData.GetXaxis().SetBinLabel(13,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetBinLabel(14,"ptErr/pt2 < 0.001")
-      EffForData.GetXaxis().SetTitle("")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1Punzi.png")
-
-os.system("cp forWebpage/* Effs_CodeV"+codeVersion+"/.")
-os.system("cp forWebpage/.htaccess Effs_CodeV"+codeVersion+"/.")
-print("scp -r Effs_CodeV"+ codeVersion + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/createEffsSept_v3.py b/Analyzer/test/Tamas/createEffsSept_v3.py
deleted file mode 100644
index b87e7b4..0000000
--- a/Analyzer/test/Tamas/createEffsSept_v3.py
+++ /dev/null
@@ -1,532 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-ROOT.gStyle.SetPaintTextFormat("4.2f");
-
-SingleMuonSample = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_CodeV"+codeVersion+"_v1.root")
-AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
-Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root")
-
-cutValues = {
-'BefPreS_Pt' : 55.,
-'N1_Pt' : 55.,
-'BefPreS_Eta' : 1.0,
-'N1_Eta' : 1.0,
-'BefPreS_TNOPH' : 1., # after 29p2 should be 1
-'N1_TNOPH' : 1., # after 29p2 should be 1
-'BefPreS_TNOHFraction' : .8,
-'N1_TNOHFraction' : .8,
-'BefPreS_TNOM' : 9.,
-'N1_TNOM' : 9.,
-'BefPreS_Chi2oNdof' : 5.,
-'N1_Chi2oNdof' : 5.,
-'BefPreS_Dz' : 0.1,
-'N1_Dz' : 0.1,
-'BefPreS_Dxy' : 0.02,
-'N1_Dxy' : 0.02,
-'BefPreS_PtErrOverPt2' : 0.001,
-'PostPreS_PtErrOverPt2' : 0.001,
-'N1_EoP' : 0.3,
-'BefPreS_EoP' : 0.3,
-'BefPreS_Ih' : 3.47,
-'N1_Ih' : 3.47,
-'BefPreS_ProbXY' : 0.01,
-'N1_ProbXY' : 0.01,
-'BefPreS_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'BefPreS_P' : 3000,
-'PostPreS_P' : 3000,
-'BefPreS_TIsol' : 10,
-'PostPreS_TIsol' : 10,
-'BefPreS_MiniTkIso' : 10,
-'N1_MiniTkIso' : 10,
-'BefPreS_MiniTkIso_PUA' : 10,
-'N1_MiniTkIso_PUA' : 10,
-'BefPreS_MiniTkIso_PUB' : 10,
-'N1_MiniTkIso_PUB' : 10,
-'BefPreS_MiniTkIso_PUC' : 10,
-'N1_MiniTkIso_PUC' : 10,
-}
-
-
-sigma = 3
-
-if not os.path.exists(os.path.dirname("Effs_CodeV"+codeVersion+"/a.png")):
-  print("Create dir")
-  os.makedirs(os.path.dirname("Effs_CodeV"+codeVersion+"/"))
-
-for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
-  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
-  curr_dir = SingleMuonSample.GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  N1eff = N1effForP = N1effForPPunzi = N1effForPBcg = N1effForPSignal = 0
-  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
-  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
-  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-#          if not ("N1_Eta" in keyname2) : continue
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
-          histo = SingleMuonSample.Get(newname)
-          histoAllBcg = AllBcgSample.Get(newname)
-          histoSignal = Rhadron1800GeV.Get(newname)
-#          histoDenomAllBcg = AllBcgSample.Get(dirname + "/" + keyname + "/N1_Eta")
-#          histoDenomAllBcg = AllBcgSample.Get(dirname + "/" + keyname + "/BefPreS_Eta")
-
-          if not (cutValues.get(keyname2)) : continue
-          Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
-          NumAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(cutValues[keyname2]))
-          NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(cutValues[keyname2]))
-          Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()+1))
-          DenomAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(histoAllBcg.GetXaxis().GetXmax()+1))
-#          DenomAllBcg = histoDenomAllBcg.Integral(histoDenomAllBcg.GetXaxis().FindBin(0),histoDenomAllBcg.GetXaxis().FindBin(histoDenomAllBcg.GetXaxis().GetXmax()+1))
-#          DenomAllBcg = histoDenomAllBcg.Integral(histoDenomAllBcg.GetXaxis().FindBin(0),histoDenomAllBcg.GetXaxis().FindBin(histoDenomAllBcg.GetXaxis().GetXmax()+1))
-#
-#          print(keyname2 + ": " + str(DenomAllBcg))
-          DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()+1))
-          if (Denom>0) :  Eff = Num / Denom
-          else : Eff = 0
-          if (DenomAllBcg>0) : EffAllBcg = NumAllBcg / DenomAllBcg
-          else : EffAllBcg = 0
-          if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
-          else : EffSignal = 0
-         
-          if ("BefPreS_Eta" in keyname2) :
-            BefPreSeffForEta = Eff
-            BefPreSeffForEtaBcg = EffAllBcg
-            BefPreSeffForEtaSignal = EffSignal
-            BefPreSeffForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_P") :
-            BefPreSeffForP = Eff
-            BefPreSeffForPBcg = EffAllBcg
-            BefPreSeffForPSignal = EffSignal
-            BefPreSeffForPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Pt" in keyname2) :
-            BefPreSeffForpT = 1-Eff
-            BefPreSeffForpTBcg = 1-EffAllBcg
-            BefPreSeffForpTSignal = 1-EffSignal
-            BefPreSeffForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_PtErrOverPt2" in keyname2) :
-            BefPreSeffForpTErrOverPt2 = Eff
-            BefPreSeffForpTErrOverPt2Bcg = EffAllBcg
-            BefPreSeffForpTErrOverPt2Signal = EffSignal
-            BefPreSeffForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_TNOPH" in keyname2) :
-            BefPreSeffForNumPixHits = 1-Eff
-            BefPreSeffForNumPixHitsBcg = 1-EffAllBcg
-            BefPreSeffForNumPixHitsSignal = 1-EffSignal
-            BefPreSeffForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_TNOHFraction" in keyname2) :
-            BefPreSeffForValidFract = 1-Eff
-            BefPreSeffForValidFractBcg = 1-EffAllBcg
-            BefPreSeffForValidFractSignal = 1-EffSignal
-            BefPreSeffForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_TNOM" in keyname2) :
-            BefPreSeffForNumDeDx = 1-Eff
-            BefPreSeffForNumDeDxBcg = 1-EffAllBcg
-            BefPreSeffForNumDeDxSignal = 1-EffSignal
-            BefPreSeffForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Chi2oNdof" in keyname2) :
-            BefPreSeffForChi2oDOF = Eff
-            BefPreSeffForChi2oDOFBcg = EffAllBcg
-            BefPreSeffForChi2oDOFSignal = EffSignal
-            BefPreSeffForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_EoP" in keyname2) :
-            BefPreSeffForEoP = Eff
-            BefPreSeffForEoPBcg = EffAllBcg
-            BefPreSeffForEoPSignal = EffSignal
-            BefPreSeffForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Dz" in keyname2) :
-            BefPreSeffFordz = Eff
-            BefPreSeffFordzBcg = EffAllBcg
-            BefPreSeffFordzSignal = EffSignal
-            BefPreSeffFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Dxy" in keyname2) :
-            BefPreSeffFordxy = Eff
-            BefPreSeffFordxyBcg = EffAllBcg
-            BefPreSeffFordxySignal = EffSignal
-            BefPreSeffFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_MiniRelIsoAll_lowMiniRelIso" in keyname2) :
-            BefPreSeffForMiniIso = Eff
-            BefPreSeffForMiniIsoBcg = EffAllBcg
-            BefPreSeffForMiniIsoSignal = EffSignal
-            BefPreSeffForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Ih" in keyname2) :
-            BefPreSeffForIh = 1-Eff
-            BefPreSeffForIhBcg = 1-EffAllBcg
-            BefPreSeffForIhSignal = 1-EffSignal
-            BefPreSeffForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_ProbXY" in keyname2) :
-            BefPreSeffForProbXY = 1-Eff
-            BefPreSeffForProbXYBcg = 1-EffAllBcg
-            BefPreSeffForProbXYSignal = 1-EffSignal
-            BefPreSeffForProbXYPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_TIsol") :
-            BefPreSeffForTIsol = Eff
-            BefPreSeffForTIsolBcg = EffAllBcg
-            BefPreSeffForTIsolSignal = EffSignal
-            BefPreSeffForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso") :
-            BefPreSeffForMiniRelTkIso = Eff
-            BefPreSeffForMiniRelTkIsoBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUA") :
-            BefPreSeffForMiniRelTkIsoPUA = Eff
-            BefPreSeffForMiniRelTkIsoPUABcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUASignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUB") :
-            BefPreSeffForMiniRelTkIsoPUB = Eff
-            BefPreSeffForMiniRelTkIsoPUBBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUBSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUC") :
-            BefPreSeffForMiniRelTkIsoPUC = Eff
-            BefPreSeffForMiniRelTkIsoPUCBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUCSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniTkIso") :
-            BefPreSeffForMiniTkIso = Eff
-            BefPreSeffForMiniTkIsoBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoSignal = EffSignal
-            BefPreSeffForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniTkIso_PUA") :
-            BefPreSeffForMiniTkIsoPUA = Eff
-            BefPreSeffForMiniTkIsoPUABcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUASignal = EffSignal
-            BefPreSeffForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniTkIso_PUB") :
-            BefPreSeffForMiniTkIsoPUB = Eff
-            BefPreSeffForMiniTkIsoPUBBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUBSignal = EffSignal
-            BefPreSeffForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniTkIso_PUC") :
-            BefPreSeffForMiniTkIsoPUC = Eff
-            BefPreSeffForMiniTkIsoPUCBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUCSignal = EffSignal
-            BefPreSeffForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-            
-            
-          if ("N1_Eta" in keyname2) :
-            N1effForEta = Eff
-            N1effForEtaBcg = EffAllBcg
-            N1effForEtaSignal = EffSignal
-            N1effForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Pt" in keyname2) :
-            N1effForpT = 1-Eff
-            N1effForpTBcg = 1-EffAllBcg
-            N1effForpTSignal = 1-EffSignal
-            N1effForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("PostPreS_PtErrOverPt2" in keyname2) :
-            N1effForpTErrOverPt2 = Eff
-            N1effForpTErrOverPt2Bcg = EffAllBcg
-            N1effForpTErrOverPt2Signal = EffSignal
-            N1effForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_TNOPH" in keyname2) :
-            N1effForNumPixHits = 1-Eff
-            N1effForNumPixHitsBcg = 1-EffAllBcg
-            N1effForNumPixHitsSignal = 1-EffSignal
-            N1effForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_TNOHFraction" in keyname2) :
-            N1effForValidFract = 1-Eff
-            N1effForValidFractBcg = 1-EffAllBcg
-            N1effForValidFractSignal = 1-EffSignal
-            N1effForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_TNOM" in keyname2) :
-            N1effForNumDeDx = 1-Eff
-            N1effForNumDeDxBcg = 1-EffAllBcg
-            N1effForNumDeDxSignal = 1-EffSignal
-            N1effForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Chi2oNdof" in keyname2) :
-            N1effForChi2oDOF = Eff
-            N1effForChi2oDOFBcg = EffAllBcg
-            N1effForChi2oDOFSignal = EffSignal
-            N1effForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_EoP" in keyname2) :
-            N1effForEoP = Eff
-            N1effForEoPBcg = EffAllBcg
-            N1effForEoPSignal = EffSignal
-            N1effForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Dz" in keyname2) :
-            N1effFordz = Eff
-            N1effFordzBcg = EffAllBcg
-            N1effFordzSignal = EffSignal
-            N1effFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Dxy" in keyname2) :
-            N1effFordxy = Eff
-            N1effFordxyBcg = EffAllBcg
-            N1effFordxySignal = EffSignal
-            N1effFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_MiniRelIsoAll_lowMiniRelIso" in keyname2) :
-            N1effForMiniIso = Eff
-            N1effForMiniIsoBcg = EffAllBcg
-            N1effForMiniIsoSignal = EffSignal
-            print("MiniRelIsoAll EffSignal: "+str(EffSignal))
-            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Ih" in keyname2) :
-            N1effForIh = 1-Eff
-            N1effForIhBcg = 1-EffAllBcg
-            N1effForIhSignal = 1-EffSignal
-            N1effForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_ProbXY" in keyname2) :
-            N1effForProbXY = 1-Eff
-            N1effForProbXYBcg = 1-EffAllBcg
-            N1effForProbXYSignal = 1-EffSignal
-            N1effForProbXYPunzi= (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "PostPreS_P" ) :
-            N1effForP = Eff
-            N1effForPBcg = EffAllBcg
-            N1effForPSignal = EffSignal
-            N1effForPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "PostPreS_TIsol") :
-            N1effForTIsol = Eff
-            N1effForTIsolBcg = EffAllBcg
-            N1effForTIsolSignal = EffSignal
-            N1effForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso") :
-            N1effForMiniRelTkIso = Eff
-            N1effForMiniRelTkIsoBcg = EffAllBcg
-            N1effForMiniRelTkIsoSignal = EffSignal
-            print("MiniRelTkIso EffSignal: "+str(EffSignal))
-            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUA") :
-            N1effForMiniRelTkIsoPUA = Eff
-            N1effForMiniRelTkIsoPUABcg = EffAllBcg
-            N1effForMiniRelTkIsoPUASignal = EffSignal
-#            print("PUA EffSignal: "+str(EffSignal))
-#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUB") :
-            N1effForMiniRelTkIsoPUB = Eff
-            N1effForMiniRelTkIsoPUBBcg = EffAllBcg
-            N1effForMiniRelTkIsoPUBSignal = EffSignal
-#            print("PUB EffSignal: "+str(EffSignal))
-#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUC") :
-            N1effForMiniRelTkIsoPUC = Eff
-            N1effForMiniRelTkIsoPUCBcg = EffAllBcg
-            N1effForMiniRelTkIsoPUCSignal = EffSignal
-#            print("PUC EffSignal: "+str(EffSignal))
-#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniTkIso") :
-            N1effForMiniTkIso = Eff
-            N1effForMiniTkIsoBcg = EffAllBcg
-            N1effForMiniTkIsoSignal = EffSignal
-            N1effForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniTkIso_PUA") :
-            N1effForMiniTkIsoPUA = Eff
-            N1effForMiniTkIsoPUABcg = EffAllBcg
-            N1effForMiniTkIsoPUASignal = EffSignal
-            N1effForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniTkIso_PUB") :
-            N1effForMiniTkIsoPUB = Eff
-            N1effForMiniTkIsoPUBBcg = EffAllBcg
-            N1effForMiniTkIsoPUBSignal = EffSignal
-            N1effForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniTkIso_PUC") :
-            N1effForMiniTkIsoPUC = Eff
-            N1effForMiniTkIsoPUCBcg = EffAllBcg
-            N1effForMiniTkIsoPUCSignal = EffSignal
-            N1effForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          
-      tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-      tex2.SetNDC();
-      tex2.SetTextFont(61);
-      tex2.SetTextSize(0.0675);
-      tex2.SetLineWidth(2);
-
-      tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-      tex3.SetNDC();
-      tex3.SetTextFont(52);
-      tex3.SetTextSize(0.0485);
-      tex3.SetLineWidth(2);
-      
-      tex4 = ROOT.TLatex()
-
-      tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-      tex5.SetNDC();
-      tex5.SetTextFont(52);
-      tex5.SetTextSize(0.0185);
-      tex5.SetLineWidth(2);
-      
-####################################################################################
-      # EffsInCutflowN1.png
-      cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForMiniRelTkIso)
-      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUA)
-      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUB)
-      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUC)
-      EffForData.SetBinContent(5,N1effForMiniTkIso)
-      EffForData.SetBinContent(6,N1effForMiniTkIsoPUA)
-      EffForData.SetBinContent(7,N1effForMiniTkIsoPUB)
-      EffForData.SetBinContent(8,N1effForMiniTkIsoPUC)
-      EffForData.SetBinContent(9,N1effForMiniIso)
-      EffForData.SetBinContent(10,N1effForTIsol)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-#      EffForData.SetMarkerStyle(20)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
-      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
-      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetTitle("")
-      
-      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
-      legend.SetTextFont(42)
-      legend.SetTextSize(0.02)
-      legend.SetBorderSize(1);
-      legend.SetBorderSize(0);
-      legend.SetLineColor(1);
-      legend.SetLineStyle(1);
-      legend.SetLineWidth(1);
-      legend.SetFillColor(0);
-      legend.SetFillStyle(1001);
-      legend.AddEntry(EffForData,"DATA (2018C)","LP")
-      
-
-      EffForBcg = ROOT.TH1F("EffForBcgN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
-      EffForBcg.Draw("SAMEHISTOTEXT00")
-      EffForBcg.SetLineColor(3)
-      EffForBcg.SetMarkerColor(3)
-      EffForBcg.SetBinContent(1,N1effForMiniRelTkIsoBcg)
-      EffForBcg.SetBinContent(2,N1effForMiniRelTkIsoPUABcg)
-      EffForBcg.SetBinContent(3,N1effForMiniRelTkIsoPUBBcg)
-      EffForBcg.SetBinContent(4,N1effForMiniRelTkIsoPUCBcg)
-      EffForBcg.SetBinContent(5,N1effForMiniTkIsoBcg)
-      EffForBcg.SetBinContent(6,N1effForMiniTkIsoPUABcg)
-      EffForBcg.SetBinContent(7,N1effForMiniTkIsoPUBBcg)
-      EffForBcg.SetBinContent(8,N1effForMiniTkIsoPUCBcg)
-      EffForBcg.SetBinContent(9,N1effForMiniIsoBcg)
-      EffForBcg.SetBinContent(10,N1effForTIsolBcg)
-      EffForBcg.SetBinContent(14,N1effForpTErrOverPt2Bcg)
-      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
-      
-      EffForSignal = ROOT.TH1F("EffForSignalN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
-      EffForSignal.Draw("SAMEHISTOTEXT00")
-      EffForSignal.SetLineColor(6)
-      EffForSignal.SetMarkerColor(6)
-      EffForSignal.SetBinContent(1,N1effForMiniRelTkIsoSignal)
-      EffForSignal.SetBinContent(2,N1effForMiniRelTkIsoPUASignal)
-      EffForSignal.SetBinContent(3,N1effForMiniRelTkIsoPUBSignal)
-      EffForSignal.SetBinContent(4,N1effForMiniRelTkIsoPUCSignal)
-      EffForSignal.SetBinContent(5,N1effForMiniTkIsoSignal)
-      EffForSignal.SetBinContent(6,N1effForMiniTkIsoPUASignal)
-      EffForSignal.SetBinContent(7,N1effForMiniTkIsoPUBSignal)
-      EffForSignal.SetBinContent(8,N1effForMiniTkIsoPUCSignal)
-      EffForSignal.SetBinContent(9,N1effForMiniIsoSignal)
-      EffForSignal.SetBinContent(10,N1effForTIsolSignal)
-      EffForSignal.SetBinContent(14,N1effForpTErrOverPt2Signal)
-      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      legend.Draw("SAME")
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1.png")
-
-####################################################################################################################
-      # Punzi for N-1 (EffsInCutflowN1Punzi.png)
-      
-      ROOT.gStyle.SetPaintTextFormat(".4f");
-      cstackedSummedBackgroundStringN1Punzi = "cstackedSummedBackgroundStringN1Punzi"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1Punzi, cstackedSummedBackgroundStringN1Punzi, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForDataPunzi",";;Punzi-significance",10,0.,10.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForMiniRelTkIsoPunzi)
-      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUAPunzi)
-      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUBPunzi)
-      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUCPunzi)
-      EffForData.SetBinContent(5,N1effForMiniTkIsoPunzi)
-      EffForData.SetBinContent(6,N1effForMiniTkIsoPUAPunzi)
-      EffForData.SetBinContent(7,N1effForMiniTkIsoPUBPunzi)
-      EffForData.SetBinContent(8,N1effForMiniTkIsoPUCPunzi)
-      EffForData.SetBinContent(9,N1effForMiniIsoPunzi)
-      EffForData.SetBinContent(10,N1effForTIsolPunzi)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
-      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
-      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetTitle("")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1Punzi.png")
-
-os.system("cp forWebpage/* Effs_CodeV"+codeVersion+"/.")
-os.system("cp forWebpage/.htaccess Effs_CodeV"+codeVersion+"/.")
-print("scp -r Effs_CodeV"+ codeVersion + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/createEffsSept_v4.py b/Analyzer/test/Tamas/createEffsSept_v4.py
deleted file mode 100644
index b87e7b4..0000000
--- a/Analyzer/test/Tamas/createEffsSept_v4.py
+++ /dev/null
@@ -1,532 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-ROOT.gStyle.SetPaintTextFormat("4.2f");
-
-SingleMuonSample = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_CodeV"+codeVersion+"_v1.root")
-AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
-Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root")
-
-cutValues = {
-'BefPreS_Pt' : 55.,
-'N1_Pt' : 55.,
-'BefPreS_Eta' : 1.0,
-'N1_Eta' : 1.0,
-'BefPreS_TNOPH' : 1., # after 29p2 should be 1
-'N1_TNOPH' : 1., # after 29p2 should be 1
-'BefPreS_TNOHFraction' : .8,
-'N1_TNOHFraction' : .8,
-'BefPreS_TNOM' : 9.,
-'N1_TNOM' : 9.,
-'BefPreS_Chi2oNdof' : 5.,
-'N1_Chi2oNdof' : 5.,
-'BefPreS_Dz' : 0.1,
-'N1_Dz' : 0.1,
-'BefPreS_Dxy' : 0.02,
-'N1_Dxy' : 0.02,
-'BefPreS_PtErrOverPt2' : 0.001,
-'PostPreS_PtErrOverPt2' : 0.001,
-'N1_EoP' : 0.3,
-'BefPreS_EoP' : 0.3,
-'BefPreS_Ih' : 3.47,
-'N1_Ih' : 3.47,
-'BefPreS_ProbXY' : 0.01,
-'N1_ProbXY' : 0.01,
-'BefPreS_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'BefPreS_P' : 3000,
-'PostPreS_P' : 3000,
-'BefPreS_TIsol' : 10,
-'PostPreS_TIsol' : 10,
-'BefPreS_MiniTkIso' : 10,
-'N1_MiniTkIso' : 10,
-'BefPreS_MiniTkIso_PUA' : 10,
-'N1_MiniTkIso_PUA' : 10,
-'BefPreS_MiniTkIso_PUB' : 10,
-'N1_MiniTkIso_PUB' : 10,
-'BefPreS_MiniTkIso_PUC' : 10,
-'N1_MiniTkIso_PUC' : 10,
-}
-
-
-sigma = 3
-
-if not os.path.exists(os.path.dirname("Effs_CodeV"+codeVersion+"/a.png")):
-  print("Create dir")
-  os.makedirs(os.path.dirname("Effs_CodeV"+codeVersion+"/"))
-
-for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
-  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
-  curr_dir = SingleMuonSample.GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  N1eff = N1effForP = N1effForPPunzi = N1effForPBcg = N1effForPSignal = 0
-  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
-  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
-  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-#          if not ("N1_Eta" in keyname2) : continue
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          if ("N1_ProbQVsIas" in keyname2 or "N1_pfType" in keyname2) : continue
-          histo = SingleMuonSample.Get(newname)
-          histoAllBcg = AllBcgSample.Get(newname)
-          histoSignal = Rhadron1800GeV.Get(newname)
-#          histoDenomAllBcg = AllBcgSample.Get(dirname + "/" + keyname + "/N1_Eta")
-#          histoDenomAllBcg = AllBcgSample.Get(dirname + "/" + keyname + "/BefPreS_Eta")
-
-          if not (cutValues.get(keyname2)) : continue
-          Num = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]))
-          NumAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(cutValues[keyname2]))
-          NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(cutValues[keyname2]))
-          Denom = histo.Integral(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()+1))
-          DenomAllBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(histoAllBcg.GetXaxis().GetXmax()+1))
-#          DenomAllBcg = histoDenomAllBcg.Integral(histoDenomAllBcg.GetXaxis().FindBin(0),histoDenomAllBcg.GetXaxis().FindBin(histoDenomAllBcg.GetXaxis().GetXmax()+1))
-#          DenomAllBcg = histoDenomAllBcg.Integral(histoDenomAllBcg.GetXaxis().FindBin(0),histoDenomAllBcg.GetXaxis().FindBin(histoDenomAllBcg.GetXaxis().GetXmax()+1))
-#
-#          print(keyname2 + ": " + str(DenomAllBcg))
-          DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()+1))
-          if (Denom>0) :  Eff = Num / Denom
-          else : Eff = 0
-          if (DenomAllBcg>0) : EffAllBcg = NumAllBcg / DenomAllBcg
-          else : EffAllBcg = 0
-          if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
-          else : EffSignal = 0
-         
-          if ("BefPreS_Eta" in keyname2) :
-            BefPreSeffForEta = Eff
-            BefPreSeffForEtaBcg = EffAllBcg
-            BefPreSeffForEtaSignal = EffSignal
-            BefPreSeffForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_P") :
-            BefPreSeffForP = Eff
-            BefPreSeffForPBcg = EffAllBcg
-            BefPreSeffForPSignal = EffSignal
-            BefPreSeffForPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Pt" in keyname2) :
-            BefPreSeffForpT = 1-Eff
-            BefPreSeffForpTBcg = 1-EffAllBcg
-            BefPreSeffForpTSignal = 1-EffSignal
-            BefPreSeffForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_PtErrOverPt2" in keyname2) :
-            BefPreSeffForpTErrOverPt2 = Eff
-            BefPreSeffForpTErrOverPt2Bcg = EffAllBcg
-            BefPreSeffForpTErrOverPt2Signal = EffSignal
-            BefPreSeffForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_TNOPH" in keyname2) :
-            BefPreSeffForNumPixHits = 1-Eff
-            BefPreSeffForNumPixHitsBcg = 1-EffAllBcg
-            BefPreSeffForNumPixHitsSignal = 1-EffSignal
-            BefPreSeffForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_TNOHFraction" in keyname2) :
-            BefPreSeffForValidFract = 1-Eff
-            BefPreSeffForValidFractBcg = 1-EffAllBcg
-            BefPreSeffForValidFractSignal = 1-EffSignal
-            BefPreSeffForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_TNOM" in keyname2) :
-            BefPreSeffForNumDeDx = 1-Eff
-            BefPreSeffForNumDeDxBcg = 1-EffAllBcg
-            BefPreSeffForNumDeDxSignal = 1-EffSignal
-            BefPreSeffForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Chi2oNdof" in keyname2) :
-            BefPreSeffForChi2oDOF = Eff
-            BefPreSeffForChi2oDOFBcg = EffAllBcg
-            BefPreSeffForChi2oDOFSignal = EffSignal
-            BefPreSeffForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_EoP" in keyname2) :
-            BefPreSeffForEoP = Eff
-            BefPreSeffForEoPBcg = EffAllBcg
-            BefPreSeffForEoPSignal = EffSignal
-            BefPreSeffForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Dz" in keyname2) :
-            BefPreSeffFordz = Eff
-            BefPreSeffFordzBcg = EffAllBcg
-            BefPreSeffFordzSignal = EffSignal
-            BefPreSeffFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Dxy" in keyname2) :
-            BefPreSeffFordxy = Eff
-            BefPreSeffFordxyBcg = EffAllBcg
-            BefPreSeffFordxySignal = EffSignal
-            BefPreSeffFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_MiniRelIsoAll_lowMiniRelIso" in keyname2) :
-            BefPreSeffForMiniIso = Eff
-            BefPreSeffForMiniIsoBcg = EffAllBcg
-            BefPreSeffForMiniIsoSignal = EffSignal
-            BefPreSeffForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_Ih" in keyname2) :
-            BefPreSeffForIh = 1-Eff
-            BefPreSeffForIhBcg = 1-EffAllBcg
-            BefPreSeffForIhSignal = 1-EffSignal
-            BefPreSeffForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("BefPreS_ProbXY" in keyname2) :
-            BefPreSeffForProbXY = 1-Eff
-            BefPreSeffForProbXYBcg = 1-EffAllBcg
-            BefPreSeffForProbXYSignal = 1-EffSignal
-            BefPreSeffForProbXYPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_TIsol") :
-            BefPreSeffForTIsol = Eff
-            BefPreSeffForTIsolBcg = EffAllBcg
-            BefPreSeffForTIsolSignal = EffSignal
-            BefPreSeffForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso") :
-            BefPreSeffForMiniRelTkIso = Eff
-            BefPreSeffForMiniRelTkIsoBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUA") :
-            BefPreSeffForMiniRelTkIsoPUA = Eff
-            BefPreSeffForMiniRelTkIsoPUABcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUASignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUB") :
-            BefPreSeffForMiniRelTkIsoPUB = Eff
-            BefPreSeffForMiniRelTkIsoPUBBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUBSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniRelTkIso_lowMiniRelIso_PUC") :
-            BefPreSeffForMiniRelTkIsoPUC = Eff
-            BefPreSeffForMiniRelTkIsoPUCBcg = EffAllBcg
-            BefPreSeffForMiniRelTkIsoPUCSignal = EffSignal
-            BefPreSeffForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniTkIso") :
-            BefPreSeffForMiniTkIso = Eff
-            BefPreSeffForMiniTkIsoBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoSignal = EffSignal
-            BefPreSeffForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniTkIso_PUA") :
-            BefPreSeffForMiniTkIsoPUA = Eff
-            BefPreSeffForMiniTkIsoPUABcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUASignal = EffSignal
-            BefPreSeffForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniTkIso_PUB") :
-            BefPreSeffForMiniTkIsoPUB = Eff
-            BefPreSeffForMiniTkIsoPUBBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUBSignal = EffSignal
-            BefPreSeffForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "BefPreS_MiniTkIso_PUC") :
-            BefPreSeffForMiniTkIsoPUC = Eff
-            BefPreSeffForMiniTkIsoPUCBcg = EffAllBcg
-            BefPreSeffForMiniTkIsoPUCSignal = EffSignal
-            BefPreSeffForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-            
-            
-          if ("N1_Eta" in keyname2) :
-            N1effForEta = Eff
-            N1effForEtaBcg = EffAllBcg
-            N1effForEtaSignal = EffSignal
-            N1effForEtaPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Pt" in keyname2) :
-            N1effForpT = 1-Eff
-            N1effForpTBcg = 1-EffAllBcg
-            N1effForpTSignal = 1-EffSignal
-            N1effForpTPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("PostPreS_PtErrOverPt2" in keyname2) :
-            N1effForpTErrOverPt2 = Eff
-            N1effForpTErrOverPt2Bcg = EffAllBcg
-            N1effForpTErrOverPt2Signal = EffSignal
-            N1effForpTErrOverPt2Punzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_TNOPH" in keyname2) :
-            N1effForNumPixHits = 1-Eff
-            N1effForNumPixHitsBcg = 1-EffAllBcg
-            N1effForNumPixHitsSignal = 1-EffSignal
-            N1effForNumPixHitsPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_TNOHFraction" in keyname2) :
-            N1effForValidFract = 1-Eff
-            N1effForValidFractBcg = 1-EffAllBcg
-            N1effForValidFractSignal = 1-EffSignal
-            N1effForValidFractPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_TNOM" in keyname2) :
-            N1effForNumDeDx = 1-Eff
-            N1effForNumDeDxBcg = 1-EffAllBcg
-            N1effForNumDeDxSignal = 1-EffSignal
-            N1effForNumDeDxPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Chi2oNdof" in keyname2) :
-            N1effForChi2oDOF = Eff
-            N1effForChi2oDOFBcg = EffAllBcg
-            N1effForChi2oDOFSignal = EffSignal
-            N1effForChi2oDOFPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_EoP" in keyname2) :
-            N1effForEoP = Eff
-            N1effForEoPBcg = EffAllBcg
-            N1effForEoPSignal = EffSignal
-            N1effForEoPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Dz" in keyname2) :
-            N1effFordz = Eff
-            N1effFordzBcg = EffAllBcg
-            N1effFordzSignal = EffSignal
-            N1effFordzPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Dxy" in keyname2) :
-            N1effFordxy = Eff
-            N1effFordxyBcg = EffAllBcg
-            N1effFordxySignal = EffSignal
-            N1effFordxyPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_MiniRelIsoAll_lowMiniRelIso" in keyname2) :
-            N1effForMiniIso = Eff
-            N1effForMiniIsoBcg = EffAllBcg
-            N1effForMiniIsoSignal = EffSignal
-            print("MiniRelIsoAll EffSignal: "+str(EffSignal))
-            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_Ih" in keyname2) :
-            N1effForIh = 1-Eff
-            N1effForIhBcg = 1-EffAllBcg
-            N1effForIhSignal = 1-EffSignal
-            N1effForIhPunzi = (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if ("N1_ProbXY" in keyname2) :
-            N1effForProbXY = 1-Eff
-            N1effForProbXYBcg = 1-EffAllBcg
-            N1effForProbXYSignal = 1-EffSignal
-            N1effForProbXYPunzi= (1-EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "PostPreS_P" ) :
-            N1effForP = Eff
-            N1effForPBcg = EffAllBcg
-            N1effForPSignal = EffSignal
-            N1effForPPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "PostPreS_TIsol") :
-            N1effForTIsol = Eff
-            N1effForTIsolBcg = EffAllBcg
-            N1effForTIsolSignal = EffSignal
-            N1effForTIsolPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso") :
-            N1effForMiniRelTkIso = Eff
-            N1effForMiniRelTkIsoBcg = EffAllBcg
-            N1effForMiniRelTkIsoSignal = EffSignal
-            print("MiniRelTkIso EffSignal: "+str(EffSignal))
-            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniRelTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUA") :
-            N1effForMiniRelTkIsoPUA = Eff
-            N1effForMiniRelTkIsoPUABcg = EffAllBcg
-            N1effForMiniRelTkIsoPUASignal = EffSignal
-#            print("PUA EffSignal: "+str(EffSignal))
-#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniRelTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUB") :
-            N1effForMiniRelTkIsoPUB = Eff
-            N1effForMiniRelTkIsoPUBBcg = EffAllBcg
-            N1effForMiniRelTkIsoPUBSignal = EffSignal
-#            print("PUB EffSignal: "+str(EffSignal))
-#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniRelTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniRelTkIso_lowMiniRelIso_PUC") :
-            N1effForMiniRelTkIsoPUC = Eff
-            N1effForMiniRelTkIsoPUCBcg = EffAllBcg
-            N1effForMiniRelTkIsoPUCSignal = EffSignal
-#            print("PUC EffSignal: "+str(EffSignal))
-#            print("DenomAllBcg: "+str(numpy.sqrt(NumAllBcg)))
-            N1effForMiniRelTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniTkIso") :
-            N1effForMiniTkIso = Eff
-            N1effForMiniTkIsoBcg = EffAllBcg
-            N1effForMiniTkIsoSignal = EffSignal
-            N1effForMiniTkIsoPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniTkIso_PUA") :
-            N1effForMiniTkIsoPUA = Eff
-            N1effForMiniTkIsoPUABcg = EffAllBcg
-            N1effForMiniTkIsoPUASignal = EffSignal
-            N1effForMiniTkIsoPUAPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniTkIso_PUB") :
-            N1effForMiniTkIsoPUB = Eff
-            N1effForMiniTkIsoPUBBcg = EffAllBcg
-            N1effForMiniTkIsoPUBSignal = EffSignal
-            N1effForMiniTkIsoPUBPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          if (keyname2 == "N1_MiniTkIso_PUC") :
-            N1effForMiniTkIsoPUC = Eff
-            N1effForMiniTkIsoPUCBcg = EffAllBcg
-            N1effForMiniTkIsoPUCSignal = EffSignal
-            N1effForMiniTkIsoPUCPunzi = (EffSignal) / (sigma + numpy.sqrt(NumAllBcg))
-          
-      tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-      tex2.SetNDC();
-      tex2.SetTextFont(61);
-      tex2.SetTextSize(0.0675);
-      tex2.SetLineWidth(2);
-
-      tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-      tex3.SetNDC();
-      tex3.SetTextFont(52);
-      tex3.SetTextSize(0.0485);
-      tex3.SetLineWidth(2);
-      
-      tex4 = ROOT.TLatex()
-
-      tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-      tex5.SetNDC();
-      tex5.SetTextFont(52);
-      tex5.SetTextSize(0.0185);
-      tex5.SetLineWidth(2);
-      
-####################################################################################
-      # EffsInCutflowN1.png
-      cstackedSummedBackgroundStringN1 = "cstackedSummedBackgroundStringN1"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1, cstackedSummedBackgroundStringN1, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForDataN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForMiniRelTkIso)
-      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUA)
-      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUB)
-      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUC)
-      EffForData.SetBinContent(5,N1effForMiniTkIso)
-      EffForData.SetBinContent(6,N1effForMiniTkIsoPUA)
-      EffForData.SetBinContent(7,N1effForMiniTkIsoPUB)
-      EffForData.SetBinContent(8,N1effForMiniTkIsoPUC)
-      EffForData.SetBinContent(9,N1effForMiniIso)
-      EffForData.SetBinContent(10,N1effForTIsol)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-#      EffForData.SetMarkerStyle(20)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetYaxis().SetRangeUser(0.,1.3)
-      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
-      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
-      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetTitle("")
-      
-      legend =  ROOT.TLegend(.55,.80,.80,.89,"","brNDC")
-      legend.SetTextFont(42)
-      legend.SetTextSize(0.02)
-      legend.SetBorderSize(1);
-      legend.SetBorderSize(0);
-      legend.SetLineColor(1);
-      legend.SetLineStyle(1);
-      legend.SetLineWidth(1);
-      legend.SetFillColor(0);
-      legend.SetFillStyle(1001);
-      legend.AddEntry(EffForData,"DATA (2018C)","LP")
-      
-
-      EffForBcg = ROOT.TH1F("EffForBcgN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
-      EffForBcg.Draw("SAMEHISTOTEXT00")
-      EffForBcg.SetLineColor(3)
-      EffForBcg.SetMarkerColor(3)
-      EffForBcg.SetBinContent(1,N1effForMiniRelTkIsoBcg)
-      EffForBcg.SetBinContent(2,N1effForMiniRelTkIsoPUABcg)
-      EffForBcg.SetBinContent(3,N1effForMiniRelTkIsoPUBBcg)
-      EffForBcg.SetBinContent(4,N1effForMiniRelTkIsoPUCBcg)
-      EffForBcg.SetBinContent(5,N1effForMiniTkIsoBcg)
-      EffForBcg.SetBinContent(6,N1effForMiniTkIsoPUABcg)
-      EffForBcg.SetBinContent(7,N1effForMiniTkIsoPUBBcg)
-      EffForBcg.SetBinContent(8,N1effForMiniTkIsoPUCBcg)
-      EffForBcg.SetBinContent(9,N1effForMiniIsoBcg)
-      EffForBcg.SetBinContent(10,N1effForTIsolBcg)
-      EffForBcg.SetBinContent(14,N1effForpTErrOverPt2Bcg)
-      legend.AddEntry(EffForBcg,"ALLBcg MC","LP")
-      
-      EffForSignal = ROOT.TH1F("EffForSignalN1",";;Integral to (from) max (min) cut value /  Integral to inf",10,0.,10.)
-      EffForSignal.Draw("SAMEHISTOTEXT00")
-      EffForSignal.SetLineColor(6)
-      EffForSignal.SetMarkerColor(6)
-      EffForSignal.SetBinContent(1,N1effForMiniRelTkIsoSignal)
-      EffForSignal.SetBinContent(2,N1effForMiniRelTkIsoPUASignal)
-      EffForSignal.SetBinContent(3,N1effForMiniRelTkIsoPUBSignal)
-      EffForSignal.SetBinContent(4,N1effForMiniRelTkIsoPUCSignal)
-      EffForSignal.SetBinContent(5,N1effForMiniTkIsoSignal)
-      EffForSignal.SetBinContent(6,N1effForMiniTkIsoPUASignal)
-      EffForSignal.SetBinContent(7,N1effForMiniTkIsoPUBSignal)
-      EffForSignal.SetBinContent(8,N1effForMiniTkIsoPUCSignal)
-      EffForSignal.SetBinContent(9,N1effForMiniIsoSignal)
-      EffForSignal.SetBinContent(10,N1effForTIsolSignal)
-      EffForSignal.SetBinContent(14,N1effForpTErrOverPt2Signal)
-      legend.AddEntry(EffForSignal,"HSCP Gluino 1800 GeV","LP")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      legend.Draw("SAME")
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1.png")
-
-####################################################################################################################
-      # Punzi for N-1 (EffsInCutflowN1Punzi.png)
-      
-      ROOT.gStyle.SetPaintTextFormat(".4f");
-      cstackedSummedBackgroundStringN1Punzi = "cstackedSummedBackgroundStringN1Punzi"+str(keyname2)
-      canvas = ROOT.TCanvas(cstackedSummedBackgroundStringN1Punzi, cstackedSummedBackgroundStringN1Punzi, 800,800)
-      
-      EffForData = ROOT.TH1F("EffForDataPunzi",";;Punzi-significance",10,0.,10.)
-      EffForData.Draw("HISTTEXT00")
-      EffForData.SetBinContent(1,N1effForMiniRelTkIsoPunzi)
-      EffForData.SetBinContent(2,N1effForMiniRelTkIsoPUAPunzi)
-      EffForData.SetBinContent(3,N1effForMiniRelTkIsoPUBPunzi)
-      EffForData.SetBinContent(4,N1effForMiniRelTkIsoPUCPunzi)
-      EffForData.SetBinContent(5,N1effForMiniTkIsoPunzi)
-      EffForData.SetBinContent(6,N1effForMiniTkIsoPUAPunzi)
-      EffForData.SetBinContent(7,N1effForMiniTkIsoPUBPunzi)
-      EffForData.SetBinContent(8,N1effForMiniTkIsoPUCPunzi)
-      EffForData.SetBinContent(9,N1effForMiniIsoPunzi)
-      EffForData.SetBinContent(10,N1effForTIsolPunzi)
-
-      
-      EffForData.SetLineColor(1)
-      EffForData.SetMarkerColor(1)
-      EffForData.SetStats(0)
-      EffForData.GetXaxis().SetTitle("")
-      EffForData.GetXaxis().SetBinLabel(1,"MiniRelTkIso")
-      EffForData.GetXaxis().SetBinLabel(2,"MiniRelTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(3,"MiniRelTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(4,"MiniRelTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(5,"MiniTkIso")
-      EffForData.GetXaxis().SetBinLabel(6,"MiniTkIsoPUA")
-      EffForData.GetXaxis().SetBinLabel(7,"MiniTkIsoPUB")
-      EffForData.GetXaxis().SetBinLabel(8,"MiniTkIsoPUC")
-      EffForData.GetXaxis().SetBinLabel(9,"MiniRelIso < 0.02")
-      EffForData.GetXaxis().SetBinLabel(10,"TIsol < 15 GeV")
-      EffForData.GetXaxis().SetTitle("")
-      
-      tex4 = ROOT.TLatex(0.55,0.95,"After (N-1)+1 selection")
-      tex4.SetNDC();
-      tex4.SetTextFont(52);
-      tex4.SetTextSize(0.045);
-      tex4.SetLineWidth(2);
-      
-      tex2.Draw("SAME")
-      tex3.Draw("SAME")
-      tex4.Draw("SAME")
-      tex5.Draw("SAME")
-      
-      canvas.SaveAs("Effs_CodeV"+codeVersion+"/EffsInCutflowN1Punzi.png")
-
-os.system("cp forWebpage/* Effs_CodeV"+codeVersion+"/.")
-os.system("cp forWebpage/.htaccess Effs_CodeV"+codeVersion+"/.")
-print("scp -r Effs_CodeV"+ codeVersion + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/createPunziScan_v2.py b/Analyzer/test/Tamas/createPunziScan_v2.py
deleted file mode 100644
index 6f941e6..0000000
--- a/Analyzer/test/Tamas/createPunziScan_v2.py
+++ /dev/null
@@ -1,178 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-ROOT.gStyle.SetPaintTextFormat("4.2f");
-
-SingleMuonSample = ROOT.TFile.Open("crab_Analysis_SingleMuon_Run2018C_CodeV"+codeVersion+"_v1.root")
-AllBcgSample = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
-Rhadron1800GeV = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root")
-
-cutValues = {
-'BefPreS_Pt' : 55.,
-'N1_Pt' : 55.,
-'N1_Pt_lowPt' : 55.,
-'BefPreS_Eta' : 1.0,
-'N1_Eta' : 1.0,
-'BefPreS_TNOPH' : 1., # after 29p2 should be 1
-'N1_TNOPH' : 1., # after 29p2 should be 1
-'BefPreS_TNOHFraction' : .8,
-'N1_TNOHFraction' : .8,
-'BefPreS_TNOM' : 9.,
-'N1_TNOM' : 9.,
-'BefPreS_Chi2oNdof' : 5.,
-'N1_Chi2oNdof' : 5.,
-'BefPreS_Dz' : 0.1,
-'N1_Dz' : 0.1,
-'BefPreS_Dxy' : 0.02,
-'N1_Dxy' : 0.02,
-'BefPreS_PtErrOverPt2' : 0.001,
-'PostPreS_PtErrOverPt2' : 0.001,
-'N1_EoP' : 0.3,
-'BefPreS_EoP' : 0.3,
-'BefPreS_Ih' : 3.47,
-'N1_Ih' : 3.47,
-'BefPreS_ProbXY' : 0.01,
-'N1_ProbXY' : 0.01,
-'BefPreS_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'BefPreS_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'BefPreS_P' : 3000,
-'PostPreS_P' : 3000,
-'BefPreS_TIsol' : 15,
-'PostPreS_TIsol' : 15,
-'BefPreS_MiniTkIso' : 15,
-'N1_MiniTkIso' : 15,
-'BefPreS_MiniTkIso_PUA' : 15,
-'N1_MiniTkIso_PUA' : 15,
-'BefPreS_MiniTkIso_PUB' : 15,
-'N1_MiniTkIso_PUB' : 15,
-'BefPreS_MiniTkIso_PUC' : 15,
-'N1_MiniTkIso_PUC' : 15,
-}
-
-
-sigma = 3
-
-if not os.path.exists(os.path.dirname("ComparePunzi_CodeV"+codeVersion+"/a.png")):
-  print("Create dir")
-  os.makedirs(os.path.dirname("ComparePunzi_CodeV"+codeVersion+"/"))
-
-for i in range(0, SingleMuonSample.GetListOfKeys().GetEntries()):
-  dirname = SingleMuonSample.GetListOfKeys().At(i).GetName()
-  curr_dir = SingleMuonSample.GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  N1eff = N1effForP = N1effForPPunzi = N1effForPBcg = N1effForPSignal = 0
-  BefPreSeffForEta = BefPreSeffForpT =  BefPreSeffForNumPixHits = BefPreSeffForValidFract = 0
-  BefPreSeffForNumDeDx = BefPreSeffForChi2oDOF = BefPreSeffForEoP = BefPreSeffFordz = 0
-  BefPreSeffFordxy = BefPreSeffForMiniIso = BefPreSeffForIh = BefPreSeffForProbXY = 0
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = SingleMuonSample.GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          if not ("N1" in keyname2) : continue
-          if ("Qual" in keyname2) : continue
-          
-          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(keyname2)
-          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-          
-          histo = SingleMuonSample.Get(newname)
-          histoAllBcg = AllBcgSample.Get(newname)
-          histoSignal = Rhadron1800GeV.Get(newname)
-          
-          if not (histo.ClassName() == "TH1F") : continue
-          
-          numBins = histo.GetNbinsX()
-          maxXaxis = histo.GetXaxis().GetXmax()
-          minXaxis = histo.GetXaxis().GetXmin()
-          stepSize = (maxXaxis-minXaxis)/numBins
-          
-          SoBstring = "Punzi"+str(j)
-
-          PunziHisto = ROOT.TH1F(SoBstring,SoBstring,numBins,minXaxis,maxXaxis)
-          PunziHisto.SetStats(0)
-          PunziHisto.SetMarkerStyle(20)
-          
-          for x in numpy.arange(0,maxXaxis,stepSize):
-            NumSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(x))
-            DenomSignal = histoSignal.Integral(histoSignal.GetXaxis().FindBin(0),histoSignal.GetXaxis().FindBin(histoSignal.GetXaxis().GetXmax()+1))
-            NumBcg = histoAllBcg.Integral(histoAllBcg.GetXaxis().FindBin(0),histoAllBcg.GetXaxis().FindBin(x))
-            DenomBcg = histoAllBcg.Integral()
-
-            
-            if (DenomSignal>0) : EffSignal = NumSignal / DenomSignal
-            else : EffSignal = 0
-            
-#            print("EffSignal" + ": " + str(EffSignal))
-#            print("sqrt(B)" + ": " + str(numpy.sqrt(NumBcg)))
-            Bcg = NumBcg
-            if ((keyname2 == "N1_TNOM") or (keyname2 == "N1_Pt") or (keyname2 == "N1_Pt_lowPt") or (keyname2 == "N1_TNOPH") or (keyname2 == "N1_TNOHFraction")) :
-              EffSignal = 1-EffSignal
-              Bcg = DenomBcg - NumBcg
-            PunziForX = (EffSignal) / (sigma + numpy.sqrt(Bcg))
-
-            
-            PunziHisto.SetBinContent(histo.GetXaxis().FindBin(x),PunziForX)
-          PunziHisto.Draw() #HISTTEXT00
-          PunziHisto.SetTitle("")
-          PunziHisto.GetYaxis().SetTitle("Punzi-significance")
-          axisTitle = keyname2[3:]
-          PunziHisto.GetXaxis().SetTitle(axisTitle)
-            
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex4 = ROOT.TLatex()
-
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-                
-          tex4 = ROOT.TLatex(0.5,0.95,"After (N-1)+1 selection")
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.045);
-          tex4.SetLineWidth(2);
-
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex4.Draw("SAME")
-          tex5.Draw("SAME")
-    
-          canvas.SaveAs("ComparePunzi_CodeV"+codeVersion+"/"+keyname2+".png")
-
-os.system("cp forWebpage/* ComparePunzi_CodeV"+codeVersion+"/.")
-os.system("cp forWebpage/.htaccess ComparePunzi_CodeV"+codeVersion+"/.")
-print("scp -r ComparePunzi_CodeV"+ codeVersion + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/createROCPlots.py b/Analyzer/test/Tamas/createROCPlots.py
deleted file mode 100644
index c31c3c5..0000000
--- a/Analyzer/test/Tamas/createROCPlots.py
+++ /dev/null
@@ -1,248 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-from ctypes import c_double as double
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BkgSamples = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
-
-InputListSamples = [
-"HSCPgluinoSamples_CodeV"+codeVersion+".txt",
-#"HSCPAllSamples_CodeV"+codeVersion+".txt",
-#"BackgroundSamplesCode"+codeVersion+".txt",
-"HSCPgluinoOnlyNeutralSamples_CodeV"+codeVersion+".txt",
-"HSCPgmsbStauSamples_CodeV"+codeVersion+".txt",
-"HSCPpairStauSamples_CodeV"+codeVersion+".txt",
-"HSCPstopOnlyNeutralSamples_CodeV"+codeVersion+".txt",
-"HSCPstopSamples_CodeV"+codeVersion+".txt",
-"HSCPtauPrime1Samples_CodeV"+codeVersion+".txt",
-"HSCPtauPrime2Samples_CodeV"+codeVersion+".txt",
-]
-
-OpenedSamples = []
-for list in InputListSamples:
-  MassPointSamples = []
-  with open(list, "r") as a_file:
-    for line in a_file:
-      stripped_line = line.strip()
-      MassPointSamples.append(ROOT.TFile.Open(stripped_line))
-    OpenedSamples.append(MassPointSamples)
-
-if os.path.exists(os.path.dirname("ROC_CodeV"+codeVersion)):
-  os.makedirs("ROC_CodeV"+codeVersion)
-  
-cutValues = {
-'N1_Eta' : 1.,
-'N1_Pt' : 55.,
-'N1_Pt_lowPt' : 55.,
-'N1_Dxy' : 0.02,
-'N1_Dz' : 0.1,
-'N1_dRMinPfJet' : 1000.,
-'N1_Chi2oNdof' : 5.,
-'N1_Qual' : 2.,
-'N1_TNOH' : 10.,
-'N1_TNOM' : 6.,
-'N1_Qual' : 2.,
-'N1_TNOPH' : 2.,
-'N1_TNOHFraction' : .8,
-'N1_EoP' : .3,
-'N1_SumpTOverpT' : 1000.,
-'N1_Ih' : 3.2,
-'N1_ProbQ' : 0.85,
-'PostPreS_ProbQNoL1' : 0.85,
-'N1_Stations' : 9.,
-'N1_PtErrOverPt' : .25,
-'N1_SegSep' : 25,
-'N1_ProbXY' : 1.0,
-'N1_MiniRelIsoAll' : 0.02,
-'N1_MiniRelTkIso' : 0.02,
-'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'N1_MiniTkIso' : 15.,
-'N1_MiniTkIso_PUA' : 15.,
-'N1_MiniTkIso_PUB' : 15.,
-'N1_MiniTkIso_PUC' : 15.,
-'N1_MiniTkIso_lowMiniRelIso' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUA' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUB' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUC' : 15.,
-'N1_MTOF' : 1000.,
-'N1_I' : 1000.,
-'N1_PtErrOverPt2' : 0.0007,
-'PostPreS_Ias' : 0.3,
-'PostPreS_Ias_NoEventWeight' : 0.3,
-'PostPreS_IasForStatus91' : 0.3,
-'PostPreS_IasForStatusNot91' : 0.3,
-'N1_DrMinPfJet': 10000,
-'N1_PfType': 10000,
-'N1_ProbQNoLayer1': 0.85,
-
-}
-
-
-for i in range(0, MassPointSamples[0].GetListOfKeys().GetEntries()):
-  dirname = MassPointSamples[0].GetListOfKeys().At(i).GetName()
-  curr_dir = MassPointSamples[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = MassPointSamples[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-#          if not ("N1_Eta" in keyname2) : continue
-          if not ("N1" in keyname2 or "PostPreS_ProbQNoL1" in keyname2 or "PostPreS_Ias"  in keyname2): continue
-          if ("Vs" in keyname2 or "N1_pfType" in keyname2) : continue
-          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(j)
-          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          
-          
-          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-          legend.SetTextFont(42)
-          legend.SetTextSize(0.02)
-          legend.SetBorderSize(1);
-          legend.SetBorderSize(0);
-          legend.SetLineColor(1);
-          legend.SetLineStyle(1);
-          legend.SetLineWidth(1);
-          legend.SetFillColor(0);
-          legend.SetFillStyle(1001);
-        
-          # array to contain a specific (keyname2) histogram for all samples
-          histoArray = []
-          maxNumBins = 0.0
-          for i in range(0,len(OpenedSamples)) :
-            maxNumBins = numpy.maximum(maxNumBins,len(OpenedSamples[i]))
- 
-          for indexOnSamples in range(0,len(OpenedSamples)) :
-            singleROCcurveString = 'singleROCcurve'+str(indexOnSamples)+str(j)
-            axisXTitle = keyname2[keyname2.find("N1_")+3:]
-            singleROCcurve = ROOT.TH1F(singleROCcurveString,";Mass index;Efficiency for "+axisXTitle,int(maxNumBins),0.,maxNumBins)
-            singleROCcurve.SetStats(0)
-            singleROCcurve.SetMarkerColor(indexOnSamples+1)
-            singleROCcurve.SetMarkerStyle(20)
-            singleROCcurve.SetLineColor(indexOnSamples+1)
-#            singleROCcurve.SetMaximum(1.5)
-            
-            for indexOnBins in range(0,len(OpenedSamples[indexOnSamples])) :
-              givenSampleWmassPoint = OpenedSamples[indexOnSamples][indexOnBins]
-              givenSampleWmassPointStr = str(givenSampleWmassPoint)
-              stringIndexWhere2018 = givenSampleWmassPointStr.find("2018_")+5
-              stringIndexWhereM = givenSampleWmassPointStr.find("_M")
-              stringIndexWhereW = givenSampleWmassPointStr.find("_w")
-              if (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW].find("_M")>0) :
-                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereM])
-              else:
-                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW])
-              histo = givenSampleWmassPoint.Get(newname)
-              histoBkg = BkgSamples.Get(newname)
-              
-              
-              if not (cutValues.get(keyname2)) :
-                print("No cut value for " + str(keyname2))
-                continue
-              DenomBkgErr = NumErr = NumBkgErr = DenomErr = double(0.0)
-
-              Num = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]),NumErr,"width")
-              NumBkg = histoBkg.IntegralAndError(histoBkg.GetXaxis().FindBin(0),histoBkg.GetXaxis().FindBin(cutValues[keyname2]),NumBkgErr,"width")
-              Denom = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()),DenomErr,"width")
-              DenomBkg = histoBkg.IntegralAndError(histoBkg.GetXaxis().FindBin(0),histoBkg.GetXaxis().FindBin(histoBkg.GetXaxis().GetXmax()),DenomBkgErr,"width")
-              
-              if (Denom>0) :
-                Eff = Num / Denom
-              else : Eff = -1
-              
-              if (DenomBkg>0 and NumBkg>0) :
-                EffErr =  Eff * numpy.sqrt( ((NumBkgErr.value / NumBkg) * (NumBkgErr.value / NumBkg)) + ((DenomBkgErr.value / DenomBkg) * (DenomBkgErr.value / DenomBkg) ))
-              else :
-                EffErr = 0.
-              
-              if (DenomBkg>0) :
-                EffBkg = NumBkg / DenomBkg
-              else : EffBkg = 0
-              
-              if ("N1_Pt" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_Pt_lowPt" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_TNOPH" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_TNOHFraction" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_TNOM" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_Ih" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_ProbXY" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("PostPreS_Ias" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("ProbQNoL1" in keyname2 or "ProbQNoLayer1" in keyname2 ) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-                
-          
-#              print("For j-th: "+str(indexOnBins)+" Eff: "+str(Eff))
-              singleROCcurve.SetBinContent(indexOnBins+1,Eff)
-              singleROCcurve.SetBinError(indexOnBins+1,EffErr)
-#              singleROCcurve.SetBinContent(8,EffBkg)
-            histoArray.append(singleROCcurve)
-            legend.AddEntry(singleROCcurve,sampleName,"LP")
-     
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-          for finalHisto in histoArray :
-            finalHisto.Draw("SAMEPE")
-#            finalHisto.GetXaxis().SetBinLabel(1,"1000")
-#            finalHisto.GetXaxis().SetBinLabel(2,"1400")
-#            finalHisto.GetXaxis().SetBinLabel(3,"1600")
-#            finalHisto.GetXaxis().SetBinLabel(4,"1800")
-#            finalHisto.GetXaxis().SetBinLabel(5,"2000")
-#            finalHisto.GetXaxis().SetBinLabel(6,"2200")
-#            finalHisto.GetXaxis().SetBinLabel(7,"2400")
-#            finalHisto.GetXaxis().SetBinLabel(8,"2600")
-            finalHisto.GetYaxis().SetRangeUser(0.,1.4)
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex5.Draw("SAME")
-
-          canvas.SaveAs("ROC_CodeV"+codeVersion+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/createROCPlots_SystStudy.py b/Analyzer/test/Tamas/createROCPlots_SystStudy.py
deleted file mode 100644
index b69dc8c..0000000
--- a/Analyzer/test/Tamas/createROCPlots_SystStudy.py
+++ /dev/null
@@ -1,226 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-from ctypes import c_double as double
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-InputListSamples = [
-"HSCPgluinoSamplesSyst_CodeV"+codeVersion+".txt"
-]
-
-OpenedSamples = []
-for list in InputListSamples:
-  MassPointSamples = []
-  with open(list, "r") as a_file:
-    for line in a_file:
-      stripped_line = line.strip()
-      MassPointSamples.append(ROOT.TFile.Open(stripped_line))
-    OpenedSamples.append(MassPointSamples)
-
-if os.path.exists(os.path.dirname("ROC_CodeV"+codeVersion)):
-  os.makedirs("ROC_CodeV"+codeVersion)
-  
-cutValues = {
-'N1_Eta' : 1.,
-'N1_Pt' : 55.,
-'N1_Pt_lowPt' : 55.,
-'N1_Dxy' : 0.02,
-'N1_Dz' : 0.1,
-'N1_dRMinPfJet' : 1000.,
-'N1_Chi2oNdof' : 5.,
-'N1_Qual' : 2.,
-'N1_TNOH' : 10.,
-'N1_TNOM' : 6.,
-'N1_Qual' : 2.,
-'N1_TNOPH' : 2.,
-'N1_TNOHFraction' : .8,
-'N1_EoP' : .3,
-'N1_SumpTOverpT' : 1000.,
-'N1_Ih' : 3.2,
-'N1_ProbQ' : 0.85,
-'PostPreS_ProbQNoL1' : 0.85,
-'N1_Stations' : 9.,
-'N1_PtErrOverPt' : .25,
-'N1_SegSep' : 25,
-'N1_ProbXY' : 1.0,
-'N1_MiniRelIsoAll' : 0.02,
-'N1_MiniRelTkIso' : 0.02,
-'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'N1_MiniTkIso' : 15.,
-'N1_MiniTkIso_PUA' : 15.,
-'N1_MiniTkIso_PUB' : 15.,
-'N1_MiniTkIso_PUC' : 15.,
-'N1_MiniTkIso_lowMiniRelIso' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUA' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUB' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUC' : 15.,
-'N1_MTOF' : 1000.,
-'N1_I' : 1000.,
-'N1_PtErrOverPt2' : 0.0007,
-'PostPreS_Ias' : 0.3,
-'PostPreS_Ias_NoEventWeight' : 0.3,
-'PostPreS_IasForStatus91' : 0.3,
-'PostPreS_IasForStatusNot91' : 0.3,
-'N1_DrMinPfJet': 10000,
-'N1_PfType': 10000,
-'N1_ProbQNoLayer1': 0.85,
-
-}
-
-
-for i in range(0, MassPointSamples[0].GetListOfKeys().GetEntries()):
-  dirname = MassPointSamples[0].GetListOfKeys().At(i).GetName()
-  curr_dir = MassPointSamples[0].GetDirectory(dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = MassPointSamples[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-#          if not ("N1_Eta" in keyname2) : continue
-          if not ("N1" in keyname2 or "PostPreS_ProbQNoL1" in keyname2 or "PostPreS_Ias"  in keyname2): continue
-          if ("Vs" in keyname2 or "N1_pfType" in keyname2) : continue
-          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(j)
-          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          
-          
-          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-          legend.SetTextFont(42)
-          legend.SetTextSize(0.02)
-          legend.SetBorderSize(1);
-          legend.SetBorderSize(0);
-          legend.SetLineColor(1);
-          legend.SetLineStyle(1);
-          legend.SetLineWidth(1);
-          legend.SetFillColor(0);
-          legend.SetFillStyle(1001);
-        
-          # array to contain a specific (keyname2) histogram for all samples
-          histoArray = []
-          maxNumBins = 0.0
-          for i in range(0,len(OpenedSamples)) :
-            maxNumBins = numpy.maximum(maxNumBins,len(OpenedSamples[i]))
- 
-          for indexOnSamples in range(0,len(OpenedSamples)) :
-            singleROCcurveString = 'singleROCcurve'+str(indexOnSamples)+str(j)
-            if ("N1" in keyname2) : axisXTitle = keyname2[keyname2.find("N1_")+3:]
-            if ("PostPreS" in keyname2) : axisXTitle = keyname2[keyname2.find("PostPreS_")+9:]
-            singleROCcurve = ROOT.TH1F(singleROCcurveString,";;Efficiency for "+axisXTitle,int(maxNumBins),0.,maxNumBins)
-            singleROCcurve.SetStats(0)
-            singleROCcurve.SetMarkerColor(indexOnSamples+1)
-            singleROCcurve.SetMarkerStyle(20)
-            singleROCcurve.SetLineColor(indexOnSamples+1)
-#            singleROCcurve.SetMaximum(1.5)
-            
-            for indexOnBins in range(0,len(OpenedSamples[indexOnSamples])) :
-              givenSampleWmassPoint = OpenedSamples[indexOnSamples][indexOnBins]
-              givenSampleWmassPointStr = str(givenSampleWmassPoint)
-              stringIndexWhere2018 = givenSampleWmassPointStr.find("2018_")+5
-              stringIndexWhereM = givenSampleWmassPointStr.find("_M")
-              stringIndexWhereW = givenSampleWmassPointStr.find("_w")
-              if (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW].find("_M")>0) :
-                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereM])
-              else:
-                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW])
-              histo = givenSampleWmassPoint.Get(newname)
-              
-              
-              if not (cutValues.get(keyname2)) :
-                print("No cut value for " + str(keyname2))
-                continue
-              DenomBkgErr = NumErr = NumBkgErr = DenomErr = double(0.0)
-
-              Num = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]),NumErr,"width")
-              Denom = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()),DenomErr,"width")
-              
-              if (Denom>0) :
-                Eff = Num / Denom
-              else : Eff = -1
-              
-              if (Denom>0 and Num>0) :
-                EffErr =  Eff * numpy.sqrt( ((NumErr.value / Num) * (NumErr.value / Num)) + ((DenomErr.value / Denom) * (DenomErr.value / Denom) ))
-              else :
-                EffErr = 0.
-      
-              
-              if ("N1_Pt" in keyname2) :
-                Eff = 1-Eff
-              if ("N1_Pt_lowPt" in keyname2) :
-                Eff = 1-Eff
-#                EffBkg = 1-EffBkg
-              if ("N1_TNOPH" in keyname2) :
-                Eff = 1-Eff
-#                EffBkg = 1-EffBkg
-              if ("N1_TNOHFraction" in keyname2) :
-                Eff = 1-Eff
-#                EffBkg = 1-EffBkg
-              if ("N1_TNOM" in keyname2) :
-                Eff = 1-Eff
-#                EffBkg = 1-EffBkg
-              if ("N1_Ih" in keyname2) :
-                Eff = 1-Eff
-#                EffBkg = 1-EffBkg
-              if ("N1_ProbXY" in keyname2) :
-                Eff = 1-Eff
-#                EffBkg = 1-EffBkg
-              if ("PostPreS_Ias" in keyname2) :
-                Eff = 1-Eff
-#                EffBkg = 1-EffBkg
-              if ("ProbQNoL1" in keyname2 or "ProbQNoLayer1" in keyname2 ) :
-                Eff = 1-Eff
-#                EffBkg = 1-EffBkg
-                
-          
-#              print("For j-th: "+str(indexOnBins)+" Eff: "+str(Eff))
-              singleROCcurve.SetBinContent(indexOnBins+1,Eff)
-              singleROCcurve.SetBinError(indexOnBins+1,EffErr)
-#              singleROCcurve.SetBinContent(8,EffBkg)
-            histoArray.append(singleROCcurve)
-            legend.AddEntry(singleROCcurve,sampleName,"LP")
-     
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-          for finalHisto in histoArray :
-            finalHisto.Draw("SAMEHISTOTEXT00")
-            finalHisto.GetXaxis().SetBinLabel(1,"Syst down")
-            finalHisto.GetXaxis().SetBinLabel(2,"Syst nominal")
-            finalHisto.GetXaxis().SetBinLabel(3,"Syst up")
-            finalHisto.GetYaxis().SetRangeUser(0.,1.4)
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex5.Draw("SAME")
-
-          canvas.SaveAs("ROC_CodeV"+codeVersion+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/createROCPlots_bckIOVs.py b/Analyzer/test/Tamas/createROCPlots_bckIOVs.py
deleted file mode 100644
index 347f428..0000000
--- a/Analyzer/test/Tamas/createROCPlots_bckIOVs.py
+++ /dev/null
@@ -1,255 +0,0 @@
-import ROOT, sys, os, time, re, numpy, random
-from optparse import OptionParser
-from ctypes import c_double as double
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-codeVersion = sys.argv[1]
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BkgSamples = ROOT.TFile.Open("crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root")
-
-InputListSamples = [
-#"BackgroundSamplesCode"+codeVersion+".txt",
-#"HSCPgluinoOnlyNeutralSamples_Code"+codeVersion+".txt",
-"SingleMuonSamples_CodeV"+codeVersion+".txt",
-#"HSCPgmsbStauSamples_Code"+codeVersion+".txt",
-#"HSCPpairStauSamples_Code"+codeVersion+".txt",
-#"HSCPstopOnlyNeutralSamples_Code"+codeVersion+".txt",
-#"HSCPstopSamples_Code"+codeVersion+".txt",
-#"HSCPtauPrime1Samples_Code"+codeVersion+".txt",
-#"HSCPtauPrime2Samples_Code"+codeVersion+".txt",
-]
-
-OpenedSamples = []
-for list in InputListSamples:
-  MassPointSamples = []
-  with open(list, "r") as a_file:
-    for line in a_file:
-      stripped_line = line.strip()
-      MassPointSamples.append(ROOT.TFile.Open(stripped_line))
-    OpenedSamples.append(MassPointSamples)
-
-if os.path.exists(os.path.dirname("ROC_CodeV"+codeVersion)):
-  os.makedirs("ROC_CodeV"+codeVersion)
-  
-cutValues = {
-'N1_Eta' : 1.,
-'N1_Pt' : 55.,
-'N1_Pt_lowPt' : 55.,
-'N1_Dxy' : 0.02,
-'N1_Dz' : 0.1,
-'N1_dRMinPfJet' : 1000.,
-'N1_Chi2oNdof' : 5.,
-'N1_Qual' : 2.,
-'N1_TNOH' : 10.,
-'N1_TNOM' : 6.,
-'N1_Qual' : 2.,
-'N1_TNOPH' : 2.,
-'N1_TNOHFraction' : .8,
-'N1_EoP' : .3,
-'N1_SumpTOverpT' : 1000.,
-'N1_Ih' : 3.2,
-'N1_ProbQ' : 0.1,
-'PostPreS_ProbQNoL1' : 0.9,
-'N1_Stations' : 9.,
-'N1_PtErrOverPt' : .25,
-'N1_SegSep' : 25,
-'N1_ProbXY' : 1.0,
-'N1_MiniRelIsoAll' : 0.02,
-'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso' : 0.02,
-'N1_MiniRelIsoAll_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUA' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUB' : 0.02,
-'N1_MiniRelTkIso_lowMiniRelIso_PUC' : 0.02,
-'N1_MiniTkIso' : 15.,
-'N1_MiniTkIso_PUA' : 15.,
-'N1_MiniTkIso_PUB' : 15.,
-'N1_MiniTkIso_PUC' : 15.,
-'N1_MiniTkIso_lowMiniRelIso' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUA' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUB' : 15.,
-'N1_MiniTkIso_lowMiniRelIso_PUC' : 15.,
-'N1_MTOF' : 1000.,
-'N1_I' : 1000.,
-'N1_PtErrOverPt2' : 0.0008,
-'PostPreS_Ias' : 0.1,
-'PostPreS_Ias_NoEventWeight' : 0.2,
-'PostPreS_IasForStatus91' : 0.2,
-'PostPreS_IasForStatusNot91' : 0.2,
-}
-
-for i in range(0, MassPointSamples[0].GetListOfKeys().GetEntries()):
-  dirname = MassPointSamples[0].GetListOfKeys().At(i).GetName()
-  curr_dir = MassPointSamples[0].GetDirectory(dirname)
-
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = MassPointSamples[0].GetDirectory(dirname+"/"+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-
-#          if not ("N1_Eta" in keyname2) : continue
-          if not ("N1" in keyname2 or "PostPreS_ProbQNoL1" in keyname2 or "PostPreS_Ias"  in keyname2): continue
-          if ("Vs" in keyname2 or "N1_pfType" in keyname2) : continue
-
-          cstackedSummedBackgroundString = "cstackedSummedBackgroundString"+str(j)
-          canvas = ROOT.TCanvas(cstackedSummedBackgroundString, cstackedSummedBackgroundString, 800,800)
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          
-          
-          legend =  ROOT.TLegend(.55,.70,.80,.89,"","brNDC")
-          legend.SetTextFont(42)
-          legend.SetTextSize(0.02)
-          legend.SetBorderSize(1);
-          legend.SetBorderSize(0);
-          legend.SetLineColor(1);
-          legend.SetLineStyle(1);
-          legend.SetLineWidth(1);
-          legend.SetFillColor(0);
-          legend.SetFillStyle(1001);
-        
-          # array to contain a specific (keyname2) histogram for all samples
-          histoArray = []
-          maxNumBins = 0.0
-          for i in range(0,len(OpenedSamples)) :
-            maxNumBins = numpy.maximum(maxNumBins,len(OpenedSamples[i]))
- 
-          for indexOnSamples in range(0,len(OpenedSamples)) :
-            singleROCcurveString = 'singleROCcurve'+str(indexOnSamples)+str(j)
-            axisXTitle = keyname2[keyname2.find("N1_")+3:]
-            singleROCcurve = ROOT.TH1F(singleROCcurveString,";;Efficiency for "+axisXTitle,int(maxNumBins),0.,maxNumBins)
-            singleROCcurve.SetStats(0)
-            singleROCcurve.SetMarkerColor(indexOnSamples+1)
-            singleROCcurve.SetMarkerStyle(20)
-            singleROCcurve.SetLineColor(indexOnSamples+1)
-#            singleROCcurve.SetMaximum(1.5)
-            
-            for indexOnBins in range(0,len(OpenedSamples[indexOnSamples])) :
-              givenSampleWmassPoint = OpenedSamples[indexOnSamples][indexOnBins]
-              givenSampleWmassPointStr = str(givenSampleWmassPoint)
-              stringIndexWhere2018 = givenSampleWmassPointStr.find("2018_")+5
-              stringIndexWhereM = givenSampleWmassPointStr.find("_M")
-              stringIndexWhereW = givenSampleWmassPointStr.find("_w")
-              if (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW].find("_M")>0) :
-                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereM])
-              else:
-                sampleName = (givenSampleWmassPointStr[stringIndexWhere2018:stringIndexWhereW])
-              histo = givenSampleWmassPoint.Get(newname)
-              histoBkg = BkgSamples.Get(newname)
-              
-              
-              if not (cutValues.get(keyname2)) :
-                print("No cut value for " + str(keyname2))
-                continue
-              DenomBkgErr = NumErr = NumBkgErr = DenomErr = double(0.0)
-
-              Num = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(cutValues[keyname2]),NumErr,"width")
-              NumBkg = histoBkg.IntegralAndError(histoBkg.GetXaxis().FindBin(0),histoBkg.GetXaxis().FindBin(cutValues[keyname2]),NumBkgErr,"width")
-              Denom = histo.IntegralAndError(histo.GetXaxis().FindBin(0),histo.GetXaxis().FindBin(histo.GetXaxis().GetXmax()),DenomErr,"width")
-              DenomBkg = histoBkg.IntegralAndError(histoBkg.GetXaxis().FindBin(0),histoBkg.GetXaxis().FindBin(histoBkg.GetXaxis().GetXmax()),DenomBkgErr,"width")
-              if (Denom>0) :
-                Eff = Num / Denom
-              else : Eff = 0
-              
-              if (DenomBkg>0 and NumBkg>0) :
-                EffErr =  Eff * numpy.sqrt( ((NumBkgErr.value / NumBkg) * (NumBkgErr.value / NumBkg)) + ((DenomBkgErr.value / DenomBkg) * (DenomBkgErr.value / DenomBkg) ))
-              else :
-                EffErr = 0.
-              
-              if (DenomBkg>0) :
-                EffBkg = NumBkg / DenomBkg
-              else : EffBkg = 0
-              
-              if ("N1_Pt" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_Pt_lowPt" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_TNOPH" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_TNOHFraction" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_TNOM" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_Ih" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("N1_ProbXY" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("PostPreS_Ias" in keyname2) :
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-              if ("PostPreS_ProbQNoL1" in keyname2) :
-                print(Eff)
-                Eff = 1-Eff
-                EffBkg = 1-EffBkg
-                
-          
-#              print("For j-th: "+str(indexOnBins)+" Eff: "+str(Eff))
-              singleROCcurve.SetBinContent(indexOnBins+1,Eff)
-              singleROCcurve.SetBinError(indexOnBins+1,EffErr)
-#              singleROCcurve.SetBinContent(8,EffBkg)
-            histoArray.append(singleROCcurve)
-            legend.AddEntry(singleROCcurve,"SingleMuon","LP")
-     
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal"); # for square plots
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-          
-          tex5 = ROOT.TLatex(0.07,0.04,"Code version: "+codeVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-          for finalHisto in histoArray :
-            finalHisto.Draw("SAMEPE")
-            finalHisto.GetXaxis().SetBinLabel(1,"IOV1")
-            finalHisto.GetXaxis().SetBinLabel(2,"IOV2")
-            finalHisto.GetXaxis().SetBinLabel(3,"IOV3")
-            finalHisto.GetXaxis().SetBinLabel(4,"IOV4")
-            finalHisto.GetXaxis().SetBinLabel(5,"IOV5")
-            finalHisto.GetXaxis().SetBinLabel(6,"IOV6")
-            finalHisto.GetXaxis().SetBinLabel(7,"IOV7")
-            finalHisto.GetXaxis().SetBinLabel(8,"IOV8")
-            finalHisto.GetXaxis().SetBinLabel(9,"IOV9")
-            finalHisto.GetXaxis().SetBinLabel(10,"IOV10")
-            finalHisto.GetXaxis().SetBinLabel(11,"IOV11")
-            finalHisto.GetXaxis().SetBinLabel(12,"IOV12")
-            finalHisto.GetXaxis().SetBinLabel(13,"IOV13")
-            finalHisto.GetXaxis().SetBinLabel(14,"IOV14")
-            finalHisto.GetXaxis().SetBinLabel(15,"IOV15")
-            finalHisto.GetXaxis().SetBinLabel(16,"IOV16")
-            
-            finalHisto.GetYaxis().SetRangeUser(0.,1.4)
-          legend.Draw("SAME")
-          tex2.Draw("SAME")
-          tex3.Draw("SAME")
-          tex5.Draw("SAME")
-
-          canvas.SaveAs("ROC_CodeV"+codeVersion+"/"+keyname2+".png")
diff --git a/Analyzer/test/Tamas/createSpO.py b/Analyzer/test/Tamas/createSpO.py
deleted file mode 100644
index 2c4f20d..0000000
--- a/Analyzer/test/Tamas/createSpO.py
+++ /dev/null
@@ -1,88 +0,0 @@
-import ROOT, sys, os, time, re
-import numpy as np
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog fileNameSignal.root")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetStyle("Plain")
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-fileNameSignal = sys.argv[1]
-
-f1 = ROOT.TFile.Open(fileNameSignal)
-f2 = ROOT.TFile.Open("crab_Analysis_2018_TTToSemiLeptonic_wProbQ_CodeV17p9_v1.root")
-f3 = ROOT.TFile.Open("crab_Analysis_2018_TTTo2L2Nu_wProbQ_CodeV17p9_v1.root")
-f4 = ROOT.TFile.Open("crab_Analysis_2018_TTToHadronic_wProbQ_CodeV17p9_v1.root")
-f5 = ROOT.TFile.Open("crab_Analysis_2018_QCDwPt1000_wProbQ_wIhCut_CodeV17p9_v1.root")
-
-obj1 = f1.Get("analyzer/BaseName/BS_MiniRelIsoAll")
-#obj1 = f1.Get("analyzer/BaseName/BS_EIsol")
-obj2 = f2.Get("analyzer/BaseName/BS_MiniRelIsoAll")
-obj3 = f3.Get("analyzer/BaseName/BS_MiniRelIsoAll")
-obj4 = f4.Get("analyzer/BaseName/BS_MiniRelIsoAll")
-obj5 = f5.Get("analyzer/BaseName/BS_MiniRelIsoAll")
-
-can = ROOT.TCanvas("CutEffs")
-SignalOverNoise = ROOT.TH1F("SignalOverNoise","SignalOverNoise",50,0.0,1.0)
-#SignalOverNoise = ROOT.TH1F("SignalOverNoise","SignalOverNoise",25,0.0,1.5)
-SignalOverNoiseTTto2L2N = ROOT.TH1F("SignalOverNoiseTTto2L2N","SignalOverNoiseTTto2L2N",50,0.0,1.0)
-SignalOverNoiseTTtHadronic = ROOT.TH1F("SignalOverNoiseTTto2L2N","SignalOverNoiseTTto2L2N",50,0.0,1.0)
-SignalOverNoiseQCD = ROOT.TH1F("SignalOverNoiseQCD","SignalOverNoiseQCD",50,0.0,1.0)
-
-#for x in np.arange(0,1.5,0.05):
-for x in np.arange(0,1.0,0.02):
-  Signal = obj1.Integral(obj1.GetXaxis().FindBin(0),obj1.GetXaxis().FindBin(x))
-  BackgroundTTtoSemileptonic = obj2.Integral(obj1.GetXaxis().FindBin(0),obj2.GetXaxis().FindBin(x))
-  BackgroundTTto2L2N = obj3.Integral(obj1.GetXaxis().FindBin(0),obj3.GetXaxis().FindBin(x))
-  BackgroundTTtoHadronic = obj4.Integral(obj1.GetXaxis().FindBin(0),obj4.GetXaxis().FindBin(x))
-  BackgroundQCD = obj5.Integral(obj1.GetXaxis().FindBin(0),obj5.GetXaxis().FindBin(x))
-#  print("For ",x," the S = ",Signal," and B = ",Background, " and the S/sqrt(S+B)",Signal/np.sqrt(Signal+Background))
-  SignalOverNoise.SetBinContent(obj1.GetXaxis().FindBin(x),(Signal/np.sqrt(Signal+BackgroundTTtoSemileptonic)))
-  SignalOverNoiseTTto2L2N.SetBinContent(obj1.GetXaxis().FindBin(x),(Signal/np.sqrt(Signal+BackgroundTTto2L2N)))
-  SignalOverNoiseTTtHadronic.SetBinContent(obj1.GetXaxis().FindBin(x),(Signal/np.sqrt(Signal+BackgroundTTtoHadronic)))
-  SignalOverNoiseQCD.SetBinContent(obj1.GetXaxis().FindBin(x),(Signal/np.sqrt(Signal+BackgroundQCD)))
-  # s / sqrt(s+b)
-
-max1 = np.maximum(SignalOverNoise.GetMaximum(),SignalOverNoiseTTto2L2N.GetMaximum())
-max2 = np.maximum(SignalOverNoiseTTtHadronic.GetMaximum(),SignalOverNoiseQCD.GetMaximum())
-max = np.maximum(max1,max2)
-SignalOverNoise.SetMaximum(max*1.4)
-SignalOverNoise.SetLineColor(2)
-SignalOverNoise.SetMarkerColor(2)
-SignalOverNoise.SetMarkerStyle(20)
-SignalOverNoise.GetYaxis().SetTitle("S/#sqrt{S+B}")
-SignalOverNoise.GetYaxis().SetTitleOffset(1.1)
-#SignalOverNoise.GetXaxis().SetTitle("(E_{HCAL} + E_{ECAL})/p")
-SignalOverNoise.GetXaxis().SetTitle("BS_MiniRelIsoAll")
-SignalOverNoise.SetStats(0)
-
-SignalOverNoiseTTto2L2N.SetMarkerStyle(20)
-SignalOverNoiseTTtHadronic.SetMarkerStyle(20)
-SignalOverNoiseQCD.SetMarkerStyle(20)
-
-SignalOverNoiseTTto2L2N.SetMarkerColor(3)
-SignalOverNoiseTTtHadronic.SetMarkerColor(4)
-SignalOverNoiseQCD.SetMarkerColor(5)
-
-legend =  ROOT.TLegend(.11,.75,.35,.89,"","brNDC")
-legend.SetTextFont(42)
-#legend.SetTextSize(0.035)
-legend.SetTextSize(0.025)
-legend.SetBorderSize(1);
-legend.SetLineColor(0);
-legend.SetLineStyle(1);
-legend.SetLineWidth(1);
-legend.SetFillColor(0);
-legend.SetFillStyle(1001);
-legend.AddEntry(SignalOverNoise,"S="+fileNameSignal[14:-5]+" B=TTtoSemiLeptonic","LP")
-legend.AddEntry(SignalOverNoiseTTto2L2N,"S="+fileNameSignal[14:-5]+" B=TTto2L2N","LP")
-legend.AddEntry(SignalOverNoiseTTtHadronic,"S="+fileNameSignal[14:-5]+" B=TTtoHadronic","LP")
-legend.AddEntry(SignalOverNoiseQCD,"S="+fileNameSignal[14:-5]+" B=QCD","LP")
-
-SignalOverNoise.Draw("P")
-SignalOverNoiseTTto2L2N.Draw("SAMEP")
-SignalOverNoiseTTtHadronic.Draw("SAMEP")
-SignalOverNoiseQCD.Draw("SAMEP")
-legend.Draw("SAME")
-can.SaveAs("SignalOverNoise_MiniRelIso_"+fileNameSignal[14:-5]+".png")
diff --git a/Analyzer/test/Tamas/doAllPlots.py b/Analyzer/test/Tamas/doAllPlots.py
deleted file mode 100644
index 61d9233..0000000
--- a/Analyzer/test/Tamas/doAllPlots.py
+++ /dev/null
@@ -1,66 +0,0 @@
-import sys, os
-from optparse import OptionParser
-from threading import Thread
-
-parser = OptionParser(usage="Usage: python3 %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = []
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-for fname in os.listdir(".") :
-  if (codeVersion in fname and "root" in fname) :
-    if ("gluino_" in fname):
-      if not os.path.exists("HSCPgluinoSamples_CodeV"+codeVersion+".txt"):
-        os.system("cp HSCPgluinoSamples_CodeV40p9.txt HSCPgluinoSamples_CodeV"+codeVersion+".txt")
-        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPgluinoSamples_CodeV"+codeVersion+".txt"
-        os.system(replaceMINTA)
-    elif ("gluinoOnlyNeutral_" in fname):
-      if not os.path.exists("HSCPgluinoOnlyNeutralSamples_CodeV"+codeVersion+".txt"):
-        os.system("cp HSCPgluinoOnlyNeutralSamples_CodeV40p9.txt HSCPgluinoOnlyNeutralSamples_CodeV"+codeVersion+".txt")
-        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPgluinoOnlyNeutralSamples_CodeV"+codeVersion+".txt"
-        os.system(replaceMINTA)
-    elif ("stop_" in fname):
-      if not os.path.exists("HSCPstopSamples_CodeV"+codeVersion+".txt"):
-        os.system("cp HSCPstopSamples_CodeV40p9.txt HSCPstopSamples_CodeV"+codeVersion+".txt")
-        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPstopSamples_CodeV"+codeVersion+".txt"
-        os.system(replaceMINTA)
-    elif ("stopOnlyNeutral_" in fname):
-      if not os.path.exists("HSCPstopOnlyNeutralSamples_CodeV"+codeVersion+".txt"):
-        os.system("cp HSCPstopOnlyNeutralSamples_CodeV40p9.txt HSCPstopOnlyNeutralSamples_CodeV"+codeVersion+".txt")
-        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPstopOnlyNeutralSamples_CodeV"+codeVersion+".txt"
-        os.system(replaceMINTA)
-    elif ("pairStau_" in fname):
-      if not os.path.exists("HSCPpairStauSamples_CodeV"+codeVersion+".txt"):
-        os.system("cp HSCPpairStauSamples_CodeV40p9.txt HSCPpairStauSamples_CodeV"+codeVersion+".txt")
-        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPpairStauSamples_CodeV"+codeVersion+".txt"
-        os.system(replaceMINTA)
-    elif ("gmsbStau_" in fname):
-      if not os.path.exists("HSCPgmsbStauSamples_CodeV"+codeVersion+".txt"):
-        os.system("cp HSCPgmsbStauSamples_CodeV40p9.txt HSCPgmsbStauSamples_CodeV"+codeVersion+".txt")
-        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPgmsbStauSamples_CodeV"+codeVersion+".txt"
-        os.system(replaceMINTA)
-    elif ("tauPrimeCharge1e_" in fname):
-      if not os.path.exists("HSCPtauPrime1Samples_CodeV"+codeVersion+".txt"):
-        os.system("cp HSCPtauPrime1Samples_CodeV40p9.txt HSCPtauPrime1Samples_CodeV"+codeVersion+".txt")
-        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPtauPrime1Samples_CodeV"+codeVersion+".txt"
-        os.system(replaceMINTA)
-    elif ("tauPrimeCharge2e_" in fname):
-      if not os.path.exists("HSCPtauPrime2Samples_CodeV"+codeVersion+".txt"):
-        os.system("cp HSCPtauPrime2Samples_CodeV40p9.txt HSCPtauPrime2Samples_CodeV"+codeVersion+".txt")
-        replaceMINTA = "sed -i '' 's/40p9/"+codeVersion+"/g' HSCPtauPrime2Samples_CodeV"+codeVersion+".txt"
-        os.system(replaceMINTA)
-
-for fname in os.listdir(".") :
-  if (codeVersion in fname and "txt" in fname and "Samples_" in fname) :
-    datasetList.append(fname)
-
-for dataset in datasetList:
-  outTask = "python3 compareWithArguementList.py "+dataset
-  print(outTask)
-  
-print("python3 pngsFromRootFilesJustHistos.py crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root 3")
-print("python3 pngsFromRootFilesJustHistos.py crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+".root 3")
-print("python3 pngsFromRootFilesJustHistos.py crab_Analysis_SingleMuon_RunPhase1_CodeV"+codeVersion+".root 3")
diff --git a/Analyzer/test/Tamas/explore3Dplot.py b/Analyzer/test/Tamas/explore3Dplot.py
deleted file mode 100644
index 8d9ef91..0000000
--- a/Analyzer/test/Tamas/explore3Dplot.py
+++ /dev/null
@@ -1,210 +0,0 @@
-import ROOT
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-ROOT.gStyle.SetPadTopMargin(0.07);
-ROOT.gStyle.SetPadBottomMargin(0.1);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-ROOT.gStyle.SetPadRightMargin(0.13);
-
-can = ROOT.TCanvas("newname","newname",800,800)
-f = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV42p8_v1.root")
-
-# Signal fail
-Histo3Dfail = f.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
-Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
-projFail = Histo3Dfail.Project3D("YZ")
-#proj.GetZaxis().SetLabelOffset(.7)
-#proj.GetYaxis().SetRangeUser(0.3,1.0)
-projFail.Draw("COLZ")
-projFail.SetTitle("FAIL region (F < 0.9)")
-projFail.SetStats(0)
-can.SaveAs("HSCPgluino_GiVsPt_FAIL.png")
-
-# Signal pass
-Histo3Dpass = f.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
-Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
-projPass = Histo3Dpass.Project3D("YZ")
-#proj.GetXaxis().SetRangeUser(1,300)
-#proj.GetYaxis().SetRangeUser(0.3,1.0)
-#proj.Draw("COLZTEXT")
-projPass.Draw("COLZ")
-projPass.SetTitle("PASS region (F > 0.9)")
-projPass.SetStats(0)
-can.SaveAs("HSCPgluino_GiVsPt_PASS.png")
-
-# Signal fail log Gi
-canLog = ROOT.TCanvas("newname2","newname2",800,800)
-legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
-legProjXInRegions.SetTextFont(42)
-legProjXInRegions.SetTextSize(0.035)
-legProjXInRegions.SetBorderSize(1);
-legProjXInRegions.SetLineColor(0);
-legProjXInRegions.SetLineStyle(1);
-legProjXInRegions.SetLineWidth(1);
-legProjXInRegions.SetFillColor(0);
-legProjXInRegions.SetFillStyle(1001);
-canLog.SetLogy()
-
-Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
-projFail = Histo3Dfail.Project3D("YZ")
-projFail.SetTitle("FAIL region (F < 0.9)")
-projFail.GetXaxis().SetRangeUser(1,500)
-projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
-projFailPt1.SetStats(0)
-projFailPt1.SetMarkerStyle(20)
-projFailPt1.SetLineColor(1)
-projFailPt1.SetMarkerColor(1)
-projFailPt1.SetMaximum(2)
-projFailPt1.DrawClone("SAMEP")
-
-legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 1 - 500 GeV","LP")
-
-projFail.GetXaxis().SetRangeUser(500,1000)
-projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
-projFailPt2.SetStats(0)
-projFailPt2.SetMarkerStyle(20)
-projFailPt2.SetLineColor(2)
-projFailPt2.SetMarkerColor(2)
-projFailPt2.DrawClone("SAMEP")
-legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 500 - 1000  GeV","LP")
-
-projFail.GetXaxis().SetRangeUser(1000,4000)
-projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
-projFailPt3.SetStats(0)
-projFailPt3.SetMarkerStyle(20)
-projFailPt3.SetLineColor(3)
-projFailPt3.SetMarkerColor(3)
-projFailPt3.DrawClone("SAMEP")
-
-legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 1000 - inf GeV","LP")
-legProjXInRegions.Draw("SAMEP")
-canLog.SaveAs("HSCPgluino_Gi_PtBins_FAIL.png")
-
-# Signal PASS log Gi
-canLog2 = ROOT.TCanvas("newname2-pass","newname2-pass",800,800)
-canLog2.SetLogy()
-Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
-projPass = Histo3Dpass.Project3D("YZ")
-projPass.SetTitle("PASS region (F > 0.9)")
-
-projPass.GetXaxis().SetRangeUser(1,500)
-projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
-projPassPt1.SetStats(0)
-projPassPt1.SetMarkerStyle(20)
-projPassPt1.SetLineColor(1)
-projPassPt1.SetMarkerColor(1)
-projPassPt1.SetMaximum(200)
-projPassPt1.DrawClone("SAMEP")
-
-projPass.GetXaxis().SetRangeUser(500,1000)
-projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
-projPassPt2.SetStats(0)
-projPassPt2.SetMarkerStyle(20)
-projPassPt2.SetLineColor(2)
-projPassPt2.SetMarkerColor(2)
-projPassPt2.DrawClone("SAMEP")
-
-projPass.GetXaxis().SetRangeUser(1000,4000)
-projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
-projPassPt3.SetStats(0)
-projPassPt3.SetMarkerStyle(20)
-projPassPt3.SetLineColor(3)
-projPassPt3.SetMarkerColor(3)
-projPassPt3.DrawClone("SAMEP")
-
-legProjXInRegions.Draw("SAMEP")
-canLog2.SaveAs("HSCPgluino_Gi_PtBins_PASS.png")
-
-
-
-# Now repeat everything for the background
-f2 = ROOT.TFile.Open("crab_Analysis_SingleMuon_RunPhase1_CodeV42p8_v1.root")
-Histo3Dfail = f2.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
-# Signal fail log Gi
-canLog3 = ROOT.TCanvas("canLog3anewname2","canLog3anewname2",800,800)
-canLog3.SetLogy()
-legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
-legProjXInRegions.SetTextFont(42)
-legProjXInRegions.SetTextSize(0.035)
-legProjXInRegions.SetBorderSize(1);
-legProjXInRegions.SetLineColor(0);
-legProjXInRegions.SetLineStyle(1);
-legProjXInRegions.SetLineWidth(1);
-legProjXInRegions.SetFillColor(0);
-legProjXInRegions.SetFillStyle(1001);
-canLog3.SetLogy()
-
-Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
-projFail = Histo3Dfail.Project3D("YZ")
-projFail.SetTitle("FAIL region (F < 0.9)")
-projFail.GetXaxis().SetRangeUser(1,500)
-projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
-projFailPt1.SetStats(0)
-projFailPt1.SetMarkerStyle(20)
-projFailPt1.SetLineColor(1)
-projFailPt1.SetMarkerColor(1)
-projFailPt1.SetMaximum(20000000)
-projFailPt1.DrawClone("SAMEP")
-
-legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 1 - 500 GeV","LP")
-
-projFail.GetXaxis().SetRangeUser(500,1000)
-projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
-projFailPt2.SetStats(0)
-projFailPt2.SetMarkerStyle(20)
-projFailPt2.SetLineColor(2)
-projFailPt2.SetMarkerColor(2)
-projFailPt2.DrawClone("SAMEP")
-legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 500 - 1000  GeV","LP")
-
-projFail.GetXaxis().SetRangeUser(1000,4000)
-projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
-projFailPt3.SetStats(0)
-projFailPt3.SetMarkerStyle(20)
-projFailPt3.SetLineColor(3)
-projFailPt3.SetMarkerColor(3)
-projFailPt3.DrawClone("SAMEP")
-
-legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 1000 - inf GeV","LP")
-legProjXInRegions.Draw("SAMEP")
-canLog3.SaveAs("AllBkg_data_Gi_PtBins_FAIL.png")
-
-# Signal PASS log Gi
-Histo3Dpass = f2.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
-canLog32 = ROOT.TCanvas("canLog3anewname2-pass","canLog3anewname2-pass",800,800)
-canLog32.SetLogy()
-Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
-projPass = Histo3Dpass.Project3D("YZ")
-projPass.SetTitle("PASS region (F > 0.9)")
-
-projPass.GetXaxis().SetRangeUser(1,500)
-projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
-projPassPt1.SetStats(0)
-projPassPt1.SetMarkerStyle(20)
-projPassPt1.SetLineColor(1)
-projPassPt1.SetMarkerColor(1)
-projPassPt1.SetMaximum(20000000)
-projPassPt1.DrawClone("SAMEP")
-
-projPass.GetXaxis().SetRangeUser(500,1000)
-projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
-projPassPt2.SetStats(0)
-projPassPt2.SetMarkerStyle(20)
-projPassPt2.SetLineColor(2)
-projPassPt2.SetMarkerColor(2)
-projPassPt2.DrawClone("SAMEP")
-
-projPass.GetXaxis().SetRangeUser(1000,4000)
-projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
-projPassPt3.SetStats(0)
-projPassPt3.SetMarkerStyle(20)
-projPassPt3.SetLineColor(3)
-projPassPt3.SetMarkerColor(3)
-projPassPt3.DrawClone("SAMEP")
-
-legProjXInRegions.Draw("SAMEP")
-canLog32.SaveAs("AllBkg_data_Gi_PtBins_PASS.png")
diff --git a/Analyzer/test/Tamas/explore3Dplot_InclusiveOverlayed.py b/Analyzer/test/Tamas/explore3Dplot_InclusiveOverlayed.py
deleted file mode 100644
index 7b3f4c5..0000000
--- a/Analyzer/test/Tamas/explore3Dplot_InclusiveOverlayed.py
+++ /dev/null
@@ -1,211 +0,0 @@
-import ROOT
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-ROOT.gStyle.SetPadTopMargin(0.07);
-ROOT.gStyle.SetPadBottomMargin(0.1);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-ROOT.gStyle.SetPadRightMargin(0.13);
-
-can = ROOT.TCanvas("newname","newname",800,800)
-f = ROOT.TFile.Open("crab_Analysis_2018_HSCPgluino_M-1800_CodeV42p8_v1.root")
-
-# Signal fail
-Histo3Dfail = f.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
-Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
-projFail = Histo3Dfail.Project3D("YZ")
-#proj.GetZaxis().SetLabelOffset(.7)
-#proj.GetYaxis().SetRangeUser(0.3,1.0)
-projFail.Draw("COLZ")
-projFail.SetTitle("FAIL region (F < 0.9)")
-projFail.SetStats(0)
-can.SaveAs("HSCPgluino_GiVsPt_FAIL.png")
-
-# Signal pass
-Histo3Dpass = f.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
-Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
-projPass = Histo3Dpass.Project3D("YZ")
-#proj.GetXaxis().SetRangeUser(1,300)
-#proj.GetYaxis().SetRangeUser(0.3,1.0)
-#proj.Draw("COLZTEXT")
-projPass.Draw("COLZ")
-projPass.SetTitle("PASS region (F > 0.9)")
-projPass.SetStats(0)
-can.SaveAs("HSCPgluino_GiVsPt_PASS.png")
-
-# Signal fail log Gi
-canLog = ROOT.TCanvas("newname2","newname2",800,800)
-canLog.SetLogy()
-legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
-legProjXInRegions.SetTextFont(42)
-legProjXInRegions.SetTextSize(0.035)
-legProjXInRegions.SetBorderSize(1);
-legProjXInRegions.SetLineColor(0);
-legProjXInRegions.SetLineStyle(1);
-legProjXInRegions.SetLineWidth(1);
-legProjXInRegions.SetFillColor(0);
-legProjXInRegions.SetFillStyle(1001);
-
-
-Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
-projFail = Histo3Dfail.Project3D("YZ")
-projFail.SetTitle("FAIL region (F < 0.9)")
-projFail.GetXaxis().SetRangeUser(200,4000)
-projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
-projFailPt1.SetStats(0)
-projFailPt1.SetMarkerStyle(20)
-projFailPt1.SetLineColor(1)
-projFailPt1.SetMarkerColor(1)
-projFailPt1.SetMaximum(2)
-projFailPt1.DrawClone("SAMEP")
-
-legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 200 - inf GeV","LP")
-
-projFail.GetXaxis().SetRangeUser(300,4000)
-projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
-projFailPt2.SetStats(0)
-projFailPt2.SetMarkerStyle(20)
-projFailPt2.SetLineColor(2)
-projFailPt2.SetMarkerColor(2)
-projFailPt2.DrawClone("SAMEP")
-legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 300 - inf  GeV","LP")
-
-projFail.GetXaxis().SetRangeUser(400,4000)
-projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
-projFailPt3.SetStats(0)
-projFailPt3.SetMarkerStyle(20)
-projFailPt3.SetLineColor(3)
-projFailPt3.SetMarkerColor(3)
-projFailPt3.DrawClone("SAMEP")
-
-legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 400 - inf GeV","LP")
-legProjXInRegions.Draw("SAMEP")
-canLog.SaveAs("HSCPgluino_Gi_PtBins_FAIL.png")
-
-# Signal PASS log Gi
-canLog2 = ROOT.TCanvas("newname2-pass","newname2-pass",800,800)
-canLog2.SetLogy()
-Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
-projPass = Histo3Dpass.Project3D("YZ")
-projPass.SetTitle("PASS region (F > 0.9)")
-
-projPass.GetXaxis().SetRangeUser(240,4000)
-projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
-projPassPt1.SetStats(0)
-projPassPt1.SetMarkerStyle(20)
-projPassPt1.SetLineColor(1)
-projPassPt1.SetMarkerColor(1)
-projPassPt1.SetMaximum(200)
-projPassPt1.DrawClone("SAMEP")
-
-projPass.GetXaxis().SetRangeUser(320,4000)
-projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
-projPassPt2.SetStats(0)
-projPassPt2.SetMarkerStyle(20)
-projPassPt2.SetLineColor(2)
-projPassPt2.SetMarkerColor(2)
-projPassPt2.DrawClone("SAMEP")
-
-projPass.GetXaxis().SetRangeUser(400,4000)
-projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
-projPassPt3.SetStats(0)
-projPassPt3.SetMarkerStyle(20)
-projPassPt3.SetLineColor(3)
-projPassPt3.SetMarkerColor(3)
-projPassPt3.DrawClone("SAMEP")
-
-legProjXInRegions.Draw("SAMEP")
-canLog2.SaveAs("HSCPgluino_Gi_PtBins_PASS.png")
-
-
-
-# Now repeat everything for the background
-f2 = ROOT.TFile.Open("crab_Analysis_SingleMuon_RunPhase1_CodeV42p8_v1.root")
-Histo3Dfail = f2.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
-# Signal fail log Gi
-canLog3 = ROOT.TCanvas("canLog3anewname2","canLog3anewname2",800,800)
-canLog3.SetLogy()
-legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
-legProjXInRegions.SetTextFont(42)
-legProjXInRegions.SetTextSize(0.035)
-legProjXInRegions.SetBorderSize(1);
-legProjXInRegions.SetLineColor(0);
-legProjXInRegions.SetLineStyle(1);
-legProjXInRegions.SetLineWidth(1);
-legProjXInRegions.SetFillColor(0);
-legProjXInRegions.SetFillStyle(1001);
-canLog3.SetLogy()
-
-Histo3Dfail.GetXaxis().SetRange(1,18) # makes it the FAIL region
-projFail = Histo3Dfail.Project3D("YZ")
-projFail.SetTitle("FAIL region (F < 0.9)")
-projFail.GetXaxis().SetRangeUser(240,4000)
-projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
-projFailPt1.SetStats(0)
-projFailPt1.SetMarkerStyle(20)
-projFailPt1.SetLineColor(1)
-projFailPt1.SetMarkerColor(1)
-projFailPt1.SetMaximum(20000000)
-projFailPt1.DrawClone("SAMEP")
-
-legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 240 - inf GeV","LP")
-
-projFail.GetXaxis().SetRangeUser(320,4000)
-projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
-projFailPt2.SetStats(0)
-projFailPt2.SetMarkerStyle(20)
-projFailPt2.SetLineColor(2)
-projFailPt2.SetMarkerColor(2)
-projFailPt2.DrawClone("SAMEP")
-legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 320 - inf  GeV","LP")
-
-projFail.GetXaxis().SetRangeUser(400,4000)
-projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
-projFailPt3.SetStats(0)
-projFailPt3.SetMarkerStyle(20)
-projFailPt3.SetLineColor(3)
-projFailPt3.SetMarkerColor(3)
-projFailPt3.DrawClone("SAMEP")
-
-legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 400 - inf GeV","LP")
-legProjXInRegions.Draw("SAMEP")
-canLog3.SaveAs("AllBkg_data_Gi_PtBinsIncl_FAIL.png")
-
-# Signal PASS log Gi
-Histo3Dpass = f2.Get("HSCParticleAnalyzer/BaseName/PostS_ProbQNoL1VsIasVsPt")
-canLog32 = ROOT.TCanvas("canLog3anewname2-pass","canLog3anewname2-pass",800,800)
-canLog32.SetLogy()
-Histo3Dpass.GetXaxis().SetRange(19,21) # makes it the PASS region
-projPass = Histo3Dpass.Project3D("YZ")
-projPass.SetTitle("PASS region (F > 0.9)")
-
-projPass.GetXaxis().SetRangeUser(240,4000)
-projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
-projPassPt1.SetStats(0)
-projPassPt1.SetMarkerStyle(20)
-projPassPt1.SetLineColor(1)
-projPassPt1.SetMarkerColor(1)
-projPassPt1.SetMaximum(20000000)
-projPassPt1.DrawClone("SAMEP")
-
-projPass.GetXaxis().SetRangeUser(320,4000)
-projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
-projPassPt2.SetStats(0)
-projPassPt2.SetMarkerStyle(20)
-projPassPt2.SetLineColor(2)
-projPassPt2.SetMarkerColor(2)
-projPassPt2.DrawClone("SAMEP")
-
-projPass.GetXaxis().SetRangeUser(400,4000)
-projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
-projPassPt3.SetStats(0)
-projPassPt3.SetMarkerStyle(20)
-projPassPt3.SetLineColor(3)
-projPassPt3.SetMarkerColor(3)
-projPassPt3.DrawClone("SAMEP")
-
-legProjXInRegions.Draw("SAMEP")
-canLog32.SaveAs("AllBkg_data_Gi_PtBinsIncl_PASS.png")
diff --git a/Analyzer/test/Tamas/extrackTemplateFromFramework.py b/Analyzer/test/Tamas/extrackTemplateFromFramework.py
deleted file mode 100644
index 4d46023..0000000
--- a/Analyzer/test/Tamas/extrackTemplateFromFramework.py
+++ /dev/null
@@ -1,202 +0,0 @@
-import ROOT, sys, os, time, re
-import numpy as np
-from ctypes import c_double as double
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog fileName.root")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-ROOT.gStyle.SetPadTopMargin(0.07);
-ROOT.gStyle.SetPadBottomMargin(0.1);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-ROOT.gStyle.SetPadRightMargin(0.13);
-
-fileName = sys.argv[1]
-bin = 3
-# bin 3: pt>60 and I_as > 0.05
-# bin 25: pt>65 and I_as > 0.175
-# bin 28: pt>65 and I_as > 0.3
-
-blind = True
-#blind = False
-
-print("Filename: "+fileName)
-input_file = fileName
-
-ProjBin = 3
-newFileDir = fileName[0:-5] + "_Bin" + str(ProjBin)
-
-
-f = ROOT.TFile.Open(input_file)
-fileOut = open("SignalBackgroundEff.txt", "a")
-
-isData = False
-if ("SingleMuon" in fileName) : isData = True
-
-iDontWannaRunPlots = False
-#iDontWannaRunPlots = True
-
-
-dirs = []
-for i in range(0, f.GetListOfKeys().GetEntries()):
-  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
-  dirname = f.GetListOfKeys().At(i).GetName()
-  curr_dir = f.GetDirectory(dirname)
-# print("dirname: "+dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      # Match the plot of interest
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = f.GetDirectory(dirname+"/"+keyname)
-#                    print("keyname: "+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          if ("__" in keyname2) : continue
-          # The plot should be TCanvas
-          newname = dirname + "/" + keyname+ "/" + keyname2
-#          print("newname: "+newname)
-          obj = f.Get(newname)
-          
-          
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
-          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal");
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-
-
-          tex4 = ROOT.TLatex()
-          if ("BefPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
-#            if ("BefPreS_Eta" in keyname2) :
-#              print("BefPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          elif ("N1" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
-#            if ("N1_Eta" in keyname2) :
-#              print("N-1 number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          elif ("PostPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
-          elif ("PostS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After selection")
-#            if ("PostPreS_Eta" in keyname2) :
-#              print("PostPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.045);
-          tex4.SetLineWidth(2);
-          
-          codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
-          fileVersion = fileName[fileName.find("2018")+5:fileName.find("CodeV")+9]
-          tex5 = ROOT.TLatex(0.07,0.03,fileVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if not (obj) : continue
-          if obj.InheritsFrom("TObject"):
-              can = obj
-              obj.SetStats(0)
-              can = ROOT.TCanvas(newname,newname,800,800)
-              # Name of the png to be saved
-              name = fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png"
-              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-              if (obj.GetEntries() == 0 ) :
-                continue
-                
-#             when I dont want to plot everything
-              if (iDontWannaRunPlots) : continue
-              if not ("GiTemplate" in keyname2) : continue
-              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
-                obj.SetTitle("")
-                if ("Calibration_GiTemplate" in keyname2) :
-                  projX = obj.ProjectionX()
-                  projX.SetTitle("")
-                  projX.SetStats(0)
-                  projX.SetMarkerStyle(20)
-                  projX.GetYaxis().SetTitle("Clusters")
-                  projX.GetYaxis().SetTitleOffset(1.9)
-                  projX.Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjX.png")
-                  
-                  legGiCalib =  ROOT.TLegend(.6,.55,.80,.9,"","brNDC")
-                  legGiCalib.SetTextFont(42)
-                  legGiCalib.SetTextSize(0.03)
-                  legGiCalib.SetBorderSize(1);
-                  legGiCalib.SetLineColor(0);
-                  legGiCalib.SetLineStyle(1);
-                  legGiCalib.SetLineWidth(1);
-                  legGiCalib.SetFillColor(0);
-                  legGiCalib.SetFillStyle(1001);
-                  
-                  can3 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
-                  can3.SetLogy()
-                  for x in range(1,obj.GetNbinsX()+1) :
-                    projY = obj.ProjectionY(keyname2 +  "_ProjY"+str(x),x,x+1,1,obj.GetNbinsZ()+1,"e")
-                    projY.SetTitle("")
-                    projY.SetStats(0)
-                    projY.SetMarkerStyle(20)
-                    projY.SetLineColor(x)
-                    projY.SetMarkerColor(x)
-                    projY.GetYaxis().SetTitle("Clusters")
-                    projY.GetYaxis().SetTitleOffset(1.4)
-                    legGiCalib.AddEntry(projY, "Module index: " + str(x),"LP")
-                    projY.Draw("SAME")
-                  legGiCalib.Draw("SAME")
-                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjY.png")
-                  can4 = ROOT.TCanvas(newname+"4",newname+"4",800,800)
-                  can4.SetLogy()
-                  for x in range(1,obj.GetNbinsX()+2) :
-                    projZ = obj.ProjectionZ(keyname2 + "_ProjZ"+str(x),x,x+1,1,obj.GetNbinsY()+1,"e").Rebin(10)
-                    projZ.SetTitle("")
-                    projZ.SetStats(0)
-                    projZ.SetMarkerStyle(20)
-                    projZ.SetLineColor(x)
-                    projZ.SetMarkerColor(x)
-                    projZ.GetYaxis().SetTitle("Clusters")
-                    projZ.GetYaxis().SetTitleOffset(1.4)
-                    projZ.Draw("SAME")
-                  legGiCalib.Draw("SAME")
-                  can4.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjZ.png")
-              
-name = fileName[fileName.find("Run")+3:fileName.find("_CodeV")]
-version = "v4"
-outFileName = str('template_{}_{}.root'.format(name,version))
-fOut = ROOT.TFile.Open(outFileName,'UPDATE')
-templ0 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate')
-templ1 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_1')
-templ2 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_2')
-templ3 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_3')
-templ4 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_4')
-templ5 = f.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_5')
-
-templ0.Write()
-templ1.Write()
-templ2.Write()
-templ3.Write()
-templ4.Write()
-templ5.Write()
-fOut.Close()
-
-os.system("mv " + outFileName + " " + fileName[0:-5] + "_Bin" + str(bin))
-
-print("scp "+fileName[0:-5] + "_Bin" + str(bin)+"/"+outFileName + " vami@ui3.kfki.hu:/data/vami/projects/HSCP/v1/CMSSW_10_6_30/src/SUSYBSMAnalysis/HSCP/data/.")
diff --git a/Analyzer/test/Tamas/extrackTemplateFromNtuple.py b/Analyzer/test/Tamas/extrackTemplateFromNtuple.py
deleted file mode 100644
index 9bd3c35..0000000
--- a/Analyzer/test/Tamas/extrackTemplateFromNtuple.py
+++ /dev/null
@@ -1,1036 +0,0 @@
-import ROOT, sys, os, time, re
-import numpy as np
-from ctypes import c_double as double
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-ROOT.gStyle.SetPadTopMargin(0.07);
-ROOT.gStyle.SetPadBottomMargin(0.1);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-ROOT.gStyle.SetPadRightMargin(0.13);
-
-fileName = sys.argv[1]
-BinNumber = sys.argv[2]
-
-bin = int(BinNumber)
-# bin 3: pt>60 and I_as > 0.05
-# bin 25: pt>65 and I_as > 0.175
-# bin 28: pt>65 and I_as > 0.3
-
-blind = True
-#blind = False
-
-print("Filename: "+fileName)
-input_file = fileName
-
-ProjBin = int(BinNumber)
-newFileDir = fileName[0:-5] + "_Bin" + str(ProjBin)
-
-
-f = ROOT.TFile.Open(input_file)
-fileOut = open("SignalBackgroundEff.txt", "a")
-
-isData = False
-if ("SingleMuon" in fileName) : isData = True
-
-iDontWannaRunPlots = False
-#iDontWannaRunPlots = True
-
-
-dirs = []
-for i in range(0, f.GetListOfKeys().GetEntries()):
-  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
-  dirname = f.GetListOfKeys().At(i).GetName()
-  curr_dir = f.GetDirectory(dirname)
-#  print("dirname: "+dirname)
-  if (True):
-      # Match the plot of interest
-      keyname = f.GetListOfKeys().At(i).GetName()
-      keyname2 = f.GetListOfKeys().At(i).GetName()
-      curr_dir2 = f.GetDirectory(dirname)
-#      print("keyname: "+keyname)
-      if (True):
-#          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          if ("__" in keyname2) : continue
-          # The plot should be TCanvas
-          newname = dirname
-#          print("newname: "+newname)
-          obj = f.Get(newname)
-          
-          
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
-          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal");
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-
-
-          tex4 = ROOT.TLatex()
-          if ("BefPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
-#            if ("BefPreS_Eta" in keyname2) :
-#              print("BefPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          elif ("N1" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
-#            if ("N1_Eta" in keyname2) :
-#              print("N-1 number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          elif ("PostPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
-          elif ("PostS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After selection")
-#            if ("PostPreS_Eta" in keyname2) :
-#              print("PostPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.045);
-          tex4.SetLineWidth(2);
-          
-          codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
-          fileVersion = fileName[fileName.find("2018")+5:fileName.find("CodeV")+9]
-          tex5 = ROOT.TLatex(0.07,0.03,fileVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if not (obj) : continue
-          if obj.InheritsFrom("TObject"):
-              can = obj
-              obj.SetStats(0)
-              can = ROOT.TCanvas(newname,newname,800,800)
-              # Name of the png to be saved
-              name = fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png"
-              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-              if (obj.GetEntries() == 0 ) :
-                continue
-                
-#             when I dont want to plot everything
-              if (iDontWannaRunPlots) : continue
-              if ("_region" in keyname2 or "CtrlPt_" in keyname2 or "Pred_" in keyname2 or "PDF" in keyname2 or "Hist_" in keyname2) : continue
-#              if not ("Trigger" in keyname2 and obj.ClassName() == "TH3F") : continue
-              if not ("GiTemplate" in keyname2) : continue
-
-              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
-                obj.SetTitle("")
-                if ("VsProbQVsIas" in keyname2) :
-                  can2 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
-                  can2.SetLogy()
-                  
-                  projA = obj.ProjectionX(newname+"_RegionA",obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1),obj.GetZaxis().FindBin(0.0),obj.GetZaxis().FindBin(0.1),"e")
-                  projB = obj.ProjectionX(newname+"_RegionB",obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1),obj.GetZaxis().FindBin(0.1),obj.GetZaxis().FindBin(1.0),"e")
-                  projC = obj.ProjectionX(newname+"_RegionC",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),obj.GetZaxis().FindBin(0.0),obj.GetZaxis().FindBin(0.1),"e")
-                  projD = obj.ProjectionX(newname+"_RegionD",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),obj.GetZaxis().FindBin(0.1),obj.GetZaxis().FindBin(1.0),"e")
-                  projA.SetMarkerColor(1)
-                  projA.SetTitle("")
-                  projB.SetMarkerColor(2)
-                  projC.SetMarkerColor(3)
-                  projD.SetMarkerColor(4)
-                  projA.SetMarkerStyle(20)
-                  projB.SetMarkerStyle(20)
-                  projC.SetMarkerStyle(20)
-                  projD.SetMarkerStyle(20)
-                  projA.SetLineColor(1)
-                  projB.SetLineColor(2)
-                  projC.SetLineColor(3)
-                  projD.SetLineColor(4)
-                  
-                  max1 = np.maximum(projA.GetMaximum(),projB.GetMaximum())
-                  max2 = np.maximum(projC.GetMaximum(),projD.GetMaximum())
-                  max = np.maximum(max1,max2)
-                  
-                  legProjXInRegions =  ROOT.TLegend(.4,.65,.80,.9,"","brNDC")
-                  legProjXInRegions.SetTextFont(42)
-                  legProjXInRegions.SetTextSize(0.035)
-                  legProjXInRegions.SetBorderSize(1);
-                  legProjXInRegions.SetLineColor(0);
-                  legProjXInRegions.SetLineStyle(1);
-                  legProjXInRegions.SetLineWidth(1);
-                  legProjXInRegions.SetFillColor(0);
-                  legProjXInRegions.SetFillStyle(1001);
-                  
-                  Err = double(0.0)
-                  legProjXInRegions.AddEntry(projA,"Region A: " +str(int(projA.IntegralAndError(1,projA.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
-                  legProjXInRegions.AddEntry(projB,"Region B: " +str(int(projB.IntegralAndError(1,projB.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
-                  legProjXInRegions.AddEntry(projC,"Region C: " +str(int(projC.IntegralAndError(1,projC.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
-                  legProjXInRegions.AddEntry(projD,"Region D: " +str(int(projD.IntegralAndError(1,projD.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
-                  
-                  projA.SetStats(0)
-                  projA.SetMinimum(0.0001)
-                  if (projA.Integral() == 0) : continue
-                  if (projB.Integral() == 0) : continue
-                  if (projC.Integral() == 0) : continue
-                  if (projD.Integral() == 0) : continue
-                  projA.Scale(1/projA.Integral())
-                  newMax = projA.GetMaximum()
-                  projB.Scale(1/projB.Integral())
-                  projC.Scale(1/projC.Integral())
-                  projD.Scale(1/projD.Integral())
-                  projA.Draw("SAME")
-                  projA.GetYaxis().SetRangeUser(0.00000001, newMax*10)
-                  projA.GetYaxis().SetTitle("Norm tracks / bin")
-                  projA.GetYaxis().SetTitleOffset(1.7)
-                  projB.Draw("SAME")
-                  projC.Draw("SAME")
-                  projD.Draw("SAME")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legProjXInRegions.Draw("SAME")
-
-                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjXInRegions.png")
-                
-                if ("ProbQVsProbXY" in keyname2) :
-                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(3.22),-1)
-                  obj.GetYaxis().SetRange(obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1))
-                  obj.Project3D("YZ").Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIh.png")
-                  obj.GetXaxis().UnZoom()
-                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(3.22))
-                  obj.GetYaxis().SetRange(obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1))
-                  obj.Project3D("YZ").Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIh.png")
-                  obj.GetXaxis().UnZoom()
-                  obj.Project3D("YZ").Draw("COLZ")
-                  can.SaveAs(name)
-                if ("GiTemplate" in keyname2) :
-                  projX = obj.ProjectionX()
-                  projX.SetTitle("")
-                  projX.SetStats(0)
-                  projX.SetMarkerStyle(20)
-                  projX.GetYaxis().SetTitle("Clusters")
-                  projX.GetYaxis().SetTitleOffset(1.9)
-                  projX.Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjX.png")
-                  
-                  legGiCalib =  ROOT.TLegend(.6,.55,.80,.9,"","brNDC")
-                  legGiCalib.SetTextFont(42)
-                  legGiCalib.SetTextSize(0.03)
-                  legGiCalib.SetBorderSize(1);
-                  legGiCalib.SetLineColor(0);
-                  legGiCalib.SetLineStyle(1);
-                  legGiCalib.SetLineWidth(1);
-                  legGiCalib.SetFillColor(0);
-                  legGiCalib.SetFillStyle(1001);
-                  
-                  can3 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
-                  can3.SetLogy()
-                  for x in range(1,obj.GetNbinsX()+1) :
-                    projY = obj.ProjectionY(keyname2 +  "_ProjY"+str(x),x,x+1,1,obj.GetNbinsZ()+1,"e")
-                    projY.SetTitle("")
-                    projY.SetStats(0)
-                    projY.SetMarkerStyle(20)
-                    projY.SetLineColor(x)
-                    projY.SetMarkerColor(x)
-                    projY.GetYaxis().SetTitle("Clusters")
-                    projY.GetYaxis().SetTitleOffset(1.4)
-                    legGiCalib.AddEntry(projY, "Module index: " + str(x),"LP")
-                    projY.Draw("SAME")
-                  legGiCalib.Draw("SAME")
-                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjY.png")
-                  can4 = ROOT.TCanvas(newname+"4",newname+"4",800,800)
-                  can4.SetLogy()
-                  for x in range(1,obj.GetNbinsX()+2) :
-                    projZ = obj.ProjectionZ(keyname2 + "_ProjZ"+str(x),x,x+1,1,obj.GetNbinsY()+1,"e").Rebin(10)
-                    projZ.SetTitle("")
-                    projZ.SetStats(0)
-                    projZ.SetMarkerStyle(20)
-                    projZ.SetLineColor(x)
-                    projZ.SetMarkerColor(x)
-                    projZ.GetYaxis().SetTitle("Clusters")
-                    projZ.GetYaxis().SetTitleOffset(1.4)
-                    projZ.Draw("SAME")
-                  legGiCalib.Draw("SAME")
-                  can4.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjZ.png")
-                  continue
-                else :
-                  print("Following plot was skipped: "+str(keyname2))
-                  continue
-              if ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "GenPtVsRecoPt" or "PreS_" in keyname2 or "CutFlow" in keyname2 or "N1_" in keyname2 or "_p_" in keyname2 or "_pterr" in keyname2 )):
-                obj.SetTitle("")
-                obj.SetMarkerStyle(20)
-                projOb = obj.ProjectionY(newname,bin,bin,"e")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                projOb.Draw("COLZ L")
-                can.SaveAs(name)
-
-              if ((obj.ClassName() == "TH2F") and "VsPixelLayer" in keyname2) :
-                for i in range(4) :
-                  obj.SetTitle("")
-                  obj.SetMarkerStyle(20)
-                  obj.SetStats(0)
-                  obj.ProjectionX(newname+"_PixLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").Draw()
-                  obj.ProjectionX(newname+"_PixLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").SetStats(0)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PixLayer"+str(i+1)+".png")
-              if ((obj.ClassName() == "TH2F") and "VsStripLayer" in keyname2) :
-                obj.GetYaxis().SetBinLabel(1,"TIB L1")
-                obj.GetYaxis().SetBinLabel(2,"TIB L2")
-                obj.GetYaxis().SetBinLabel(3,"TIB L3")
-                obj.GetYaxis().SetBinLabel(4,"TIB L4")
-                obj.GetYaxis().SetBinLabel(5,"TOB L1")
-                obj.GetYaxis().SetBinLabel(6,"TOB L2")
-                obj.GetYaxis().SetBinLabel(7,"TOB L3")
-                obj.GetYaxis().SetBinLabel(8,"TOB L4")
-                obj.GetYaxis().SetBinLabel(9,"TOB L5")
-                obj.GetYaxis().SetBinLabel(10,"TOB L6")
-                obj.GetYaxis().SetBinLabel(11,"TID D1")
-                obj.GetYaxis().SetBinLabel(12,"TID D2")
-                obj.GetYaxis().SetBinLabel(13,"TID D3")
-                obj.GetYaxis().SetBinLabel(14,"TEC D1")
-                obj.GetYaxis().SetBinLabel(15,"TEC D2")
-                obj.GetYaxis().SetBinLabel(16,"TEC D3")
-                obj.GetYaxis().SetBinLabel(17,"TEC D4")
-                obj.GetYaxis().SetBinLabel(18,"TEC D5")
-                obj.GetYaxis().SetBinLabel(19,"TEC D6")
-                obj.GetYaxis().SetBinLabel(20,"TEC D7")
-                obj.GetYaxis().SetBinLabel(21,"TEC D8")
-                obj.GetYaxis().SetBinLabel(22,"TEC D9")
-                obj.GetYaxis().SetBinLabel(23,"TEC D10")
-                for i in range(20) :
-                  obj.SetTitle("")
-                  obj.SetMarkerStyle(20)
-                  obj.SetStats(0)
-                  obj.ProjectionX(newname+"_StripLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").Draw()
-                  obj.ProjectionX(newname+"_StripLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").SetStats(0)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_StripLayer"+str(i+1)+".png")
-              if ((obj.ClassName() == "TH2F") and ("Clu" in keyname2)) :
-                profYobj = obj.ProfileY()
-#                profYobj.GetYaxis().SetTitle(axisXTitle)
-                profYobj.GetYaxis().SetTitleOffset(1.5)
-                profYobj.GetYaxis().SetLabelSize(0.03)
-                profYobj.SetStats(0)
-                if ("CluNormChargeVsStripLayer" in keyname2) :
-                  profYobj.GetXaxis().SetBinLabel(1,"TIB L1")
-                  profYobj.GetXaxis().SetBinLabel(2,"TIB L2")
-                  profYobj.GetXaxis().SetBinLabel(3,"TIB L3")
-                  profYobj.GetXaxis().SetBinLabel(4,"TIB L4")
-                  profYobj.GetXaxis().SetBinLabel(5,"TOB L1")
-                  profYobj.GetXaxis().SetBinLabel(6,"TOB L2")
-                  profYobj.GetXaxis().SetBinLabel(7,"TOB L3")
-                  profYobj.GetXaxis().SetBinLabel(8,"TOB L4")
-                  profYobj.GetXaxis().SetBinLabel(9,"TOB L5")
-                  profYobj.GetXaxis().SetBinLabel(10,"TOB L6")
-                  profYobj.GetXaxis().SetBinLabel(11,"TID D1")
-                  profYobj.GetXaxis().SetBinLabel(12,"TID D2")
-                  profYobj.GetXaxis().SetBinLabel(13,"TID D3")
-                  profYobj.GetXaxis().SetBinLabel(14,"TEC D1")
-                  profYobj.GetXaxis().SetBinLabel(15,"TEC D2")
-                  profYobj.GetXaxis().SetBinLabel(16,"TEC D3")
-                  profYobj.GetXaxis().SetBinLabel(17,"TEC D4")
-                  profYobj.GetXaxis().SetBinLabel(18,"TEC D5")
-                  profYobj.GetXaxis().SetBinLabel(19,"TEC D6")
-                  profYobj.GetXaxis().SetBinLabel(20,"TEC D7")
-                  profYobj.GetXaxis().SetBinLabel(21,"TEC D8")
-                  profYobj.GetXaxis().SetBinLabel(22,"TEC D9")
-                  profYobj.GetXaxis().SetBinLabel(23,"TEC D10")
-                profYobj.DrawClone("COLZ")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileY.png")
-                
-                if ("CluSpecInCPE" in keyname2) :
-                  obj.SetStats(0)
-                  obj.GetXaxis().SetTitle("")
-                  obj.GetXaxis().SetBinLabel(1,"isOnEdge")
-                  obj.GetXaxis().SetBinLabel(2,"hasBadPixels")
-                  obj.GetXaxis().SetBinLabel(3,"spansTwoROCs")
-                  obj.GetXaxis().SetBinLabel(4,"AllClusters")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  obj.Draw("COLZ L")
-#                  obj.GetXaxis().SetTitle(axisXTitle)
-                obj.DrawClone("COLZ L")
-#                obj.GetYaxis().SetTitle(axisYTitle)
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(name)
-              elif ("GenPtVsRecoPt" in keyname2) :
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.Draw("COLZ")
-                print(str(keyname2) + ": " + str(round(obj.GetCorrelationFactor(),2)))
-              elif ("Stab" in keyname2) :
-                profXobj = ROOT.TH1F(keyname2+"profX" , keyname2+"profX" , 545, 271000,325500)
-                profXobj = obj.ProfileX()
-#                profYobj.GetYaxis().SetTitle(axisXTitle)
-#                profYobj.GetYaxis().SetTitleOffset(1.5)
-#                profYobj.GetYaxis().SetLabelSize(0.03)
-                profXobj.SetStats(0)
-                profXobj.DrawClone("COLZ")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileX.png")
-              elif ("IasVs" in keyname2 and not obj.ClassName() == "TH3F") :
-                obj.SetMarkerStyle(20)
-                if ("Angle" in keyname2 or "NumSibling" in keyname2) :
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  obj.ProjectionY(newname,obj.GetXaxis().FindBin(0.7),obj.GetNbinsX()+1,"e").Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
-                  projObjs = obj.ProjectionY(newname,1,obj.GetXaxis().FindBin(0.7),"e")
-                  if (projObjs.GetEntries()==0) : continue
-                  projObjs.Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
-                  obj.ProjectionY(newname,1,obj.GetNbinsX()+1,"e").Draw("COLZ")
-                else :
-                  projObject = obj.ProjectionY(newname+"_lowIas",1,obj.GetXaxis().FindBin(0.7),"e")
-                  if (projObject.GetEntries()==0) : continue
-                  myPie = ROOT.TPie(projObject)
-                  myPie.SetLabelFormat("%txt (%perc)")
-                  myPie.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
-                  
-                  objProj = obj.ProjectionY(newname+"_highIas",obj.GetXaxis().FindBin(0.7),obj.GetNbinsX()+1,"e")
-                  if (objProj.GetEntries()==0) : continue
-                  myPie2 = ROOT.TPie(objProj)
-                  myPie2.SetLabelFormat("%txt (%perc)")
-                  myPie2.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie2.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
-                  
-                  myPie3 = ROOT.TPie(obj.ProjectionY(newname,1,obj.GetNbinsX()+1,"e"))
-                  myPie3.SetLabelFormat("%txt (%perc)")
-                  myPie3.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie3.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png")
-              elif ("Trigger" in keyname2 and obj.ClassName() == "TH3F") :
-                profZobj = obj.Project3DProfile("zy")
-                profZobj.SetStats(0)
-                profZobj.GetZaxis().SetTitle("Efficiency")
-                profZobj.SetTitle("")
-                profZobj.GetXaxis().SetTitle("MET (GeV)")
-                profZobj.GetYaxis().SetTitle("H_{T} (GeV)")
-                profZobj.GetYaxis().SetTitleOffset(1.7)
-                profZobj.Rebin2D(2)
-                profZobj.DrawClone("COLZ")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileZ.png")
-              elif ("EoPVs" in keyname2) :
-                obj.SetMarkerStyle(20)
-                if ("Angle" in keyname2) :
-                  obj.ProjectionY(newname+"_lowEoP",1,obj.GetXaxis().FindBin(0.85),"e").Draw("COLZ")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowEoP.png")
-#                  obj.ProjectionY(newname+"_highEoP",obj.GetXaxis().FindBin(0.85),obj.GetNbinsX()+1,"e").Draw("COLZ")
-#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highEoP.png")
-                elif ("EoPVsPfType" in keyname2) :
-                  obj.SetMarkerColor(1)
-                  obj.SetLineColor(1)
-                  obj.SetMarkerStyle(20)
-                  obj.SetStats(0)
-#                  obj.Scale(1/obj.GetMaximum())
-                  obj.GetYaxis().SetBinLabel(1,"AllTracks")
-                  obj.GetYaxis().SetBinLabel(2,"PFtracks")
-                  obj.GetYaxis().SetBinLabel(3,"isElectron")
-                  obj.GetYaxis().SetBinLabel(4,"isMuon")
-                  obj.GetYaxis().SetBinLabel(5,"isPhoton")
-                  obj.GetYaxis().SetBinLabel(6,"isChHadron")
-                  obj.GetYaxis().SetBinLabel(7,"isNeutHadron")
-                  obj.GetYaxis().SetBinLabel(8,"isUndefined")
-                  obj.GetYaxis().SetBinLabel(9,"notPFtrack")
-                  obj.GetXaxis().SetTitle("EoP")
-                  obj.Draw("COLZ")
-                else :
-                  projObj = obj.ProjectionY(newname+"_lowEoP",1,obj.GetXaxis().FindBin(0.85),"e")
-                  if (projObj.GetEntries() == 0) : continue
-                  myPie = ROOT.TPie(projObj)
-                  myPie.SetLabelFormat("%txt (%perc)")
-                  myPie.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowEoP.png")
-                  
-                  projObj2 = obj.ProjectionY(newname+"_highEoP",obj.GetXaxis().FindBin(0.85),obj.GetNbinsX()+1,"e")
-                  if (projObj2.GetEntries() == 0) : continue
-                  myPie2 = ROOT.TPie(projObj2)
-                  myPie2.SetLabelFormat("%txt (%perc)")
-                  myPie2.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie2.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highEoP.png")
-              elif (obj.ClassName() == "TH2F" and  (("ProbQVsIas" in keyname2) or ( "ProbQNoL1VsIas" in keyname2))) :
-#                obj.GetXaxis().SetTitle(axisXTitle)
-#                obj.GetYaxis().SetTitle(axisYTitle)
-                obj.GetYaxis().SetTitleOffset(1.3)
-                obj.GetYaxis().SetLabelSize(0.03)
-                obj.GetYaxis().SetTitle("G_{i}^{Strips}")
-                obj.GetXaxis().SetTitle("F_{i}^{Pixels}")
-                obj.SetStats(0)
-                obj.DrawClone("COLZ")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                print(str(keyname2) + ": " + str(round(obj.GetCorrelationFactor(),5)))
-                can.SaveAs(name)
-                if ("ProbQNoL1VsIas" in keyname2) :
-                  can2 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
-                  can2.SetLogy()
-                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
-                  projY1 = obj.ProjectionY("IasForProbQSlice_Slice1",obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0),"e")
-                  projY1.SetStats(0)
-                  projY1.SetMarkerColor(1)
-                  projY1.SetLineColor(1)
-                  projY1.SetMarkerStyle(20)
-                  projY1.Draw("SAME")
-                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
-                  projY1.GetYaxis().SetTitleOffset(1.5)
-                  
-                  projY2 = obj.ProjectionY("IasForProbQSlice_Slice2",obj.GetXaxis().FindBin(0.3),obj.GetXaxis().FindBin(0.9),"e")
-                  projY2.SetMarkerStyle(20)
-                  projY2.SetMarkerColor(2)
-                  projY2.SetLineColor(2)
-                  projY2.Draw("SAME")
-                  
-                  numTracks1 = projY1.Integral()
-                  numTracks2 = projY2.Integral()
-                  
-                  if (numTracks1>0) : projY1.Scale(1/projY1.Integral())
-                  if (numTracks2>0) : projY2.Scale(1/projY2.Integral())
-                  
-                  blind = True
-#                  blind = False
-
-                  if (blind and not "CR" in keyname2 and isData) :
-                    projY1.SetBinContent(7,0)
-                    projY1.SetBinContent(8,0)
-                    projY1.SetBinContent(9,0)
-                    projY1.SetBinContent(10,0)
-                  projY1.SetMaximum(projY1.GetMaximum()*100)
-                  
-                  rp2 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
-
-                  rp2.SetH1DrawOpt("P");
-                  rp2.SetH2DrawOpt("P");
-
-                  rp2.Draw()
-                  
-                  rp2.SetLeftMargin(0.13);
-                  rp2.SetRightMargin(0.05);
-                  rp2.SetUpTopMargin(0.1);
-                  rp2.SetLowTopMargin(0.02);
-                  rp2.SetLowBottomMargin(0.35);
-
-
-                  rp2.GetLowerRefGraph().SetMinimum(0)
-                  rp2.GetLowerRefGraph().SetMaximum(3.5);
-                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-                  #rp.GetLowerRefGraph().SetLineColor(0) #0
-                  rp2.GetLowerRefGraph().SetMarkerStyle(20)
-                  rp2.GetLowerRefGraph().SetMarkerSize(1);
-                  rp2.GetLowYaxis().SetNdivisions(505);
-                  rp2.GetLowerRefYaxis().SetTitle("Ratio");
-                  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
-                  rp2.GetLowerRefYaxis().SetTitleOffset(1);
-                  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-                  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
-                  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
-                  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
-                  legIasForProbQSlice.SetTextFont(42)
-                  legIasForProbQSlice.SetTextSize(0.035)
-                  legIasForProbQSlice.SetBorderSize(1);
-                  legIasForProbQSlice.SetLineColor(0);
-                  legIasForProbQSlice.SetLineStyle(1);
-                  legIasForProbQSlice.SetLineWidth(1);
-                  legIasForProbQSlice.SetFillColor(0);
-                  legIasForProbQSlice.SetFillStyle(1001);
-                  legIasForProbQSlice.AddEntry(projY1,"F_{i}^{Pixels} (0.9-1.0), #Tracks: " +str(round(numTracks1)),"LP")
-                  legIasForProbQSlice.AddEntry(projY2,"F_{i}^{Pixels}  (0.3-0.9), #Tracks: " +str(round(numTracks2)),"LP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legIasForProbQSlice.Draw("SAME")
-                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_Norm_ProbQSlice.png")
-                  
-                  can3 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
-                  can3.SetLogy()
-                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
-                  projY1 = obj.ProjectionX("IasForProbQSlice_Slice1",1,obj.GetYaxis().FindBin(0.1),"e")
-                  projY1.SetStats(0)
-                  projY1.SetMarkerColor(1)
-                  projY1.SetLineColor(1)
-                  projY1.SetMarkerStyle(20)
-                  projY1.Draw("SAME")
-                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
-                  projY1.GetYaxis().SetTitleOffset(1.5)
-
-                  projY2 = obj.ProjectionX("IasForProbQSlice_Slice2",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),"e")
-                  projY2.SetMarkerStyle(20)
-                  projY2.SetMarkerColor(2)
-                  projY2.SetLineColor(2)
-                  projY2.Draw("SAME")
-                  
-                  numTracks3 = projY1.Integral()
-                  numTracks4 = projY2.Integral()
-                  if (numTracks3>0) : projY1.Scale(1/projY1.Integral())
-                  if (numTracks4>0) : projY2.Scale(1/projY2.Integral())
-                
-                  if (blind and not "CR" in keyname2 and isData) :
-                    projY1.SetBinContent(19,0)
-                    projY1.SetBinContent(20,0)
-                  
-                  projY1.SetMaximum(projY1.GetMaximum()*100)
-                  
-                  rp3 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
-
-                  rp3.SetH1DrawOpt("P");
-                  rp3.SetH2DrawOpt("P");
-
-                  rp3.Draw()
-                  
-                  rp3.SetLeftMargin(0.13);
-                  rp3.SetRightMargin(0.05);
-                  rp3.SetUpTopMargin(0.1);
-                  rp3.SetLowTopMargin(0.02);
-                  rp3.SetLowBottomMargin(0.35);
-
-
-                  rp3.GetLowerRefGraph().SetMinimum(0)
-                  rp3.GetLowerRefGraph().SetMaximum(3.5)
-                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-                  #rp.GetLowerRefGraph().SetLineColor(0) #0
-                  rp3.GetLowerRefGraph().SetMarkerStyle(20)
-                  rp3.GetLowerRefGraph().SetMarkerSize(1);
-                  rp3.GetLowYaxis().SetNdivisions(505);
-                  rp3.GetLowerRefYaxis().SetTitle("Ratio");
-                  rp3.GetLowerRefYaxis().SetTitleSize(0.05);
-                  rp3.GetLowerRefYaxis().SetTitleOffset(1);
-                  rp3.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-                  rp3.GetLowerRefXaxis().SetTitleSize(0.05);
-                  rp3.GetLowerRefXaxis().SetTitleOffset(0.8);
-                  rp3.GetLowerRefXaxis().SetLabelSize(0.035);
-                  legIasForProbQSlice.SetTextFont(42)
-                  legIasForProbQSlice.SetTextSize(0.035)
-                  legIasForProbQSlice.SetBorderSize(1);
-                  legIasForProbQSlice.SetLineColor(0);
-                  legIasForProbQSlice.SetLineStyle(1);
-                  legIasForProbQSlice.SetLineWidth(1);
-                  legIasForProbQSlice.SetFillColor(0);
-                  legIasForProbQSlice.SetFillStyle(1001);
-                  legIasForProbQSlice.AddEntry(projY1,"G_{i}^{Strips} (0.0-0.1), #Tracks: "+str(round(numTracks3)),"LP")
-                  legIasForProbQSlice.AddEntry(projY2,"G_{i}^{Strips} (0.1-1.0), #Tracks: "+str(round(numTracks4)),"LP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legIasForProbQSlice.Draw("SAME")
-                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_Norm_IasSlice.png")
-
-                if ("ProbQNoL1VsIas" in keyname2) :
-                  can2 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
-                  can2.SetLogy()
-                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
-                  projY1 = obj.ProjectionY("IasForProbQSlice_Slice1",obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0),"e")
-                  projY1.SetStats(0)
-                  projY1.SetMarkerColor(1)
-                  projY1.SetLineColor(1)
-                  projY1.SetMarkerStyle(20)
-                  projY1.Draw("SAME")
-                  projY1.GetYaxis().SetTitle("Tracks / 0.05")
-                  projY1.GetYaxis().SetTitleOffset(1.5)
-                  
-                  projY2 = obj.ProjectionY("IasForProbQSlice_Slice2",obj.GetXaxis().FindBin(0.3),obj.GetXaxis().FindBin(0.9),"e")
-                  projY2.SetMarkerStyle(20)
-                  projY2.SetMarkerColor(2)
-                  projY2.SetLineColor(2)
-                  projY2.Draw("SAME")
-                  
-                  numTracks1 = projY1.Integral()
-                  numTracks2 = projY2.Integral()
-
-                  if (blind and not "CR" in keyname2 and isData) :
-                    projY1.SetBinContent(7,0)
-                    projY1.SetBinContent(8,0)
-                    projY1.SetBinContent(9,0)
-                    projY1.SetBinContent(10,0)
-                  projY1.SetMaximum(projY2.GetMaximum()*100)
-                  projY1.SetMinimum(0.1)
-                  
-                  rp2 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
-
-                  rp2.SetH1DrawOpt("P");
-                  rp2.SetH2DrawOpt("P");
-
-                  rp2.Draw()
-                  
-                  rp2.SetLeftMargin(0.13);
-                  rp2.SetRightMargin(0.05);
-                  rp2.SetUpTopMargin(0.1);
-                  rp2.SetLowTopMargin(0.02);
-                  rp2.SetLowBottomMargin(0.35);
-
-
-                  rp2.GetLowerRefGraph().SetMinimum(0)
-                  rp2.GetLowerRefGraph().SetMaximum(3.5);
-                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-                  #rp.GetLowerRefGraph().SetLineColor(0) #0
-                  rp2.GetLowerRefGraph().SetMarkerStyle(20)
-                  rp2.GetLowerRefGraph().SetMarkerSize(1);
-                  rp2.GetLowYaxis().SetNdivisions(505);
-                  rp2.GetLowerRefYaxis().SetTitle("Ratio");
-                  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
-                  rp2.GetLowerRefYaxis().SetTitleOffset(1);
-                  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-                  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
-                  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
-                  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
-                  legIasForProbQSlice.SetTextFont(42)
-                  legIasForProbQSlice.SetTextSize(0.035)
-                  legIasForProbQSlice.SetBorderSize(1);
-                  legIasForProbQSlice.SetLineColor(0);
-                  legIasForProbQSlice.SetLineStyle(1);
-                  legIasForProbQSlice.SetLineWidth(1);
-                  legIasForProbQSlice.SetFillColor(0);
-                  legIasForProbQSlice.SetFillStyle(1001);
-                  legIasForProbQSlice.AddEntry(projY1,"F_{i}^{Pixels} (0.9-1.0), #Tracks: " +str(round(numTracks1)),"LP")
-                  legIasForProbQSlice.AddEntry(projY2,"F_{i}^{Pixels}  (0.3-0.9), #Tracks: " +str(round(numTracks2)),"LP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legIasForProbQSlice.Draw("SAME")
-                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_NotNorm_ProbQSlice.png")
-                  
-                  can3 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
-                  can3.SetLogy()
-                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
-                  projY1 = obj.ProjectionX("IasForProbQSlice_Slice1",1,obj.GetYaxis().FindBin(0.1),"e")
-                  projY1.SetStats(0)
-                  projY1.SetMarkerColor(1)
-                  projY1.SetLineColor(1)
-                  projY1.SetMarkerStyle(20)
-                  projY1.Draw("SAME")
-                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
-                  projY1.GetYaxis().SetTitleOffset(1.5)
-
-                  projY2 = obj.ProjectionX("IasForProbQSlice_Slice2",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),"e")
-                  projY2.SetMarkerStyle(20)
-                  projY2.SetMarkerColor(2)
-                  projY2.SetLineColor(2)
-                  projY2.Draw("SAME")
-                  
-                  numTracks3 = projY1.Integral()
-                  numTracks4 = projY2.Integral()
-                
-                  if (blind and not "CR" in keyname2 and isData) :
-                    projY1.SetBinContent(19,0)
-                    projY1.SetBinContent(20,0)
-                  
-                  projY1.SetMaximum(projY1.GetMaximum()*100)
-                  
-                  rp3 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
-
-                  rp3.SetH1DrawOpt("P");
-                  rp3.SetH2DrawOpt("P");
-
-                  rp3.Draw()
-                  
-                  rp3.SetLeftMargin(0.13);
-                  rp3.SetRightMargin(0.05);
-                  rp3.SetUpTopMargin(0.1);
-                  rp3.SetLowTopMargin(0.02);
-                  rp3.SetLowBottomMargin(0.35);
-
-
-                  rp3.GetLowerRefGraph().SetMinimum(0)
-                  rp3.GetLowerRefGraph().SetMaximum(3.5)
-                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-                  #rp.GetLowerRefGraph().SetLineColor(0) #0
-                  rp3.GetLowerRefGraph().SetMarkerStyle(20)
-                  rp3.GetLowerRefGraph().SetMarkerSize(1);
-                  rp3.GetLowYaxis().SetNdivisions(505);
-                  rp3.GetLowerRefYaxis().SetTitle("Ratio");
-                  rp3.GetLowerRefYaxis().SetTitleSize(0.05);
-                  rp3.GetLowerRefYaxis().SetTitleOffset(1);
-                  rp3.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-                  rp3.GetLowerRefXaxis().SetTitleSize(0.05);
-                  rp3.GetLowerRefXaxis().SetTitleOffset(0.8);
-                  rp3.GetLowerRefXaxis().SetLabelSize(0.035);
-                  legIasForProbQSlice.SetTextFont(42)
-                  legIasForProbQSlice.SetTextSize(0.035)
-                  legIasForProbQSlice.SetBorderSize(1);
-                  legIasForProbQSlice.SetLineColor(0);
-                  legIasForProbQSlice.SetLineStyle(1);
-                  legIasForProbQSlice.SetLineWidth(1);
-                  legIasForProbQSlice.SetFillColor(0);
-                  legIasForProbQSlice.SetFillStyle(1001);
-                  legIasForProbQSlice.AddEntry(projY1,"G_{i}^{Strips} (0.0-0.1), #Tracks: "+str(round(numTracks3)),"LP")
-                  legIasForProbQSlice.AddEntry(projY2,"G_{i}^{Strips} (0.1-1.0), #Tracks: "+str(round(numTracks4)),"LP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legIasForProbQSlice.Draw("SAME")
-                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_NotNorm_IasSlice.png")
-
-              elif (obj.ClassName() == "TH2F" and  (("Trigger" in keyname2) and ( "Vs" in keyname2))) :
-                profYobj = obj.ProfileY()
-                profYobj.SetStats(0)
-                profYobj.GetYaxis().SetTitle("Efficiency")
-                profYobj.DrawClone("COLZ")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileY.png")
-              
-              if (keyname2== "CutFlow" or keyname2== "EventCutFlow") :
-                if (blind and isData) :
-                  obj.SetBinContent(18,0)
-                  obj.SetBinContent(19,0)
-                  obj.SetBinContent(20,0)
-                obj.SetMarkerColor(1)
-                obj.SetLineColor(1)
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.GetXaxis().SetTitle("")
-                obj.GetXaxis().SetTitle("")
-                ROOT.gStyle.SetPaintTextFormat(".2g");
-                obj.Draw("HISTOTEXT00")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-#                obj.GetYaxis().SetRangeUser(0.,1.3)
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_withNumbersNotNorm.png")
-              if (keyname2== "CutFlow" or keyname2== "EventCutFlow") :
-                if (blind and isData) :
-                  obj.SetBinContent(18,0)
-                  obj.SetBinContent(19,0)
-                  obj.SetBinContent(20,0)
-                obj.SetMarkerColor(1)
-                obj.SetLineColor(1)
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.GetMaximum())
-                obj.GetXaxis().SetTitle("")
-                if (keyname2== "CutFlow") :  obj.GetYaxis().SetTitle("Track efficiency")
-                if (keyname2== "EventCutFlow") : obj.GetYaxis().SetTitle("Event efficiency")
-                obj.GetXaxis().SetTitle("")
-                ROOT.gStyle.SetPaintTextFormat(".2g");
-                obj.Draw("HISTOTEXT00")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.GetYaxis().SetRangeUser(0.,1.3)
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_withNumbers.png")
-              elif (keyname2== "CutFlowReverse") :
-                obj.SetMarkerColor(1)
-                obj.SetLineColor(1)
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.GetMaximum())
-#                obj.GetXaxis().SetBinLabel(1,"Trigger")
-#                obj.GetXaxis().SetBinLabel(2,"pT")
-#                obj.GetXaxis().SetBinLabel(3,"Eta")
-#                obj.GetXaxis().SetBinLabel(4,"NumPixHits")
-#                obj.GetXaxis().SetBinLabel(5,"ValidFract")
-#                obj.GetXaxis().SetBinLabel(6,"NumDeDx")
-#                obj.GetXaxis().SetBinLabel(7,"HighPurity")
-#                obj.GetXaxis().SetBinLabel(8,"Chi2oDOF")
-#                obj.GetXaxis().SetBinLabel(9,"dz")
-#                obj.GetXaxis().SetBinLabel(10,"dxy")
-#                obj.GetXaxis().SetBinLabel(11,"EoP")
-#                obj.GetXaxis().SetBinLabel(12,"")
-#                obj.GetXaxis().SetBinLabel(13,"dRminCaloJet")
-#                obj.GetXaxis().SetBinLabel(14,"MiniIso")
-#                obj.GetXaxis().SetBinLabel(15,"PFid")
-#                obj.GetXaxis().SetBinLabel(16,"Ih")
-#                obj.GetXaxis().SetBinLabel(17,"")
-                obj.GetXaxis().SetTitle("")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.Draw("COLZ L")
-              if (keyname2 == "ErrorHisto") :
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.GetMaximum())
-#                obj.GetXaxis().SetBinLabel(1,"All tracks")
-#                obj.GetXaxis().SetBinLabel(2,"No track/glob muon")
-#                obj.GetXaxis().SetBinLabel(3,"Track is null")
-#                obj.GetXaxis().SetBinLabel(4,"No PV")
-#                obj.GetXaxis().SetBinLabel(5,"No gen match")
-#                obj.GetXaxis().SetBinLabel(6,"Gen match too far")
-#                obj.GetXaxis().SetBinLabel(7,"No dEdx")
-#                obj.GetXaxis().SetBinLabel(8,"Cosmic track")
-#                obj.GetXaxis().SetBinLabel(9,"Has91 status")
-                obj.GetXaxis().SetTitle("")
-                obj.GetYaxis().SetTitle("")
-                obj.SetMaximum(1.4)
-                obj.GetXaxis().SetTitle("")
-                obj.SetTitle("")
-                obj.Draw("COLZ L")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(name)
-              if ("TriggerType" in keyname2) :
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.GetYaxis().SetTitle("Events / category")
-                ROOT.gStyle.SetPaintTextFormat(".2g");
-                obj.Draw("SAMEHISTOTEXT00")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(name)
-              if ("TriggerType" in keyname2) :
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.Integral(1,3))
-                obj.GetYaxis().SetTitle("Norm events / category")
-                ROOT.gStyle.SetPaintTextFormat(".2g");
-                obj.Draw("SAMEHISTOTEXT00")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_Normalized.png")
-              elif ("_pfType" in keyname2) :
-                obj.SetMarkerColor(1)
-                obj.SetLineColor(1)
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.GetMaximum())
-                obj.GetYaxis().SetTitle("Efficiency")
-#                obj.GetXaxis().SetBinLabel(1,"AllTracks")
-#                obj.GetXaxis().SetBinLabel(2,"PFtracks")
-#                obj.GetXaxis().SetBinLabel(3,"isElectron")
-#                obj.GetXaxis().SetBinLabel(4,"isMuon")
-#                obj.GetXaxis().SetBinLabel(5,"isPhoton")
-#                obj.GetXaxis().SetBinLabel(6,"isChHadron")
-#                obj.GetXaxis().SetBinLabel(7,"isNeutHadron")
-#                obj.GetXaxis().SetBinLabel(8,"isUndefined")
-#                obj.GetXaxis().SetBinLabel(9,"notPFtrack")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.Draw("COLZ L")
-
-              elif ((keyname2 == "CutFlowEta") or (keyname2 == "CutFlowProbQ") or (keyname2 == "CutFlowPfType") or (keyname2 == "CutFlowProbQ")) :
-                obj.SetStats(0)
-                obj.GetYaxis().SetTitle("Efficiency")
-                obj.GetYaxis().SetTitle("")
-                obj.GetYaxis().SetTitle("")
-                if (keyname2 == "CutFlowPfType"):
-                  obj.Scale(1/obj.GetMaximum())
-                  for x in range(1,obj.GetNbinsX()+1) :
-                    localMax = obj.GetBinContent(x,1)
-                    for y in range(1,obj.GetNbinsY()+1) :
-                      value = obj.GetBinContent(x,y)
-                      if (value <= 0 or localMax <= 0) : continue
-                      obj.SetBinContent(x,y, value/localMax)
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.Draw("COLZ")
-                can.SaveAs(name)
-              #and ("Mass" not in keyname2)
-              #and ("PostS" not in keyname2)
-              elif ("Max" not in keyname2) and ("Pred" not in keyname2) and ("PDF" not in keyname2):
-                obj.SetMarkerStyle(20)
-                obj.SetTitle("")
-#                obj.GetXaxis().SetTitle(axisXTitle)
-#                obj.GetYaxis().SetTitle(axisYTitle)
-                obj.Draw("COLZ")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(name)
-              
-              if ("Angle" in keyname2 and obj.ClassName() == "TH2F" ) :
-                obj.Draw("COLZ")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_2d.png")
-              
-              ## ----------------------------------------------------------------------------------------------
-              # now let's plot everything in a logy scale
-              obj.SetMarkerStyle(20)
-              obj.SetMinimum(0.000001)
-#              obj.SetMaximum(10000)
-              if ("GenID" in keyname2 or "GenEnviromentID" in keyname2) :
-                continue
-                
-              if (keyname2=="CutFlowProbQ" or keyname2=="CutFlowPfType" or keyname2=="CutFlowEta" or "Vs" in keyname2) :
-#              or "PostPreS_IasPixelIhVsLayer" in keyname2 or "PostPreS_IasStripIhVsLayer" in keyname2
-                obj.SetMaximum(obj.GetMaximum())
-                obj.SetMinimum(0.000001)
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SetLogz()
-
-              else :
-                obj.SetMaximum(obj.GetMaximum()*100)
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-#                obj.SetMinimum(0.0001)
-                can.SetLogy()
-
-                obj.SetTitle("")
-              can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_logy.png")
-              #can.SaveAs(name.replace(".png",".pdf"))
-              #can.SaveAs(name.replace(".png",".C"))
-              can.Close()
-
-          else:
-              print(keyname+"   "+newname + " does not inherit from TObject" )
-
-##template_2018A_v2.root
-#name = "2017A"
-#version = "v4"
-#fOut = ROOT.TFile.Open('template_{}_{}.root'.format(name,version),'UPDATE')
-#fIn = ROOT.TFile.Open("Histos_numEvent2000.root")
-#templ1 = fIn.Get('HSCParticleAnalyzer/BaseName/Calibration_GiTemplate_PU_1')
-#
-#templ1.Write()
-#fOut.Close()
diff --git a/Analyzer/test/Tamas/haddWithWeight_woProbQ.py b/Analyzer/test/Tamas/haddWithWeight_woProbQ.py
deleted file mode 100644
index 54fab76..0000000
--- a/Analyzer/test/Tamas/haddWithWeight_woProbQ.py
+++ /dev/null
@@ -1,111 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-from tqdm import tqdm
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BackgroundSamples = [
-"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root",
-]
-
-#intLumi = 4598.37 #10.0 #
-intLumi = 2000.0
-
-crossSectionArray = [
-# QCD_Pt-20_MuEnrichedPt15_TuneCP5_13TeV-pythia8, 239000.0 +-	755.8
-# 2797000.0, #+-8800.0, 2018_QCD_Pt-15To20_MuEnrichedPt5
-# 2518000.0, #+-7940.0, 2018_QCD_Pt-20To30_MuEnrichedPt5
-# 1361000.0, #+-4263.0, 2018_QCD_Pt-30To50_MuEnrichedPt5
- 377800.0, #+-1184.0, 2018_QCD_Pt-50To80_MuEnrichedPt5
- 88620.0, #+-275.1, 2018_QCD_Pt-80To120_MuEnrichedPt5
- 21070.0, #+-65.28, 2018_QCD_Pt-120To170_MuEnrichedPt5
- 7019.0, #+-21.61, 2018_QCD_Pt-170To300_MuEnrichedPt5
- 622.4, #+-1.891, 2018_QCD_Pt-300To470_MuEnrichedPt5
- 58.86, #+-0.1776, 2018_QCD_Pt-470To600_MuEnrichedPt5
- 18.22, #+-0.05471, 2018_QCD_Pt-600To800_MuEnrichedPt5
- 3.25, #+-0.0148, 2018_QCD_Pt-600To800_MuEnrichedPt5
- 1.61, #+-, 2018_QCD_Pt-1000_MuEnrichedPt5
- 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
- 377.96, # or 377.96, # or , TTtoHadronic or
- 365.35, # or 65.34, TTtoSemiLeptonic or
- 88.29, # or 687.1, TTto2L2N or 91.47600
-]
-
-## TTBar is 832 pb (NNLO)
-
-fileInArray = []
-for sample in BackgroundSamples:
-  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
-
-for index,fileIn in enumerate(fileInArray):
-  if not (fileIn.Get("analyzer/BaseName/NumEvents")):
-    continue
-  
-  nEvetsPreTrig = fileIn.Get("analyzer/BaseName/NumEvents").GetBinContent(1)
-  nEvetsPostTrig = fileIn.Get("analyzer/BaseName/NumEvents").GetBinContent(2)
-  if (nEvetsPreTrig == 0):
-    print("nEvetsPreTrig is zero, exiting")
-    continue
-  weight = intLumi*crossSectionArray[index]/nEvetsPreTrig
-  
-  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
-    dirname = fileIn.GetListOfKeys().At(i).GetName()
-    curr_dir = fileIn.GetDirectory(dirname)
-  # print("dirname: "+dirname)
-    if not (curr_dir) :
-      continue
-    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-        keyname = curr_dir.GetListOfKeys().At(i).GetName()
-        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
-        if not (curr_dir2) :
-          continue
-        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = fileIn.Get(newname)
-          if (obj.GetEntries() == 0 ) :
-#            print("obj.GetEntries() == 0")
-            continue
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if obj.InheritsFrom("TObject"):
-            obj.Scale(weight)
-  fileIn.Write("",ROOT.TObject.kOverwrite)
-  fileIn.Close()
-
-os.system("hadd crab_Analysis_2018_AllBackground_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-os.system("hadd crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-os.system("hadd crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-os.system("cp crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_AllWJets_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
-
-os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
-os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_SingleMuon_Run2018_woProbQ_CodeV*"+codeVersion+"_v1.root .")
-os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-1800_woProbQ_CodeV*"+codeVersion+"_v1.root .")
-os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-2400_woProbQ_CodeV*"+codeVersion+"_v1.root .")
-os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/haddWithWeight_woProbQ_nw.py b/Analyzer/test/Tamas/haddWithWeight_woProbQ_nw.py
deleted file mode 100644
index 5fcb029..0000000
--- a/Analyzer/test/Tamas/haddWithWeight_woProbQ_nw.py
+++ /dev/null
@@ -1,96 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-from tqdm import tqdm
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BackgroundSamples = [
-"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root",
-]
-
-
-if not os.path.exists("CodeV"+codeVersion+"_old"): os.mkdir("CodeV"+codeVersion+"_old")
-os.system("cp *"+codeVersion+"*root "+ "CodeV"+codeVersion+"_old/.")
-
-#this needs to be measured in pb
-intLumi = 4598.37 #137.0 #10.0 #
-
-#crossSections are measured in 1/pb
-crossSectionArray = [
-# QCD_Pt-20_MuEnrichedPt15_TuneCP5_13TeV-pythia8, 239000.0 +-	755.8
-# 2797000.0, #+-8800.0, 2018_QCD_Pt-15To20_MuEnrichedPt5
-# 2518000.0, #+-7940.0, 2018_QCD_Pt-20To30_MuEnrichedPt5
-# 1361000.0, #+-4263.0, 2018_QCD_Pt-30To50_MuEnrichedPt5
- 3778000.0, #+-1184.0, 2018_QCD_Pt-50To80_MuEnrichedPt5
- 886200.0, #+-275.1, 2018_QCD_Pt-80To120_MuEnrichedPt5
- 210700.0, #+-65.28, 2018_QCD_Pt-120To170_MuEnrichedPt5
- 70190.0, #+-21.61, 2018_QCD_Pt-170To300_MuEnrichedPt5
- 6224.0, #+-1.891, 2018_QCD_Pt-300To470_MuEnrichedPt5
- 588.6, #+-0.1776, 2018_QCD_Pt-470To600_MuEnrichedPt5
- 182.2, #+-0.05471, 2018_QCD_Pt-600To800_MuEnrichedPt5
- 32.5, #+-0.0148, 2018_QCD_Pt-600To800_MuEnrichedPt5
- 16.1, #+-, 2018_QCD_Pt-1000_MuEnrichedPt5
- 53330.0, #+-	61526.7, WJetsToLNu
- 687.1, # or 377.96, # or , TTtoHadronic or 382.53600
- 719.1, # or 65.34, TTtoSemiLeptonic or 365.90400
- 88.29, # or 687.1, TTto2L2N or 91.47600
-]
-
-for sample,xsec in zip(BackgroundSamples,crossSectionArray):
-  fileIn = ROOT.TFile.Open(sample,"UPDATE")
-  print("fileIn ",fileIn)
-  fileIn.cd("analyzer/BaseName")
-  h = ROOT.gDirectory.Get("NumEvents").Clone()
-  nEventsPreTrig = h.GetBinContent(1)
-   
-  if (nEventsPreTrig == 0):
-    print("nEvetsPreTrig is zero, exiting")
-    continue
-  weight = intLumi*xsec/nEventsPreTrig
-  keys = ROOT.gDirectory.GetListOfKeys().Clone()
-  for k in tqdm(keys):
-#    print(k.GetName())
-    if ROOT.gDirectory.Get(k.GetName()) != None:
-      h = ROOT.gDirectory.Get(k.GetName()).Clone()
-#      if h.GetEntries()==0 : 
-##        print (k.GetName(), " has zero entries")
-#        continue
-      if k.GetName() != "HscpCandidates" and k.GetName() != "GenHscpCandidates":
-        h.Scale(weight)
-      h.Write("",ROOT.TObject.kOverwrite)
-#    else: print(k.GetName(), " is either a null pointer or not a histogram (likely the latter)")
-
-#os.system("hadd crab_Analysis_2018_AllBackground_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root")
-#
-#os.system("hadd crab_Analysis_2018_AllQCD_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_woProbQ_CodeV"+codeVersion+"_v1.root")
-
-#os.system("hadd crab_Analysis_2018_AllTTbar_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_woProbQ_CodeV"+codeVersion+"_v1.root")
-#
-#os.system("mv crab_Analysis_2018_WJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_AllWJetsToLNu_woProbQ_CodeV"+codeVersion+"_v1.root")
-#
-#if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
-#
-#os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
-#os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*_woProbQ_CodeV"+codeVersion+"_v1.root .")
-#os.system("mv CodeV"+codeVersion+"/crab_Analysis_SingleMuon_Run2018_woProbQ_CodeV"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/pngsFromRootFilesJustHistos.py b/Analyzer/test/Tamas/pngsFromRootFilesJustHistos.py
deleted file mode 100644
index a990a2d..0000000
--- a/Analyzer/test/Tamas/pngsFromRootFilesJustHistos.py
+++ /dev/null
@@ -1,1692 +0,0 @@
-import ROOT, sys, os, time, re
-import numpy as np
-from ctypes import c_double as double
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog fileName.root BinNumber")
-(opt,args) = parser.parse_args()
-
-ROOT.gROOT.SetStyle("Plain")
-#ROOT.gStyle.SetOptStat(0)
-ROOT.gStyle.SetPalette(1)
-ROOT.gROOT.SetBatch(True)
-
-ROOT.gStyle.SetPadTopMargin(0.07);
-ROOT.gStyle.SetPadBottomMargin(0.1);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-ROOT.gStyle.SetPadRightMargin(0.13);
-
-fileName = sys.argv[1]
-BinNumber = sys.argv[2]
-
-bin = int(BinNumber)
-# bin 3: pt>60 and I_as > 0.05
-# bin 25: pt>65 and I_as > 0.175
-# bin 28: pt>65 and I_as > 0.3
-
-blind = True
-#blind = False
-
-print("Filename: "+fileName)
-input_file = fileName
-
-ProjBin = int(BinNumber)
-newFileDir = fileName[0:-5] + "_Bin" + str(ProjBin)
-
-
-f = ROOT.TFile.Open(input_file)
-fileOut = open("SignalBackgroundEff.txt", "a")
-
-isData = False
-if ("SingleMuon" in fileName) : isData = True
-
-iDontWannaRunPlots = False
-#iDontWannaRunPlots = True
-
-
-dirs = []
-for i in range(0, f.GetListOfKeys().GetEntries()):
-  # Remove/modify unnecessary stuff from the name of the plot that was required by SmartHistos to ditinguish plots
-  dirname = f.GetListOfKeys().At(i).GetName()
-  curr_dir = f.GetDirectory(dirname)
-# print("dirname: "+dirname)
-  if not (curr_dir) :
-    continue
-  for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-      # Match the plot of interest
-      keyname = curr_dir.GetListOfKeys().At(i).GetName()
-      curr_dir2 = f.GetDirectory(dirname+"/"+keyname)
-#                    print("keyname: "+keyname)
-      if not (curr_dir2) :
-        continue
-      for j in range(0, curr_dir2.GetListOfKeys().GetEntries()):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-          if ("__" in keyname2) : continue
-          # The plot should be TCanvas
-          newname = dirname + "/" + keyname+ "/" + keyname2
-#          print("newname: "+newname)
-          obj = f.Get(newname)
-          
-          
-          tex2 = ROOT.TLatex(0.13,0.94,"CMS");
-          #tex2 = ROOT.TLatex(0.20,0.94,"CMS");#if there is 10^x
-          tex2.SetNDC();
-          tex2.SetTextFont(61);
-          tex2.SetTextSize(0.0675);
-          tex2.SetLineWidth(2);
-
-          #tex3 = ROOT.TLatex(0.27,0.96,"Simulation"); # for square plots
-          #tex3 = ROOT.TLatex(0.28,0.94,"Work in Progress 2018"); #if there is 10^x
-          tex3 = ROOT.TLatex(0.27,0.94,"Internal");
-          tex3.SetNDC();
-          tex3.SetTextFont(52);
-          tex3.SetTextSize(0.0485);
-          tex3.SetLineWidth(2);
-
-
-          tex4 = ROOT.TLatex()
-          if ("BefPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"Before pre-selection")
-#            if ("BefPreS_Eta" in keyname2) :
-#              print("BefPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          elif ("N1" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After N-1 selection")
-#            if ("N1_Eta" in keyname2) :
-#              print("N-1 number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          elif ("PostPreS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After pre-selection")
-          elif ("PostS" in keyname2) :
-            tex4 = ROOT.TLatex(0.6,0.95,"After selection")
-#            if ("PostPreS_Eta" in keyname2) :
-#              print("PostPreS number of tracks in plot (" +keyname2 + ") : "+str(obj.Integral()))
-          tex4.SetNDC();
-          tex4.SetTextFont(52);
-          tex4.SetTextSize(0.045);
-          tex4.SetLineWidth(2);
-          
-          codeVersion = fileName[fileName.find("CodeV")+5:fileName.find("CodeV")+9]
-          fileVersion = fileName[fileName.find("2018")+5:fileName.find("CodeV")+9]
-          tex5 = ROOT.TLatex(0.07,0.03,fileVersion);
-          tex5.SetNDC();
-          tex5.SetTextFont(52);
-          tex5.SetTextSize(0.0185);
-          tex5.SetLineWidth(2);
-          
-
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if not (obj) : continue
-          if obj.InheritsFrom("TObject"):
-              can = obj
-              obj.SetStats(0)
-              can = ROOT.TCanvas(newname,newname,800,800)
-              # Name of the png to be saved
-              name = fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png"
-              if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-              if (obj.GetEntries() == 0 ) :
-                continue
-                
-#             when I dont want to plot everything
-              if (iDontWannaRunPlots) : continue
-              if ("_region" in keyname2 or "CtrlPt_" in keyname2 or "Pred_" in keyname2 or "PDF" in keyname2 or "Hist_" in keyname2) : continue
-#              if not ("Trigger" in keyname2 and obj.ClassName() == "TH3F") : continue
-              if not ("Calibration_" in keyname2) : continue
-
-
-#              if not ((obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D") and "VsProbQVsIas" in keyname2) : continue
-              if ("Gen" in keyname2 and isData) : continue
-#                 print(obj.ClassName())
-              if (obj.ClassName() == "TH3F" or obj.ClassName() == "TH3D"):
-                obj.SetTitle("")
-                if ("VsProbQVsIas" in keyname2) :
-                  can2 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
-                  can2.SetLogy()
-                  
-                  projA = obj.ProjectionX(newname+"_RegionA",obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1),obj.GetZaxis().FindBin(0.0),obj.GetZaxis().FindBin(0.1),"e")
-                  projB = obj.ProjectionX(newname+"_RegionB",obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1),obj.GetZaxis().FindBin(0.1),obj.GetZaxis().FindBin(1.0),"e")
-                  projC = obj.ProjectionX(newname+"_RegionC",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),obj.GetZaxis().FindBin(0.0),obj.GetZaxis().FindBin(0.1),"e")
-                  projD = obj.ProjectionX(newname+"_RegionD",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),obj.GetZaxis().FindBin(0.1),obj.GetZaxis().FindBin(1.0),"e")
-                  projA.SetMarkerColor(1)
-                  projA.SetTitle("")
-                  projB.SetMarkerColor(2)
-                  projC.SetMarkerColor(3)
-                  projD.SetMarkerColor(4)
-                  projA.SetMarkerStyle(20)
-                  projB.SetMarkerStyle(20)
-                  projC.SetMarkerStyle(20)
-                  projD.SetMarkerStyle(20)
-                  projA.SetLineColor(1)
-                  projB.SetLineColor(2)
-                  projC.SetLineColor(3)
-                  projD.SetLineColor(4)
-                  
-                  max1 = np.maximum(projA.GetMaximum(),projB.GetMaximum())
-                  max2 = np.maximum(projC.GetMaximum(),projD.GetMaximum())
-                  max = np.maximum(max1,max2)
-                  
-                  legProjXInRegions =  ROOT.TLegend(.4,.65,.80,.9,"","brNDC")
-                  legProjXInRegions.SetTextFont(42)
-                  legProjXInRegions.SetTextSize(0.035)
-                  legProjXInRegions.SetBorderSize(1);
-                  legProjXInRegions.SetLineColor(0);
-                  legProjXInRegions.SetLineStyle(1);
-                  legProjXInRegions.SetLineWidth(1);
-                  legProjXInRegions.SetFillColor(0);
-                  legProjXInRegions.SetFillStyle(1001);
-                  
-                  Err = double(0.0)
-                  legProjXInRegions.AddEntry(projA,"Region A: " +str(int(projA.IntegralAndError(1,projA.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
-                  legProjXInRegions.AddEntry(projB,"Region B: " +str(int(projB.IntegralAndError(1,projB.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
-                  legProjXInRegions.AddEntry(projC,"Region C: " +str(int(projC.IntegralAndError(1,projC.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
-                  legProjXInRegions.AddEntry(projD,"Region D: " +str(int(projD.IntegralAndError(1,projD.GetNbinsX() + 1,Err,""))) + " #pm " + str(int(Err.value)),"LP")
-                  
-                  projA.SetStats(0)
-                  projA.SetMinimum(0.0001)
-                  if (projA.Integral() == 0) : continue
-                  if (projB.Integral() == 0) : continue
-                  if (projC.Integral() == 0) : continue
-                  if (projD.Integral() == 0) : continue
-                  projA.Scale(1/projA.Integral())
-                  newMax = projA.GetMaximum()
-                  projB.Scale(1/projB.Integral())
-                  projC.Scale(1/projC.Integral())
-                  projD.Scale(1/projD.Integral())
-                  projA.Draw("SAME")
-                  projA.GetYaxis().SetRangeUser(0.00000001, newMax*10)
-                  projA.GetYaxis().SetTitle("Norm tracks / bin")
-                  projA.GetYaxis().SetTitleOffset(1.7)
-                  projB.Draw("SAME")
-                  projC.Draw("SAME")
-                  projD.Draw("SAME")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legProjXInRegions.Draw("SAME")
-
-                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjXInRegions.png")
-                if ("ProbQNoL1VsIasVsPt" in keyname2) :
-                  canLog = ROOT.TCanvas("newname"+keyname2,"newname"+keyname2,800,800)
-                  canLog.SetLogy()
-                  legProjXInRegions =  ROOT.TLegend(.5,.75,.80,.9,"","brNDC")
-                  legProjXInRegions.SetHeader("FAIL region (F_{i}^{pixels} < 0.9)","C")
-                  legProjXInRegions.SetTextFont(42)
-                  legProjXInRegions.SetTextSize(0.035)
-                  legProjXInRegions.SetBorderSize(1);
-                  legProjXInRegions.SetLineColor(0);
-                  legProjXInRegions.SetLineStyle(1);
-                  legProjXInRegions.SetLineWidth(1);
-                  legProjXInRegions.SetFillColor(0);
-                  legProjXInRegions.SetFillStyle(1001);
-                  obj.GetXaxis().SetRange(1,obj.GetXaxis().FindBin(0.9)-1)
-                 
-                  projFail = obj.Project3D("YZ")
-                  projFail.SetTitle("")
-                  projFail.GetXaxis().SetRangeUser(200,4000)
-                  projFailPt1 = projFail.ProjectionY("name1").Rebin(2)
-                  projFailPt1.SetStats(0)
-                  projFailPt1.SetMarkerStyle(20)
-                  projFailPt1.SetLineColor(1)
-                  projFailPt1.SetMarkerColor(1)
-                  projFailPt1.SetMaximum(projFailPt1.GetMaximum()*100)
-                  projFailPt1.DrawClone("SAMEP")
-                  legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 200 - inf GeV","LP")
-
-                  projFail.GetXaxis().SetRangeUser(300,4000)
-                  projFailPt2 = projFail.ProjectionY("name2").Rebin(2)
-                  projFailPt2.SetStats(0)
-                  projFailPt2.SetMarkerStyle(20)
-                  projFailPt2.SetLineColor(2)
-                  projFailPt2.SetMarkerColor(2)
-                  projFailPt2.DrawClone("SAMEP")
-                  legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 300 - inf  GeV","LP")
-
-                  projFail.GetXaxis().SetRangeUser(400,4000)
-                  projFailPt3 = projFail.ProjectionY("name3").Rebin(2)
-                  projFailPt3.SetStats(0)
-                  projFailPt3.SetMarkerStyle(20)
-                  projFailPt3.SetLineColor(3)
-                  projFailPt3.SetMarkerColor(3)
-                  projFailPt3.DrawClone("SAMEP")
-
-                  legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 400 - inf GeV","LP")
-                  legProjXInRegions.Draw("SAMEP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  canLog.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_FAIL_PtBins.png")
-                  
-                  # repeat the same for PASS now
-                  canLog2 = ROOT.TCanvas("newname2-pass"+keyname2,"newname2-pass"+keyname2,800,800)
-                  canLog2.SetLogy()
-                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0)+1) # makes it the PASS region
-                  projPass = obj.Project3D("YZ")
-                  projPass.SetTitle("")
-                  
-                  legProjXInRegions.SetHeader("PASS region (F_{i}^{pixels} > 0.9)","C")
-
-                  projPass.GetXaxis().SetRangeUser(240,4000)
-                  projPassPt1 = projPass.ProjectionY("name1-pass").Rebin(2)
-                  
-                  projPassPt1.SetStats(0)
-                  projPassPt1.SetMarkerStyle(20)
-                  projPassPt1.SetLineColor(1)
-                  projPassPt1.SetMarkerColor(1)
-                  projPassPt1.SetMaximum(projPassPt1.GetMaximum()*100)
-                  projPassPt1.DrawClone("SAMEP")
-
-                  projPass.GetXaxis().SetRangeUser(320,4000)
-                  projPassPt2 = projPass.ProjectionY("name2-pass").Rebin(2)
-                  projPassPt2.SetStats(0)
-                  projPassPt2.SetMarkerStyle(20)
-                  projPassPt2.SetLineColor(2)
-                  projPassPt2.SetMarkerColor(2)
-                  projPassPt2.DrawClone("SAMEP")
-
-                  projPass.GetXaxis().SetRangeUser(400,4000)
-                  projPassPt3 = projPass.ProjectionY("name3-pass").Rebin(2)
-                  projPassPt3.SetStats(0)
-                  projPassPt3.SetMarkerStyle(20)
-                  projPassPt3.SetLineColor(3)
-                  projPassPt3.SetMarkerColor(3)
-                  projPassPt3.DrawClone("SAMEP")
-
-                  legProjXInRegions.Draw("SAMEP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  canLog2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PASS_PtBins.png")
-
-                if ("PostS_ProbQNoL1VsFiStripsVsPt" in keyname2) :
-                  canLog = ROOT.TCanvas("newnameF"+keyname2,"newnameF"+keyname2,800,800)
-                  canLog.SetLogy()
-                  legProjXInRegions =  ROOT.TLegend(.2,.75,.7,.9,"","brNDC")
-                  legProjXInRegions.SetHeader("FAIL region (F_{i}^{pixels} < 0.9)","C")
-                  legProjXInRegions.SetTextFont(42)
-                  legProjXInRegions.SetTextSize(0.035)
-                  legProjXInRegions.SetBorderSize(1);
-                  legProjXInRegions.SetLineColor(0);
-                  legProjXInRegions.SetLineStyle(1);
-                  legProjXInRegions.SetLineWidth(1);
-                  legProjXInRegions.SetFillColor(0);
-                  legProjXInRegions.SetFillStyle(1001);
-                  obj.GetXaxis().SetRange(1,obj.GetXaxis().FindBin(0.9)-1)
-                 
-                  projFail = obj.Project3D("YZ")
-                  projFail.SetTitle("")
-                  projFail.GetXaxis().SetRangeUser(100,4000)
-                  projFailPt1 = projFail.ProjectionY("name1F").Rebin(2)
-                  projFailPt1.GetYaxis().SetTitle("Normalized events")
-                  numEvents1 = projFailPt1.Integral()
-                  projFailPt1.SetStats(0)
-                  projFailPt1.SetMarkerStyle(20)
-                  projFailPt1.SetLineColor(1)
-                  projFailPt1.SetMarkerColor(1)
-                  if (numEvents1 > 0) : projFailPt1.Scale(1/numEvents1)
-                  projFailPt1.SetMaximum(projFailPt1.GetMaximum()*50)
-                  projFailPt1.DrawClone("SAMEP")
-                  legProjXInRegions.AddEntry(projFailPt1, "p_{T} = 100 - inf GeV, #Events: " +str(round(numEvents1)),"LP")
-
-                  projFail.GetXaxis().SetRangeUser(200,4000)
-                  projFailPt2 = projFail.ProjectionY("name2F").Rebin(2)
-                  numEvents2 = projFailPt2.Integral()
-                  projFailPt2.SetStats(0)
-                  projFailPt2.SetMarkerStyle(20)
-                  projFailPt2.SetLineColor(2)
-                  projFailPt2.SetMarkerColor(2)
-                  if (numEvents2 > 0) : projFailPt2.Scale(1/numEvents2)
-                  projFailPt2.DrawClone("SAMEP")
-                  legProjXInRegions.AddEntry(projFailPt2, "p_{T} = 200 - inf GeV, #Events: " +str(round(numEvents2)),"LP")
-
-                  projFail.GetXaxis().SetRangeUser(300,4000)
-                  projFailPt3 = projFail.ProjectionY("name3F").Rebin(2)
-                  numEvents3 = projFailPt3.Integral()
-                  projFailPt3.SetStats(0)
-                  projFailPt3.SetMarkerStyle(20)
-                  projFailPt3.SetLineColor(3)
-                  projFailPt3.SetMarkerColor(3)
-                  if (numEvents3 > 0) : projFailPt3.Scale(1/numEvents3)
-                  projFailPt3.DrawClone("SAMEP")
-
-                  legProjXInRegions.AddEntry(projFailPt3, "p_{T} = 300 - inf GeV, #Events: " +str(round(numEvents3)),"LP")
-                  legProjXInRegions.Draw("SAMEP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  canLog.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_FAIL_PtBins.png")
-                  
-                  # repeat the same for PASS now
-                  legProjXInRegionsPass =  ROOT.TLegend(.2,.75,.7,.9,"","brNDC")
-                  legProjXInRegionsPass.SetHeader("FAIL region (F_{i}^{pixels} < 0.9)","C")
-                  legProjXInRegionsPass.SetTextFont(42)
-                  legProjXInRegionsPass.SetTextSize(0.035)
-                  legProjXInRegionsPass.SetBorderSize(1);
-                  legProjXInRegionsPass.SetLineColor(0);
-                  legProjXInRegionsPass.SetLineStyle(1);
-                  legProjXInRegionsPass.SetLineWidth(1);
-                  legProjXInRegionsPass.SetFillColor(0);
-                  legProjXInRegionsPass.SetFillStyle(1001);
-                  canLog2 = ROOT.TCanvas("newname2-passF"+keyname2,"newname2-passF"+keyname2,800,800)
-                  canLog2.SetLogy()
-                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0)+1) # makes it the PASS region
-                  projPass = obj.Project3D("YZ")
-                  projPass.SetTitle("")
-                  
-                  legProjXInRegionsPass.SetHeader("PASS region (F_{i}^{pixels} > 0.9)","C")
-
-                  projPass.GetXaxis().SetRangeUser(100,4000)
-                  projPassPt1 = projPass.ProjectionY("name1-passF").Rebin(2)
-                  projPassPt1.GetYaxis().SetTitle("Normalized events")
-                  numEvents1 = projPassPt1.Integral()
-                  legProjXInRegionsPass.AddEntry(projPassPt1, "p_{T} = 100 - inf GeV, #Events: " +str(round(numEvents1)),"LP")
-                  
-                  projPassPt1.SetStats(0)
-                  projPassPt1.SetMarkerStyle(20)
-                  projPassPt1.SetLineColor(1)
-                  projPassPt1.SetMarkerColor(1)
-                  if (numEvents1 > 0) : projPassPt1.Scale(1/numEvents1)
-                  projPassPt1.SetMaximum(projPassPt1.GetMaximum()*50)
-                  projPassPt1.DrawClone("SAMEP")
-
-                  projPass.GetXaxis().SetRangeUser(200,4000)
-                  projPassPt2 = projPass.ProjectionY("name2-passF").Rebin(2)
-                  numEvents2 = projPassPt2.Integral()
-                  legProjXInRegionsPass.AddEntry(projPassPt2, "p_{T} = 200 - inf GeV, #Events: " +str(round(numEvents2)),"LP")
-                  projPassPt2.SetStats(0)
-                  projPassPt2.SetMarkerStyle(20)
-                  projPassPt2.SetLineColor(2)
-                  projPassPt2.SetMarkerColor(2)
-                  if (numEvents2 > 0) : projPassPt2.Scale(1/numEvents2)
-                  projPassPt2.DrawClone("SAMEP")
-
-                  projPass.GetXaxis().SetRangeUser(300,4000)
-                  projPassPt3 = projPass.ProjectionY("name3-passF").Rebin(2)
-                  numEvents3 = projPassPt3.Integral()
-                  legProjXInRegionsPass.AddEntry(projPassPt3, "p_{T} = 300 - inf GeV, #Events: " +str(round(numEvents3)),"LP")
-                  projPassPt3.SetStats(0)
-                  projPassPt3.SetMarkerStyle(20)
-                  projPassPt3.SetLineColor(3)
-                  projPassPt3.SetMarkerColor(3)
-                  if (numEvents3 > 0) : projPassPt3.Scale(1/numEvents3)
-                  projPassPt3.DrawClone("SAMEP")
-
-                  legProjXInRegionsPass.Draw("SAMEP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  canLog2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PASS_PtBins.png")
-
-
-                if ("ProbQVsProbXY" in keyname2) :
-                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(3.22),-1)
-                  obj.GetYaxis().SetRange(obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1))
-                  obj.Project3D("YZ").Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIh.png")
-                  obj.GetXaxis().UnZoom()
-                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(3.22))
-                  obj.GetYaxis().SetRange(obj.GetYaxis().FindBin(0.0),obj.GetYaxis().FindBin(0.1))
-                  obj.Project3D("YZ").Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIh.png")
-                  obj.GetXaxis().UnZoom()
-                  obj.Project3D("YZ").Draw("COLZ")
-                  can.SaveAs(name)
-                if ("Calibration_GiTemplate" in keyname2) :
-                  projX = obj.ProjectionX()
-                  projX.SetTitle("")
-                  projX.SetStats(0)
-                  projX.SetMarkerStyle(20)
-                  projX.GetYaxis().SetTitle("Clusters")
-                  projX.GetYaxis().SetTitleOffset(1.9)
-                  projX.Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjX.png")
-                  
-                  legGiCalib =  ROOT.TLegend(.6,.55,.80,.9,"","brNDC")
-                  legGiCalib.SetTextFont(42)
-                  legGiCalib.SetTextSize(0.03)
-                  legGiCalib.SetBorderSize(1);
-                  legGiCalib.SetLineColor(0);
-                  legGiCalib.SetLineStyle(1);
-                  legGiCalib.SetLineWidth(1);
-                  legGiCalib.SetFillColor(0);
-                  legGiCalib.SetFillStyle(1001);
-                  
-                  can3 = ROOT.TCanvas(newname+"3",newname+"3",800,800)
-                  can3.SetLogy()
-                  for x in range(1,obj.GetNbinsX()+1) :
-                    projY = obj.ProjectionY(keyname2 +  "_ProjY"+str(x),x,x+1,1,obj.GetNbinsZ()+1,"e")
-                    projY.SetTitle("")
-                    projY.SetStats(0)
-                    projY.SetMarkerStyle(20)
-                    projY.SetLineColor(x)
-                    projY.SetMarkerColor(x)
-                    projY.GetYaxis().SetTitle("Clusters")
-                    projY.GetYaxis().SetTitleOffset(1.4)
-                    legGiCalib.AddEntry(projY, "Module index: " + str(x),"LP")
-                    projY.Draw("SAME")
-                  legGiCalib.Draw("SAME")
-                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjY.png")
-                  can4 = ROOT.TCanvas(newname+"4",newname+"4",800,800)
-                  can4.SetLogy()
-                  for x in range(1,obj.GetNbinsX()+2) :
-                    projZ = obj.ProjectionZ(keyname2 + "_ProjZ"+str(x),x,x+1,1,obj.GetNbinsY()+1,"e").Rebin(10)
-                    projZ.SetTitle("")
-                    projZ.SetStats(0)
-                    projZ.SetMarkerStyle(20)
-                    projZ.SetLineColor(x)
-                    projZ.SetMarkerColor(x)
-                    projZ.GetYaxis().SetTitle("Clusters")
-                    projZ.GetYaxis().SetTitleOffset(1.4)
-                    projZ.Draw("SAME")
-                  legGiCalib.Draw("SAME")
-                  can4.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_ProjZ.png")
-                  continue
-                else :
-                  print("Following plot was skipped: "+str(keyname2))
-                  continue
-                # this maybe should go from bin to bin+1 ?
-#                if ("IhVsLayer" in keyname2 or "IhVsLayer" in keyname2) :
-#                  obj.SetMarkerStyle(20)
-#                  if ("PostPreS_IasPixelIhVsLayer" in keyname2) :
-#                      ratioOfhighIhPartOlowIh = ROOT.TH1F("RatioOfHighIhOverLowIh",";;Ratio of Ih>5 over Ih<5",7,0.,7.)
-#                      for x in range(1,obj.GetNbinsX()) :
-#                        lowIhPart = obj.Project3D("YZ").Integral(x,x,1,obj.Project3D("YZ").GetYaxis().FindBin(5.0))
-#                        highIhPart = obj.Project3D("YZ").Integral(x,x,obj.Project3D("YZ").GetYaxis().FindBin(5.0),obj.Project3D("YZ").GetNbinsY())
-#                        ratio = 0
-#                        if (lowIhPart>0) :
-#                          ratio = highIhPart/lowIhPart
-#                        ratioOfhighIhPartOlowIh.SetBinContent(x,ratio)
-#                      ratioOfhighIhPartOlowIh.Draw("COLZ")
-#                      ratioOfhighIhPartOlowIh.SetStats(0)
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(1,"BPix L1")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(2,"BPix L2")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(3,"BPix L3")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(4,"BPix L4")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(5,"FPix D1")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(6,"FPix D2")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(7,"FPix D3")
-#                      ratioOfhighIhPartOlowIh.GetYaxis().SetTitleOffset(1.5)
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(1,"BPix L1")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(2,"BPix L2")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(3,"BPix L3")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(4,"BPix L4")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(5,"FPix D1")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(6,"FPix D2")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(7,"FPix D3")
-#                      obj.Project3D("YZ").GetYaxis().SetTitleOffset(0.8)
-#                      obj.Project3D("YZ").GetYaxis().SetTitle("Ih")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(1,"BPix L1")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(2,"BPix L2")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(3,"BPix L3")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(4,"BPix L4")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(5,"FPix D1")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(6,"FPix D2")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(7,"FPix D3")
-#                      obj.Project3D("XZ").GetYaxis().SetTitle("Ias")
-#                      obj.Project3D("XZ").GetYaxis().SetTitleOffset(0.8)
-#                  elif ("PostPreS_IasStripIhVsLayer" in keyname2) :
-#                      ratioOfhighIhPartOlowIh = ROOT.TH1F("RatioOfHighIhOverLowIh",";;Ratio of Ih>5 over Ih<5",23,0.,23.)
-#                      for x in range(1,obj.GetNbinsX()) :
-#                        lowIhPart = obj.Project3D("YZ").Integral(x,x,1,obj.Project3D("YZ").GetYaxis().FindBin(5.0))
-#                        highIhPart = obj.Project3D("YZ").Integral(x,x,obj.Project3D("YZ").GetYaxis().FindBin(5.0),obj.Project3D("YZ").GetNbinsY())
-#                        ratio = 0
-#                        if (lowIhPart>0) :
-#                          ratio = highIhPart/lowIhPart
-#                        ratioOfhighIhPartOlowIh.SetBinContent(x,ratio)
-#                      ratioOfhighIhPartOlowIh.Draw("COLZ")
-#                      ratioOfhighIhPartOlowIh.SetStats(0)
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(1,"TIB L1")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(2,"TIB L2")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(3,"TIB L3")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(4,"TIB L4")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(5,"TOB L1")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(6,"TOB L2")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(7,"TOB L3")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(8,"TOB L4")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(9,"TOB L5")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(10,"TOB L6")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(11,"TID D1")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(12,"TID D2")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(13,"TID D3")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(14,"TEC D1")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(15,"TEC D2")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(16,"TEC D3")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(17,"TEC D4")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(18,"TEC D5")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(19,"TEC D6")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(20,"TEC D7")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(21,"TEC D8")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(22,"TEC D9")
-#                      ratioOfhighIhPartOlowIh.GetXaxis().SetBinLabel(23,"TEC D10")
-#                      ratioOfhighIhPartOlowIh.GetYaxis().SetTitleOffset(1.5)
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(1,"TIB L1")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(2,"TIB L2")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(3,"TIB L3")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(4,"TIB L4")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(5,"TOB L1")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(6,"TOB L2")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(7,"TOB L3")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(8,"TOB L4")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(9,"TOB L5")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(10,"TOB L6")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(11,"TID D1")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(12,"TID D2")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(13,"TID D3")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(14,"TEC D1")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(15,"TEC D2")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(16,"TEC D3")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(17,"TEC D4")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(18,"TEC D5")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(19,"TEC D6")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(20,"TEC D7")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(21,"TEC D8")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(22,"TEC D9")
-#                      obj.Project3D("YZ").GetXaxis().SetBinLabel(23,"TEC D10")
-#                      obj.Project3D("YZ").GetYaxis().SetTitleOffset(0.8)
-#                      obj.Project3D("YZ").GetYaxis().SetTitle("I_{h} (MeV/cm)")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(1,"TIB L1")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(2,"TIB L2")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(3,"TIB L3")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(4,"TIB L4")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(5,"TOB L1")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(6,"TOB L2")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(7,"TOB L3")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(8,"TOB L4")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(9,"TOB L5")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(10,"TOB L6")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(11,"TID D1")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(12,"TID D2")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(13,"TID D3")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(14,"TEC D1")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(15,"TEC D2")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(16,"TEC D3")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(17,"TEC D4")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(18,"TEC D5")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(19,"TEC D6")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(20,"TEC D7")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(21,"TEC D8")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(22,"TEC D9")
-#                      obj.Project3D("XZ").GetXaxis().SetBinLabel(23,"TEC D10")
-#                      obj.Project3D("XZ").GetYaxis().SetTitle("G_{i}^{Strips}")
-#                      obj.Project3D("XZ").GetYaxis().SetTitleOffset(0.8)
-##                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(1.0))
-#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_RatioOfLowIasHighIas.png")
-#                  obj.Project3D("YZ").SetStats(0)
-#                  obj.Project3D("YZ").Draw("COLZ")
-#                  obj.Project3D("YZ").SetTitle("")
-#                  tex4.Draw("SAME")
-#                  tex5.Draw("SAME")
-#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_allIas.png")
-#                  obj.Project3D("XZ").SetStats(0)
-#                  obj.Project3D("XZ").Draw("COLZ")
-#                  obj.Project3D("XZ").SetTitle("")
-#                  tex4.Draw("SAME")
-#                  tex5.Draw("SAME")
-#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_allIh.png")
-#
-#                  obj.Project3D("YZ").GetYaxis().UnZoom()
-#                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.7),obj.GetXaxis().FindBin(1.0))
-#                  obj.Project3D("YZ").Draw("COLZ")
-#                  tex4.Draw("SAME")
-#                  tex5.Draw("SAME")
-#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
-#
-#                  obj.GetXaxis().UnZoom()
-#                  obj.GetXaxis().SetRange(obj.GetXaxis().FindBin(0.0),obj.GetXaxis().FindBin(0.7))
-#                  projObj = obj.Project3D("YZ")
-#                  if (projObj.GetEntries()==0) : continue
-#                  projObj.Draw("COLZ")
-#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
-#                  if ("PostPreS_IasPixelIhVsLayer" in keyname2):
-#                    for i in range(7) :
-#                      obj.Project3D("YZ").ProjectionY(newname,i,i+1,"e").Draw()
-#                      can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PixLayer"+str(i)+".png")
-#                  elif ("PostPreS_IasStripIhVsLayer" in keyname2):
-#                    for i in range(23) :
-#                      obj.Project3D("YZ").ProjectionY(newname,i,i+1,"e").Draw()
-#                      can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_StripLayer"+str(i)+".png")
-#                else :
-#                  obj.SetMarkerStyle(20)
-#                  obj.GetXaxis().SetRange(bin,bin)
-#                  obj.Project3D("ZY").Draw("COLZ")
-              if ((obj.ClassName() == "TH2F" or obj.ClassName() == "TH2D") and not (keyname2 == "GenPtVsRecoPt" or "PreS_" in keyname2 or "CutFlow" in keyname2 or "N1_" in keyname2 or "_p_" in keyname2 or "_pterr" in keyname2 )):
-                obj.SetTitle("")
-                obj.SetMarkerStyle(20)
-                projOb = obj.ProjectionY(newname,bin,bin,"e")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                projOb.Draw("COLZ L")
-                can.SaveAs(name)
-
-              if ((obj.ClassName() == "TH2F") and "VsPixelLayer" in keyname2) :
-                for i in range(4) :
-                  obj.SetTitle("")
-                  obj.SetMarkerStyle(20)
-                  obj.SetStats(0)
-                  obj.ProjectionX(newname+"_PixLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").Draw()
-                  obj.ProjectionX(newname+"_PixLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").SetStats(0)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_PixLayer"+str(i+1)+".png")
-              if ((obj.ClassName() == "TH2F") and "VsStripLayer" in keyname2) :
-                obj.GetYaxis().SetBinLabel(1,"TIB L1")
-                obj.GetYaxis().SetBinLabel(2,"TIB L2")
-                obj.GetYaxis().SetBinLabel(3,"TIB L3")
-                obj.GetYaxis().SetBinLabel(4,"TIB L4")
-                obj.GetYaxis().SetBinLabel(5,"TOB L1")
-                obj.GetYaxis().SetBinLabel(6,"TOB L2")
-                obj.GetYaxis().SetBinLabel(7,"TOB L3")
-                obj.GetYaxis().SetBinLabel(8,"TOB L4")
-                obj.GetYaxis().SetBinLabel(9,"TOB L5")
-                obj.GetYaxis().SetBinLabel(10,"TOB L6")
-                obj.GetYaxis().SetBinLabel(11,"TID D1")
-                obj.GetYaxis().SetBinLabel(12,"TID D2")
-                obj.GetYaxis().SetBinLabel(13,"TID D3")
-                obj.GetYaxis().SetBinLabel(14,"TEC D1")
-                obj.GetYaxis().SetBinLabel(15,"TEC D2")
-                obj.GetYaxis().SetBinLabel(16,"TEC D3")
-                obj.GetYaxis().SetBinLabel(17,"TEC D4")
-                obj.GetYaxis().SetBinLabel(18,"TEC D5")
-                obj.GetYaxis().SetBinLabel(19,"TEC D6")
-                obj.GetYaxis().SetBinLabel(20,"TEC D7")
-                obj.GetYaxis().SetBinLabel(21,"TEC D8")
-                obj.GetYaxis().SetBinLabel(22,"TEC D9")
-                obj.GetYaxis().SetBinLabel(23,"TEC D10")
-                for i in range(20) :
-                  obj.SetTitle("")
-                  obj.SetMarkerStyle(20)
-                  obj.SetStats(0)
-                  obj.ProjectionX(newname+"_StripLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").Draw()
-                  obj.ProjectionX(newname+"_StripLayer"+str(i),obj.GetYaxis().FindBin(i),obj.GetYaxis().FindBin(i),"e").SetStats(0)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_StripLayer"+str(i+1)+".png")
-              if ((obj.ClassName() == "TH2F") and ("Clu" in keyname2)) :
-                profYobj = obj.ProfileY()
-#                profYobj.GetYaxis().SetTitle(axisXTitle)
-                profYobj.GetYaxis().SetTitleOffset(1.5)
-                profYobj.GetYaxis().SetLabelSize(0.03)
-                profYobj.SetStats(0)
-                if ("CluNormChargeVsStripLayer" in keyname2) :
-                  profYobj.GetXaxis().SetBinLabel(1,"TIB L1")
-                  profYobj.GetXaxis().SetBinLabel(2,"TIB L2")
-                  profYobj.GetXaxis().SetBinLabel(3,"TIB L3")
-                  profYobj.GetXaxis().SetBinLabel(4,"TIB L4")
-                  profYobj.GetXaxis().SetBinLabel(5,"TOB L1")
-                  profYobj.GetXaxis().SetBinLabel(6,"TOB L2")
-                  profYobj.GetXaxis().SetBinLabel(7,"TOB L3")
-                  profYobj.GetXaxis().SetBinLabel(8,"TOB L4")
-                  profYobj.GetXaxis().SetBinLabel(9,"TOB L5")
-                  profYobj.GetXaxis().SetBinLabel(10,"TOB L6")
-                  profYobj.GetXaxis().SetBinLabel(11,"TID D1")
-                  profYobj.GetXaxis().SetBinLabel(12,"TID D2")
-                  profYobj.GetXaxis().SetBinLabel(13,"TID D3")
-                  profYobj.GetXaxis().SetBinLabel(14,"TEC D1")
-                  profYobj.GetXaxis().SetBinLabel(15,"TEC D2")
-                  profYobj.GetXaxis().SetBinLabel(16,"TEC D3")
-                  profYobj.GetXaxis().SetBinLabel(17,"TEC D4")
-                  profYobj.GetXaxis().SetBinLabel(18,"TEC D5")
-                  profYobj.GetXaxis().SetBinLabel(19,"TEC D6")
-                  profYobj.GetXaxis().SetBinLabel(20,"TEC D7")
-                  profYobj.GetXaxis().SetBinLabel(21,"TEC D8")
-                  profYobj.GetXaxis().SetBinLabel(22,"TEC D9")
-                  profYobj.GetXaxis().SetBinLabel(23,"TEC D10")
-                profYobj.DrawClone("COLZ")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileY.png")
-                
-                if ("CluSpecInCPE" in keyname2) :
-                  obj.SetStats(0)
-                  obj.GetXaxis().SetTitle("")
-                  obj.GetXaxis().SetBinLabel(1,"isOnEdge")
-                  obj.GetXaxis().SetBinLabel(2,"hasBadPixels")
-                  obj.GetXaxis().SetBinLabel(3,"spansTwoROCs")
-                  obj.GetXaxis().SetBinLabel(4,"AllClusters")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  obj.Draw("COLZ L")
-#                  obj.GetXaxis().SetTitle(axisXTitle)
-                obj.DrawClone("COLZ L")
-#                obj.GetYaxis().SetTitle(axisYTitle)
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(name)
-              elif ("GenPtVsRecoPt" in keyname2) :
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.Draw("COLZ")
-                print(str(keyname2) + ": " + str(round(obj.GetCorrelationFactor(),2)))
-              elif ("Stab" in keyname2) :
-                profXobj = ROOT.TH1F(keyname2+"profX" , keyname2+"profX" , 545, 271000,325500)
-                profXobj = obj.ProfileX()
-#                profYobj.GetYaxis().SetTitle(axisXTitle)
-#                profYobj.GetYaxis().SetTitleOffset(1.5)
-#                profYobj.GetYaxis().SetLabelSize(0.03)
-                profXobj.SetStats(0)
-                profXobj.DrawClone("COLZ")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileX.png")
-              elif ("IasVs" in keyname2 and not obj.ClassName() == "TH3F") :
-                obj.SetMarkerStyle(20)
-                if ("Angle" in keyname2 or "NumSibling" in keyname2) :
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  obj.ProjectionY(newname,obj.GetXaxis().FindBin(0.7),obj.GetNbinsX()+1,"e").Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
-                  projObjs = obj.ProjectionY(newname,1,obj.GetXaxis().FindBin(0.7),"e")
-                  if (projObjs.GetEntries()==0) : continue
-                  projObjs.Draw("COLZ")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
-                  obj.ProjectionY(newname,1,obj.GetNbinsX()+1,"e").Draw("COLZ")
-                else :
-                  projObject = obj.ProjectionY(newname+"_lowIas",1,obj.GetXaxis().FindBin(0.7),"e")
-                  if (projObject.GetEntries()==0) : continue
-                  myPie = ROOT.TPie(projObject)
-                  myPie.SetLabelFormat("%txt (%perc)")
-                  myPie.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowIas.png")
-                  
-                  objProj = obj.ProjectionY(newname+"_highIas",obj.GetXaxis().FindBin(0.7),obj.GetNbinsX()+1,"e")
-                  if (objProj.GetEntries()==0) : continue
-                  myPie2 = ROOT.TPie(objProj)
-                  myPie2.SetLabelFormat("%txt (%perc)")
-                  myPie2.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie2.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highIas.png")
-                  
-                  myPie3 = ROOT.TPie(obj.ProjectionY(newname,1,obj.GetNbinsX()+1,"e"))
-                  myPie3.SetLabelFormat("%txt (%perc)")
-                  myPie3.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie3.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  ".png")
-              elif ("Trigger" in keyname2 and obj.ClassName() == "TH3F") :
-                profZobj = obj.Project3DProfile("zy")
-                profZobj.SetStats(0)
-                profZobj.GetZaxis().SetTitle("Efficiency")
-                profZobj.SetTitle("")
-                profZobj.GetXaxis().SetTitle("MET (GeV)")
-                profZobj.GetYaxis().SetTitle("H_{T} (GeV)")
-                profZobj.GetYaxis().SetTitleOffset(1.7)
-                profZobj.Rebin2D(2)
-                profZobj.DrawClone("COLZ")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileZ.png")
-              elif ("EoPVs" in keyname2) :
-                obj.SetMarkerStyle(20)
-                if ("Angle" in keyname2) :
-                  obj.ProjectionY(newname+"_lowEoP",1,obj.GetXaxis().FindBin(0.85),"e").Draw("COLZ")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowEoP.png")
-#                  obj.ProjectionY(newname+"_highEoP",obj.GetXaxis().FindBin(0.85),obj.GetNbinsX()+1,"e").Draw("COLZ")
-#                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highEoP.png")
-                elif ("EoPVsPfType" in keyname2) :
-                  obj.SetMarkerColor(1)
-                  obj.SetLineColor(1)
-                  obj.SetMarkerStyle(20)
-                  obj.SetStats(0)
-#                  obj.Scale(1/obj.GetMaximum())
-                  obj.GetYaxis().SetBinLabel(1,"AllTracks")
-                  obj.GetYaxis().SetBinLabel(2,"PFtracks")
-                  obj.GetYaxis().SetBinLabel(3,"isElectron")
-                  obj.GetYaxis().SetBinLabel(4,"isMuon")
-                  obj.GetYaxis().SetBinLabel(5,"isPhoton")
-                  obj.GetYaxis().SetBinLabel(6,"isChHadron")
-                  obj.GetYaxis().SetBinLabel(7,"isNeutHadron")
-                  obj.GetYaxis().SetBinLabel(8,"isUndefined")
-                  obj.GetYaxis().SetBinLabel(9,"notPFtrack")
-                  obj.GetXaxis().SetTitle("EoP")
-                  obj.Draw("COLZ")
-                else :
-                  projObj = obj.ProjectionY(newname+"_lowEoP",1,obj.GetXaxis().FindBin(0.85),"e")
-                  if (projObj.GetEntries() == 0) : continue
-                  myPie = ROOT.TPie(projObj)
-                  myPie.SetLabelFormat("%txt (%perc)")
-                  myPie.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_lowEoP.png")
-                  
-                  projObj2 = obj.ProjectionY(newname+"_highEoP",obj.GetXaxis().FindBin(0.85),obj.GetNbinsX()+1,"e")
-                  if (projObj2.GetEntries() == 0) : continue
-                  myPie2 = ROOT.TPie(projObj2)
-                  myPie2.SetLabelFormat("%txt (%perc)")
-                  myPie2.SetLabelsOffset(-.27)
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  myPie2.Draw("R<")
-                  can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_highEoP.png")
-              elif (obj.ClassName() == "TH2F" and  (("ProbQVsIas" in keyname2) or ( "ProbQNoL1VsIas" in keyname2))) :
-#                obj.GetXaxis().SetTitle(axisXTitle)
-#                obj.GetYaxis().SetTitle(axisYTitle)
-                obj.GetYaxis().SetTitleOffset(1.3)
-                obj.GetYaxis().SetLabelSize(0.03)
-                obj.GetYaxis().SetTitle("G_{i}^{Strips}")
-                obj.GetXaxis().SetTitle("F_{i}^{Pixels}")
-                obj.SetStats(0)
-                obj.DrawClone("COLZ")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                print(str(keyname2) + ": " + str(round(obj.GetCorrelationFactor(),5)))
-                can.SaveAs(name)
-                if ("ProbQNoL1VsIas" in keyname2) :
-                  can2 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
-                  can2.SetLogy()
-                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
-                  projY1 = obj.ProjectionY("IasForProbQSlice_Slice1",obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0),"e")
-                  projY1.SetStats(0)
-                  projY1.SetMarkerColor(1)
-                  projY1.SetLineColor(1)
-                  projY1.SetMarkerStyle(20)
-                  projY1.Draw("SAME")
-                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
-                  projY1.GetYaxis().SetTitleOffset(1.5)
-                  
-                  projY2 = obj.ProjectionY("IasForProbQSlice_Slice2",obj.GetXaxis().FindBin(0.3),obj.GetXaxis().FindBin(0.9),"e")
-                  projY2.SetMarkerStyle(20)
-                  projY2.SetMarkerColor(2)
-                  projY2.SetLineColor(2)
-                  projY2.Draw("SAME")
-                  
-                  numTracks1 = projY1.Integral()
-                  numTracks2 = projY2.Integral()
-                  
-                  if (numTracks1>0) : projY1.Scale(1/projY1.Integral())
-                  if (numTracks2>0) : projY2.Scale(1/projY2.Integral())
-                  
-                  blind = True
-#                  blind = False
-
-                  if (blind and not "CR" in keyname2 and isData) :
-                    projY1.SetBinContent(7,0)
-                    projY1.SetBinContent(8,0)
-                    projY1.SetBinContent(9,0)
-                    projY1.SetBinContent(10,0)
-                  projY1.SetMaximum(projY1.GetMaximum()*100)
-                  
-                  rp2 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
-
-                  rp2.SetH1DrawOpt("P");
-                  rp2.SetH2DrawOpt("P");
-
-                  rp2.Draw()
-                  
-                  rp2.SetLeftMargin(0.13);
-                  rp2.SetRightMargin(0.05);
-                  rp2.SetUpTopMargin(0.1);
-                  rp2.SetLowTopMargin(0.02);
-                  rp2.SetLowBottomMargin(0.35);
-
-
-                  rp2.GetLowerRefGraph().SetMinimum(0)
-                  rp2.GetLowerRefGraph().SetMaximum(3.5);
-                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-                  #rp.GetLowerRefGraph().SetLineColor(0) #0
-                  rp2.GetLowerRefGraph().SetMarkerStyle(20)
-                  rp2.GetLowerRefGraph().SetMarkerSize(1);
-                  rp2.GetLowYaxis().SetNdivisions(505);
-                  rp2.GetLowerRefYaxis().SetTitle("Ratio");
-                  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
-                  rp2.GetLowerRefYaxis().SetTitleOffset(1);
-                  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-                  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
-                  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
-                  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
-                  legIasForProbQSlice.SetTextFont(42)
-                  legIasForProbQSlice.SetTextSize(0.035)
-                  legIasForProbQSlice.SetBorderSize(1);
-                  legIasForProbQSlice.SetLineColor(0);
-                  legIasForProbQSlice.SetLineStyle(1);
-                  legIasForProbQSlice.SetLineWidth(1);
-                  legIasForProbQSlice.SetFillColor(0);
-                  legIasForProbQSlice.SetFillStyle(1001);
-                  legIasForProbQSlice.AddEntry(projY1,"F_{i}^{Pixels} (0.9-1.0), #Tracks: " +str(round(numTracks1)),"LP")
-                  legIasForProbQSlice.AddEntry(projY2,"F_{i}^{Pixels}  (0.3-0.9), #Tracks: " +str(round(numTracks2)),"LP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legIasForProbQSlice.Draw("SAME")
-                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_Norm_ProbQSlice.png")
-                  
-                  can3 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
-                  can3.SetLogy()
-                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
-                  projY1 = obj.ProjectionX("IasForProbQSlice_Slice1",1,obj.GetYaxis().FindBin(0.1),"e")
-                  projY1.SetStats(0)
-                  projY1.SetMarkerColor(1)
-                  projY1.SetLineColor(1)
-                  projY1.SetMarkerStyle(20)
-                  projY1.Draw("SAME")
-                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
-                  projY1.GetYaxis().SetTitleOffset(1.5)
-
-                  projY2 = obj.ProjectionX("IasForProbQSlice_Slice2",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),"e")
-                  projY2.SetMarkerStyle(20)
-                  projY2.SetMarkerColor(2)
-                  projY2.SetLineColor(2)
-                  projY2.Draw("SAME")
-                  
-                  numTracks3 = projY1.Integral()
-                  numTracks4 = projY2.Integral()
-                  if (numTracks3>0) : projY1.Scale(1/projY1.Integral())
-                  if (numTracks4>0) : projY2.Scale(1/projY2.Integral())
-                
-                  if (blind and not "CR" in keyname2 and isData) :
-                    projY1.SetBinContent(19,0)
-                    projY1.SetBinContent(20,0)
-                  
-                  projY1.SetMaximum(projY1.GetMaximum()*100)
-                  
-                  rp3 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
-
-                  rp3.SetH1DrawOpt("P");
-                  rp3.SetH2DrawOpt("P");
-
-                  rp3.Draw()
-                  
-                  rp3.SetLeftMargin(0.13);
-                  rp3.SetRightMargin(0.05);
-                  rp3.SetUpTopMargin(0.1);
-                  rp3.SetLowTopMargin(0.02);
-                  rp3.SetLowBottomMargin(0.35);
-
-
-                  rp3.GetLowerRefGraph().SetMinimum(0)
-                  rp3.GetLowerRefGraph().SetMaximum(3.5)
-                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-                  #rp.GetLowerRefGraph().SetLineColor(0) #0
-                  rp3.GetLowerRefGraph().SetMarkerStyle(20)
-                  rp3.GetLowerRefGraph().SetMarkerSize(1);
-                  rp3.GetLowYaxis().SetNdivisions(505);
-                  rp3.GetLowerRefYaxis().SetTitle("Ratio");
-                  rp3.GetLowerRefYaxis().SetTitleSize(0.05);
-                  rp3.GetLowerRefYaxis().SetTitleOffset(1);
-                  rp3.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-                  rp3.GetLowerRefXaxis().SetTitleSize(0.05);
-                  rp3.GetLowerRefXaxis().SetTitleOffset(0.8);
-                  rp3.GetLowerRefXaxis().SetLabelSize(0.035);
-                  legIasForProbQSlice.SetTextFont(42)
-                  legIasForProbQSlice.SetTextSize(0.035)
-                  legIasForProbQSlice.SetBorderSize(1);
-                  legIasForProbQSlice.SetLineColor(0);
-                  legIasForProbQSlice.SetLineStyle(1);
-                  legIasForProbQSlice.SetLineWidth(1);
-                  legIasForProbQSlice.SetFillColor(0);
-                  legIasForProbQSlice.SetFillStyle(1001);
-                  legIasForProbQSlice.AddEntry(projY1,"G_{i}^{Strips} (0.0-0.1), #Tracks: "+str(round(numTracks3)),"LP")
-                  legIasForProbQSlice.AddEntry(projY2,"G_{i}^{Strips} (0.1-1.0), #Tracks: "+str(round(numTracks4)),"LP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legIasForProbQSlice.Draw("SAME")
-                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_Norm_IasSlice.png")
-
-                if ("ProbQNoL1VsIas" in keyname2) :
-                  can2 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
-                  can2.SetLogy()
-                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
-                  projY1 = obj.ProjectionY("IasForProbQSlice_Slice1",obj.GetXaxis().FindBin(0.9),obj.GetXaxis().FindBin(1.0),"e")
-                  projY1.SetStats(0)
-                  projY1.SetMarkerColor(1)
-                  projY1.SetLineColor(1)
-                  projY1.SetMarkerStyle(20)
-                  projY1.Draw("SAME")
-                  projY1.GetYaxis().SetTitle("Tracks / 0.05")
-                  projY1.GetYaxis().SetTitleOffset(1.5)
-                  
-                  projY2 = obj.ProjectionY("IasForProbQSlice_Slice2",obj.GetXaxis().FindBin(0.3),obj.GetXaxis().FindBin(0.9),"e")
-                  projY2.SetMarkerStyle(20)
-                  projY2.SetMarkerColor(2)
-                  projY2.SetLineColor(2)
-                  projY2.Draw("SAME")
-                  
-                  numTracks1 = projY1.Integral()
-                  numTracks2 = projY2.Integral()
-
-                  if (blind and not "CR" in keyname2 and isData) :
-                    projY1.SetBinContent(7,0)
-                    projY1.SetBinContent(8,0)
-                    projY1.SetBinContent(9,0)
-                    projY1.SetBinContent(10,0)
-                  projY1.SetMaximum(projY2.GetMaximum()*100)
-                  projY1.SetMinimum(0.1)
-                  
-                  rp2 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
-
-                  rp2.SetH1DrawOpt("P");
-                  rp2.SetH2DrawOpt("P");
-
-                  rp2.Draw()
-                  
-                  rp2.SetLeftMargin(0.13);
-                  rp2.SetRightMargin(0.05);
-                  rp2.SetUpTopMargin(0.1);
-                  rp2.SetLowTopMargin(0.02);
-                  rp2.SetLowBottomMargin(0.35);
-
-
-                  rp2.GetLowerRefGraph().SetMinimum(0)
-                  rp2.GetLowerRefGraph().SetMaximum(3.5);
-                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-                  #rp.GetLowerRefGraph().SetLineColor(0) #0
-                  rp2.GetLowerRefGraph().SetMarkerStyle(20)
-                  rp2.GetLowerRefGraph().SetMarkerSize(1);
-                  rp2.GetLowYaxis().SetNdivisions(505);
-                  rp2.GetLowerRefYaxis().SetTitle("Ratio");
-                  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
-                  rp2.GetLowerRefYaxis().SetTitleOffset(1);
-                  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-                  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
-                  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
-                  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
-                  legIasForProbQSlice.SetTextFont(42)
-                  legIasForProbQSlice.SetTextSize(0.035)
-                  legIasForProbQSlice.SetBorderSize(1);
-                  legIasForProbQSlice.SetLineColor(0);
-                  legIasForProbQSlice.SetLineStyle(1);
-                  legIasForProbQSlice.SetLineWidth(1);
-                  legIasForProbQSlice.SetFillColor(0);
-                  legIasForProbQSlice.SetFillStyle(1001);
-                  legIasForProbQSlice.AddEntry(projY1,"F_{i}^{Pixels} (0.9-1.0), #Tracks: " +str(round(numTracks1)),"LP")
-                  legIasForProbQSlice.AddEntry(projY2,"F_{i}^{Pixels}  (0.3-0.9), #Tracks: " +str(round(numTracks2)),"LP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legIasForProbQSlice.Draw("SAME")
-                  can2.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_NotNorm_ProbQSlice.png")
-                  
-                  can3 = ROOT.TCanvas(newname+"2",newname+"2",800,800)
-                  can3.SetLogy()
-                  legIasForProbQSlice =  ROOT.TLegend(.30,.80,.80,.90,"","brNDC")
-                  projY1 = obj.ProjectionX("IasForProbQSlice_Slice1",1,obj.GetYaxis().FindBin(0.1),"e")
-                  projY1.SetStats(0)
-                  projY1.SetMarkerColor(1)
-                  projY1.SetLineColor(1)
-                  projY1.SetMarkerStyle(20)
-                  projY1.Draw("SAME")
-                  projY1.GetYaxis().SetTitle("Normalized Tracks / 0.05")
-                  projY1.GetYaxis().SetTitleOffset(1.5)
-
-                  projY2 = obj.ProjectionX("IasForProbQSlice_Slice2",obj.GetYaxis().FindBin(0.1),obj.GetYaxis().FindBin(1.0),"e")
-                  projY2.SetMarkerStyle(20)
-                  projY2.SetMarkerColor(2)
-                  projY2.SetLineColor(2)
-                  projY2.Draw("SAME")
-                  
-                  numTracks3 = projY1.Integral()
-                  numTracks4 = projY2.Integral()
-                
-                  if (blind and not "CR" in keyname2 and isData) :
-                    projY1.SetBinContent(19,0)
-                    projY1.SetBinContent(20,0)
-                  
-                  projY1.SetMaximum(projY1.GetMaximum()*100)
-                  
-                  rp3 = ROOT.TRatioPlot(projY1,projY2,"divsym") #, "diffsigerrasym"
-
-                  rp3.SetH1DrawOpt("P");
-                  rp3.SetH2DrawOpt("P");
-
-                  rp3.Draw()
-                  
-                  rp3.SetLeftMargin(0.13);
-                  rp3.SetRightMargin(0.05);
-                  rp3.SetUpTopMargin(0.1);
-                  rp3.SetLowTopMargin(0.02);
-                  rp3.SetLowBottomMargin(0.35);
-
-
-                  rp3.GetLowerRefGraph().SetMinimum(0)
-                  rp3.GetLowerRefGraph().SetMaximum(3.5)
-                  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-                  #rp.GetLowerRefGraph().SetLineColor(0) #0
-                  rp3.GetLowerRefGraph().SetMarkerStyle(20)
-                  rp3.GetLowerRefGraph().SetMarkerSize(1);
-                  rp3.GetLowYaxis().SetNdivisions(505);
-                  rp3.GetLowerRefYaxis().SetTitle("Ratio");
-                  rp3.GetLowerRefYaxis().SetTitleSize(0.05);
-                  rp3.GetLowerRefYaxis().SetTitleOffset(1);
-                  rp3.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-                  rp3.GetLowerRefXaxis().SetTitleSize(0.05);
-                  rp3.GetLowerRefXaxis().SetTitleOffset(0.8);
-                  rp3.GetLowerRefXaxis().SetLabelSize(0.035);
-                  legIasForProbQSlice.SetTextFont(42)
-                  legIasForProbQSlice.SetTextSize(0.035)
-                  legIasForProbQSlice.SetBorderSize(1);
-                  legIasForProbQSlice.SetLineColor(0);
-                  legIasForProbQSlice.SetLineStyle(1);
-                  legIasForProbQSlice.SetLineWidth(1);
-                  legIasForProbQSlice.SetFillColor(0);
-                  legIasForProbQSlice.SetFillStyle(1001);
-                  legIasForProbQSlice.AddEntry(projY1,"G_{i}^{Strips} (0.0-0.1), #Tracks: "+str(round(numTracks3)),"LP")
-                  legIasForProbQSlice.AddEntry(projY2,"G_{i}^{Strips} (0.1-1.0), #Tracks: "+str(round(numTracks4)),"LP")
-                  tex2.Draw("SAME")
-                  tex3.Draw("SAME")
-                  tex4.Draw("SAME")
-                  tex5.Draw("SAME")
-                  legIasForProbQSlice.Draw("SAME")
-                  can3.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 + "_NotNorm_IasSlice.png")
-
-              elif (obj.ClassName() == "TH2F" and  (("Trigger" in keyname2) and ( "Vs" in keyname2))) :
-                profYobj = obj.ProfileY()
-                profYobj.SetStats(0)
-                profYobj.GetYaxis().SetTitle("Efficiency")
-                profYobj.DrawClone("COLZ")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_profileY.png")
-              
-              if (keyname2== "CutFlow" or keyname2== "EventCutFlow") :
-                if (blind and isData) :
-                  obj.SetBinContent(18,0)
-                  obj.SetBinContent(19,0)
-                  obj.SetBinContent(20,0)
-                obj.SetMarkerColor(1)
-                obj.SetLineColor(1)
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.GetXaxis().SetTitle("")
-                obj.GetXaxis().SetTitle("")
-                ROOT.gStyle.SetPaintTextFormat(".2g");
-                obj.Draw("HISTOTEXT00")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-#                obj.GetYaxis().SetRangeUser(0.,1.3)
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_withNumbersNotNorm.png")
-              if (keyname2== "CutFlow" or keyname2== "EventCutFlow") :
-                if (blind and isData) :
-                  obj.SetBinContent(18,0)
-                  obj.SetBinContent(19,0)
-                  obj.SetBinContent(20,0)
-                obj.SetMarkerColor(1)
-                obj.SetLineColor(1)
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.GetMaximum())
-                obj.GetXaxis().SetTitle("")
-                if (keyname2== "CutFlow") :  obj.GetYaxis().SetTitle("Track efficiency")
-                if (keyname2== "EventCutFlow") : obj.GetYaxis().SetTitle("Event efficiency")
-                obj.GetXaxis().SetTitle("")
-                ROOT.gStyle.SetPaintTextFormat(".2g");
-                obj.Draw("HISTOTEXT00")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.GetYaxis().SetRangeUser(0.,1.3)
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_withNumbers.png")
-              elif (keyname2== "CutFlowReverse") :
-                obj.SetMarkerColor(1)
-                obj.SetLineColor(1)
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.GetMaximum())
-#                obj.GetXaxis().SetBinLabel(1,"Trigger")
-#                obj.GetXaxis().SetBinLabel(2,"pT")
-#                obj.GetXaxis().SetBinLabel(3,"Eta")
-#                obj.GetXaxis().SetBinLabel(4,"NumPixHits")
-#                obj.GetXaxis().SetBinLabel(5,"ValidFract")
-#                obj.GetXaxis().SetBinLabel(6,"NumDeDx")
-#                obj.GetXaxis().SetBinLabel(7,"HighPurity")
-#                obj.GetXaxis().SetBinLabel(8,"Chi2oDOF")
-#                obj.GetXaxis().SetBinLabel(9,"dz")
-#                obj.GetXaxis().SetBinLabel(10,"dxy")
-#                obj.GetXaxis().SetBinLabel(11,"EoP")
-#                obj.GetXaxis().SetBinLabel(12,"")
-#                obj.GetXaxis().SetBinLabel(13,"dRminCaloJet")
-#                obj.GetXaxis().SetBinLabel(14,"MiniIso")
-#                obj.GetXaxis().SetBinLabel(15,"PFid")
-#                obj.GetXaxis().SetBinLabel(16,"Ih")
-#                obj.GetXaxis().SetBinLabel(17,"")
-                obj.GetXaxis().SetTitle("")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.Draw("COLZ L")
-              if (keyname2 == "ErrorHisto") :
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.GetMaximum())
-#                obj.GetXaxis().SetBinLabel(1,"All tracks")
-#                obj.GetXaxis().SetBinLabel(2,"No track/glob muon")
-#                obj.GetXaxis().SetBinLabel(3,"Track is null")
-#                obj.GetXaxis().SetBinLabel(4,"No PV")
-#                obj.GetXaxis().SetBinLabel(5,"No gen match")
-#                obj.GetXaxis().SetBinLabel(6,"Gen match too far")
-#                obj.GetXaxis().SetBinLabel(7,"No dEdx")
-#                obj.GetXaxis().SetBinLabel(8,"Cosmic track")
-#                obj.GetXaxis().SetBinLabel(9,"Has91 status")
-                obj.GetXaxis().SetTitle("")
-                obj.GetYaxis().SetTitle("")
-                obj.SetMaximum(1.4)
-                obj.GetXaxis().SetTitle("")
-                obj.SetTitle("")
-                obj.Draw("COLZ L")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(name)
-              if ("TriggerType" in keyname2) :
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.GetYaxis().SetTitle("Events / category")
-                ROOT.gStyle.SetPaintTextFormat(".2g");
-                obj.Draw("SAMEHISTOTEXT00")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(name)
-              if ("TriggerType" in keyname2) :
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.Integral(1,3))
-                obj.GetYaxis().SetTitle("Norm events / category")
-                ROOT.gStyle.SetPaintTextFormat(".2g");
-                obj.Draw("SAMEHISTOTEXT00")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_Normalized.png")
-              elif ("_pfType" in keyname2) :
-                obj.SetMarkerColor(1)
-                obj.SetLineColor(1)
-                obj.SetMarkerStyle(20)
-                obj.SetStats(0)
-                obj.Scale(1/obj.GetMaximum())
-                obj.GetYaxis().SetTitle("Efficiency")
-#                obj.GetXaxis().SetBinLabel(1,"AllTracks")
-#                obj.GetXaxis().SetBinLabel(2,"PFtracks")
-#                obj.GetXaxis().SetBinLabel(3,"isElectron")
-#                obj.GetXaxis().SetBinLabel(4,"isMuon")
-#                obj.GetXaxis().SetBinLabel(5,"isPhoton")
-#                obj.GetXaxis().SetBinLabel(6,"isChHadron")
-#                obj.GetXaxis().SetBinLabel(7,"isNeutHadron")
-#                obj.GetXaxis().SetBinLabel(8,"isUndefined")
-#                obj.GetXaxis().SetBinLabel(9,"notPFtrack")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.Draw("COLZ L")
-
-              elif ((keyname2 == "CutFlowEta") or (keyname2 == "CutFlowProbQ") or (keyname2 == "CutFlowPfType") or (keyname2 == "CutFlowProbQ")) :
-                obj.SetStats(0)
-                obj.GetYaxis().SetTitle("Efficiency")
-                obj.GetYaxis().SetTitle("")
-                obj.GetYaxis().SetTitle("")
-                if (keyname2 == "CutFlowPfType"):
-                  obj.Scale(1/obj.GetMaximum())
-                  for x in range(1,obj.GetNbinsX()+1) :
-                    localMax = obj.GetBinContent(x,1)
-                    for y in range(1,obj.GetNbinsY()+1) :
-                      value = obj.GetBinContent(x,y)
-                      if (value <= 0 or localMax <= 0) : continue
-                      obj.SetBinContent(x,y, value/localMax)
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                obj.Draw("COLZ")
-                can.SaveAs(name)
-              #and ("Mass" not in keyname2)
-              #and ("PostS" not in keyname2)
-              elif ("Max" not in keyname2) and ("Pred" not in keyname2) and ("PDF" not in keyname2):
-                obj.SetMarkerStyle(20)
-                obj.SetTitle("")
-#                obj.GetXaxis().SetTitle(axisXTitle)
-#                obj.GetYaxis().SetTitle(axisYTitle)
-                obj.Draw("COLZ")
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(name)
-              
-              if ("Angle" in keyname2 and obj.ClassName() == "TH2F" ) :
-                obj.Draw("COLZ")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_2d.png")
-              
-              ## ----------------------------------------------------------------------------------------------
-              # now let's plot everything in a logy scale
-              obj.SetMarkerStyle(20)
-              obj.SetMinimum(0.000001)
-#              obj.SetMaximum(10000)
-              if ("GenID" in keyname2 or "GenEnviromentID" in keyname2) :
-                continue
-                
-              if (keyname2=="CutFlowProbQ" or keyname2=="CutFlowPfType" or keyname2=="CutFlowEta" or "Vs" in keyname2) :
-#              or "PostPreS_IasPixelIhVsLayer" in keyname2 or "PostPreS_IasStripIhVsLayer" in keyname2
-                obj.SetMaximum(obj.GetMaximum())
-                obj.SetMinimum(0.000001)
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-                can.SetLogz()
-
-              else :
-                obj.SetMaximum(obj.GetMaximum()*100)
-                tex2.Draw("SAME")
-                tex3.Draw("SAME")
-                tex4.Draw("SAME")
-                tex5.Draw("SAME")
-#                obj.SetMinimum(0.0001)
-                can.SetLogy()
-
-                obj.SetTitle("")
-              can.SaveAs(fileName[0:-5] + "_Bin" + str(bin)+ "/" + keyname2 +  "_logy.png")
-              #can.SaveAs(name.replace(".png",".pdf"))
-              #can.SaveAs(name.replace(".png",".C"))
-              can.Close()
-
-          else:
-              print(keyname+"   "+newname + " does not inherit from TObject" )
-
-Mass = f.Get("/analyzer/BaseName/Mass")
-Mass_wPred = f.Get("/analyzer/BaseName/Pred_Mass_CB")
-if Mass_wPred :
-  tex5m = ROOT.TLatex(0.07,0.01,fileVersion)
-  tex5m.SetNDC();
-  tex5m.SetTextFont(52);
-  tex5m.SetTextSize(0.0185);
-  tex5m.SetLineWidth(2);
-  name = fileName[0:-5] + "_Bin" + str(bin)+ "/"
-  if not os.path.exists(os.path.dirname(name)): os.makedirs(os.path.dirname(name))
-  massBins = [10.,50.,100.,200.,300.,500.,1000.,4000.]
-  massBinsArray = np.array(massBins)
-  Mass_projY_NotRebinned = Mass.ProjectionY("Mass_projY_NotRebinned",ProjBin,ProjBin,"e")
-  Mass_wPred_projY_NotRebinned = Mass_wPred.ProjectionY("Mass_wPred_projY_NotRebinned",ProjBin,ProjBin,"e")
-
-  Mass_projY = ROOT.TH1F("Mass_projY" , "Mass_projY" , len(massBinsArray)-1, massBinsArray)
-  Mass_wPred_projY = ROOT.TH1F("Mass_wPred_projY" , "Mass_wPred_projY" , len(massBinsArray)-1, massBinsArray)
-
-  print("Mass_projY_NotRebinned.Integral(): ",Mass_projY_NotRebinned.Integral())
-  print("Mass_wPred_projY_NotRebinned.Integral(): ",Mass_wPred_projY_NotRebinned.Integral())
-
-  KSvalue = Mass_projY_NotRebinned.KolmogorovTest(Mass_wPred_projY_NotRebinned,"XD")
-  print("KS-test: "+str(KSvalue))
-
-  for i in range(1,len(massBinsArray)) :
-    voltBin = Mass_projY_NotRebinned.FindBin(massBinsArray[i-1])+1
-    currentBin = Mass_projY_NotRebinned.FindBin(massBinsArray[i])
-    Mass_projYCont = 0.0
-    Mass_wPred_projYCont = 0.0
-    Mass_projYCont_err2 = 0.0
-    Mass_wPred_projYCont_err2 = 0.0
-    for j in range(voltBin,currentBin) :
-      Mass_projYCont += Mass_projY_NotRebinned.GetBinContent(j)
-      Mass_projYCont_err2 += (Mass_projY_NotRebinned.GetBinError(j) * Mass_projY_NotRebinned.GetBinError(j))
-      
-      Mass_wPred_projYCont += Mass_wPred_projY_NotRebinned.GetBinContent(j)
-      Mass_wPred_projYCont_err2 += (Mass_wPred_projY_NotRebinned.GetBinError(j)*Mass_wPred_projY_NotRebinned.GetBinError(j))
-    Mass_projY.SetBinContent(i,Mass_projYCont)
-    Mass_projY.SetBinError(i,np.sqrt(Mass_projYCont_err2))
-    Mass_wPred_projY.SetBinContent(i,Mass_wPred_projYCont)
-    Mass_wPred_projY.SetBinError(i,np.sqrt(Mass_wPred_projYCont_err2))
-    
-
-  print("----------------------------------------------")
-  KSvalue2 = Mass_projY.KolmogorovTest(Mass_wPred_projY,"XD")
-  print("KS-test after rebinning: "+str(KSvalue2))
-
-  Mass_projY.SetMarkerColor(1)
-  Mass_projY.SetLineColor(1)
-  Mass_projY.SetMarkerStyle(20)
-  Mass_projY.SetTitle("")
-  Mass_projY.GetXaxis().SetTitleSize(0.05)
-  Mass_projY.GetXaxis().SetTitleOffset(1)
-  Mass_projY.GetXaxis().SetTitle("Mass [GeV]")
-  Mass_projY.GetYaxis().SetTitle("Tracks/bin")
-  Mass_projY.GetYaxis().SetTitleSize(0.05)
-  Mass_projY.GetYaxis().SetLabelSize(0.03)
-  Mass_projY.GetYaxis().SetTitleOffset(1)
-  Mass_projY.SetStats(0)
-#  Mass_projY.GetYaxis().SetRangeUser(0.001,Mass_projY.GetMaximum())
-
-
-  Mass_wPred_projY.SetMarkerColor(2)
-  Mass_wPred_projY.SetLineColor(2)
-  Mass_wPred_projY.SetMarkerStyle(20)
-  Mass_wPred_projY.SetTitle("")
-  Mass_wPred_projY.GetXaxis().SetTitleSize(0.05)
-  Mass_wPred_projY.GetXaxis().SetTitleOffset(1)
-  Mass_wPred_projY.GetXaxis().SetTitle("Mass [GeV]")
-  Mass_wPred_projY.GetYaxis().SetTitle("Tracks/bin")
-  Mass_wPred_projY.GetYaxis().SetTitleSize(0.05)
-  Mass_wPred_projY.GetYaxis().SetTitleOffset(1)
-  Mass_wPred_projY.GetYaxis().SetLabelSize(0.03)
-  Mass_wPred_projY.SetStats(0)
-  
-  Mass_projY_NotRebinned.SetMarkerColor(1)
-  Mass_projY_NotRebinned.SetLineColor(1)
-  Mass_projY_NotRebinned.SetMarkerStyle(20)
-  Mass_projY_NotRebinned.SetTitle("")
-  Mass_projY_NotRebinned.GetXaxis().SetTitleSize(0.05)
-  Mass_projY_NotRebinned.GetXaxis().SetTitleOffset(1)
-  Mass_projY_NotRebinned.GetXaxis().SetTitle("Mass [GeV]")
-  Mass_projY_NotRebinned.GetYaxis().SetTitle("Tracks/bin")
-  Mass_projY_NotRebinned.GetYaxis().SetTitleSize(0.05)
-  Mass_projY_NotRebinned.GetYaxis().SetTitleOffset(1)
-  Mass_projY_NotRebinned.SetStats(0)
-#  Mass_projY_NotRebinned.GetYaxis().SetRangeUser(0.001,Mass_projY_NotRebinned.GetMaximum())
-
-
-  Mass_wPred_projY_NotRebinned.SetMarkerColor(2)
-  Mass_wPred_projY_NotRebinned.SetLineColor(2)
-  Mass_wPred_projY_NotRebinned.SetMarkerStyle(20)
-  Mass_wPred_projY_NotRebinned.SetTitle("")
-  Mass_wPred_projY_NotRebinned.GetXaxis().SetTitleSize(0.05)
-  Mass_wPred_projY_NotRebinned.GetXaxis().SetTitleOffset(1)
-  Mass_wPred_projY_NotRebinned.GetXaxis().SetTitle("Mass [GeV]")
-  Mass_wPred_projY_NotRebinned.GetYaxis().SetTitle("Tracks/bin")
-  Mass_wPred_projY_NotRebinned.GetYaxis().SetTitleSize(0.05)
-  Mass_wPred_projY_NotRebinned.GetYaxis().SetTitleOffset(1)
-  Mass_wPred_projY_NotRebinned.SetStats(0)
-
-
-  print("Mass_projY.Integral(): ",Mass_projY.Integral())
-  print("Mass_wPred_projY.Integral(): ",Mass_wPred_projY.Integral())
-
-  legMass =  ROOT.TLegend(.45,.75,.80,.9,"","brNDC")
-  legMass.SetTextFont(42)
-  legMass.SetTextSize(0.035)
-  legMass.SetBorderSize(1);
-  legMass.SetLineColor(1);
-  legMass.SetLineStyle(1);
-  legMass.SetLineWidth(1);
-  legMass.SetFillColor(0);
-  legMass.SetFillStyle(1001);
-  legMass.AddEntry(Mass_wPred_projY,"Prediction","LP")
-  legMass.AddEntry(Mass_projY,"Observation","LP")
-
-  tex4 = ROOT.TLatex(0.7,0.93,"K-S test v2: "+str(round(KSvalue2,4)));
-  tex4.SetNDC();
-  tex4.SetTextFont(52);
-  tex4.SetTextSize(0.0485);
-  tex4.SetLineWidth(2);
-
-  cMass_projY = ROOT.TCanvas('cMass_projY', 'cMass_projY',800,800)
-
-  rp = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY, "diffsigerrasym")
-
-  rp.SetH1DrawOpt("P");
-  rp.SetH2DrawOpt("P");
-
-  rp.Draw()
-  #rp.GetUpperPad().BuildLegend()
-  rp.SetLeftMargin(0.13);
-  rp.SetRightMargin(0.05);
-  rp.SetUpTopMargin(0.1);
-  rp.SetLowTopMargin(0.02);
-  rp.SetLowBottomMargin(0.35);
-
-  max = Mass_projY.GetMaximum()*1.2
-  Mass_projY.SetMaximum(max);
-  rp.GetLowerRefGraph().SetMinimum(-4);
-  rp.GetLowerRefGraph().SetMaximum(4);
-  #rp.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-  #rp.GetLowerRefGraph().SetLineColor(0) #0
-  rp.GetLowerRefGraph().SetMarkerStyle(20)
-  rp.GetLowerRefGraph().SetMarkerSize(1);
-  rp.GetLowYaxis().SetNdivisions(505);
-  rp.GetLowerRefYaxis().SetTitle("Pull");
-  rp.GetLowerRefYaxis().SetTitleSize(0.05);
-  rp.GetLowerRefYaxis().SetTitleOffset(1);
-  rp.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-  rp.GetLowerRefXaxis().SetTitleSize(0.05);
-  rp.GetLowerRefXaxis().SetTitleOffset(0.8);
-  rp.GetLowerRefXaxis().SetLabelSize(0.035);
-  cMass_projY.Modified()
-  cMass_projY.Update()
-  #Mass_projY.Draw()
-  #Mass_wPred_projY.Draw("SAME")
-  #rp.Draw("X")
-
-  rp.GetUpperPad().cd();
-  legMass.Draw("SAME")
-  tex2.Draw("SAME")
-  tex3.Draw("SAME")
-  tex4.Draw("SAME")
-  tex5m.Draw("SAME")
-  
-  name = newFileDir + "/cMass.png"
-  cMass_projY.SaveAs(name)
-  
-  
-  #############################################################################
-  cMass_projY_log = ROOT.TCanvas('cMass_projY_log', 'cMass_projY_log',800,800)
-  cMass_projY_log.SetLogy()
-
-  rp2 = ROOT.TRatioPlot(Mass_projY,Mass_wPred_projY, "diffsigerrasym")
-
-  rp2.SetH1DrawOpt("P");
-  rp2.SetH2DrawOpt("P");
-
-  rp2.Draw()
-  #rp2.GetUpperPad().BuildLegend()
-  rp2.SetLeftMargin(0.13);
-  rp2.SetRightMargin(0.05);
-  rp2.SetUpTopMargin(0.1);
-  rp2.SetLowTopMargin(0.02);
-  rp2.SetLowBottomMargin(0.35);
-
-  max2 = np.maximum(Mass_projY.GetMaximum()*10,10000)
-  Mass_projY.SetMaximum(max2);
-  Mass_projY.SetMinimum(0.000001);
-#  Mass_projY.GetYaxis().SetRangeUser(0.1,100)
-  rp2.GetLowerRefGraph().SetMinimum(-4);
-  rp2.GetLowerRefGraph().SetMaximum(4);
-  #rp2.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-  #rp2.GetLowerRefGraph().SetLineColor(0) #0
-  rp2.GetLowerRefGraph().SetMarkerStyle(20)
-  rp2.GetLowerRefGraph().SetMarkerSize(1);
-  rp2.GetLowYaxis().SetNdivisions(505);
-  rp2.GetLowerRefYaxis().SetTitle("Pull");
-  rp2.GetLowerRefYaxis().SetTitleSize(0.05);
-  rp2.GetLowerRefYaxis().SetTitleOffset(1);
-  rp2.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-  rp2.GetLowerRefXaxis().SetTitleSize(0.05);
-  rp2.GetLowerRefXaxis().SetTitleOffset(0.8);
-  rp2.GetLowerRefXaxis().SetLabelSize(0.035);
-  cMass_projY_log.Modified()
-  cMass_projY_log.Update()
-  #Mass_projY.Draw()
-  #Mass_wPred_projY.Draw("SAME")
-  #rp2.Draw("X")
-
-  rp2.GetUpperPad().cd();
-  legMass.Draw("SAME")
-  tex2.Draw("SAME")
-  tex3.Draw("SAME")
-  tex4.Draw("SAME")
-  tex5m.Draw("SAME")
-  
-  name = newFileDir + "/cMass_log.png"
-  cMass_projY_log.SaveAs(name)
-  
-  cMassOrig_projY = ROOT.TCanvas('cMassOrig_projY', 'cMassOrig_projY',800,800)
-  rp0 = ROOT.TRatioPlot(Mass_projY_NotRebinned,Mass_wPred_projY_NotRebinned, "diffsigerrasym")
-  rp0.Draw()
-  rp0.SetH1DrawOpt("P");
-  rp0.SetH2DrawOpt("P");
-  rp0.SetLeftMargin(0.13);
-  rp0.SetRightMargin(0.05);
-  rp0.SetUpTopMargin(0.1);
-  rp0.SetLowTopMargin(0.02);
-  rp0.SetLowBottomMargin(0.35);
-  rp0.GetLowerRefGraph().SetMinimum(-4);
-  rp0.GetLowerRefGraph().SetMaximum(4);
-  #rp0.GetLowerRefGraph().SetMarkerColor(ROOT.kGreen+2)
-  #rp0.GetLowerRefGraph().SetLineColor(0) #0
-  rp0.GetLowerRefGraph().SetMarkerStyle(20)
-  rp0.GetLowerRefGraph().SetMarkerSize(1);
-  rp0.GetLowYaxis().SetNdivisions(505);
-  rp0.GetLowerRefYaxis().SetTitle("Pull");
-  rp0.GetLowerRefYaxis().SetTitleSize(0.05);
-  rp0.GetLowerRefYaxis().SetTitleOffset(1);
-  rp0.GetLowerRefYaxis().SetLabelSize(0.035);
-
-
-  rp0.GetLowerRefXaxis().SetTitleSize(0.05);
-  rp0.GetLowerRefXaxis().SetTitleOffset(0.8);
-  rp0.GetLowerRefXaxis().SetLabelSize(0.035);
-  cMassOrig_projY.Modified()
-  cMassOrig_projY.Update()
-
-  rp0.GetUpperPad().cd();
-  legMass.Draw("SAME")
-  tex2.Draw("SAME")
-  tex3.Draw("SAME")
-  tex4.Draw("SAME")
-  tex5m.Draw("SAME")
-  cMassOrig_projY.SaveAs(newFileDir + "/cMass_NotRebinned.png")
-  
-  cMassOrig_projY_log = ROOT.TCanvas('cMassOrig_projY_log', 'cMassOrig_projY_log',800,800)
-  cMassOrig_projY_log.SetLogy()
-  rp0.Draw()
-  legMass.Draw("SAME")
-  tex2.Draw("SAME")
-  tex3.Draw("SAME")
-  tex4.Draw("SAME")
-  tex5m.Draw("SAME")
-  cMassOrig_projY_log.SaveAs(newFileDir + "/cMass_logy_NotRebinned.png")
-  
-
-
-os.system("cp forWebpage/* "+newFileDir+"/.")
-os.system("cp forWebpage/.htaccess "+newFileDir+"/.")
-print("scp -r "+ newFileDir + " tvami@lxplus.cern.ch:/eos/home-t/tvami/www/projects/HSCP/2022CodeV"+codeVersion+"/.")
diff --git a/Analyzer/test/Tamas/r2.py b/Analyzer/test/Tamas/r2.py
deleted file mode 100644
index 2a9f6e5..0000000
--- a/Analyzer/test/Tamas/r2.py
+++ /dev/null
@@ -1,169 +0,0 @@
-import ROOT, sys, os, time, re, numpy
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-from tqdm import tqdm
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-ROOT.gROOT.SetBatch(True)
-ROOT.gStyle.SetPadRightMargin(.15)
-ROOT.gStyle.SetPadTopMargin(0.1);
-ROOT.gStyle.SetPadBottomMargin(0.14);
-ROOT.gStyle.SetPadLeftMargin(0.15);
-
-BackgroundSamples = [
-#"crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root",
-##"crab_Analysis_2018_WJetsToLNu_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_WJetsToLNu_0J_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_WJetsToLNu_1J_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_WJetsToLNu_2J_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-1000_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-1400_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-1600_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-1800_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-2000_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-2200_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-2400_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-2600_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-500_CodeV"+codeVersion+"_v1.root",
-#"crab_Analysis_2018_HSCPgluino_M-800_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-200_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-247_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-308_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-432_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-557_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-651_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-745_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-871_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-1029_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-1218_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-1409_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPpairStau_M-1599_CodeV"+codeVersion+"_v1.root",
-]
-
-#intLumi = 4598.37 #10.0 #
-intLumi = 2000.0
-#intLumi = 30000.0
-
-crossSectionArray = {
-'crab_Analysis_2018_QCD_Pt-20_MuEnrichedPt15_CodeV'+codeVersion+'_v1.root' : 239000, #+-755.0,
-'crab_Analysis_2018_QCD_Pt-15To20_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2797000, #+-8800.0,
-'crab_Analysis_2018_QCD_Pt-20To30_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 2518000, #+-7940.0,
-'crab_Analysis_2018_QCD_Pt-30To50_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 1361000, #+-4263.0,
-'crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 377800.0, #+-1184.0,
-'crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 88620.0, #+-275.1
-'crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 21070.0, #+-65.28
-'crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' : 7019.0, #+-21.61
-'crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  622.4, #+-1.891
-'crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  58.86, #+-0.1776
-'crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  18.22, #+-0.05471
-'crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  3.25, #+-0.0148
-'crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV'+codeVersion+'_v1.root' :  1.61, #+-
-# 61526.7, #+-	61526.7, WJetsToLNu, this is also what FCP used, (NNLO)
-'crab_Analysis_2018_WJetsToLNu_0J_CodeV'+codeVersion+'_v1.root' :  53330.0,#	+-90.89
-'crab_Analysis_2018_WJetsToLNu_1J_CodeV'+codeVersion+'_v1.root' : 8875.0, #	+-55.31
-'crab_Analysis_2018_WJetsToLNu_2J_CodeV'+codeVersion+'_v1.root' :  3338.0, #	+-34.64
-'crab_Analysis_2018_TTToHadronic_CodeV'+codeVersion+'_v1.root' : 377.96, # or 377.96,
-'crab_Analysis_2018_TTToSemiLeptonic_CodeV'+codeVersion+'_v1.root' : 365.35, # or 65.34
-'crab_Analysis_2018_TTTo2L2Nu_CodeV'+codeVersion+'_v1.root' :  88.29, # or 687.1 or 91.47600
-'crab_Analysis_2018_HSCPgluino_M-500_CodeV'+codeVersion+'_v1.root' :   33800,
-'crab_Analysis_2018_HSCPgluino_M-800_CodeV'+codeVersion+'_v1.root' :   1810,
-'crab_Analysis_2018_HSCPgluino_M-1000_CodeV'+codeVersion+'_v1.root' :  385 ,
-'crab_Analysis_2018_HSCPgluino_M-1400_CodeV'+codeVersion+'_v1.root' :  28.4 ,
-'crab_Analysis_2018_HSCPgluino_M-1600_CodeV'+codeVersion+'_v1.root' :  8.87 ,
-'crab_Analysis_2018_HSCPgluino_M-1800_CodeV'+codeVersion+'_v1.root' :  2.93 ,
-'crab_Analysis_2018_HSCPgluino_M-2000_CodeV'+codeVersion+'_v1.root' :  1.01 ,
-'crab_Analysis_2018_HSCPgluino_M-2200_CodeV'+codeVersion+'_v1.root' :  0.356 ,
-'crab_Analysis_2018_HSCPgluino_M-2400_CodeV'+codeVersion+'_v1.root' :  0.128 ,
-'crab_Analysis_2018_HSCPgluino_M-2600_CodeV'+codeVersion+'_v1.root' :  0.0462 ,
-'crab_Analysis_2018_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 0.001,
-'crab_Analysis_2018_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.001,
-'crab_Analysis_2018_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.001,
-'crab_Analysis_2018_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.001,
-'crab_Analysis_2018_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.001  ,
-'crab_Analysis_2018_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.001,
-'crab_Analysis_2018_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 0.001,
-'crab_Analysis_2018_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 0.001,
-'crab_Analysis_2018_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 0.001,
-'crab_Analysis_2018_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' : 0.001, #fake
-'crab_Analysis_2018_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' : 0.001, #fake
-'crab_Analysis_2018_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' : 0.001  ,
-}
-
-## TTBar is 832 pb (NNLO)
-# gluino x-sections from
-# https://github.com/fuenfundachtzig/xsec/blob/master/json/pp13_gluino_NNLO%2BNNLL.json#L1820
-
-fileInArray = []
-for sample in BackgroundSamples:
-  fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
-
-for fileIn in fileInArray:
-  if not (fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents")):
-    print("NumEvents not found, exit")
-    continue
-  
-  nEvetsPreTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(1)
-  nEvetsPostTrig = fileIn.Get("HSCParticleAnalyzer/BaseName/NumEvents").GetBinContent(2)
-  if (nEvetsPreTrig == 0):
-    print("nEvetsPreTrig is zero, exiting")
-    continue
-  nameFromTFile = str(fileIn)[str(fileIn).find("Name")+6:str(fileIn).find("Title")-1]
-  weight = intLumi*crossSectionArray.get(nameFromTFile)/nEvetsPreTrig
-  
-  for i in range(0, fileIn.GetListOfKeys().GetEntries()):
-    dirname = fileIn.GetListOfKeys().At(i).GetName()
-    curr_dir = fileIn.GetDirectory(dirname)
-#    print("dirname: "+dirname)
-    if not (curr_dir) :
-      continue
-    for i in range(0, curr_dir.GetListOfKeys().GetEntries()):
-        keyname = curr_dir.GetListOfKeys().At(i).GetName()
-        curr_dir2 = fileIn.GetDirectory(dirname+"/"+keyname)
-        if not (curr_dir2) :
-          continue
-        for j in tqdm(range(0, curr_dir2.GetListOfKeys().GetEntries())):
-          keyname2 = curr_dir2.GetListOfKeys().At(j).GetName()
-#          print("keyname2: "+keyname2)
-          newname = dirname + "/" + keyname+ "/" + keyname2
-          obj = fileIn.Get(newname)
-          if not (obj) : continue
-          if (obj.GetEntries() == 0 ) :
-#            print("obj.GetEntries() == 0")
-            continue
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
-          if obj.InheritsFrom("TObject"):
-            obj.Scale(weight)
-  fileIn.Write("",ROOT.TObject.kOverwrite)
-  fileIn.Close()
-
-print("hadd crab_Analysis_2018_AllBackground_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu_*J_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root")
-
-#os.system
-print("hadd crab_Analysis_2018_AllQCD_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-50To80_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-80To120_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-120To170_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-170To300_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-300To470_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-470To600_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-600To800_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-800To1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_QCD_Pt-1000_MuEnrichedPt5_CodeV"+codeVersion+"_v1.root")
-
-print("hadd crab_Analysis_2018_AllTTbar_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToHadronic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTToSemiLeptonic_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_TTTo2L2Nu_CodeV"+codeVersion+"_v1.root")
-
-print("hadd crab_Analysis_2018_AllWJets_CodeV"+codeVersion+"_v1.root crab_Analysis_2018_WJetsToLNu*J_CodeV"+codeVersion+"_v1.root ")
-
-#if not os.path.exists("CodeV"+codeVersion): os.mkdir("CodeV"+codeVersion)
-#
-#os.system("mv *"+codeVersion+"*root "+ "CodeV"+codeVersion+"/.")
-#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_SingleMuon_Run2018C_CodeV*"+codeVersion+"_v1.root .")
-#os.system("cp CodeV"+codeVersion+"/crab_Analysis_2018_HSCPgluino_M-*_CodeV*"+codeVersion+"_v1.root .")
-#os.system("mv CodeV"+codeVersion+"/crab_Analysis_2018_All*"+codeVersion+"_v1.root .")
diff --git a/Analyzer/test/Tamas/rescaleAndPrintHadd.py b/Analyzer/test/Tamas/rescaleAndPrintHadd.py
index f4c904f..7ead5ff 100644
--- a/Analyzer/test/Tamas/rescaleAndPrintHadd.py
+++ b/Analyzer/test/Tamas/rescaleAndPrintHadd.py
@@ -113,16 +113,52 @@ BackgroundSamples = [
 "crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-500_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge1e_M-600_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-500_CodeV"+codeVersion+"_v1.root",
-"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV"+codeVersion+"_v1.root",
 "crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-3000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-4000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-5000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-6000_CodeV"+codeVersion+"_v1.root",
+"crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-7000_CodeV"+codeVersion+"_v1.root",
 ]
 
 #intLumi = 4598.37 #10.0 #
@@ -182,15 +218,15 @@ crossSectionArray = {
 'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2200_CodeV'+codeVersion+'_v1.root' :  0.000356,
 'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
 'crab_Analysis_2018_HSCPgluinoOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
-'crab_Analysis_2018_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 0.020313,
-'crab_Analysis_2018_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.014238,
-'crab_Analysis_2018_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.006353,
-'crab_Analysis_2018_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.001455,
-'crab_Analysis_2018_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.000411,
-'crab_Analysis_2018_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.000217,
-'crab_Analysis_2018_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 9.42939e-5,
-'crab_Analysis_2018_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 3.77201e-5,
-'crab_Analysis_2018_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 1.09419e-5,
+'crab_Analysis_2018_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 0.0303143567,
+'crab_Analysis_2018_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.01354210931669562,
+'crab_Analysis_2018_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.005617969677491303,
+'crab_Analysis_2018_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.0013205993021946,
+'crab_Analysis_2018_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.0003982919391389629,
+'crab_Analysis_2018_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.00018170273864904894,
+'crab_Analysis_2018_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 8.760649473515753e-5,
+'crab_Analysis_2018_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 3.548748280460506e-5,
+'crab_Analysis_2018_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 1.1684554271190975e-5,
 'crab_Analysis_2018_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
 'crab_Analysis_2018_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
 'crab_Analysis_2018_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' : 0.00057/1000.  ,
@@ -228,25 +264,72 @@ crossSectionArray = {
 'crab_Analysis_2018_HSCPstop_M-2200_CodeV'+codeVersion+'_v1.root' :  5e-06,
 'crab_Analysis_2018_HSCPstop_M-2400_CodeV'+codeVersion+'_v1.root' :  1.71e-06,
 'crab_Analysis_2018_HSCPstop_M-2600_CodeV'+codeVersion+'_v1.root' :  5.9e-07,
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-200_CodeV'+codeVersion+'_v1.root' :  1.1E-01,
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV'+codeVersion+'_v1.root' :  7.3E-02,
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-500_CodeV'+codeVersion+'_v1.root' :  1.2E-03,
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV'+codeVersion+'_v1.root' :  2.6E-04,
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1000_CodeV'+codeVersion+'_v1.root' :  7.6E-05,
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1400_CodeV'+codeVersion+'_v1.root' :  8.5E-06,
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1800_CodeV'+codeVersion+'_v1.root' :  1.2E-06,
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV'+codeVersion+'_v1.root' :  8.2E-07, #fake
-'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV'+codeVersion+'_v1.root' :  1.2E-07,#fake
-'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV'+codeVersion+'_v1.root' :  3.0E-01,
-'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV'+codeVersion+'_v1.root' :  2.3E-02,
-'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-500_CodeV'+codeVersion+'_v1.root' :  3.5E-03,
-'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV'+codeVersion+'_v1.root' :  2.4E-04,
-'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV'+codeVersion+'_v1.root' :  2.7E-05,
-'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV'+codeVersion+'_v1.root' :  3.9E-06,
-'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV'+codeVersion+'_v1.root' :  8.2E-07, #fake
-'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV'+codeVersion+'_v1.root' :  1.2E-07,#fake
+# tau-prime comming from https://gitlab.cern.ch/-/snippets/2617
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-200_CodeV'+codeVersion+'_v1.root' :  1.833e-01, # ± 6.9e-04
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-400_CodeV'+codeVersion+'_v1.root' :  1.361e-02, # ± 5.5e-05
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-600_CodeV'+codeVersion+'_v1.root' :  2.340e-03, # ± 8.5e-06
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-800_CodeV'+codeVersion+'_v1.root' :  5.697e-04, # ± 7.3e-07
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1000_CodeV'+codeVersion+'_v1.root' : 1.638e-04, # ± 2.1e-07
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1400_CodeV'+codeVersion+'_v1.root' : 1.869e-05, # ± 1.0e-07
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-1800_CodeV'+codeVersion+'_v1.root' : 2.641e-06, # ± 1.5e-08
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2200_CodeV'+codeVersion+'_v1.root' : 4.175e-07, # ± 3.1e-09
+'crab_Analysis_2018_HSCPtauPrimeCharge1e_M-2600_CodeV'+codeVersion+'_v1.root' : 7.282e-08, # ± 3.9e-10
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_CodeV'+codeVersion+'_v1.root' :  7.332e-01, # 2.8e-03
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_CodeV'+codeVersion+'_v1.root' :  5.440e-02, # 2.2e-04
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_CodeV'+codeVersion+'_v1.root' :  9.363e-03, # 3.4e-05
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_CodeV'+codeVersion+'_v1.root' :  2.280e-03, # 7.7e-06
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_CodeV'+codeVersion+'_v1.root' : 6.553e-04, # 2.9e-06
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_CodeV'+codeVersion+'_v1.root' : 7.477e-05, # 4.1e-07
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1800_CodeV'+codeVersion+'_v1.root' : 1.056e-05, # 6.2e-08
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2200_CodeV'+codeVersion+'_v1.root' : 1.670e-06, # 1.2e-08
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-2600_CodeV'+codeVersion+'_v1.root' : 2.913e-07, # 1.6e-09
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-3000_CodeV'+codeVersion+'_v1.root' : 0.000451036,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-4000_CodeV'+codeVersion+'_v1.root' : 4.7749E-5,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-5000_CodeV'+codeVersion+'_v1.root' : 5.34376E-6,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-6000_CodeV'+codeVersion+'_v1.root' : 5.45292E-7,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-200_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8, #extrapolated
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-400_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-600_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-800_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1000_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1200_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
+'crab_Analysis_2018_HSCPtauPrimeCharge2e_M-1400_ZPrime_M-7000_CodeV'+codeVersion+'_v1.root' : 5.2E-8,
 }
 
+# ZPrime --> TauPrime with SSM
+# 0.00147992 --> 3 TeV
+# 0.000159354 --> 4 TeV
+# 1.76729E-5 --> 5 TeV
+# 1.80017E-6 --> 6 TeV
+# 1.9E-7 --> 7 TeV (extrapolated with exp(-2.23088*x + 0.155437) when x = 7)
+
+# ZPrime --> TauPrime with Z'Psi
+# exp(-2.27921x-0.809873)
+
 ## TTBar is 832 pb (NNLO)
 # gluino x-sections from
 # https://github.com/fuenfundachtzig/xsec/blob/master/json/pp13_gluino_NNLO%2BNNLL.json#L1820
@@ -254,6 +337,8 @@ crossSectionArray = {
 fileInArray = []
 for sample in BackgroundSamples:
   if not os.path.exists(sample): continue
+#  if not ("1400" in sample): continue
+#  if not ("ZPrimeMass3000" in sample): continue
   fileInArray.append(ROOT.TFile.Open(sample,"UPDATE"))
 
 for fileIn in fileInArray:
@@ -271,6 +356,8 @@ for fileIn in fileInArray:
     print("No crossSectionArray for "+str(nameFromTFile))
     continue
   weight = intLumi*crossSectionArray.get(nameFromTFile)/nEvetsPreTrig
+  print(nameFromTFile+" is reweighted with " + str(weight))
+  if (abs(1-weight) < 0.0001) : continue
   
   for i in range(0, fileIn.GetListOfKeys().GetEntries()):
     dirname = fileIn.GetListOfKeys().At(i).GetName()
@@ -292,8 +379,7 @@ for fileIn in fileInArray:
           if (obj.GetEntries() == 0 ) :
 #            print("obj.GetEntries() == 0")
             continue
-          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"):
-            continue
+          if (keyname2=="HscpCandidates" or keyname2=="GenHscpCandidates"): continue
           if obj.InheritsFrom("TObject"):
             obj.Scale(weight)
   fileIn.Write("",ROOT.TObject.kOverwrite)
diff --git a/Analyzer/test/Tamas/rescaleAndPrintHadd2017.py b/Analyzer/test/Tamas/rescaleAndPrintHadd2017.py
index ed1b97e..a75cb99 100644
--- a/Analyzer/test/Tamas/rescaleAndPrintHadd2017.py
+++ b/Analyzer/test/Tamas/rescaleAndPrintHadd2017.py
@@ -183,14 +183,14 @@ crossSectionArray = {
 'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2400_CodeV'+codeVersion+'_v1.root' :  0.000128,
 'crab_Analysis_2017_HSCPgluinoOnlyNeutral_M-2600_CodeV'+codeVersion+'_v1.root' :  4.62e-5,
 'crab_Analysis_2017_HSCPpairStau_M-200_CodeV'+codeVersion+'_v1.root' : 0.0303143567,
-'crab_Analysis_2017_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.0129202991,
-'crab_Analysis_2017_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.0048020173,
-'crab_Analysis_2017_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.0012159719,
-'crab_Analysis_2017_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.000389904,
-'crab_Analysis_2017_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.0001234716,
-'crab_Analysis_2017_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 5.8632201e-5,
-'crab_Analysis_2017_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 2.9178605e-5,
-'crab_Analysis_2017_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 1.50415955e-5,
+'crab_Analysis_2017_HSCPpairStau_M-247_CodeV'+codeVersion+'_v1.root' : 0.01354210931669562,
+'crab_Analysis_2017_HSCPpairStau_M-308_CodeV'+codeVersion+'_v1.root' : 0.005617969677491303,
+'crab_Analysis_2017_HSCPpairStau_M-432_CodeV'+codeVersion+'_v1.root' : 0.0013205993021946,
+'crab_Analysis_2017_HSCPpairStau_M-557_CodeV'+codeVersion+'_v1.root' : 0.0003982919391389629,
+'crab_Analysis_2017_HSCPpairStau_M-651_CodeV'+codeVersion+'_v1.root' : 0.00018170273864904894,
+'crab_Analysis_2017_HSCPpairStau_M-745_CodeV'+codeVersion+'_v1.root' : 8.760649473515753e-5,
+'crab_Analysis_2017_HSCPpairStau_M-871_CodeV'+codeVersion+'_v1.root' : 3.548748280460506e-5,
+'crab_Analysis_2017_HSCPpairStau_M-1029_CodeV'+codeVersion+'_v1.root' : 1.1684554271190975e-5,
 'crab_Analysis_2017_HSCPpairStau_M-1218_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
 'crab_Analysis_2017_HSCPpairStau_M-1409_CodeV'+codeVersion+'_v1.root' : 0.00057/1000., #fake
 'crab_Analysis_2017_HSCPpairStau_M-1599_CodeV'+codeVersion+'_v1.root' : 0.00057/1000.  ,
diff --git a/Analyzer/test/Tamas/singleThreadDownloadCrabJobs.py b/Analyzer/test/Tamas/singleThreadDownloadCrabJobs.py
deleted file mode 100644
index 35f3207..0000000
--- a/Analyzer/test/Tamas/singleThreadDownloadCrabJobs.py
+++ /dev/null
@@ -1,33 +0,0 @@
-import sys, os
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python3 %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = []
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
- 
-for fname in os.listdir("crab_projects") :
-  if (fname.find(codeVersion)>0) :
-    datasetList.append("crab_projects/"+fname)
-
-for i in datasetList:
-  print("Download for sample "+i)
-#  createTask = "crab remake --task="+i
-#  os.system(createTask)
-#  outTask = "crab out -d "+i[(i.find('crab')):]+" --checksum=no --jobids 12"
-  outTask = "crab out -d "+i+" --checksum=no --jobids 2"
-  os.system(outTask)
-#  print(outTask)
-  haddTask = "hadd "+i[(i.find('crab_projects'))+14:]+".root "+i[(i.find('crab_projects')):]+"/results/*root"
-#  os.system(haddTask)
-#  print(haddTask)
-  backgroundPred = "BackgroundPrediction -f "+i[(i.find('crab_projects'))+14:]+".root"
-#  os.system(backgroundPred)
-#  print(backgroundPred)
diff --git a/Analyzer/test/Tamas/submitCrabJobsBackgroundOnlyQCD170_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsBackgroundOnlyQCD170_woProbQ.py
deleted file mode 100644
index 003bb83..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsBackgroundOnlyQCD170_woProbQ.py
+++ /dev/null
@@ -1,75 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 800
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_woProbQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_woProbQ.py 4crab_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
-  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsBackgroundOnlyQCD460to600_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsBackgroundOnlyQCD460to600_woProbQ.py
deleted file mode 100644
index 5d1dd14..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsBackgroundOnlyQCD460to600_woProbQ.py
+++ /dev/null
@@ -1,75 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_woProbQ_Debug.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_Debug_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 800
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_woProbQ_Debug.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_woProbQ_Debug.py 4crab_toSubmit_woProbQ_debug.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ_debug.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ_debug.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ_debug.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_woProbQ_debug.py")
-  os.system("mv 4crab_toSubmit_woProbQ_debug.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsBackgroundOnly_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsBackgroundOnly_woProbQ.py
deleted file mode 100644
index 32d606a..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsBackgroundOnly_woProbQ.py
+++ /dev/null
@@ -1,90 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/QCD_Pt-50To80_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/QCD_Pt-80To120_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/QCD_Pt-120To170_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-600To800_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-800To1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/WJetsToLNu_1J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/WJetsToLNu_2J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 800
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_woProbQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_woProbQ.py 4crab_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
-  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsBackgroundOnly_woProbQ_maxStat.py b/Analyzer/test/Tamas/submitCrabJobsBackgroundOnly_woProbQ_maxStat.py
deleted file mode 100644
index 529e1cb..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsBackgroundOnly_woProbQ_maxStat.py
+++ /dev/null
@@ -1,89 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-#"/QCD_Pt-50To80_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-#"/QCD_Pt-80To120_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-#"/QCD_Pt-120To170_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-#"/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-#"/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-#"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-#"/QCD_Pt-600To800_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-#"/QCD_Pt-800To1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-#"/QCD_Pt-1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/WJetsToLNu_1J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/WJetsToLNu_2J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-#"/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-#"/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-#"/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-#"/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_woProbQ_maxStat.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 2000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_woProbQ_maxStat.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_woProbQ_maxStat.py 4crab_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
-  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsBackgroundQCDOnly_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsBackgroundQCDOnly_woProbQ.py
deleted file mode 100644
index 39b2648..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsBackgroundQCDOnly_woProbQ.py
+++ /dev/null
@@ -1,80 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/QCD_Pt-50To80_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/QCD_Pt-80To120_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/QCD_Pt-120To170_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-170To300_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-600To800_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-800To1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-1000_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 800
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.blacklist = ['T2_US_Nebraska']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_woProbQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_woProbQ.py 4crab_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
-  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsBackgroundTTbarOnly_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsBackgroundTTbarOnly_woProbQ.py
deleted file mode 100644
index bf02641..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsBackgroundTTbarOnly_woProbQ.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/TTToSemiLeptonic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/TTToHadronic_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/TTTo2L2Nu_TuneCP5_13TeV-powheg-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_TTbar_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 800
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.blacklist = ['T2_US_Nebraska']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_TTbar_woProbQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_TTbar_woProbQ.py 4crab_toSubmit_TTbar_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_TTbar_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_TTbar_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_TTbar_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_TTbar_woProbQ.py")
-  os.system("mv 4crab_toSubmit_TTbar_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsBackgroundWJetsOnly_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsBackgroundWJetsOnly_woProbQ.py
deleted file mode 100644
index 6acc9a8..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsBackgroundWJetsOnly_woProbQ.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/WJetsToLNu_0J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/WJetsToLNu_1J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/WJetsToLNu_2J_TuneCP5_13TeV-amcatnloFXFX-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-#"/WJetsToLNu_TuneCP5_13TeV-madgraphMLM-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_woProbQ_maxStat.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 2000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.blacklist = ['T2_US_Nebraska']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_woProbQ_maxStat.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_woProbQ_maxStat.py 4crab_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
-  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsData.py b/Analyzer/test/Tamas/submitCrabJobsData.py
index d90269b..e022e3f 100644
--- a/Analyzer/test/Tamas/submitCrabJobsData.py
+++ b/Analyzer/test/Tamas/submitCrabJobsData.py
@@ -65,7 +65,7 @@ config.Data.partialDataset = True
 config.Data.publication = False
 
 config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*', 'T3_US_FNALLPC','T2_HU_Budapest','T2_FR_*', 'T2_UK_London_IC']
+config.Site.whitelist = ['T2_ES_*,'T2_IN_TIFR','T2_DE_DESY','T2_CH_CERN','T2_IT_*','T1_IT_*','T2_US_*', 'T3_US_FNALLPC','T3_US_*','T2_HU_Budapest','T2_FR_*', 'T2_UK_*']
 config.Site.storageSite = 'T2_HU_Budapest'
 #config.Site.storageSite = 'T3_US_FNALLPC'
   '''
diff --git a/Analyzer/test/Tamas/submitCrabJobsData_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsData_woProbQ.py
deleted file mode 100644
index 71ef613..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsData_woProbQ.py
+++ /dev/null
@@ -1,74 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-#"/SingleMuon/Run2017C-09Aug2019_UL2017-v1/AOD",
-#"/MET/Run2017C-09Aug2019_UL2017_rsb-v1/AOD",
-#"/SingleMuon/Run2018A-15Feb2022_UL2018-v1/AOD",
-#"/SingleMuon/Run2018B-15Feb2022_UL2018-v1/AOD",
-"/SingleMuon/Run2018C-15Feb2022_UL2018-v1/AOD",
-#"/SingleMuon/Run2018D-15Feb2022_UL2018-v1/AOD",
-#"/MET/Run2018C-15Feb2022_UL2018-v1/AOD",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_Data.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-config.Data.splitting = 'LumiBased'
-config.Data.unitsPerJob = 50
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.blacklist = ['T2_US_Nebraska']
-config.Site.storageSite = 'T2_HU_Budapest'
-#config.Site.storageSite = 'T3_US_FNALLPC'
-  '''
-
-  with open("4crab_Template_Data.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_Data.py 4crab_toSubmit_Data.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_Data.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('-'))].replace("/","_")
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_Data.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_Data.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_Data.py")
-
-  os.system("mv 4crab_toSubmit_Data.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsData_woProbQ_2018A.py b/Analyzer/test/Tamas/submitCrabJobsData_woProbQ_2018A.py
deleted file mode 100644
index cc15000..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsData_woProbQ_2018A.py
+++ /dev/null
@@ -1,72 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/SingleMuon/Run2018A-15Feb2022_UL2018-v1/AOD",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_Data_woProbQ_2018A.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-config.Data.splitting = 'LumiBased'
-config.Data.unitsPerJob = 50
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '315257-316380'
-#config.Data.lumiMask 
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_Data_woProbQ_2018A.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_Data_woProbQ_2018A.py 4crab_toSubmit_Data_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_Data_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('-'))].replace("/","_")
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_Data_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_Data_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_Data_woProbQ.py")
-
-  os.system("mv 4crab_toSubmit_Data_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsData_woProbQ_2018D.py b/Analyzer/test/Tamas/submitCrabJobsData_woProbQ_2018D.py
deleted file mode 100644
index 4272983..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsData_woProbQ_2018D.py
+++ /dev/null
@@ -1,73 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/SingleMuon/Run2018D-15Feb2022_UL2018-v1/AOD",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_Data_woProbQ_2018D.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_data_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL2.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL3.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixL4.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR1.txt','SUSYBSMAnalysis/HSCP/data/CorrFact2018PixR2.txt','SUSYBSMAnalysis/HSCP/data/template_2017C.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-config.Data.splitting = 'LumiBased'
-config.Data.unitsPerJob = 50
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '320500-321436'
-#config.Data.lumiMask = ?
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-#config.Site.storageSite = 'T3_US_FNALLPC'
-  '''
-
-  with open("4crab_Template_Data_woProbQ_2018D.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_Data_woProbQ_2018D.py 4crab_toSubmit_Data_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_Data_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('-'))].replace("/","_")
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_Data_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_Data_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_Data_woProbQ.py")
-
-  os.system("mv 4crab_toSubmit_Data_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly.py b/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly.py
index 18b4825..8935278 100644
--- a/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly.py
+++ b/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly.py
@@ -23,7 +23,7 @@ codeVersion = sys.argv[1]
 
 if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
 
-if not os.path.exists("4crab_Signal_Template.py"):
+if not os.path.exists("4crab_SignalGlu_Template.py"):
   TEMPLATE = '''
 from CRABClient.UserUtilities import config
 config = config()
@@ -59,20 +59,20 @@ config.Site.whitelist = ['T2_DE_DESY','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US
 config.Site.storageSite = 'T2_HU_Budapest'
   '''
 
-  with open("4crab_Signal_Template.py", "w") as text_file:
+  with open("4crab_SignalGlu_Template.py", "w") as text_file:
       text_file.write(TEMPLATE)
 
 for i in datasetList:
   print("Submit for sample "+i)
-  os.system("cp 4crab_Signal_Template.py 4crab_Signal_toSubmit.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit.py"
+  os.system("cp 4crab_SignalGlu_Template.py 4crab_SignalGlu_toSubmit.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_SignalGlu_toSubmit.py"
   os.system(replaceVERZIO)
   shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit.py"
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_SignalGlu_toSubmit.py"
   os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit.py"
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_SignalGlu_toSubmit.py"
   os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_Signal_toSubmit.py")
-  os.system("mv 4crab_Signal_toSubmit.py submittedConfigs/.")
+  os.system("crab submit -c 4crab_SignalGlu_toSubmit.py")
+  os.system("mv 4crab_SignalGlu_toSubmit.py submittedConfigs/.")
 
-os.system("rm 4crab_Signal_Template.py")
+os.system("rm 4crab_SignalGlu_Template.py")
diff --git a/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly1800_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly1800_woProbQ.py
deleted file mode 100644
index 2c6a73a..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly1800_woProbQ.py
+++ /dev/null
@@ -1,72 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-#"/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3-0bfbad649d32c05924b5bfd4b5874292/USER",
-#"/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_NoRew_v1-e88ed05559facf15902f2fe2f6141103/USER",
-"/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_NoRewGT_v1-a007e86beae864f0107e60af996b4558/USER"
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_MySignal_Template_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_MyHSCPgluino_M_1800_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.transferLogs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_MySignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDBS = 'phys03'
-config.Data.inputDataset = '/HSCPgluino_M_1800/tvami-crab_PrivateHSCP_2018_Gluino_Mass1800_DIGI2AOD_NoPU_v3-0bfbad649d32c05924b5bfd4b5874292/USER'
-config.Data.splitting = 'LumiBased'
-#config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_MySignal_Template_woProbQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_MySignal_Template_woProbQ.py 4crab_MySignal_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_MySignal_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  os.system("crab submit -c 4crab_MySignal_toSubmit_woProbQ.py")
-  os.system("mv 4crab_MySignal_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly_woProbQ.py
deleted file mode 100644
index 7af02d7..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsSignalGluinoOnly_woProbQ.py
+++ /dev/null
@@ -1,83 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/HSCPgluino_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Signal_Template_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.instance = 'preprod'
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Signal_Template_wPorobQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Signal_Template_woProbQ.py 4crab_Signal_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_Signal_toSubmit_woProbQ.py")
-  os.system("mv 4crab_Signal_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsSignalStauOnly1599_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsSignalStauOnly1599_woProbQ.py
deleted file mode 100644
index 55c8dc0..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsSignalStauOnly1599_woProbQ.py
+++ /dev/null
@@ -1,76 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/HSCPpairStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Signal_Template_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.instance = 'preprod'
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Signal_Template_woProbQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Signal_Template_woProbQ.py 4crab_Signal_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_Signal_toSubmit_woProbQ.py")
-  os.system("mv 4crab_Signal_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsSignalStausOnly.py b/Analyzer/test/Tamas/submitCrabJobsSignalStausOnly.py
index 2356067..0e32a36 100644
--- a/Analyzer/test/Tamas/submitCrabJobsSignalStausOnly.py
+++ b/Analyzer/test/Tamas/submitCrabJobsSignalStausOnly.py
@@ -25,7 +25,7 @@ codeVersion = sys.argv[1]
 
 if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
 
-if not os.path.exists("4crab_Signal_Template.py"):
+if not os.path.exists("4crab_SignalStau_Template.py"):
   TEMPLATE = '''
 from CRABClient.UserUtilities import config
 config = config()
@@ -60,20 +60,20 @@ config.Site.whitelist = ['T2_DE_DESY','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US
 config.Site.storageSite = 'T2_HU_Budapest'
   '''
 
-  with open("4crab_Signal_Template.py", "w") as text_file:
+  with open("4crab_SignalStau_Template.py", "w") as text_file:
       text_file.write(TEMPLATE)
 
 for i in datasetList:
   print("Submit for sample "+i)
-  os.system("cp 4crab_Signal_Template.py 4crab_Signal_toSubmit.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit.py"
+  os.system("cp 4crab_SignalStau_Template.py 4crab_SignalStau_toSubmit.py")
+  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_SignalStau_toSubmit.py"
   os.system(replaceVERZIO)
   shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit.py"
+  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_SignalStau_toSubmit.py"
   os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit.py"
+  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_SignalStau_toSubmit.py"
   os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_Signal_toSubmit.py")
-  os.system("mv 4crab_Signal_toSubmit.py submittedConfigs/.")
+  os.system("crab submit -c 4crab_SignalStau_toSubmit.py")
+  os.system("mv 4crab_SignalStau_toSubmit.py submittedConfigs/.")
 
-os.system("rm 4crab_Signal_Template.py")
+os.system("rm 4crab_SignalStau_Template.py")
diff --git a/Analyzer/test/Tamas/submitCrabJobsSignals_woProbQ.py b/Analyzer/test/Tamas/submitCrabJobsSignals_woProbQ.py
deleted file mode 100644
index 0600bb8..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsSignals_woProbQ.py
+++ /dev/null
@@ -1,173 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/HSCPgluinoOnlyNeutral_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-1029_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-1218_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-1409_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-247_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-308_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-432_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-557_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-651_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-745_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-871_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1029_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1218_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1409_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-247_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-308_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-432_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-557_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-651_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-745_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-871_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge2e_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge2e_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Signal_Template_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.instance = 'preprod'
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Signal_Template_woProbQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Signal_Template_woProbQ.py 4crab_Signal_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_Signal_toSubmit_woProbQ.py")
-  os.system("mv 4crab_Signal_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/submitCrabJobsSignals_woProbQ_TAPERECAL.py b/Analyzer/test/Tamas/submitCrabJobsSignals_woProbQ_TAPERECAL.py
deleted file mode 100644
index 9c48375..0000000
--- a/Analyzer/test/Tamas/submitCrabJobsSignals_woProbQ_TAPERECAL.py
+++ /dev/null
@@ -1,172 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/HSCPgluinoOnlyNeutral_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluinoOnlyNeutral_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgluino_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-1029_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-1218_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-1409_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-247_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-308_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-432_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-557_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-651_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-745_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPgmsbStau_M-871_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1029_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1218_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1409_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-1599_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-247_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-308_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-432_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-557_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-651_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-745_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPpairStau_M-871_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstopOnlyNeutral_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-2000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-2400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPstop_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge1e_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge1e_M-800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge2e_M-1000_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-100_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-1400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/HSCPtauPrimeCharge2e_M-1800_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-2200_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-2600_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-400_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-"/HSCPtauPrimeCharge2e_M-500_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v1/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-didVoms = input("Push enter if you alread did voms-proxy-init -rfc -voms cms -valid 192:00 otherwise say no and do it\n")
-if(didVoms):
- sys.exit()
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Signal_Template_woProbQ_TAPERECALL.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-config.General.instance = 'preprod'
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_SignalMC_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-config.Data.totalUnits = config.Data.unitsPerJob * 1000
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Signal_Template_woProbQ_TAPERECALL.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Signal_Template_woProbQ_TAPERECALL.py 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py")
-  os.system("mv 4crab_Signal_toSubmit_woProbQ_TAPERECALL.py submittedConfigs/.")
-
-
diff --git a/Analyzer/test/Tamas/temp.py b/Analyzer/test/Tamas/temp.py
deleted file mode 100644
index e62358c..0000000
--- a/Analyzer/test/Tamas/temp.py
+++ /dev/null
@@ -1,72 +0,0 @@
-import sys, os, time, re
-import numpy as np
-#from common_functions import *
-from optparse import OptionParser
-parser = OptionParser(usage="Usage: python %prog codeVersion")
-(opt,args) = parser.parse_args()
-
-datasetList = [
-"/QCD_Pt-300To470_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-"/QCD_Pt-470To600_MuEnrichedPt5_TuneCP5_13TeV-pythia8/RunIISummer20UL18RECO-106X_upgrade2018_realistic_v11_L1v1-v2/AODSIM",
-]
-
-codeVersion = sys.argv[1]
-#just the number, like 18p2
-
-if not os.path.exists("submittedConfigs"): os.makedirs("submittedConfigs")
-
-if not os.path.exists("4crab_Template_woProbQ.py"):
-  TEMPLATE = '''
-from CRABClient.UserUtilities import config
-config = config()
-
-config.section_('General')
-config.General.requestName = 'Analysis_2018_ROVIDMINTA_woProbQ_CodeVVERZIO_v1'
-config.General.workArea = 'crab_projects'
-config.General.transferOutputs = True
-
-config.section_('JobType')
-config.JobType.pluginName = 'Analysis'
-config.JobType.psetName = 'HSCParticleProducerAnalyzer_2018_mc_woProbQ_cfg.py'
-config.JobType.allowUndistributedCMSSW = True
-#config.JobType.maxJobRuntimeMin = 3000
-config.JobType.maxMemoryMB = 3500
-config.JobType.inputFiles = ['templateMC.root','MuonTimeOffset.txt','Cert_294927-306462_13TeV_UL2017_Collisions17_GoldenJSON.txt']
-
-config.section_('Data')
-config.Data.inputDataset = 'MINTA'
-#config.Data.inputDBS = 'phys03'
-#config.Data.splitting = 'Automatic'
-config.Data.splitting = 'LumiBased'
-    #config.Data.unitsPerJob = 1 #20
-#config.Data.splitting = 'FileBased'
-config.Data.unitsPerJob = 50
-#config.Data.totalUnits = config.Data.unitsPerJob * 800
-config.Data.publication = True
-config.Data.outputDatasetTag = config.General.requestName
-config.Data.outLFNDirBase = '/store/user/tvami/HSCP'
-config.Data.ignoreLocality = True
-config.Data.runRange = '0'
-
-config.section_('Site')
-config.Site.whitelist = ['T2_DE_DESY','T2_FR_IPHC','T2_CH_CERN','T2_IT_Bari','T1_IT_*','T2_US_*']
-config.Site.storageSite = 'T2_HU_Budapest'
-  '''
-
-  with open("4crab_Template_woProbQ.py", "w") as text_file:
-      text_file.write(TEMPLATE)
-
-for i in datasetList:
-  print("Submit for sample "+i)
-  os.system("cp 4crab_Template_woProbQ.py 4crab_toSubmit_woProbQ.py")
-  replaceVERZIO = "sed -i 's/VERZIO/"+codeVersion+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceVERZIO)
-  shortSampleName = i[1:(i.find('TuneCP5'))-1]
-  replaceROVIDMINTA = "sed -i 's/ROVIDMINTA/"+shortSampleName+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceROVIDMINTA)
-  replaceMINTA = "sed -i 's/MINTA/"+i.replace("/","\/")+"/g' 4crab_toSubmit_woProbQ.py"
-  os.system(replaceMINTA)
-  os.system("crab submit -c 4crab_toSubmit_woProbQ.py")
-  os.system("mv 4crab_toSubmit_woProbQ.py submittedConfigs/.")
-
-
diff --git a/HSCP/data/CorrFact2018PixL1.txt b/HSCP/data/CorrFact2018PixL1.txt
index 40ae00e..d119a14 100644
--- a/HSCP/data/CorrFact2018PixL1.txt
+++ b/HSCP/data/CorrFact2018PixL1.txt
@@ -439,7 +439,7 @@
 324202 1.40625938315 0.140615513433
 324205 1.41338249106 0.137178267593
 324206 1.40658902491 0.139801448715
-324245 0.0 0.139288170764
+324245 1.0 0.139288170764
 324293 1.55902103052 0.139400441714
 324315 1.55392163707 0.136172438403
 324318 1.55971644622 0.138575033443
diff --git a/HSCP/data/CorrFact2018PixL2.txt b/HSCP/data/CorrFact2018PixL2.txt
index 21369ed..9cd5405 100644
--- a/HSCP/data/CorrFact2018PixL2.txt
+++ b/HSCP/data/CorrFact2018PixL2.txt
@@ -440,7 +440,7 @@
 324202 1.35320906703 0.0130875716662
 324205 1.35450294047 0.0126714730481
 324206 1.35489383959 0.0130400419312
-324245 0.0 0.0143698424355
+324245 1.0 0.0143698424355
 324293 1.33153950671 0.0143255917339
 324315 1.3322461187 0.0141864166129
 324318 1.33207537512 0.0143973527203
diff --git a/HSCP/data/CorrFact2018PixL3.txt b/HSCP/data/CorrFact2018PixL3.txt
index 99da7be..4c8ed59 100644
--- a/HSCP/data/CorrFact2018PixL3.txt
+++ b/HSCP/data/CorrFact2018PixL3.txt
@@ -439,7 +439,7 @@
 324202 1.18628025074 0.0092726580169
 324205 1.18692928531 0.00916834383918
 324206 1.18565458958 0.00916764054653
-324245 0.0 0.00723897041814
+324245 1.0 0.00723897041814
 324293 1.25469661891 0.00724398061172
 324315 1.25469849475 0.00722505657127
 324318 1.25459016247 0.00727167096723
diff --git a/HSCP/data/CorrFact2018PixL4.txt b/HSCP/data/CorrFact2018PixL4.txt
index 6517f53..69caa03 100644
--- a/HSCP/data/CorrFact2018PixL4.txt
+++ b/HSCP/data/CorrFact2018PixL4.txt
@@ -439,7 +439,7 @@
 324202 1.15758456711 0.00574885995663
 324205 1.15775964237 0.00596716589581
 324206 1.1574294368 0.00609352840127
-324245 0.0 0.00809566946977
+324245 1.0 0.00809566946977
 324293 1.19119276674 0.00807957387527
 324315 1.19209797422 0.00814235337786
 324318 1.19213230642 0.00812785351867
diff --git a/HSCP/data/CorrFact2018PixR1.txt b/HSCP/data/CorrFact2018PixR1.txt
index f41334f..0e6967a 100644
--- a/HSCP/data/CorrFact2018PixR1.txt
+++ b/HSCP/data/CorrFact2018PixR1.txt
@@ -440,7 +440,7 @@
 324202 1.56833329431 0.00987575360875
 324205 1.56825206858 0.00976236222978
 324206 1.56846175278 0.00968459245246
-324245 0.0 0.00388314025758
+324245 1.0 0.00388314025758
 324293 1.34634294675 0.00391171515423
 324315 1.34697414998 0.00387931058985
 324318 1.346954609 0.00388971052819
diff --git a/HSCP/data/CorrFact2018PixR2.txt b/HSCP/data/CorrFact2018PixR2.txt
index c63504f..3358806 100644
--- a/HSCP/data/CorrFact2018PixR2.txt
+++ b/HSCP/data/CorrFact2018PixR2.txt
@@ -440,7 +440,7 @@
 324202 1.49151199107 0.00429123453493
 324205 1.49204112654 0.00432337706965
 324206 1.49180065718 0.00438219658573
-324245 0.0 0.00399571487882
+324245 1.0 0.00399571487882
 324293 1.30679298687 0.00401612937211
 324315 1.3066505701 0.00399659592277
 324318 1.30662317369 0.00399733701933
diff --git a/HSCP/data/template_2017B_v5.root b/HSCP/data/template_2017B_v5.root
new file mode 100644
index 0000000..8c9430b
Binary files /dev/null and b/HSCP/data/template_2017B_v5.root differ
diff --git a/HSCP/data/template_2017C_v5.root b/HSCP/data/template_2017C_v5.root
new file mode 100644
index 0000000..c343500
Binary files /dev/null and b/HSCP/data/template_2017C_v5.root differ
diff --git a/HSCP/data/template_2017D_v5.root b/HSCP/data/template_2017D_v5.root
new file mode 100644
index 0000000..f26cb1d
Binary files /dev/null and b/HSCP/data/template_2017D_v5.root differ
diff --git a/HSCP/data/template_2017E_v5.root b/HSCP/data/template_2017E_v5.root
new file mode 100644
index 0000000..4861aee
Binary files /dev/null and b/HSCP/data/template_2017E_v5.root differ
diff --git a/HSCP/data/template_2017F_v5.root b/HSCP/data/template_2017F_v5.root
new file mode 100644
index 0000000..d1260a5
Binary files /dev/null and b/HSCP/data/template_2017F_v5.root differ
diff --git a/HSCP/data/template_2017MC_v4.root b/HSCP/data/template_2017MC_v4.root
new file mode 100644
index 0000000..1339356
Binary files /dev/null and b/HSCP/data/template_2017MC_v4.root differ
diff --git a/HSCP/data/template_2017MC_v5.root b/HSCP/data/template_2017MC_v5.root
new file mode 100644
index 0000000..ece83f7
Binary files /dev/null and b/HSCP/data/template_2017MC_v5.root differ
diff --git a/HSCP/data/template_2018A_v5.root b/HSCP/data/template_2018A_v5.root
new file mode 100644
index 0000000..c2b7af2
Binary files /dev/null and b/HSCP/data/template_2018A_v5.root differ
diff --git a/HSCP/data/template_2018B_v5.root b/HSCP/data/template_2018B_v5.root
new file mode 100644
index 0000000..d66a4c1
Binary files /dev/null and b/HSCP/data/template_2018B_v5.root differ
diff --git a/HSCP/data/template_2018C_v5.root b/HSCP/data/template_2018C_v5.root
new file mode 100644
index 0000000..090778f
Binary files /dev/null and b/HSCP/data/template_2018C_v5.root differ
diff --git a/HSCP/data/template_2018D_v5.root b/HSCP/data/template_2018D_v5.root
new file mode 100644
index 0000000..a62944e
Binary files /dev/null and b/HSCP/data/template_2018D_v5.root differ
diff --git a/HSCP/data/template_2018MC_v5.root b/HSCP/data/template_2018MC_v5.root
new file mode 100644
index 0000000..20b8215
Binary files /dev/null and b/HSCP/data/template_2018MC_v5.root differ
